
ed_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  0800d340  0800d340  0001d340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db5c  0800db5c  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800db5c  0800db5c  0001db5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db64  0800db64  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db64  0800db64  0001db64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db68  0800db68  0001db68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800db6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005040  20000218  0800dd84  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005258  0800dd84  00025258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0f1  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003332  00000000  00000000  0003c339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  0003f670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001848  00000000  00000000  00040f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3d8  00000000  00000000  00042780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c138  00000000  00000000  0005cb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a706a  00000000  00000000  00078c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011fcfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f30  00000000  00000000  0011fd50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d328 	.word	0x0800d328

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800d328 	.word	0x0800d328

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b9a4 	b.w	8000f4c <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f83c 	bl	8000c88 <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2lz>:
 8000c1c:	b538      	push	{r3, r4, r5, lr}
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2300      	movs	r3, #0
 8000c22:	4604      	mov	r4, r0
 8000c24:	460d      	mov	r5, r1
 8000c26:	f7ff ff71 	bl	8000b0c <__aeabi_dcmplt>
 8000c2a:	b928      	cbnz	r0, 8000c38 <__aeabi_d2lz+0x1c>
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c34:	f000 b80a 	b.w	8000c4c <__aeabi_d2ulz>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c3e:	f000 f805 	bl	8000c4c <__aeabi_d2ulz>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop

08000c4c <__aeabi_d2ulz>:
 8000c4c:	b5d0      	push	{r4, r6, r7, lr}
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <__aeabi_d2ulz+0x34>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	4606      	mov	r6, r0
 8000c54:	460f      	mov	r7, r1
 8000c56:	f7ff fce7 	bl	8000628 <__aeabi_dmul>
 8000c5a:	f7ff ffa7 	bl	8000bac <__aeabi_d2uiz>
 8000c5e:	4604      	mov	r4, r0
 8000c60:	f7ff fc68 	bl	8000534 <__aeabi_ui2d>
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <__aeabi_d2ulz+0x38>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f7ff fcde 	bl	8000628 <__aeabi_dmul>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	4630      	mov	r0, r6
 8000c72:	4639      	mov	r1, r7
 8000c74:	f7ff fb20 	bl	80002b8 <__aeabi_dsub>
 8000c78:	f7ff ff98 	bl	8000bac <__aeabi_d2uiz>
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c80:	3df00000 	.word	0x3df00000
 8000c84:	41f00000 	.word	0x41f00000

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <case_insensitive_strcmp+0x16>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e056      	b.n	8001018 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d10d      	bne.n	8000f8e <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e050      	b.n	8001018 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e04a      	b.n	8001018 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3301      	adds	r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	3301      	adds	r3, #1
 8000f98:	4a22      	ldr	r2, [pc, #136]	; (8001024 <case_insensitive_strcmp+0xd4>)
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d103      	bne.n	8000fae <case_insensitive_strcmp+0x5e>
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	f103 0220 	add.w	r2, r3, #32
 8000fac:	e000      	b.n	8000fb0 <case_insensitive_strcmp+0x60>
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	73bb      	strb	r3, [r7, #14]
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	491a      	ldr	r1, [pc, #104]	; (8001024 <case_insensitive_strcmp+0xd4>)
 8000fbc:	440b      	add	r3, r1
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d102      	bne.n	8000fce <case_insensitive_strcmp+0x7e>
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	3320      	adds	r3, #32
 8000fcc:	e000      	b.n	8000fd0 <case_insensitive_strcmp+0x80>
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d0d0      	beq.n	8000f76 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	737b      	strb	r3, [r7, #13]
 8000fda:	7b7b      	ldrb	r3, [r7, #13]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	4a11      	ldr	r2, [pc, #68]	; (8001024 <case_insensitive_strcmp+0xd4>)
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d103      	bne.n	8000ff4 <case_insensitive_strcmp+0xa4>
 8000fec:	7b7b      	ldrb	r3, [r7, #13]
 8000fee:	f103 0220 	add.w	r2, r3, #32
 8000ff2:	e000      	b.n	8000ff6 <case_insensitive_strcmp+0xa6>
 8000ff4:	7b7a      	ldrb	r2, [r7, #13]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	733b      	strb	r3, [r7, #12]
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	3301      	adds	r3, #1
 8001000:	4908      	ldr	r1, [pc, #32]	; (8001024 <case_insensitive_strcmp+0xd4>)
 8001002:	440b      	add	r3, r1
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d102      	bne.n	8001014 <case_insensitive_strcmp+0xc4>
 800100e:	7b3b      	ldrb	r3, [r7, #12]
 8001010:	3320      	adds	r3, #32
 8001012:	e000      	b.n	8001016 <case_insensitive_strcmp+0xc6>
 8001014:	7b3b      	ldrb	r3, [r7, #12]
 8001016:	1ad3      	subs	r3, r2, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	0800d6f8 	.word	0x0800d6f8

08001028 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2028      	movs	r0, #40	; 0x28
 8001036:	4798      	blx	r3
 8001038:	60f8      	str	r0, [r7, #12]
    if (node)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001040:	2228      	movs	r2, #40	; 0x28
 8001042:	2100      	movs	r1, #0
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f009 f873 	bl	800a130 <memset>
    }

    return node;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001060:	e037      	b.n	80010d2 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001070:	2b00      	cmp	r3, #0
 8001072:	d108      	bne.n	8001086 <cJSON_Delete+0x32>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ffe7 	bl	8001054 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108e:	2b00      	cmp	r3, #0
 8001090:	d109      	bne.n	80010a6 <cJSON_Delete+0x52>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <cJSON_Delete+0x90>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	6912      	ldr	r2, [r2, #16]
 80010a2:	4610      	mov	r0, r2
 80010a4:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <cJSON_Delete+0x72>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <cJSON_Delete+0x90>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6a12      	ldr	r2, [r2, #32]
 80010c2:	4610      	mov	r0, r2
 80010c4:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <cJSON_Delete+0x90>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	4798      	blx	r3
        item = next;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1c4      	bne.n	8001062 <cJSON_Delete+0xe>
    }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000000 	.word	0x20000000

080010e8 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80010ec:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b098      	sub	sp, #96	; 0x60
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800110e:	2300      	movs	r3, #0
 8001110:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001112:	f7ff ffe9 	bl	80010e8 <get_decimal_point>
 8001116:	4603      	mov	r3, r0
 8001118:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <parse_number+0x36>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <parse_number+0x3a>
    {
        return false;
 800112e:	2300      	movs	r3, #0
 8001130:	e0c6      	b.n	80012c0 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001132:	2300      	movs	r3, #0
 8001134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001136:	e063      	b.n	8001200 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6899      	ldr	r1, [r3, #8]
 8001140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001142:	440b      	add	r3, r1
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b45      	cmp	r3, #69	; 0x45
 800114a:	dc3d      	bgt.n	80011c8 <parse_number+0xd0>
 800114c:	2b2b      	cmp	r3, #43	; 0x2b
 800114e:	db66      	blt.n	800121e <parse_number+0x126>
 8001150:	3b2b      	subs	r3, #43	; 0x2b
 8001152:	2b1a      	cmp	r3, #26
 8001154:	d863      	bhi.n	800121e <parse_number+0x126>
 8001156:	a201      	add	r2, pc, #4	; (adr r2, 800115c <parse_number+0x64>)
 8001158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115c:	080011cd 	.word	0x080011cd
 8001160:	0800121f 	.word	0x0800121f
 8001164:	080011cd 	.word	0x080011cd
 8001168:	080011eb 	.word	0x080011eb
 800116c:	0800121f 	.word	0x0800121f
 8001170:	080011cd 	.word	0x080011cd
 8001174:	080011cd 	.word	0x080011cd
 8001178:	080011cd 	.word	0x080011cd
 800117c:	080011cd 	.word	0x080011cd
 8001180:	080011cd 	.word	0x080011cd
 8001184:	080011cd 	.word	0x080011cd
 8001188:	080011cd 	.word	0x080011cd
 800118c:	080011cd 	.word	0x080011cd
 8001190:	080011cd 	.word	0x080011cd
 8001194:	080011cd 	.word	0x080011cd
 8001198:	0800121f 	.word	0x0800121f
 800119c:	0800121f 	.word	0x0800121f
 80011a0:	0800121f 	.word	0x0800121f
 80011a4:	0800121f 	.word	0x0800121f
 80011a8:	0800121f 	.word	0x0800121f
 80011ac:	0800121f 	.word	0x0800121f
 80011b0:	0800121f 	.word	0x0800121f
 80011b4:	0800121f 	.word	0x0800121f
 80011b8:	0800121f 	.word	0x0800121f
 80011bc:	0800121f 	.word	0x0800121f
 80011c0:	0800121f 	.word	0x0800121f
 80011c4:	080011cd 	.word	0x080011cd
 80011c8:	2b65      	cmp	r3, #101	; 0x65
 80011ca:	d128      	bne.n	800121e <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	6899      	ldr	r1, [r3, #8]
 80011d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011d6:	440b      	add	r3, r1
 80011d8:	4413      	add	r3, r2
 80011da:	7819      	ldrb	r1, [r3, #0]
 80011dc:	f107 0208 	add.w	r2, r7, #8
 80011e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011e2:	4413      	add	r3, r2
 80011e4:	460a      	mov	r2, r1
 80011e6:	701a      	strb	r2, [r3, #0]
                break;
 80011e8:	e007      	b.n	80011fa <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011f0:	4413      	add	r3, r2
 80011f2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80011f6:	701a      	strb	r2, [r3, #0]
                break;
 80011f8:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80011fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011fc:	3301      	adds	r3, #1
 80011fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001202:	2b3e      	cmp	r3, #62	; 0x3e
 8001204:	d80d      	bhi.n	8001222 <parse_number+0x12a>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00a      	beq.n	8001222 <parse_number+0x12a>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001212:	441a      	add	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	d38d      	bcc.n	8001138 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800121c:	e001      	b.n	8001222 <parse_number+0x12a>
                goto loop_end;
 800121e:	bf00      	nop
 8001220:	e000      	b.n	8001224 <parse_number+0x12c>
loop_end:
 8001222:	bf00      	nop
    number_c_string[i] = '\0';
 8001224:	f107 0208 	add.w	r2, r7, #8
 8001228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800122a:	4413      	add	r3, r2
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001230:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f009 ff62 	bl	800b104 <strtod>
 8001240:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8001244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	429a      	cmp	r2, r3
 800124c:	d101      	bne.n	8001252 <parse_number+0x15a>
    {
        return false; /* parse_error */
 800124e:	2300      	movs	r3, #0
 8001250:	e036      	b.n	80012c0 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001258:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800125c:	a31b      	add	r3, pc, #108	; (adr r3, 80012cc <parse_number+0x1d4>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001266:	f7ff fc65 	bl	8000b34 <__aeabi_dcmpge>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	e015      	b.n	80012a6 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <parse_number+0x1d0>)
 8001280:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001284:	f7ff fc4c 	bl	8000b20 <__aeabi_dcmple>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001294:	615a      	str	r2, [r3, #20]
 8001296:	e006      	b.n	80012a6 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 8001298:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800129c:	f7ff fc5e 	bl	8000b5c <__aeabi_d2iz>
 80012a0:	4602      	mov	r2, r0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2208      	movs	r2, #8
 80012aa:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80012b2:	f107 0208 	add.w	r2, r7, #8
 80012b6:	1a8a      	subs	r2, r1, r2
 80012b8:	441a      	add	r2, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	609a      	str	r2, [r3, #8]
    return true;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3760      	adds	r7, #96	; 0x60
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	c1e00000 	.word	0xc1e00000
 80012cc:	ffc00000 	.word	0xffc00000
 80012d0:	41dfffff 	.word	0x41dfffff

080012d4 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	e04c      	b.n	8001384 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4413      	add	r3, r2
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b2f      	cmp	r3, #47	; 0x2f
 80012f4:	d90f      	bls.n	8001316 <parse_hex4+0x42>
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4413      	add	r3, r2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b39      	cmp	r3, #57	; 0x39
 8001300:	d809      	bhi.n	8001316 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	3b30      	subs	r3, #48	; 0x30
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	e02d      	b.n	8001372 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b40      	cmp	r3, #64	; 0x40
 8001320:	d90f      	bls.n	8001342 <parse_hex4+0x6e>
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b46      	cmp	r3, #70	; 0x46
 800132c:	d809      	bhi.n	8001342 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	3b37      	subs	r3, #55	; 0x37
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	e017      	b.n	8001372 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b60      	cmp	r3, #96	; 0x60
 800134c:	d90f      	bls.n	800136e <parse_hex4+0x9a>
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4413      	add	r3, r2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b66      	cmp	r3, #102	; 0x66
 8001358:	d809      	bhi.n	800136e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	3b57      	subs	r3, #87	; 0x57
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	e001      	b.n	8001372 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800136e:	2300      	movs	r3, #0
 8001370:	e00c      	b.n	800138c <parse_hex4+0xb8>
        }

        if (i < 3)
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d802      	bhi.n	800137e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	3301      	adds	r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d9af      	bls.n	80012ea <parse_hex4+0x16>
        }
    }

    return h;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	f340 80b7 	ble.w	8001542 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	3302      	adds	r3, #2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff7b 	bl	80012d4 <parse_hex4>
 80013de:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80013e6:	d304      	bcc.n	80013f2 <utf16_literal_to_utf8+0x5a>
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80013ee:	f0c0 80aa 	bcc.w	8001546 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80013f8:	d337      	bcc.n	800146a <utf16_literal_to_utf8+0xd2>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001400:	d233      	bcs.n	800146a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	3306      	adds	r3, #6
 8001406:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800140c:	230c      	movs	r3, #12
 800140e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b05      	cmp	r3, #5
 800141a:	f340 8096 	ble.w	800154a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b5c      	cmp	r3, #92	; 0x5c
 8001424:	f040 8093 	bne.w	800154e <utf16_literal_to_utf8+0x1b6>
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3301      	adds	r3, #1
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b75      	cmp	r3, #117	; 0x75
 8001430:	f040 808d 	bne.w	800154e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3302      	adds	r3, #2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff4b 	bl	80012d4 <parse_hex4>
 800143e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001446:	f0c0 8084 	bcc.w	8001552 <utf16_literal_to_utf8+0x1ba>
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001450:	d27f      	bcs.n	8001552 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	029a      	lsls	r2, r3, #10
 8001456:	4b43      	ldr	r3, [pc, #268]	; (8001564 <utf16_literal_to_utf8+0x1cc>)
 8001458:	4013      	ands	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001460:	4313      	orrs	r3, r2
 8001462:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001468:	e004      	b.n	8001474 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800146a:	2306      	movs	r3, #6
 800146c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	2b7f      	cmp	r3, #127	; 0x7f
 8001478:	d803      	bhi.n	8001482 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800147a:	2301      	movs	r3, #1
 800147c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001480:	e01f      	b.n	80014c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001488:	d206      	bcs.n	8001498 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800148a:	2302      	movs	r3, #2
 800148c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001490:	23c0      	movs	r3, #192	; 0xc0
 8001492:	f887 3020 	strb.w	r3, [r7, #32]
 8001496:	e014      	b.n	80014c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149e:	d206      	bcs.n	80014ae <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80014a0:	2303      	movs	r3, #3
 80014a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80014a6:	23e0      	movs	r3, #224	; 0xe0
 80014a8:	f887 3020 	strb.w	r3, [r7, #32]
 80014ac:	e009      	b.n	80014c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80014b4:	d24f      	bcs.n	8001556 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80014b6:	2304      	movs	r3, #4
 80014b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80014bc:	23f0      	movs	r3, #240	; 0xf0
 80014be:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80014c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80014cc:	e015      	b.n	80014fa <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6819      	ldr	r1, [r3, #0]
 80014dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014e0:	440b      	add	r3, r1
 80014e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	099b      	lsrs	r3, r3, #6
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80014f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014f4:	3b01      	subs	r3, #1
 80014f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80014fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1e5      	bne.n	80014ce <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001506:	2b01      	cmp	r3, #1
 8001508:	d909      	bls.n	800151e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	b2d9      	uxtb	r1, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001516:	430a      	orrs	r2, r1
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	701a      	strb	r2, [r3, #0]
 800151c:	e007      	b.n	800152e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	b2da      	uxtb	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001536:	441a      	add	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800153c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001540:	e00b      	b.n	800155a <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001542:	bf00      	nop
 8001544:	e008      	b.n	8001558 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001546:	bf00      	nop
 8001548:	e006      	b.n	8001558 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800154a:	bf00      	nop
 800154c:	e004      	b.n	8001558 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800154e:	bf00      	nop
 8001550:	e002      	b.n	8001558 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001552:	bf00      	nop
 8001554:	e000      	b.n	8001558 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001556:	bf00      	nop

fail:
    return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3728      	adds	r7, #40	; 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	000ffc00 	.word	0x000ffc00

08001568 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	3301      	adds	r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	3301      	adds	r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4413      	add	r3, r2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b22      	cmp	r3, #34	; 0x22
 80015a4:	f040 8102 	bne.w	80017ac <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80015b0:	e017      	b.n	80015e2 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b5c      	cmp	r3, #92	; 0x5c
 80015b8:	d110      	bne.n	80015dc <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	f080 80f0 	bcs.w	80017b0 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	3301      	adds	r3, #1
 80015d4:	61bb      	str	r3, [r7, #24]
                input_end++;
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	3301      	adds	r3, #1
 80015da:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80015dc:	6a3b      	ldr	r3, [r7, #32]
 80015de:	3301      	adds	r3, #1
 80015e0:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a3a      	ldr	r2, [r7, #32]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	461a      	mov	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d203      	bcs.n	80015fc <parse_string+0x94>
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b22      	cmp	r3, #34	; 0x22
 80015fa:	d1da      	bne.n	80015b2 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6a3a      	ldr	r2, [r7, #32]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	461a      	mov	r2, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	429a      	cmp	r2, r3
 800160c:	f080 80d2 	bcs.w	80017b4 <parse_string+0x24c>
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b22      	cmp	r3, #34	; 0x22
 8001616:	f040 80cd 	bne.w	80017b4 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	4413      	add	r3, r2
 8001624:	6a3a      	ldr	r2, [r7, #32]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	461a      	mov	r2, r3
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	3201      	adds	r2, #1
 8001638:	4610      	mov	r0, r2
 800163a:	4798      	blx	r3
 800163c:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80b9 	beq.w	80017b8 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800164a:	e093      	b.n	8001774 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b5c      	cmp	r3, #92	; 0x5c
 8001652:	d008      	beq.n	8001666 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001656:	1c53      	adds	r3, r2, #1
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1c59      	adds	r1, r3, #1
 800165e:	60f9      	str	r1, [r7, #12]
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	e086      	b.n	8001774 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001666:	2302      	movs	r3, #2
 8001668:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800166a:	6a3a      	ldr	r2, [r7, #32]
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	f340 80a3 	ble.w	80017bc <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	3301      	adds	r3, #1
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b75      	cmp	r3, #117	; 0x75
 800167e:	f300 809f 	bgt.w	80017c0 <parse_string+0x258>
 8001682:	2b5c      	cmp	r3, #92	; 0x5c
 8001684:	da04      	bge.n	8001690 <parse_string+0x128>
 8001686:	2b22      	cmp	r3, #34	; 0x22
 8001688:	d05c      	beq.n	8001744 <parse_string+0x1dc>
 800168a:	2b2f      	cmp	r3, #47	; 0x2f
 800168c:	d05a      	beq.n	8001744 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800168e:	e097      	b.n	80017c0 <parse_string+0x258>
 8001690:	3b5c      	subs	r3, #92	; 0x5c
 8001692:	2b19      	cmp	r3, #25
 8001694:	f200 8094 	bhi.w	80017c0 <parse_string+0x258>
 8001698:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <parse_string+0x138>)
 800169a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169e:	bf00      	nop
 80016a0:	08001745 	.word	0x08001745
 80016a4:	080017c1 	.word	0x080017c1
 80016a8:	080017c1 	.word	0x080017c1
 80016ac:	080017c1 	.word	0x080017c1
 80016b0:	080017c1 	.word	0x080017c1
 80016b4:	080017c1 	.word	0x080017c1
 80016b8:	08001709 	.word	0x08001709
 80016bc:	080017c1 	.word	0x080017c1
 80016c0:	080017c1 	.word	0x080017c1
 80016c4:	080017c1 	.word	0x080017c1
 80016c8:	08001715 	.word	0x08001715
 80016cc:	080017c1 	.word	0x080017c1
 80016d0:	080017c1 	.word	0x080017c1
 80016d4:	080017c1 	.word	0x080017c1
 80016d8:	080017c1 	.word	0x080017c1
 80016dc:	080017c1 	.word	0x080017c1
 80016e0:	080017c1 	.word	0x080017c1
 80016e4:	080017c1 	.word	0x080017c1
 80016e8:	08001721 	.word	0x08001721
 80016ec:	080017c1 	.word	0x080017c1
 80016f0:	080017c1 	.word	0x080017c1
 80016f4:	080017c1 	.word	0x080017c1
 80016f8:	0800172d 	.word	0x0800172d
 80016fc:	080017c1 	.word	0x080017c1
 8001700:	08001739 	.word	0x08001739
 8001704:	08001753 	.word	0x08001753
                    *output_pointer++ = '\b';
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60fa      	str	r2, [r7, #12]
 800170e:	2208      	movs	r2, #8
 8001710:	701a      	strb	r2, [r3, #0]
                    break;
 8001712:	e02b      	b.n	800176c <parse_string+0x204>
                    *output_pointer++ = '\f';
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60fa      	str	r2, [r7, #12]
 800171a:	220c      	movs	r2, #12
 800171c:	701a      	strb	r2, [r3, #0]
                    break;
 800171e:	e025      	b.n	800176c <parse_string+0x204>
                    *output_pointer++ = '\n';
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	60fa      	str	r2, [r7, #12]
 8001726:	220a      	movs	r2, #10
 8001728:	701a      	strb	r2, [r3, #0]
                    break;
 800172a:	e01f      	b.n	800176c <parse_string+0x204>
                    *output_pointer++ = '\r';
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	60fa      	str	r2, [r7, #12]
 8001732:	220d      	movs	r2, #13
 8001734:	701a      	strb	r2, [r3, #0]
                    break;
 8001736:	e019      	b.n	800176c <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60fa      	str	r2, [r7, #12]
 800173e:	2209      	movs	r2, #9
 8001740:	701a      	strb	r2, [r3, #0]
                    break;
 8001742:	e013      	b.n	800176c <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	60fa      	str	r2, [r7, #12]
 800174a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174c:	7852      	ldrb	r2, [r2, #1]
 800174e:	701a      	strb	r2, [r3, #0]
                    break;
 8001750:	e00c      	b.n	800176c <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	461a      	mov	r2, r3
 8001758:	6a39      	ldr	r1, [r7, #32]
 800175a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800175c:	f7ff fe1c 	bl	8001398 <utf16_literal_to_utf8>
 8001760:	4603      	mov	r3, r0
 8001762:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d02c      	beq.n	80017c4 <parse_string+0x25c>
                    break;
 800176a:	bf00      	nop
            }
            input_pointer += sequence_length;
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001770:	4413      	add	r3, r2
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	429a      	cmp	r2, r3
 800177a:	f4ff af67 	bcc.w	800164c <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2210      	movs	r2, #16
 8001788:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6a3a      	ldr	r2, [r7, #32]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	461a      	mov	r2, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	609a      	str	r2, [r3, #8]

    return true;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e01e      	b.n	80017ea <parse_string+0x282>
        goto fail;
 80017ac:	bf00      	nop
 80017ae:	e00a      	b.n	80017c6 <parse_string+0x25e>
                    goto fail;
 80017b0:	bf00      	nop
 80017b2:	e008      	b.n	80017c6 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 80017b4:	bf00      	nop
 80017b6:	e006      	b.n	80017c6 <parse_string+0x25e>
            goto fail; /* allocation failure */
 80017b8:	bf00      	nop
 80017ba:	e004      	b.n	80017c6 <parse_string+0x25e>
                goto fail;
 80017bc:	bf00      	nop
 80017be:	e002      	b.n	80017c6 <parse_string+0x25e>
                    goto fail;
 80017c0:	bf00      	nop
 80017c2:	e000      	b.n	80017c6 <parse_string+0x25e>
                        goto fail;
 80017c4:	bf00      	nop

fail:
    if (output != NULL)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	69f8      	ldr	r0, [r7, #28]
 80017d2:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	609a      	str	r2, [r3, #8]
    }

    return false;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop

080017f4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <buffer_skip_whitespace+0x16>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800180a:	2300      	movs	r3, #0
 800180c:	e02c      	b.n	8001868 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <buffer_skip_whitespace+0x2c>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	d306      	bcc.n	800182e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	e021      	b.n	8001868 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00d      	beq.n	8001850 <buffer_skip_whitespace+0x5c>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <buffer_skip_whitespace+0x5c>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4413      	add	r3, r2
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b20      	cmp	r3, #32
 800184e:	d9e9      	bls.n	8001824 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	d104      	bne.n	8001866 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	1e5a      	subs	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001866:	687b      	ldr	r3, [r7, #4]
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <skip_utf8_bom+0x1e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <skip_utf8_bom+0x1e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001892:	2300      	movs	r3, #0
 8001894:	e01c      	b.n	80018d0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d018      	beq.n	80018ce <skip_utf8_bom+0x5a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	1d1a      	adds	r2, r3, #4
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d211      	bcs.n	80018ce <skip_utf8_bom+0x5a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	4413      	add	r3, r2
 80018b4:	2203      	movs	r2, #3
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <skip_utf8_bom+0x64>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f008 fdeb 	bl	800a494 <strncmp>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d104      	bne.n	80018ce <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	1cda      	adds	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80018ce:	687b      	ldr	r3, [r7, #4]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	0800d378 	.word	0x0800d378

080018dc <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e00c      	b.n	800190c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f7fe fc7e 	bl	80001f4 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	6979      	ldr	r1, [r7, #20]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f805 	bl	8001914 <cJSON_ParseWithLengthOpts>
 800190a:	4603      	mov	r3, r0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08e      	sub	sp, #56	; 0x38
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001922:	f107 0318 	add.w	r3, r7, #24
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	615a      	str	r2, [r3, #20]
 8001934:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001936:	2300      	movs	r3, #0
 8001938:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800193a:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <cJSON_ParseWithLengthOpts+0x12c>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001940:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <cJSON_ParseWithLengthOpts+0x12c>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d042      	beq.n	80019d2 <cJSON_ParseWithLengthOpts+0xbe>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d03f      	beq.n	80019d2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800195e:	4a39      	ldr	r2, [pc, #228]	; (8001a44 <cJSON_ParseWithLengthOpts+0x130>)
 8001960:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001964:	ca07      	ldmia	r2, {r0, r1, r2}
 8001966:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800196a:	4836      	ldr	r0, [pc, #216]	; (8001a44 <cJSON_ParseWithLengthOpts+0x130>)
 800196c:	f7ff fb5c 	bl	8001028 <cJSON_New_Item>
 8001970:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001974:	2b00      	cmp	r3, #0
 8001976:	d02e      	beq.n	80019d6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001978:	f107 0318 	add.w	r3, r7, #24
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff79 	bl	8001874 <skip_utf8_bom>
 8001982:	4603      	mov	r3, r0
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff35 	bl	80017f4 <buffer_skip_whitespace>
 800198a:	4603      	mov	r3, r0
 800198c:	4619      	mov	r1, r3
 800198e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001990:	f000 f868 	bl	8001a64 <parse_value>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01f      	beq.n	80019da <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00e      	beq.n	80019be <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80019a0:	f107 0318 	add.w	r3, r7, #24
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff25 	bl	80017f4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80019aa:	6a3a      	ldr	r2, [r7, #32]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d215      	bcs.n	80019de <cJSON_ParseWithLengthOpts+0xca>
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	4413      	add	r3, r2
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10f      	bne.n	80019de <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	441a      	add	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	601a      	str	r2, [r3, #0]
    }

    return item;
 80019ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d0:	e031      	b.n	8001a36 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80019d2:	bf00      	nop
 80019d4:	e004      	b.n	80019e0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80019d6:	bf00      	nop
 80019d8:	e002      	b.n	80019e0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80019da:	bf00      	nop
 80019dc:	e000      	b.n	80019e0 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80019de:	bf00      	nop

fail:
    if (item != NULL)
 80019e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80019e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019e8:	f7ff fb34 	bl	8001054 <cJSON_Delete>
    }

    if (value != NULL)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d020      	beq.n	8001a34 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80019fa:	6a3a      	ldr	r2, [r7, #32]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d202      	bcs.n	8001a08 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e005      	b.n	8001a14 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	441a      	add	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <cJSON_ParseWithLengthOpts+0x12c>)
 8001a26:	461a      	mov	r2, r3
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a30:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3738      	adds	r7, #56	; 0x38
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000234 	.word	0x20000234
 8001a44:	20000000 	.word	0x20000000

08001a48 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff41 	bl	80018dc <cJSON_ParseWithOpts>
 8001a5a:	4603      	mov	r3, r0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <parse_value+0x18>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <parse_value+0x1c>
    {
        return false; /* no input */
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e0d2      	b.n	8001c26 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01d      	beq.n	8001ac2 <parse_value+0x5e>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	1d1a      	adds	r2, r3, #4
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d816      	bhi.n	8001ac2 <parse_value+0x5e>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	4963      	ldr	r1, [pc, #396]	; (8001c30 <parse_value+0x1cc>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f008 fcf6 	bl	800a494 <strncmp>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	1d1a      	adds	r2, r3, #4
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	609a      	str	r2, [r3, #8]
        return true;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0b1      	b.n	8001c26 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01d      	beq.n	8001b04 <parse_value+0xa0>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	1d5a      	adds	r2, r3, #5
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d816      	bhi.n	8001b04 <parse_value+0xa0>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	4413      	add	r3, r2
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	4954      	ldr	r1, [pc, #336]	; (8001c34 <parse_value+0x1d0>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f008 fcd5 	bl	800a494 <strncmp>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d109      	bne.n	8001b04 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	1d5a      	adds	r2, r3, #5
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	609a      	str	r2, [r3, #8]
        return true;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e090      	b.n	8001c26 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d020      	beq.n	8001b4c <parse_value+0xe8>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	1d1a      	adds	r2, r3, #4
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d819      	bhi.n	8001b4c <parse_value+0xe8>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4413      	add	r3, r2
 8001b22:	2204      	movs	r2, #4
 8001b24:	4944      	ldr	r1, [pc, #272]	; (8001c38 <parse_value+0x1d4>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	f008 fcb4 	bl	800a494 <strncmp>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2202      	movs	r2, #2
 8001b36:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	1d1a      	adds	r2, r3, #4
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	609a      	str	r2, [r3, #8]
        return true;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e06c      	b.n	8001c26 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d013      	beq.n	8001b7a <parse_value+0x116>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d20d      	bcs.n	8001b7a <parse_value+0x116>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b22      	cmp	r3, #34	; 0x22
 8001b6c:	d105      	bne.n	8001b7a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001b6e:	6839      	ldr	r1, [r7, #0]
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fcf9 	bl	8001568 <parse_string>
 8001b76:	4603      	mov	r3, r0
 8001b78:	e055      	b.n	8001c26 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d023      	beq.n	8001bc8 <parse_value+0x164>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d21d      	bcs.n	8001bc8 <parse_value+0x164>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4413      	add	r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b2d      	cmp	r3, #45	; 0x2d
 8001b9a:	d00f      	beq.n	8001bbc <parse_value+0x158>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b2f      	cmp	r3, #47	; 0x2f
 8001baa:	d90d      	bls.n	8001bc8 <parse_value+0x164>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b39      	cmp	r3, #57	; 0x39
 8001bba:	d805      	bhi.n	8001bc8 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001bbc:	6839      	ldr	r1, [r7, #0]
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fa9a 	bl	80010f8 <parse_number>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	e02e      	b.n	8001c26 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d013      	beq.n	8001bf6 <parse_value+0x192>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d20d      	bcs.n	8001bf6 <parse_value+0x192>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	4413      	add	r3, r2
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b5b      	cmp	r3, #91	; 0x5b
 8001be8:	d105      	bne.n	8001bf6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001bea:	6839      	ldr	r1, [r7, #0]
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f825 	bl	8001c3c <parse_array>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	e017      	b.n	8001c26 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <parse_value+0x1c0>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d20d      	bcs.n	8001c24 <parse_value+0x1c0>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b7b      	cmp	r3, #123	; 0x7b
 8001c16:	d105      	bne.n	8001c24 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001c18:	6839      	ldr	r1, [r7, #0]
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f8d2 	bl	8001dc4 <parse_object>
 8001c20:	4603      	mov	r3, r0
 8001c22:	e000      	b.n	8001c26 <parse_value+0x1c2>
    }

    return false;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	0800d34c 	.word	0x0800d34c
 8001c34:	0800d37c 	.word	0x0800d37c
 8001c38:	0800d384 	.word	0x0800d384

08001c3c <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c56:	d301      	bcc.n	8001c5c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e0af      	b.n	8001dbc <parse_array+0x180>
    }
    input_buffer->depth++;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b5b      	cmp	r3, #91	; 0x5b
 8001c74:	f040 8094 	bne.w	8001da0 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001c82:	6838      	ldr	r0, [r7, #0]
 8001c84:	f7ff fdb6 	bl	80017f4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00d      	beq.n	8001caa <parse_array+0x6e>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d207      	bcs.n	8001caa <parse_array+0x6e>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b5d      	cmp	r3, #93	; 0x5d
 8001ca8:	d061      	beq.n	8001d6e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <parse_array+0x80>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d305      	bcc.n	8001cc8 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	1e5a      	subs	r2, r3, #1
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	609a      	str	r2, [r3, #8]
        goto fail;
 8001cc6:	e072      	b.n	8001dae <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	1e5a      	subs	r2, r3, #1
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	3310      	adds	r3, #16
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f9a6 	bl	8001028 <cJSON_New_Item>
 8001cdc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d05f      	beq.n	8001da4 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d104      	bne.n	8001cf4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	e007      	b.n	8001d04 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001d0e:	6838      	ldr	r0, [r7, #0]
 8001d10:	f7ff fd70 	bl	80017f4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001d14:	6839      	ldr	r1, [r7, #0]
 8001d16:	6938      	ldr	r0, [r7, #16]
 8001d18:	f7ff fea4 	bl	8001a64 <parse_value>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d042      	beq.n	8001da8 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001d22:	6838      	ldr	r0, [r7, #0]
 8001d24:	f7ff fd66 	bl	80017f4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <parse_array+0x10e>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d207      	bcs.n	8001d4a <parse_array+0x10e>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4413      	add	r3, r2
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b2c      	cmp	r3, #44	; 0x2c
 8001d48:	d0c3      	beq.n	8001cd2 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d02d      	beq.n	8001dac <parse_array+0x170>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d227      	bcs.n	8001dac <parse_array+0x170>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b5d      	cmp	r3, #93	; 0x5d
 8001d6a:	d11f      	bne.n	8001dac <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001d6c:	e000      	b.n	8001d70 <parse_array+0x134>
        goto success;
 8001d6e:	bf00      	nop
    input_buffer->depth--;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <parse_array+0x14a>
        head->prev = current_item;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	609a      	str	r2, [r3, #8]

    return true;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e00d      	b.n	8001dbc <parse_array+0x180>
        goto fail;
 8001da0:	bf00      	nop
 8001da2:	e004      	b.n	8001dae <parse_array+0x172>
            goto fail; /* allocation failure */
 8001da4:	bf00      	nop
 8001da6:	e002      	b.n	8001dae <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001da8:	bf00      	nop
 8001daa:	e000      	b.n	8001dae <parse_array+0x172>
        goto fail; /* expected end of array */
 8001dac:	bf00      	nop

fail:
    if (head != NULL)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001db4:	6978      	ldr	r0, [r7, #20]
 8001db6:	f7ff f94d 	bl	8001054 <cJSON_Delete>
    }

    return false;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dde:	d301      	bcc.n	8001de4 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001de0:	2300      	movs	r3, #0
 8001de2:	e0ea      	b.n	8001fba <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80d0 	beq.w	8001f96 <parse_object+0x1d2>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	f080 80c9 	bcs.w	8001f96 <parse_object+0x1d2>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b7b      	cmp	r3, #123	; 0x7b
 8001e12:	f040 80c0 	bne.w	8001f96 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001e20:	6838      	ldr	r0, [r7, #0]
 8001e22:	f7ff fce7 	bl	80017f4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00e      	beq.n	8001e4a <parse_object+0x86>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d208      	bcs.n	8001e4a <parse_object+0x86>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4413      	add	r3, r2
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b7d      	cmp	r3, #125	; 0x7d
 8001e46:	f000 808d 	beq.w	8001f64 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <parse_object+0x98>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d305      	bcc.n	8001e68 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	609a      	str	r2, [r3, #8]
        goto fail;
 8001e66:	e0a1      	b.n	8001fac <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	1e5a      	subs	r2, r3, #1
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	3310      	adds	r3, #16
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f8d6 	bl	8001028 <cJSON_New_Item>
 8001e7c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 808a 	beq.w	8001f9a <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d104      	bne.n	8001e96 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	e007      	b.n	8001ea6 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001eb0:	6838      	ldr	r0, [r7, #0]
 8001eb2:	f7ff fc9f 	bl	80017f4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001eb6:	6839      	ldr	r1, [r7, #0]
 8001eb8:	6938      	ldr	r0, [r7, #16]
 8001eba:	f7ff fb55 	bl	8001568 <parse_string>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d06c      	beq.n	8001f9e <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001ec4:	6838      	ldr	r0, [r7, #0]
 8001ec6:	f7ff fc95 	bl	80017f4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d061      	beq.n	8001fa2 <parse_object+0x1de>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d25b      	bcs.n	8001fa2 <parse_object+0x1de>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b3a      	cmp	r3, #58	; 0x3a
 8001ef8:	d153      	bne.n	8001fa2 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f04:	6838      	ldr	r0, [r7, #0]
 8001f06:	f7ff fc75 	bl	80017f4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001f0a:	6839      	ldr	r1, [r7, #0]
 8001f0c:	6938      	ldr	r0, [r7, #16]
 8001f0e:	f7ff fda9 	bl	8001a64 <parse_value>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d046      	beq.n	8001fa6 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001f18:	6838      	ldr	r0, [r7, #0]
 8001f1a:	f7ff fc6b 	bl	80017f4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00d      	beq.n	8001f40 <parse_object+0x17c>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <parse_object+0x17c>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b2c      	cmp	r3, #44	; 0x2c
 8001f3e:	d098      	beq.n	8001e72 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d031      	beq.n	8001faa <parse_object+0x1e6>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d22b      	bcs.n	8001faa <parse_object+0x1e6>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b7d      	cmp	r3, #125	; 0x7d
 8001f60:	d123      	bne.n	8001faa <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001f62:	e000      	b.n	8001f66 <parse_object+0x1a2>
        goto success; /* empty object */
 8001f64:	bf00      	nop
    input_buffer->depth--;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	1e5a      	subs	r2, r3, #1
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <parse_object+0x1b8>
        head->prev = current_item;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	609a      	str	r2, [r3, #8]
    return true;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e011      	b.n	8001fba <parse_object+0x1f6>
        goto fail; /* not an object */
 8001f96:	bf00      	nop
 8001f98:	e008      	b.n	8001fac <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8001f9a:	bf00      	nop
 8001f9c:	e006      	b.n	8001fac <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8001f9e:	bf00      	nop
 8001fa0:	e004      	b.n	8001fac <parse_object+0x1e8>
            goto fail; /* invalid object */
 8001fa2:	bf00      	nop
 8001fa4:	e002      	b.n	8001fac <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8001fa6:	bf00      	nop
 8001fa8:	e000      	b.n	8001fac <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8001faa:	bf00      	nop

fail:
    if (head != NULL)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff f84e 	bl	8001054 <cJSON_Delete>
    }

    return false;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <get_object_item+0x1c>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <get_object_item+0x20>
    {
        return NULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e033      	b.n	800204a <get_object_item+0x88>
    }

    current_element = object->child;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d017      	beq.n	800201e <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001fee:	e002      	b.n	8001ff6 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01c      	beq.n	8002036 <get_object_item+0x74>
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d018      	beq.n	8002036 <get_object_item+0x74>
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4619      	mov	r1, r3
 800200a:	68b8      	ldr	r0, [r7, #8]
 800200c:	f7fe f8e8 	bl	80001e0 <strcmp>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ec      	bne.n	8001ff0 <get_object_item+0x2e>
 8002016:	e00e      	b.n	8002036 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <get_object_item+0x74>
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4619      	mov	r1, r3
 800202a:	68b8      	ldr	r0, [r7, #8]
 800202c:	f7fe ff90 	bl	8000f50 <case_insensitive_strcmp>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <get_object_item+0x82>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <get_object_item+0x86>
        return NULL;
 8002044:	2300      	movs	r3, #0
 8002046:	e000      	b.n	800204a <get_object_item+0x88>
    }

    return current_element;
 8002048:	697b      	ldr	r3, [r7, #20]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800205c:	2200      	movs	r2, #0
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ffae 	bl	8001fc2 <get_object_item>
 8002066:	4603      	mov	r3, r0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af02      	add	r7, sp, #8
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	f023 030f 	bic.w	r3, r3, #15
 8002080:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	f043 030c 	orr.w	r3, r3, #12
 800208e:	b2db      	uxtb	r3, r3
 8002090:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	b2db      	uxtb	r3, r3
 800209a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800209c:	7bbb      	ldrb	r3, [r7, #14]
 800209e:	f043 030c 	orr.w	r3, r3, #12
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80020a6:	7bbb      	ldrb	r3, [r7, #14]
 80020a8:	f043 0308 	orr.w	r3, r3, #8
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80020b0:	f107 0208 	add.w	r2, r7, #8
 80020b4:	2364      	movs	r3, #100	; 0x64
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2304      	movs	r3, #4
 80020ba:	214e      	movs	r1, #78	; 0x4e
 80020bc:	4803      	ldr	r0, [pc, #12]	; (80020cc <lcd_send_cmd+0x5c>)
 80020be:	f004 ffc1 	bl	8007044 <HAL_I2C_Master_Transmit>
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20001494 	.word	0x20001494

080020d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f023 030f 	bic.w	r3, r3, #15
 80020e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	f043 030d 	orr.w	r3, r3, #13
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	f043 0309 	orr.w	r3, r3, #9
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80020fc:	7bbb      	ldrb	r3, [r7, #14]
 80020fe:	f043 030d 	orr.w	r3, r3, #13
 8002102:	b2db      	uxtb	r3, r3
 8002104:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002106:	7bbb      	ldrb	r3, [r7, #14]
 8002108:	f043 0309 	orr.w	r3, r3, #9
 800210c:	b2db      	uxtb	r3, r3
 800210e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002110:	f107 0208 	add.w	r2, r7, #8
 8002114:	2364      	movs	r3, #100	; 0x64
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	2304      	movs	r3, #4
 800211a:	214e      	movs	r1, #78	; 0x4e
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <lcd_send_data+0x5c>)
 800211e:	f004 ff91 	bl	8007044 <HAL_I2C_Master_Transmit>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20001494 	.word	0x20001494

08002130 <lcd_clear>:

void lcd_clear (void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8002136:	2080      	movs	r0, #128	; 0x80
 8002138:	f7ff ff9a 	bl	8002070 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800213c:	2300      	movs	r3, #0
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	e005      	b.n	800214e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8002142:	2020      	movs	r0, #32
 8002144:	f7ff ffc4 	bl	80020d0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3301      	adds	r3, #1
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b45      	cmp	r3, #69	; 0x45
 8002152:	ddf6      	ble.n	8002142 <lcd_clear+0x12>
	}
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
    switch (row)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <lcd_put_cur+0x18>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d005      	beq.n	8002180 <lcd_put_cur+0x22>
 8002174:	e009      	b.n	800218a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217c:	603b      	str	r3, [r7, #0]
            break;
 800217e:	e004      	b.n	800218a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002186:	603b      	str	r3, [r7, #0]
            break;
 8002188:	bf00      	nop
    };
    lcd_send_cmd (col);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff6e 	bl	8002070 <lcd_send_cmd>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <lcd_init>:


void lcd_init (void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	delay_us(60000);  // wait for >40ms
 80021a0:	f64e 2060 	movw	r0, #60000	; 0xea60
 80021a4:	f000 fcb0 	bl	8002b08 <delay_us>
	lcd_send_cmd (0x30);
 80021a8:	2030      	movs	r0, #48	; 0x30
 80021aa:	f7ff ff61 	bl	8002070 <lcd_send_cmd>
	delay_us(6000);  // wait for >4.1ms
 80021ae:	f241 7070 	movw	r0, #6000	; 0x1770
 80021b2:	f000 fca9 	bl	8002b08 <delay_us>
	lcd_send_cmd (0x30);
 80021b6:	2030      	movs	r0, #48	; 0x30
 80021b8:	f7ff ff5a 	bl	8002070 <lcd_send_cmd>
	delay_us(2000);  // wait for >100us
 80021bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021c0:	f000 fca2 	bl	8002b08 <delay_us>
	lcd_send_cmd (0x30);
 80021c4:	2030      	movs	r0, #48	; 0x30
 80021c6:	f7ff ff53 	bl	8002070 <lcd_send_cmd>
	delay_us(200);
 80021ca:	20c8      	movs	r0, #200	; 0xc8
 80021cc:	f000 fc9c 	bl	8002b08 <delay_us>
	lcd_send_cmd (0x20);  // 4bit mode
 80021d0:	2020      	movs	r0, #32
 80021d2:	f7ff ff4d 	bl	8002070 <lcd_send_cmd>
	delay_us(2000);
 80021d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021da:	f000 fc95 	bl	8002b08 <delay_us>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80021de:	2028      	movs	r0, #40	; 0x28
 80021e0:	f7ff ff46 	bl	8002070 <lcd_send_cmd>
	delay_us(2000);
 80021e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021e8:	f000 fc8e 	bl	8002b08 <delay_us>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80021ec:	2008      	movs	r0, #8
 80021ee:	f7ff ff3f 	bl	8002070 <lcd_send_cmd>
	delay_us(2000);
 80021f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021f6:	f000 fc87 	bl	8002b08 <delay_us>
	lcd_send_cmd (0x01);  // clear display
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7ff ff38 	bl	8002070 <lcd_send_cmd>
	delay_us(4000);
 8002200:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002204:	f000 fc80 	bl	8002b08 <delay_us>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8002208:	2006      	movs	r0, #6
 800220a:	f7ff ff31 	bl	8002070 <lcd_send_cmd>
	delay_us(2000);
 800220e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002212:	f000 fc79 	bl	8002b08 <delay_us>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8002216:	200c      	movs	r0, #12
 8002218:	f7ff ff2a 	bl	8002070 <lcd_send_cmd>
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}

08002220 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002228:	e006      	b.n	8002238 <lcd_send_string+0x18>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff4c 	bl	80020d0 <lcd_send_data>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f4      	bne.n	800222a <lcd_send_string+0xa>
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800224c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224e:	b099      	sub	sp, #100	; 0x64
 8002250:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002252:	f003 f8ff 	bl	8005454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002256:	f000 f90b 	bl	8002470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800225a:	f000 fb89 	bl	8002970 <MX_GPIO_Init>
  MX_DMA_Init();
 800225e:	f000 fb67 	bl	8002930 <MX_DMA_Init>
  MX_RTC_Init();
 8002262:	f000 fa5d 	bl	8002720 <MX_RTC_Init>
  MX_I2C1_Init();
 8002266:	f000 fa2d 	bl	80026c4 <MX_I2C1_Init>
  MX_TIM1_Init();
 800226a:	f000 fae7 	bl	800283c <MX_TIM1_Init>
  MX_ADC1_Init();
 800226e:	f000 f983 	bl	8002578 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8002272:	f000 fb33 	bl	80028dc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, -511);
 8002276:	f46f 73ff 	mvn.w	r3, #510	; 0x1fe
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	4861      	ldr	r0, [pc, #388]	; (8002404 <main+0x1b8>)
 8002280:	f006 fbce 	bl	8008a20 <HAL_RTCEx_SetSmoothCalib>
  HAL_TIM_Base_Start(&htim1);
 8002284:	4860      	ldr	r0, [pc, #384]	; (8002408 <main+0x1bc>)
 8002286:	f006 fc7f 	bl	8008b88 <HAL_TIM_Base_Start>
  lcd_initial_message();
 800228a:	f002 f8d1 	bl	8004430 <lcd_initial_message>
  HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 800228e:	2201      	movs	r2, #1
 8002290:	495e      	ldr	r1, [pc, #376]	; (800240c <main+0x1c0>)
 8002292:	485f      	ldr	r0, [pc, #380]	; (8002410 <main+0x1c4>)
 8002294:	f007 f801 	bl	800929a <HAL_UART_Receive_IT>
  last = HAL_GetTick();
 8002298:	f003 f942 	bl	8005520 <HAL_GetTick>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <main+0x1c8>)
 80022a2:	601a      	str	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 80022a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022a8:	f003 f946 	bl	8005538 <HAL_Delay>
	  DHT11_get_value();
 80022ac:	f000 fe98 	bl	8002fe0 <DHT11_get_value>
	  HAL_Delay(900);
 80022b0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80022b4:	f003 f940 	bl	8005538 <HAL_Delay>
	  get_time();
 80022b8:	f001 fa10 	bl	80036dc <get_time>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_dma, adc_channel_lenght);
 80022bc:	2307      	movs	r3, #7
 80022be:	461a      	mov	r2, r3
 80022c0:	4955      	ldr	r1, [pc, #340]	; (8002418 <main+0x1cc>)
 80022c2:	4856      	ldr	r0, [pc, #344]	; (800241c <main+0x1d0>)
 80022c4:	f003 fae0 	bl	8005888 <HAL_ADC_Start_DMA>
	  if(menu_refresher == 10){
 80022c8:	4b55      	ldr	r3, [pc, #340]	; (8002420 <main+0x1d4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b0a      	cmp	r3, #10
 80022ce:	d106      	bne.n	80022de <main+0x92>
		  menu_lcd_refresh = 1;
 80022d0:	4b54      	ldr	r3, [pc, #336]	; (8002424 <main+0x1d8>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
		  menu_refresher = 0;
 80022d6:	4b52      	ldr	r3, [pc, #328]	; (8002420 <main+0x1d4>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e004      	b.n	80022e8 <main+0x9c>
	  }else{
		  menu_refresher++;
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <main+0x1d4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	4a4e      	ldr	r2, [pc, #312]	; (8002420 <main+0x1d4>)
 80022e6:	6013      	str	r3, [r2, #0]
	  }

	  if(HAL_GetTick() - last >= 1500){
 80022e8:	f003 f91a 	bl	8005520 <HAL_GetTick>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a49      	ldr	r2, [pc, #292]	; (8002414 <main+0x1c8>)
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	f240 52db 	movw	r2, #1499	; 0x5db
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d960      	bls.n	80023be <main+0x172>
	  		  SendData(inst_temperature, inst_humidity, waterflow ,adc_result_percentage[0],
 80022fc:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <main+0x1dc>)
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8002306:	4b49      	ldr	r3, [pc, #292]	; (800242c <main+0x1e0>)
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002310:	4b47      	ldr	r3, [pc, #284]	; (8002430 <main+0x1e4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	469c      	mov	ip, r3
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <main+0x1e8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	469e      	mov	lr, r3
	  				  adc_result_percentage[1],adc_result_percentage[2], adc_result_percentage[3], rain, daylight,
 800231c:	4b45      	ldr	r3, [pc, #276]	; (8002434 <main+0x1e8>)
 800231e:	685b      	ldr	r3, [r3, #4]
	  		  SendData(inst_temperature, inst_humidity, waterflow ,adc_result_percentage[0],
 8002320:	461c      	mov	r4, r3
	  				  adc_result_percentage[1],adc_result_percentage[2], adc_result_percentage[3], rain, daylight,
 8002322:	4b44      	ldr	r3, [pc, #272]	; (8002434 <main+0x1e8>)
 8002324:	689b      	ldr	r3, [r3, #8]
	  		  SendData(inst_temperature, inst_humidity, waterflow ,adc_result_percentage[0],
 8002326:	461d      	mov	r5, r3
	  				  adc_result_percentage[1],adc_result_percentage[2], adc_result_percentage[3], rain, daylight,
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <main+0x1e8>)
 800232a:	68db      	ldr	r3, [r3, #12]
	  		  SendData(inst_temperature, inst_humidity, waterflow ,adc_result_percentage[0],
 800232c:	461e      	mov	r6, r3
 800232e:	4b42      	ldr	r3, [pc, #264]	; (8002438 <main+0x1ec>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	4b41      	ldr	r3, [pc, #260]	; (800243c <main+0x1f0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]
					  adc_result_percentage[5], current_mode, tankrelay, wellrelay, line1relay, line2relay,
 800233a:	4b3e      	ldr	r3, [pc, #248]	; (8002434 <main+0x1e8>)
 800233c:	695b      	ldr	r3, [r3, #20]
	  		  SendData(inst_temperature, inst_humidity, waterflow ,adc_result_percentage[0],
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	4b3f      	ldr	r3, [pc, #252]	; (8002440 <main+0x1f4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <main+0x1f8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	4b3e      	ldr	r3, [pc, #248]	; (8002448 <main+0x1fc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	4b3e      	ldr	r3, [pc, #248]	; (800244c <main+0x200>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <main+0x204>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <main+0x208>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	4b3c      	ldr	r3, [pc, #240]	; (8002458 <main+0x20c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4619      	mov	r1, r3
 800236a:	4b3c      	ldr	r3, [pc, #240]	; (800245c <main+0x210>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <main+0x214>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	930e      	str	r3, [sp, #56]	; 0x38
 8002376:	920d      	str	r2, [sp, #52]	; 0x34
 8002378:	910c      	str	r1, [sp, #48]	; 0x30
 800237a:	900b      	str	r0, [sp, #44]	; 0x2c
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	920a      	str	r2, [sp, #40]	; 0x28
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	9209      	str	r2, [sp, #36]	; 0x24
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	9208      	str	r2, [sp, #32]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	9207      	str	r2, [sp, #28]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	9206      	str	r2, [sp, #24]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	9205      	str	r2, [sp, #20]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	9204      	str	r2, [sp, #16]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	9303      	str	r3, [sp, #12]
 800239c:	9602      	str	r6, [sp, #8]
 800239e:	9501      	str	r5, [sp, #4]
 80023a0:	9400      	str	r4, [sp, #0]
 80023a2:	4673      	mov	r3, lr
 80023a4:	4662      	mov	r2, ip
 80023a6:	ee17 1a90 	vmov	r1, s15
 80023aa:	ee17 0a10 	vmov	r0, s14
 80023ae:	f001 f9e7 	bl	8003780 <SendData>
					  donewatering, current_hour, current_min, skipday);
	  		  last = HAL_GetTick();
 80023b2:	f003 f8b5 	bl	8005520 <HAL_GetTick>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <main+0x1c8>)
 80023bc:	601a      	str	r2, [r3, #0]
	  	  }
	  mode_planner(0, global_planner_start);
 80023be:	4b29      	ldr	r3, [pc, #164]	; (8002464 <main+0x218>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	2000      	movs	r0, #0
 80023c6:	f000 fedb 	bl	8003180 <mode_planner>
	  menu_func(menu_lcd_refresh, 0);
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <main+0x1d8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f002 f85f 	bl	8004494 <menu_func>
	  HAL_Delay(100);
 80023d6:	2064      	movs	r0, #100	; 0x64
 80023d8:	f003 f8ae 	bl	8005538 <HAL_Delay>

	  if(nextday_dummy){
 80023dc:	4b22      	ldr	r3, [pc, #136]	; (8002468 <main+0x21c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f43f af5f 	beq.w	80022a4 <main+0x58>
		  set_time (decToBcd(17), decToBcd(30), auto_debug_weekday);
 80023e6:	2011      	movs	r0, #17
 80023e8:	f001 f8dc 	bl	80035a4 <decToBcd>
 80023ec:	4604      	mov	r4, r0
 80023ee:	201e      	movs	r0, #30
 80023f0:	f001 f8d8 	bl	80035a4 <decToBcd>
 80023f4:	4601      	mov	r1, r0
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <main+0x220>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	4620      	mov	r0, r4
 80023fe:	f001 f8f3 	bl	80035e8 <set_time>
	  HAL_Delay(500);
 8002402:	e74f      	b.n	80022a4 <main+0x58>
 8002404:	200031f4 	.word	0x200031f4
 8002408:	2000361c 	.word	0x2000361c
 800240c:	20000324 	.word	0x20000324
 8002410:	2000422c 	.word	0x2000422c
 8002414:	2000032c 	.word	0x2000032c
 8002418:	20000d7c 	.word	0x20000d7c
 800241c:	2000294c 	.word	0x2000294c
 8002420:	2000025c 	.word	0x2000025c
 8002424:	20000248 	.word	0x20000248
 8002428:	200002f4 	.word	0x200002f4
 800242c:	200002f8 	.word	0x200002f8
 8002430:	20000320 	.word	0x20000320
 8002434:	20003178 	.word	0x20003178
 8002438:	20000314 	.word	0x20000314
 800243c:	20000318 	.word	0x20000318
 8002440:	2000031c 	.word	0x2000031c
 8002444:	20000304 	.word	0x20000304
 8002448:	20000300 	.word	0x20000300
 800244c:	20000308 	.word	0x20000308
 8002450:	2000030c 	.word	0x2000030c
 8002454:	20000310 	.word	0x20000310
 8002458:	200002e8 	.word	0x200002e8
 800245c:	200002ec 	.word	0x200002ec
 8002460:	20000340 	.word	0x20000340
 8002464:	20000264 	.word	0x20000264
 8002468:	20000330 	.word	0x20000330
 800246c:	20000338 	.word	0x20000338

08002470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b098      	sub	sp, #96	; 0x60
 8002474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002476:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800247a:	2230      	movs	r2, #48	; 0x30
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f007 fe56 	bl	800a130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002484:	f107 031c 	add.w	r3, r7, #28
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002494:	f107 0308 	add.w	r3, r7, #8
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <SystemClock_Config+0x100>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	4a30      	ldr	r2, [pc, #192]	; (8002570 <SystemClock_Config+0x100>)
 80024ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b2:	6413      	str	r3, [r2, #64]	; 0x40
 80024b4:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <SystemClock_Config+0x100>)
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80024c0:	2300      	movs	r3, #0
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <SystemClock_Config+0x104>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024cc:	4a29      	ldr	r2, [pc, #164]	; (8002574 <SystemClock_Config+0x104>)
 80024ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <SystemClock_Config+0x104>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80024e0:	230a      	movs	r3, #10
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024e4:	2301      	movs	r3, #1
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024e8:	2310      	movs	r3, #16
 80024ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80024ec:	2301      	movs	r3, #1
 80024ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f0:	2302      	movs	r3, #2
 80024f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024f4:	2300      	movs	r3, #0
 80024f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024f8:	2308      	movs	r3, #8
 80024fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 84;
 80024fc:	2354      	movs	r3, #84	; 0x54
 80024fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002500:	2302      	movs	r3, #2
 8002502:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002504:	2304      	movs	r3, #4
 8002506:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800250c:	4618      	mov	r0, r3
 800250e:	f005 f8a1 	bl	8007654 <HAL_RCC_OscConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002518:	f002 fca4 	bl	8004e64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800251c:	230f      	movs	r3, #15
 800251e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002520:	2302      	movs	r3, #2
 8002522:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800252e:	2300      	movs	r3, #0
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002532:	f107 031c 	add.w	r3, r7, #28
 8002536:	2102      	movs	r1, #2
 8002538:	4618      	mov	r0, r3
 800253a:	f005 fb03 	bl	8007b44 <HAL_RCC_ClockConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002544:	f002 fc8e 	bl	8004e64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002548:	2302      	movs	r3, #2
 800254a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800254c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002550:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	4618      	mov	r0, r3
 8002558:	f005 fcc4 	bl	8007ee4 <HAL_RCCEx_PeriphCLKConfig>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002562:	f002 fc7f 	bl	8004e64 <Error_Handler>
  }
}
 8002566:	bf00      	nop
 8002568:	3760      	adds	r7, #96	; 0x60
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	40007000 	.word	0x40007000

08002578 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800257e:	463b      	mov	r3, r7
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800258a:	4b4b      	ldr	r3, [pc, #300]	; (80026b8 <MX_ADC1_Init+0x140>)
 800258c:	4a4b      	ldr	r2, [pc, #300]	; (80026bc <MX_ADC1_Init+0x144>)
 800258e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002590:	4b49      	ldr	r3, [pc, #292]	; (80026b8 <MX_ADC1_Init+0x140>)
 8002592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002596:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002598:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <MX_ADC1_Init+0x140>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800259e:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <MX_ADC1_Init+0x140>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025a4:	4b44      	ldr	r3, [pc, #272]	; (80026b8 <MX_ADC1_Init+0x140>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025aa:	4b43      	ldr	r3, [pc, #268]	; (80026b8 <MX_ADC1_Init+0x140>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025b2:	4b41      	ldr	r3, [pc, #260]	; (80026b8 <MX_ADC1_Init+0x140>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025b8:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <MX_ADC1_Init+0x140>)
 80025ba:	4a41      	ldr	r2, [pc, #260]	; (80026c0 <MX_ADC1_Init+0x148>)
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025be:	4b3e      	ldr	r3, [pc, #248]	; (80026b8 <MX_ADC1_Init+0x140>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 80025c4:	4b3c      	ldr	r3, [pc, #240]	; (80026b8 <MX_ADC1_Init+0x140>)
 80025c6:	2207      	movs	r2, #7
 80025c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80025ca:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <MX_ADC1_Init+0x140>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025d2:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <MX_ADC1_Init+0x140>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025d8:	4837      	ldr	r0, [pc, #220]	; (80026b8 <MX_ADC1_Init+0x140>)
 80025da:	f002 ffd1 	bl	8005580 <HAL_ADC_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80025e4:	f002 fc3e 	bl	8004e64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80025ec:	2301      	movs	r3, #1
 80025ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80025f0:	2301      	movs	r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025f4:	463b      	mov	r3, r7
 80025f6:	4619      	mov	r1, r3
 80025f8:	482f      	ldr	r0, [pc, #188]	; (80026b8 <MX_ADC1_Init+0x140>)
 80025fa:	f003 fa53 	bl	8005aa4 <HAL_ADC_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002604:	f002 fc2e 	bl	8004e64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002608:	2301      	movs	r3, #1
 800260a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800260c:	2302      	movs	r3, #2
 800260e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002610:	463b      	mov	r3, r7
 8002612:	4619      	mov	r1, r3
 8002614:	4828      	ldr	r0, [pc, #160]	; (80026b8 <MX_ADC1_Init+0x140>)
 8002616:	f003 fa45 	bl	8005aa4 <HAL_ADC_ConfigChannel>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002620:	f002 fc20 	bl	8004e64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002624:	2302      	movs	r3, #2
 8002626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002628:	2303      	movs	r3, #3
 800262a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800262c:	463b      	mov	r3, r7
 800262e:	4619      	mov	r1, r3
 8002630:	4821      	ldr	r0, [pc, #132]	; (80026b8 <MX_ADC1_Init+0x140>)
 8002632:	f003 fa37 	bl	8005aa4 <HAL_ADC_ConfigChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800263c:	f002 fc12 	bl	8004e64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002640:	2303      	movs	r3, #3
 8002642:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002644:	2304      	movs	r3, #4
 8002646:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002648:	463b      	mov	r3, r7
 800264a:	4619      	mov	r1, r3
 800264c:	481a      	ldr	r0, [pc, #104]	; (80026b8 <MX_ADC1_Init+0x140>)
 800264e:	f003 fa29 	bl	8005aa4 <HAL_ADC_ConfigChannel>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002658:	f002 fc04 	bl	8004e64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800265c:	2304      	movs	r3, #4
 800265e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002660:	2305      	movs	r3, #5
 8002662:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002664:	463b      	mov	r3, r7
 8002666:	4619      	mov	r1, r3
 8002668:	4813      	ldr	r0, [pc, #76]	; (80026b8 <MX_ADC1_Init+0x140>)
 800266a:	f003 fa1b 	bl	8005aa4 <HAL_ADC_ConfigChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002674:	f002 fbf6 	bl	8004e64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002678:	2305      	movs	r3, #5
 800267a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800267c:	2306      	movs	r3, #6
 800267e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002680:	463b      	mov	r3, r7
 8002682:	4619      	mov	r1, r3
 8002684:	480c      	ldr	r0, [pc, #48]	; (80026b8 <MX_ADC1_Init+0x140>)
 8002686:	f003 fa0d 	bl	8005aa4 <HAL_ADC_ConfigChannel>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002690:	f002 fbe8 	bl	8004e64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002694:	2306      	movs	r3, #6
 8002696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002698:	2307      	movs	r3, #7
 800269a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800269c:	463b      	mov	r3, r7
 800269e:	4619      	mov	r1, r3
 80026a0:	4805      	ldr	r0, [pc, #20]	; (80026b8 <MX_ADC1_Init+0x140>)
 80026a2:	f003 f9ff 	bl	8005aa4 <HAL_ADC_ConfigChannel>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80026ac:	f002 fbda 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	2000294c 	.word	0x2000294c
 80026bc:	40012000 	.word	0x40012000
 80026c0:	0f000001 	.word	0x0f000001

080026c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <MX_I2C1_Init+0x50>)
 80026ca:	4a13      	ldr	r2, [pc, #76]	; (8002718 <MX_I2C1_Init+0x54>)
 80026cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <MX_I2C1_Init+0x50>)
 80026d0:	4a12      	ldr	r2, [pc, #72]	; (800271c <MX_I2C1_Init+0x58>)
 80026d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <MX_I2C1_Init+0x50>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <MX_I2C1_Init+0x50>)
 80026dc:	2200      	movs	r2, #0
 80026de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <MX_I2C1_Init+0x50>)
 80026e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <MX_I2C1_Init+0x50>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <MX_I2C1_Init+0x50>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <MX_I2C1_Init+0x50>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <MX_I2C1_Init+0x50>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002700:	4804      	ldr	r0, [pc, #16]	; (8002714 <MX_I2C1_Init+0x50>)
 8002702:	f004 fb5b 	bl	8006dbc <HAL_I2C_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800270c:	f002 fbaa 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20001494 	.word	0x20001494
 8002718:	40005400 	.word	0x40005400
 800271c:	00061a80 	.word	0x00061a80

08002720 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b090      	sub	sp, #64	; 0x40
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	60da      	str	r2, [r3, #12]
 8002734:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002736:	2300      	movs	r3, #0
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800273a:	463b      	mov	r3, r7
 800273c:	2228      	movs	r2, #40	; 0x28
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f007 fcf5 	bl	800a130 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002746:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <MX_RTC_Init+0x114>)
 8002748:	4a3b      	ldr	r2, [pc, #236]	; (8002838 <MX_RTC_Init+0x118>)
 800274a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800274c:	4b39      	ldr	r3, [pc, #228]	; (8002834 <MX_RTC_Init+0x114>)
 800274e:	2200      	movs	r2, #0
 8002750:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002752:	4b38      	ldr	r3, [pc, #224]	; (8002834 <MX_RTC_Init+0x114>)
 8002754:	227f      	movs	r2, #127	; 0x7f
 8002756:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 285;
 8002758:	4b36      	ldr	r3, [pc, #216]	; (8002834 <MX_RTC_Init+0x114>)
 800275a:	f240 121d 	movw	r2, #285	; 0x11d
 800275e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002760:	4b34      	ldr	r3, [pc, #208]	; (8002834 <MX_RTC_Init+0x114>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002766:	4b33      	ldr	r3, [pc, #204]	; (8002834 <MX_RTC_Init+0x114>)
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800276c:	4b31      	ldr	r3, [pc, #196]	; (8002834 <MX_RTC_Init+0x114>)
 800276e:	2200      	movs	r2, #0
 8002770:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002772:	4830      	ldr	r0, [pc, #192]	; (8002834 <MX_RTC_Init+0x114>)
 8002774:	f005 fca4 	bl	80080c0 <HAL_RTC_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800277e:	f002 fb71 	bl	8004e64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x17;
 8002782:	2317      	movs	r3, #23
 8002784:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x30;
 8002788:	2330      	movs	r3, #48	; 0x30
 800278a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x10;
 800278e:	2310      	movs	r3, #16
 8002790:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002794:	2300      	movs	r3, #0
 8002796:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002798:	2300      	movs	r3, #0
 800279a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800279c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a0:	2201      	movs	r2, #1
 80027a2:	4619      	mov	r1, r3
 80027a4:	4823      	ldr	r0, [pc, #140]	; (8002834 <MX_RTC_Init+0x114>)
 80027a6:	f005 fd1c 	bl	80081e2 <HAL_RTC_SetTime>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80027b0:	f002 fb58 	bl	8004e64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JUNE;
 80027ba:	2306      	movs	r3, #6
 80027bc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x13;
 80027c0:	2313      	movs	r3, #19
 80027c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x22;
 80027c6:	2322      	movs	r3, #34	; 0x22
 80027c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80027cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027d0:	2201      	movs	r2, #1
 80027d2:	4619      	mov	r1, r3
 80027d4:	4817      	ldr	r0, [pc, #92]	; (8002834 <MX_RTC_Init+0x114>)
 80027d6:	f005 fe1f 	bl	8008418 <HAL_RTC_SetDate>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80027e0:	f002 fb40 	bl	8004e64 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x17;
 80027e4:	2317      	movs	r3, #23
 80027e6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x30;
 80027e8:	2330      	movs	r3, #48	; 0x30
 80027ea:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x15;
 80027ec:	2315      	movs	r3, #21
 80027ee:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8002804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002808:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_WEDNESDAY;
 800280a:	2303      	movs	r3, #3
 800280c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002816:	463b      	mov	r3, r7
 8002818:	2201      	movs	r2, #1
 800281a:	4619      	mov	r1, r3
 800281c:	4805      	ldr	r0, [pc, #20]	; (8002834 <MX_RTC_Init+0x114>)
 800281e:	f005 fef1 	bl	8008604 <HAL_RTC_SetAlarm_IT>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8002828:	f002 fb1c 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	3740      	adds	r7, #64	; 0x40
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	200031f4 	.word	0x200031f4
 8002838:	40002800 	.word	0x40002800

0800283c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002842:	f107 0308 	add.w	r3, r7, #8
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002850:	463b      	mov	r3, r7
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002858:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <MX_TIM1_Init+0x98>)
 800285a:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <MX_TIM1_Init+0x9c>)
 800285c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <MX_TIM1_Init+0x98>)
 8002860:	2253      	movs	r2, #83	; 0x53
 8002862:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <MX_TIM1_Init+0x98>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <MX_TIM1_Init+0x98>)
 800286c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002870:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <MX_TIM1_Init+0x98>)
 8002874:	2200      	movs	r2, #0
 8002876:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <MX_TIM1_Init+0x98>)
 800287a:	2200      	movs	r2, #0
 800287c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <MX_TIM1_Init+0x98>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002884:	4813      	ldr	r0, [pc, #76]	; (80028d4 <MX_TIM1_Init+0x98>)
 8002886:	f006 f930 	bl	8008aea <HAL_TIM_Base_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002890:	f002 fae8 	bl	8004e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800289a:	f107 0308 	add.w	r3, r7, #8
 800289e:	4619      	mov	r1, r3
 80028a0:	480c      	ldr	r0, [pc, #48]	; (80028d4 <MX_TIM1_Init+0x98>)
 80028a2:	f006 f9cb 	bl	8008c3c <HAL_TIM_ConfigClockSource>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80028ac:	f002 fada 	bl	8004e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b0:	2300      	movs	r3, #0
 80028b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028b8:	463b      	mov	r3, r7
 80028ba:	4619      	mov	r1, r3
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <MX_TIM1_Init+0x98>)
 80028be:	f006 fb9f 	bl	8009000 <HAL_TIMEx_MasterConfigSynchronization>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80028c8:	f002 facc 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80028cc:	bf00      	nop
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	2000361c 	.word	0x2000361c
 80028d8:	40010000 	.word	0x40010000

080028dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <MX_USART6_UART_Init+0x4c>)
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <MX_USART6_UART_Init+0x50>)
 80028e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <MX_USART6_UART_Init+0x4c>)
 80028e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <MX_USART6_UART_Init+0x4c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <MX_USART6_UART_Init+0x4c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <MX_USART6_UART_Init+0x4c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <MX_USART6_UART_Init+0x4c>)
 8002902:	220c      	movs	r2, #12
 8002904:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <MX_USART6_UART_Init+0x4c>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <MX_USART6_UART_Init+0x4c>)
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002912:	4805      	ldr	r0, [pc, #20]	; (8002928 <MX_USART6_UART_Init+0x4c>)
 8002914:	f006 fbe2 	bl	80090dc <HAL_UART_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800291e:	f002 faa1 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	2000422c 	.word	0x2000422c
 800292c:	40011400 	.word	0x40011400

08002930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_DMA_Init+0x3c>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a0b      	ldr	r2, [pc, #44]	; (800296c <MX_DMA_Init+0x3c>)
 8002940:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <MX_DMA_Init+0x3c>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	2038      	movs	r0, #56	; 0x38
 8002958:	f003 fc29 	bl	80061ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800295c:	2038      	movs	r0, #56	; 0x38
 800295e:	f003 fc42 	bl	80061e6 <HAL_NVIC_EnableIRQ>

}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800

08002970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	4b5b      	ldr	r3, [pc, #364]	; (8002af8 <MX_GPIO_Init+0x188>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a5a      	ldr	r2, [pc, #360]	; (8002af8 <MX_GPIO_Init+0x188>)
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b58      	ldr	r3, [pc, #352]	; (8002af8 <MX_GPIO_Init+0x188>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <MX_GPIO_Init+0x188>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a53      	ldr	r2, [pc, #332]	; (8002af8 <MX_GPIO_Init+0x188>)
 80029ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b51      	ldr	r3, [pc, #324]	; (8002af8 <MX_GPIO_Init+0x188>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <MX_GPIO_Init+0x188>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a4c      	ldr	r2, [pc, #304]	; (8002af8 <MX_GPIO_Init+0x188>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <MX_GPIO_Init+0x188>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <MX_GPIO_Init+0x188>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a45      	ldr	r2, [pc, #276]	; (8002af8 <MX_GPIO_Init+0x188>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <MX_GPIO_Init+0x188>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin|line1_relay_Pin|line0_relay_Pin, GPIO_PIN_SET);
 80029f6:	2201      	movs	r2, #1
 80029f8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80029fc:	483f      	ldr	r0, [pc, #252]	; (8002afc <MX_GPIO_Init+0x18c>)
 80029fe:	f004 f9ab 	bl	8006d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(wellmotor_relay_GPIO_Port, wellmotor_relay_Pin, GPIO_PIN_SET);
 8002a02:	2201      	movs	r2, #1
 8002a04:	2104      	movs	r1, #4
 8002a06:	483e      	ldr	r0, [pc, #248]	; (8002b00 <MX_GPIO_Init+0x190>)
 8002a08:	f004 f9a6 	bl	8006d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : tankmotor_relay_Pin line1_relay_Pin line0_relay_Pin */
  GPIO_InitStruct.Pin = tankmotor_relay_Pin|line1_relay_Pin|line0_relay_Pin;
 8002a0c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a12:	2301      	movs	r3, #1
 8002a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	4835      	ldr	r0, [pc, #212]	; (8002afc <MX_GPIO_Init+0x18c>)
 8002a26:	f003 fffb 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : light_exti_sens_Pin button_press_Pin */
  GPIO_InitStruct.Pin = light_exti_sens_Pin|button_press_Pin;
 8002a2a:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4830      	ldr	r0, [pc, #192]	; (8002b04 <MX_GPIO_Init+0x194>)
 8002a42:	f003 ffed 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : button_up_Pin button_down_Pin */
  GPIO_InitStruct.Pin = button_up_Pin|button_down_Pin;
 8002a46:	2303      	movs	r3, #3
 8002a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a50:	2302      	movs	r3, #2
 8002a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4829      	ldr	r0, [pc, #164]	; (8002b00 <MX_GPIO_Init+0x190>)
 8002a5c:	f003 ffe0 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : wellmotor_relay_Pin */
  GPIO_InitStruct.Pin = wellmotor_relay_Pin;
 8002a60:	2304      	movs	r3, #4
 8002a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a64:	2301      	movs	r3, #1
 8002a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(wellmotor_relay_GPIO_Port, &GPIO_InitStruct);
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	4619      	mov	r1, r3
 8002a76:	4822      	ldr	r0, [pc, #136]	; (8002b00 <MX_GPIO_Init+0x190>)
 8002a78:	f003 ffd2 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ac_source_Pin */
  GPIO_InitStruct.Pin = ac_source_Pin;
 8002a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ac_source_GPIO_Port, &GPIO_InitStruct);
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	4619      	mov	r1, r3
 8002a92:	481b      	ldr	r0, [pc, #108]	; (8002b00 <MX_GPIO_Init+0x190>)
 8002a94:	f003 ffc4 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : dht_in_Pin */
  GPIO_InitStruct.Pin = dht_in_Pin;
 8002a98:	2320      	movs	r3, #32
 8002a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(dht_in_GPIO_Port, &GPIO_InitStruct);
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4815      	ldr	r0, [pc, #84]	; (8002b00 <MX_GPIO_Init+0x190>)
 8002aac:	f003 ffb8 	bl	8006a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	2006      	movs	r0, #6
 8002ab6:	f003 fb7a 	bl	80061ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002aba:	2006      	movs	r0, #6
 8002abc:	f003 fb93 	bl	80061e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	2007      	movs	r0, #7
 8002ac6:	f003 fb72 	bl	80061ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002aca:	2007      	movs	r0, #7
 8002acc:	f003 fb8b 	bl	80061e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	2017      	movs	r0, #23
 8002ad6:	f003 fb6a 	bl	80061ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ada:	2017      	movs	r0, #23
 8002adc:	f003 fb83 	bl	80061e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	2028      	movs	r0, #40	; 0x28
 8002ae6:	f003 fb62 	bl	80061ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002aea:	2028      	movs	r0, #40	; 0x28
 8002aec:	f003 fb7b 	bl	80061e6 <HAL_NVIC_EnableIRQ>

}
 8002af0:	bf00      	nop
 8002af2:	3728      	adds	r7, #40	; 0x28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020800 	.word	0x40020800
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40020000 	.word	0x40020000

08002b08 <delay_us>:

/* USER CODE BEGIN 4 */

void delay_us (uint16_t us)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <delay_us+0x30>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2200      	movs	r2, #0
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002b1a:	bf00      	nop
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <delay_us+0x30>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d3f9      	bcc.n	8002b1c <delay_us+0x14>
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	2000361c 	.word	0x2000361c

08002b3c <HAL_ADC_ConvCpltCallback>:


/*-----------------INTERRUPTS BEGIN-----------------------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a8c      	ldr	r2, [pc, #560]	; (8002d78 <HAL_ADC_ConvCpltCallback+0x23c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	f040 8110 	bne.w	8002d6e <HAL_ADC_ConvCpltCallback+0x232>
		for(int x =0; x<adc_moist_number-1; x++){
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e042      	b.n	8002bda <HAL_ADC_ConvCpltCallback+0x9e>
			adc_result_dma[x] = (adc_result_dma[x]> 2730) ? 2730:adc_result_dma[x];
 8002b54:	4a89      	ldr	r2, [pc, #548]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d805      	bhi.n	8002b72 <HAL_ADC_ConvCpltCallback+0x36>
 8002b66:	4a85      	ldr	r2, [pc, #532]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	e001      	b.n	8002b76 <HAL_ADC_ConvCpltCallback+0x3a>
 8002b72:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8002b76:	4981      	ldr	r1, [pc, #516]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_result_dma[x] = (adc_result_dma[x]< 1260) ? 1260:adc_result_dma[x];
 8002b7e:	4a7f      	ldr	r2, [pc, #508]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	f240 42eb 	movw	r2, #1259	; 0x4eb
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d905      	bls.n	8002b9c <HAL_ADC_ConvCpltCallback+0x60>
 8002b90:	4a7a      	ldr	r2, [pc, #488]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	e001      	b.n	8002ba0 <HAL_ADC_ConvCpltCallback+0x64>
 8002b9c:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8002ba0:	4976      	ldr	r1, [pc, #472]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_result_percentage[x] = 100-((adc_result_dma[x]-1260)*100/1470);
 8002ba8:	4a74      	ldr	r2, [pc, #464]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8002bb6:	2264      	movs	r2, #100	; 0x64
 8002bb8:	fb02 f303 	mul.w	r3, r2, r3
 8002bbc:	4a70      	ldr	r2, [pc, #448]	; (8002d80 <HAL_ADC_ConvCpltCallback+0x244>)
 8002bbe:	fb82 1203 	smull	r1, r2, r2, r3
 8002bc2:	11d2      	asrs	r2, r2, #7
 8002bc4:	17db      	asrs	r3, r3, #31
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002bcc:	496d      	ldr	r1, [pc, #436]	; (8002d84 <HAL_ADC_ConvCpltCallback+0x248>)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int x =0; x<adc_moist_number-1; x++){
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	2304      	movs	r3, #4
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	dbb7      	blt.n	8002b54 <HAL_ADC_ConvCpltCallback+0x18>
		}
		//Different Moisture Sensor
		adc_result_dma[3] = (adc_result_dma[3]> 3800) ? 3800:adc_result_dma[3];
 8002be4:	4b65      	ldr	r3, [pc, #404]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002be6:	88db      	ldrh	r3, [r3, #6]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f640 62d8 	movw	r2, #3800	; 0xed8
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d803      	bhi.n	8002bfa <HAL_ADC_ConvCpltCallback+0xbe>
 8002bf2:	4b62      	ldr	r3, [pc, #392]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002bf4:	88db      	ldrh	r3, [r3, #6]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	e001      	b.n	8002bfe <HAL_ADC_ConvCpltCallback+0xc2>
 8002bfa:	f640 63d8 	movw	r3, #3800	; 0xed8
 8002bfe:	4a5f      	ldr	r2, [pc, #380]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002c00:	80d3      	strh	r3, [r2, #6]
		adc_result_dma[3] = (adc_result_dma[3]< 900) ? 900:adc_result_dma[3];
 8002c02:	4b5e      	ldr	r3, [pc, #376]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002c04:	88db      	ldrh	r3, [r3, #6]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002c0c:	d303      	bcc.n	8002c16 <HAL_ADC_ConvCpltCallback+0xda>
 8002c0e:	4b5b      	ldr	r3, [pc, #364]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002c10:	88db      	ldrh	r3, [r3, #6]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	e001      	b.n	8002c1a <HAL_ADC_ConvCpltCallback+0xde>
 8002c16:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002c1a:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002c1c:	80d3      	strh	r3, [r2, #6]
		adc_result_percentage[3] = 100-((adc_result_dma[3]-900)*100/2900);
 8002c1e:	4b57      	ldr	r3, [pc, #348]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002c20:	88db      	ldrh	r3, [r3, #6]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8002c28:	4a57      	ldr	r2, [pc, #348]	; (8002d88 <HAL_ADC_ConvCpltCallback+0x24c>)
 8002c2a:	fb82 1203 	smull	r1, r2, r2, r3
 8002c2e:	441a      	add	r2, r3
 8002c30:	1112      	asrs	r2, r2, #4
 8002c32:	17db      	asrs	r3, r3, #31
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	3364      	adds	r3, #100	; 0x64
 8002c38:	4a52      	ldr	r2, [pc, #328]	; (8002d84 <HAL_ADC_ConvCpltCallback+0x248>)
 8002c3a:	60d3      	str	r3, [r2, #12]

		adc_result_percentage[5] =100-((adc_result_dma[5])*100/4000);
 8002c3c:	4b4f      	ldr	r3, [pc, #316]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002c3e:	895b      	ldrh	r3, [r3, #10]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_ADC_ConvCpltCallback+0x250>)
 8002c44:	fb82 1203 	smull	r1, r2, r2, r3
 8002c48:	1112      	asrs	r2, r2, #4
 8002c4a:	17db      	asrs	r3, r3, #31
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	3364      	adds	r3, #100	; 0x64
 8002c50:	4a4c      	ldr	r2, [pc, #304]	; (8002d84 <HAL_ADC_ConvCpltCallback+0x248>)
 8002c52:	6153      	str	r3, [r2, #20]

		//Water Tank Refill Algorithm
		if(adc_result_dma[5] < 1800){
 8002c54:	4b49      	ldr	r3, [pc, #292]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002c56:	895b      	ldrh	r3, [r3, #10]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002c5e:	d208      	bcs.n	8002c72 <HAL_ADC_ConvCpltCallback+0x136>
			HAL_GPIO_WritePin(GPIOB, wellmotor_relay_Pin, GPIO_PIN_RESET);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2104      	movs	r1, #4
 8002c64:	484a      	ldr	r0, [pc, #296]	; (8002d90 <HAL_ADC_ConvCpltCallback+0x254>)
 8002c66:	f004 f877 	bl	8006d58 <HAL_GPIO_WritePin>
			wellrelay = 1;
 8002c6a:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <HAL_ADC_ConvCpltCallback+0x258>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	e007      	b.n	8002c82 <HAL_ADC_ConvCpltCallback+0x146>
		}else{
			HAL_GPIO_WritePin(GPIOB, wellmotor_relay_Pin, GPIO_PIN_SET);
 8002c72:	2201      	movs	r2, #1
 8002c74:	2104      	movs	r1, #4
 8002c76:	4846      	ldr	r0, [pc, #280]	; (8002d90 <HAL_ADC_ConvCpltCallback+0x254>)
 8002c78:	f004 f86e 	bl	8006d58 <HAL_GPIO_WritePin>
			wellrelay = 0;
 8002c7c:	4b45      	ldr	r3, [pc, #276]	; (8002d94 <HAL_ADC_ConvCpltCallback+0x258>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
		}
		rain = (adc_result_dma[4] < 2600) ? 1:0;
 8002c82:	4b3e      	ldr	r3, [pc, #248]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002c84:	891b      	ldrh	r3, [r3, #8]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	f640 2227 	movw	r2, #2599	; 0xa27
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	bf94      	ite	ls
 8002c90:	2301      	movls	r3, #1
 8002c92:	2300      	movhi	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <HAL_ADC_ConvCpltCallback+0x25c>)
 8002c9a:	601a      	str	r2, [r3, #0]
		daylight = (adc_result_dma[4] > 3000) ? 1:0;
 8002c9c:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002c9e:	891b      	ldrh	r3, [r3, #8]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	bf8c      	ite	hi
 8002caa:	2301      	movhi	r3, #1
 8002cac:	2300      	movls	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b3a      	ldr	r3, [pc, #232]	; (8002d9c <HAL_ADC_ConvCpltCallback+0x260>)
 8002cb4:	601a      	str	r2, [r3, #0]
		waterflow = ((adc_result_dma[6])*100/4000);
 8002cb6:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <HAL_ADC_ConvCpltCallback+0x240>)
 8002cb8:	899b      	ldrh	r3, [r3, #12]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4a33      	ldr	r2, [pc, #204]	; (8002d8c <HAL_ADC_ConvCpltCallback+0x250>)
 8002cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8002cc2:	1112      	asrs	r2, r2, #4
 8002cc4:	17db      	asrs	r3, r3, #31
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	4a35      	ldr	r2, [pc, #212]	; (8002da0 <HAL_ADC_ConvCpltCallback+0x264>)
 8002cca:	6013      	str	r3, [r2, #0]

		//Produces Line and Total Average : adc_line_avg and adc_total_moist_avg
		adc_total_moist_avg = 0;
 8002ccc:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <HAL_ADC_ConvCpltCallback+0x268>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
		int y =0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
		int per_line_offset = moist_per_line[0];
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	60fb      	str	r3, [r7, #12]
		for(int x = 0; x < adc_line_number; x++){
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	e03b      	b.n	8002d58 <HAL_ADC_ConvCpltCallback+0x21c>
			adc_line_avg[x] = 0;
 8002ce0:	4a31      	ldr	r2, [pc, #196]	; (8002da8 <HAL_ADC_ConvCpltCallback+0x26c>)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(; y < per_line_offset; y++){
 8002cea:	e00f      	b.n	8002d0c <HAL_ADC_ConvCpltCallback+0x1d0>
				adc_line_avg[x] += adc_result_percentage[y];
 8002cec:	4a2e      	ldr	r2, [pc, #184]	; (8002da8 <HAL_ADC_ConvCpltCallback+0x26c>)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cf4:	4923      	ldr	r1, [pc, #140]	; (8002d84 <HAL_ADC_ConvCpltCallback+0x248>)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cfc:	441a      	add	r2, r3
 8002cfe:	492a      	ldr	r1, [pc, #168]	; (8002da8 <HAL_ADC_ConvCpltCallback+0x26c>)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(; y < per_line_offset; y++){
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	dbeb      	blt.n	8002cec <HAL_ADC_ConvCpltCallback+0x1b0>
			}
			adc_line_avg[x] /= moist_per_line[x];
 8002d14:	4a24      	ldr	r2, [pc, #144]	; (8002da8 <HAL_ADC_ConvCpltCallback+0x26c>)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d1c:	4923      	ldr	r1, [pc, #140]	; (8002dac <HAL_ADC_ConvCpltCallback+0x270>)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d24:	fb92 f2f3 	sdiv	r2, r2, r3
 8002d28:	491f      	ldr	r1, [pc, #124]	; (8002da8 <HAL_ADC_ConvCpltCallback+0x26c>)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		   per_line_offset += moist_per_line[x+1];
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	3301      	adds	r3, #1
 8002d34:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <HAL_ADC_ConvCpltCallback+0x270>)
 8002d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
		   adc_total_moist_avg += adc_line_avg[x];
 8002d40:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_ADC_ConvCpltCallback+0x26c>)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <HAL_ADC_ConvCpltCallback+0x268>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <HAL_ADC_ConvCpltCallback+0x268>)
 8002d50:	6013      	str	r3, [r2, #0]
		for(int x = 0; x < adc_line_number; x++){
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	3301      	adds	r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	dbbf      	blt.n	8002ce0 <HAL_ADC_ConvCpltCallback+0x1a4>
		}
		adc_total_moist_avg /= adc_line_number;
 8002d60:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <HAL_ADC_ConvCpltCallback+0x268>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2202      	movs	r2, #2
 8002d66:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d6a:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <HAL_ADC_ConvCpltCallback+0x268>)
 8002d6c:	6013      	str	r3, [r2, #0]
	}
}
 8002d6e:	bf00      	nop
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	2000294c 	.word	0x2000294c
 8002d7c:	20000d7c 	.word	0x20000d7c
 8002d80:	164a893b 	.word	0x164a893b
 8002d84:	20003178 	.word	0x20003178
 8002d88:	8d3dcb09 	.word	0x8d3dcb09
 8002d8c:	66666667 	.word	0x66666667
 8002d90:	40020400 	.word	0x40020400
 8002d94:	20000300 	.word	0x20000300
 8002d98:	20000314 	.word	0x20000314
 8002d9c:	20000318 	.word	0x20000318
 8002da0:	20000320 	.word	0x20000320
 8002da4:	20000244 	.word	0x20000244
 8002da8:	2000023c 	.word	0x2000023c
 8002dac:	0800d6d0 	.word	0x0800d6d0

08002db0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	80fb      	strh	r3, [r7, #6]
	menu_lcd_refresh = 1;
 8002dba:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <HAL_GPIO_EXTI_Callback+0x48>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
    if(GPIO_Pin == button_up_Pin){
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d103      	bne.n	8002dce <HAL_GPIO_EXTI_Callback+0x1e>
    	menu_up = 1;
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <HAL_GPIO_EXTI_Callback+0x4c>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]
    }else if(GPIO_Pin == button_down_Pin){
    	menu_down = 1;
    }else if(GPIO_Pin == button_press_Pin){
    	menu_click = 1;
    }
}
 8002dcc:	e00d      	b.n	8002dea <HAL_GPIO_EXTI_Callback+0x3a>
    }else if(GPIO_Pin == button_down_Pin){
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d103      	bne.n	8002ddc <HAL_GPIO_EXTI_Callback+0x2c>
    	menu_down = 1;
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_GPIO_EXTI_Callback+0x50>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
}
 8002dda:	e006      	b.n	8002dea <HAL_GPIO_EXTI_Callback+0x3a>
    }else if(GPIO_Pin == button_press_Pin){
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de2:	d102      	bne.n	8002dea <HAL_GPIO_EXTI_Callback+0x3a>
    	menu_click = 1;
 8002de4:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <HAL_GPIO_EXTI_Callback+0x54>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000248 	.word	0x20000248
 8002dfc:	20000250 	.word	0x20000250
 8002e00:	20000254 	.word	0x20000254
 8002e04:	2000024c 	.word	0x2000024c

08002e08 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	if(global_planner_active){
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RTC_AlarmAEventCallback+0x22>
		global_planner_start = 1;
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <HAL_RTC_AlarmAEventCallback+0x30>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
		mode_planner(0, global_planner_start);
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RTC_AlarmAEventCallback+0x30>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4619      	mov	r1, r3
 8002e24:	2000      	movs	r0, #0
 8002e26:	f000 f9ab 	bl	8003180 <mode_planner>
	}
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	2000001c 	.word	0x2000001c
 8002e38:	20000264 	.word	0x20000264

08002e3c <Set_Pin_Output>:
/*-----------------INTERRUPTS END-----------------------*/


/*-----------------DHT11 BEGIN--------------------------*/
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002e64:	f107 030c 	add.w	r3, r7, #12
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f003 fdd8 	bl	8006a20 <HAL_GPIO_Init>
}
 8002e70:	bf00      	nop
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 030c 	add.w	r3, r7, #12
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002ea0:	f107 030c 	add.w	r3, r7, #12
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f003 fdba 	bl	8006a20 <HAL_GPIO_Init>
}
 8002eac:	bf00      	nop
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <DHT11_Start>:

void DHT11_Start (void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8002eb8:	2120      	movs	r1, #32
 8002eba:	480d      	ldr	r0, [pc, #52]	; (8002ef0 <DHT11_Start+0x3c>)
 8002ebc:	f7ff ffbe 	bl	8002e3c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);   // pull the pin low
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2120      	movs	r1, #32
 8002ec4:	480a      	ldr	r0, [pc, #40]	; (8002ef0 <DHT11_Start+0x3c>)
 8002ec6:	f003 ff47 	bl	8006d58 <HAL_GPIO_WritePin>
	delay_us (18000);   // wait for 18ms
 8002eca:	f244 6050 	movw	r0, #18000	; 0x4650
 8002ece:	f7ff fe1b 	bl	8002b08 <delay_us>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);   // pull the pin high
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	2120      	movs	r1, #32
 8002ed6:	4806      	ldr	r0, [pc, #24]	; (8002ef0 <DHT11_Start+0x3c>)
 8002ed8:	f003 ff3e 	bl	8006d58 <HAL_GPIO_WritePin>
    delay_us (20);   // wait for 20us
 8002edc:	2014      	movs	r0, #20
 8002ede:	f7ff fe13 	bl	8002b08 <delay_us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8002ee2:	2120      	movs	r1, #32
 8002ee4:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <DHT11_Start+0x3c>)
 8002ee6:	f7ff ffc7 	bl	8002e78 <Set_Pin_Input>
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40020400 	.word	0x40020400

08002ef4 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	71fb      	strb	r3, [r7, #7]
	delay_us (40);
 8002efe:	2028      	movs	r0, #40	; 0x28
 8002f00:	f7ff fe02 	bl	8002b08 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8002f04:	2120      	movs	r1, #32
 8002f06:	4811      	ldr	r0, [pc, #68]	; (8002f4c <DHT11_Check_Response+0x58>)
 8002f08:	f003 ff0e 	bl	8006d28 <HAL_GPIO_ReadPin>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10e      	bne.n	8002f30 <DHT11_Check_Response+0x3c>
	{
		delay_us (80);
 8002f12:	2050      	movs	r0, #80	; 0x50
 8002f14:	f7ff fdf8 	bl	8002b08 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8002f18:	2120      	movs	r1, #32
 8002f1a:	480c      	ldr	r0, [pc, #48]	; (8002f4c <DHT11_Check_Response+0x58>)
 8002f1c:	f003 ff04 	bl	8006d28 <HAL_GPIO_ReadPin>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <DHT11_Check_Response+0x38>
 8002f26:	2301      	movs	r3, #1
 8002f28:	71fb      	strb	r3, [r7, #7]
 8002f2a:	e001      	b.n	8002f30 <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 8002f2c:	23ff      	movs	r3, #255	; 0xff
 8002f2e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8002f30:	bf00      	nop
 8002f32:	2120      	movs	r1, #32
 8002f34:	4805      	ldr	r0, [pc, #20]	; (8002f4c <DHT11_Check_Response+0x58>)
 8002f36:	f003 fef7 	bl	8006d28 <HAL_GPIO_ReadPin>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f8      	bne.n	8002f32 <DHT11_Check_Response+0x3e>

	return Response;
 8002f40:	79fb      	ldrb	r3, [r7, #7]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40020400 	.word	0x40020400

08002f50 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	71bb      	strb	r3, [r7, #6]
 8002f5a:	e037      	b.n	8002fcc <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8002f5c:	bf00      	nop
 8002f5e:	2120      	movs	r1, #32
 8002f60:	481e      	ldr	r0, [pc, #120]	; (8002fdc <DHT11_Read+0x8c>)
 8002f62:	f003 fee1 	bl	8006d28 <HAL_GPIO_ReadPin>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f8      	beq.n	8002f5e <DHT11_Read+0xe>
		delay_us (40);   // wait for 40 us
 8002f6c:	2028      	movs	r0, #40	; 0x28
 8002f6e:	f7ff fdcb 	bl	8002b08 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8002f72:	2120      	movs	r1, #32
 8002f74:	4819      	ldr	r0, [pc, #100]	; (8002fdc <DHT11_Read+0x8c>)
 8002f76:	f003 fed7 	bl	8006d28 <HAL_GPIO_ReadPin>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10e      	bne.n	8002f9e <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8002f80:	79bb      	ldrb	r3, [r7, #6]
 8002f82:	f1c3 0307 	rsb	r3, r3, #7
 8002f86:	2201      	movs	r2, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	b25a      	sxtb	r2, r3
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	4013      	ands	r3, r2
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	71fb      	strb	r3, [r7, #7]
 8002f9c:	e00b      	b.n	8002fb6 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8002f9e:	79bb      	ldrb	r3, [r7, #6]
 8002fa0:	f1c3 0307 	rsb	r3, r3, #7
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	b25a      	sxtb	r2, r3
 8002fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	b25b      	sxtb	r3, r3
 8002fb4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8002fb6:	bf00      	nop
 8002fb8:	2120      	movs	r1, #32
 8002fba:	4808      	ldr	r0, [pc, #32]	; (8002fdc <DHT11_Read+0x8c>)
 8002fbc:	f003 feb4 	bl	8006d28 <HAL_GPIO_ReadPin>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f8      	bne.n	8002fb8 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8002fc6:	79bb      	ldrb	r3, [r7, #6]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	71bb      	strb	r3, [r7, #6]
 8002fcc:	79bb      	ldrb	r3, [r7, #6]
 8002fce:	2b07      	cmp	r3, #7
 8002fd0:	d9c4      	bls.n	8002f5c <DHT11_Read+0xc>
	}
	return i;
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40020400 	.word	0x40020400

08002fe0 <DHT11_get_value>:

void DHT11_get_value(){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
	DHT11_Start();
 8002fe4:	f7ff ff66 	bl	8002eb4 <DHT11_Start>
	Presence = DHT11_Check_Response();
 8002fe8:	f7ff ff84 	bl	8002ef4 <DHT11_Check_Response>
 8002fec:	4603      	mov	r3, r0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	; (800306c <DHT11_get_value+0x8c>)
 8002ff2:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read ();
 8002ff4:	f7ff ffac 	bl	8002f50 <DHT11_Read>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <DHT11_get_value+0x90>)
 8002ffe:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read ();
 8003000:	f7ff ffa6 	bl	8002f50 <DHT11_Read>
 8003004:	4603      	mov	r3, r0
 8003006:	461a      	mov	r2, r3
 8003008:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <DHT11_get_value+0x94>)
 800300a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read ();
 800300c:	f7ff ffa0 	bl	8002f50 <DHT11_Read>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	4b18      	ldr	r3, [pc, #96]	; (8003078 <DHT11_get_value+0x98>)
 8003016:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read ();
 8003018:	f7ff ff9a 	bl	8002f50 <DHT11_Read>
 800301c:	4603      	mov	r3, r0
 800301e:	461a      	mov	r2, r3
 8003020:	4b16      	ldr	r3, [pc, #88]	; (800307c <DHT11_get_value+0x9c>)
 8003022:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 8003024:	f7ff ff94 	bl	8002f50 <DHT11_Read>
 8003028:	4603      	mov	r3, r0
 800302a:	b29a      	uxth	r2, r3
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <DHT11_get_value+0xa0>)
 800302e:	801a      	strh	r2, [r3, #0]
	TEMP = Temp_byte1;
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <DHT11_get_value+0x98>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b29a      	uxth	r2, r3
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <DHT11_get_value+0xa4>)
 8003038:	801a      	strh	r2, [r3, #0]
	RH = Rh_byte1;
 800303a:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <DHT11_get_value+0x90>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b29a      	uxth	r2, r3
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <DHT11_get_value+0xa8>)
 8003042:	801a      	strh	r2, [r3, #0]
	inst_temperature = (float) TEMP;
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <DHT11_get_value+0xa4>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	ee07 3a90 	vmov	s15, r3
 800304c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <DHT11_get_value+0xac>)
 8003052:	edc3 7a00 	vstr	s15, [r3]
	inst_humidity = (float) RH;
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <DHT11_get_value+0xa8>)
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <DHT11_get_value+0xb0>)
 8003064:	edc3 7a00 	vstr	s15, [r3]
}
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}
 800306c:	200002fc 	.word	0x200002fc
 8003070:	20001cb8 	.word	0x20001cb8
 8003074:	20003618 	.word	0x20003618
 8003078:	20003164 	.word	0x20003164
 800307c:	20004e50 	.word	0x20004e50
 8003080:	20004a62 	.word	0x20004a62
 8003084:	200023cc 	.word	0x200023cc
 8003088:	20001cba 	.word	0x20001cba
 800308c:	200002f4 	.word	0x200002f4
 8003090:	200002f8 	.word	0x200002f8

08003094 <mode_manual>:

/*-----------------DHT11 END----------------------------*/

/*-----------------MODE FUNCTIONS BEGIN-----------------*/
void mode_manual(int start){
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	if(start){
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d02d      	beq.n	80030fe <mode_manual+0x6a>
		  current_mode = 1;
 80030a2:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <mode_manual+0xcc>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
		  donewatering = 0;
 80030a8:	4b2e      	ldr	r3, [pc, #184]	; (8003164 <mode_manual+0xd0>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin, GPIO_PIN_RESET);
 80030ae:	2200      	movs	r2, #0
 80030b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030b4:	482c      	ldr	r0, [pc, #176]	; (8003168 <mode_manual+0xd4>)
 80030b6:	f003 fe4f 	bl	8006d58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, wellmotor_relay_Pin, GPIO_PIN_RESET);
 80030ba:	2200      	movs	r2, #0
 80030bc:	2104      	movs	r1, #4
 80030be:	482b      	ldr	r0, [pc, #172]	; (800316c <mode_manual+0xd8>)
 80030c0:	f003 fe4a 	bl	8006d58 <HAL_GPIO_WritePin>
		  wellrelay = 1;
 80030c4:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <mode_manual+0xdc>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
		  tankrelay = 1;
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <mode_manual+0xe0>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
		  delay_us (5000);
 80030d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80030d4:	f7ff fd18 	bl	8002b08 <delay_us>
		  HAL_GPIO_WritePin(GPIOC, line0_relay_Pin, GPIO_PIN_RESET);
 80030d8:	2200      	movs	r2, #0
 80030da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030de:	4822      	ldr	r0, [pc, #136]	; (8003168 <mode_manual+0xd4>)
 80030e0:	f003 fe3a 	bl	8006d58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, line1_relay_Pin, GPIO_PIN_RESET);
 80030e4:	2200      	movs	r2, #0
 80030e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030ea:	481f      	ldr	r0, [pc, #124]	; (8003168 <mode_manual+0xd4>)
 80030ec:	f003 fe34 	bl	8006d58 <HAL_GPIO_WritePin>
		  line1relay = 1;
 80030f0:	4b21      	ldr	r3, [pc, #132]	; (8003178 <mode_manual+0xe4>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
		  line2relay = 1;
 80030f6:	4b21      	ldr	r3, [pc, #132]	; (800317c <mode_manual+0xe8>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, line0_relay_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOC, line1_relay_Pin, GPIO_PIN_SET);
		  line1relay = 0;
		  line2relay = 0;
	}
}
 80030fc:	e02c      	b.n	8003158 <mode_manual+0xc4>
		current_mode = 0;
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <mode_manual+0xcc>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
		donewatering = 1;
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <mode_manual+0xd0>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin, GPIO_PIN_SET);
 800310a:	2201      	movs	r2, #1
 800310c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003110:	4815      	ldr	r0, [pc, #84]	; (8003168 <mode_manual+0xd4>)
 8003112:	f003 fe21 	bl	8006d58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, wellmotor_relay_Pin, GPIO_PIN_SET);
 8003116:	2201      	movs	r2, #1
 8003118:	2104      	movs	r1, #4
 800311a:	4814      	ldr	r0, [pc, #80]	; (800316c <mode_manual+0xd8>)
 800311c:	f003 fe1c 	bl	8006d58 <HAL_GPIO_WritePin>
		  wellrelay = 0;
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <mode_manual+0xdc>)
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
		  tankrelay = 0;
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <mode_manual+0xe0>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
		  delay_us (5000);
 800312c:	f241 3088 	movw	r0, #5000	; 0x1388
 8003130:	f7ff fcea 	bl	8002b08 <delay_us>
		  HAL_GPIO_WritePin(GPIOC, line0_relay_Pin, GPIO_PIN_SET);
 8003134:	2201      	movs	r2, #1
 8003136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800313a:	480b      	ldr	r0, [pc, #44]	; (8003168 <mode_manual+0xd4>)
 800313c:	f003 fe0c 	bl	8006d58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, line1_relay_Pin, GPIO_PIN_SET);
 8003140:	2201      	movs	r2, #1
 8003142:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003146:	4808      	ldr	r0, [pc, #32]	; (8003168 <mode_manual+0xd4>)
 8003148:	f003 fe06 	bl	8006d58 <HAL_GPIO_WritePin>
		  line1relay = 0;
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <mode_manual+0xe4>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
		  line2relay = 0;
 8003152:	4b0a      	ldr	r3, [pc, #40]	; (800317c <mode_manual+0xe8>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	2000031c 	.word	0x2000031c
 8003164:	20000310 	.word	0x20000310
 8003168:	40020800 	.word	0x40020800
 800316c:	40020400 	.word	0x40020400
 8003170:	20000300 	.word	0x20000300
 8003174:	20000304 	.word	0x20000304
 8003178:	20000308 	.word	0x20000308
 800317c:	2000030c 	.word	0x2000030c

08003180 <mode_planner>:

void mode_planner(int auto_current_mode, int start){
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
	if(auto_current_mode == 0 && start == 1){
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f040 810b 	bne.w	80033a8 <mode_planner+0x228>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 8107 	bne.w	80033a8 <mode_planner+0x228>
		current_mode = 2;
 800319a:	4b85      	ldr	r3, [pc, #532]	; (80033b0 <mode_planner+0x230>)
 800319c:	2202      	movs	r2, #2
 800319e:	601a      	str	r2, [r3, #0]
		donewatering = 0;
 80031a0:	4b84      	ldr	r3, [pc, #528]	; (80033b4 <mode_planner+0x234>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin, GPIO_PIN_RESET);
 80031a6:	2200      	movs	r2, #0
 80031a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031ac:	4882      	ldr	r0, [pc, #520]	; (80033b8 <mode_planner+0x238>)
 80031ae:	f003 fdd3 	bl	8006d58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, wellmotor_relay_Pin, GPIO_PIN_RESET);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2104      	movs	r1, #4
 80031b6:	4881      	ldr	r0, [pc, #516]	; (80033bc <mode_planner+0x23c>)
 80031b8:	f003 fdce 	bl	8006d58 <HAL_GPIO_WritePin>
		wellrelay = 1;
 80031bc:	4b80      	ldr	r3, [pc, #512]	; (80033c0 <mode_planner+0x240>)
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
		tankrelay = 1;
 80031c2:	4b80      	ldr	r3, [pc, #512]	; (80033c4 <mode_planner+0x244>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
		delay_us(1000);
 80031c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031cc:	f7ff fc9c 	bl	8002b08 <delay_us>
		HAL_GPIO_WritePin(GPIOC, line0_relay_Pin, GPIO_PIN_RESET);
 80031d0:	2200      	movs	r2, #0
 80031d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031d6:	4878      	ldr	r0, [pc, #480]	; (80033b8 <mode_planner+0x238>)
 80031d8:	f003 fdbe 	bl	8006d58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, line1_relay_Pin, GPIO_PIN_RESET);
 80031dc:	2200      	movs	r2, #0
 80031de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031e2:	4875      	ldr	r0, [pc, #468]	; (80033b8 <mode_planner+0x238>)
 80031e4:	f003 fdb8 	bl	8006d58 <HAL_GPIO_WritePin>
		line1relay = 1;
 80031e8:	4b77      	ldr	r3, [pc, #476]	; (80033c8 <mode_planner+0x248>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
		line2relay = 1;
 80031ee:	4b77      	ldr	r3, [pc, #476]	; (80033cc <mode_planner+0x24c>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
		for(int x = 0; x < adc_line_number; x++){
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e065      	b.n	80032c6 <mode_planner+0x146>
			//for(int x = 0; x < moist_per_line[a]; x++){
			if(adc_line_avg[x] >= planner_line_compare[x]){
 80031fa:	4a75      	ldr	r2, [pc, #468]	; (80033d0 <mode_planner+0x250>)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003202:	4974      	ldr	r1, [pc, #464]	; (80033d4 <mode_planner+0x254>)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800320a:	429a      	cmp	r2, r3
 800320c:	db2c      	blt.n	8003268 <mode_planner+0xe8>
				relay_set[x] = 1;	//Debug
 800320e:	4a72      	ldr	r2, [pc, #456]	; (80033d8 <mode_planner+0x258>)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2101      	movs	r1, #1
 8003214:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				relay_end_flag = (relay_end_flag == 2) ? 2:relay_end_flag+1;
 8003218:	4b70      	ldr	r3, [pc, #448]	; (80033dc <mode_planner+0x25c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d003      	beq.n	8003228 <mode_planner+0xa8>
 8003220:	4b6e      	ldr	r3, [pc, #440]	; (80033dc <mode_planner+0x25c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3301      	adds	r3, #1
 8003226:	e000      	b.n	800322a <mode_planner+0xaa>
 8003228:	2302      	movs	r3, #2
 800322a:	4a6c      	ldr	r2, [pc, #432]	; (80033dc <mode_planner+0x25c>)
 800322c:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOC, line_relays[x], GPIO_PIN_SET);
 800322e:	4a6c      	ldr	r2, [pc, #432]	; (80033e0 <mode_planner+0x260>)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003236:	b29b      	uxth	r3, r3
 8003238:	2201      	movs	r2, #1
 800323a:	4619      	mov	r1, r3
 800323c:	485e      	ldr	r0, [pc, #376]	; (80033b8 <mode_planner+0x238>)
 800323e:	f003 fd8b 	bl	8006d58 <HAL_GPIO_WritePin>
				line1relay = (x) ? 1:0;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	4b5d      	ldr	r3, [pc, #372]	; (80033c8 <mode_planner+0x248>)
 8003252:	601a      	str	r2, [r3, #0]
				line2relay = (x) ? 0:1;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	bf0c      	ite	eq
 800325a:	2301      	moveq	r3, #1
 800325c:	2300      	movne	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	4b5a      	ldr	r3, [pc, #360]	; (80033cc <mode_planner+0x24c>)
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e02b      	b.n	80032c0 <mode_planner+0x140>
			}else{
				relay_set[x] = 0;	//Debug
 8003268:	4a5b      	ldr	r2, [pc, #364]	; (80033d8 <mode_planner+0x258>)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2100      	movs	r1, #0
 800326e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				relay_end_flag = (relay_end_flag) ? relay_end_flag-1:0;
 8003272:	4b5a      	ldr	r3, [pc, #360]	; (80033dc <mode_planner+0x25c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <mode_planner+0x102>
 800327a:	4b58      	ldr	r3, [pc, #352]	; (80033dc <mode_planner+0x25c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3b01      	subs	r3, #1
 8003280:	e000      	b.n	8003284 <mode_planner+0x104>
 8003282:	2300      	movs	r3, #0
 8003284:	4a55      	ldr	r2, [pc, #340]	; (80033dc <mode_planner+0x25c>)
 8003286:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOC, line_relays[x], GPIO_PIN_RESET);
 8003288:	4a55      	ldr	r2, [pc, #340]	; (80033e0 <mode_planner+0x260>)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003290:	b29b      	uxth	r3, r3
 8003292:	2200      	movs	r2, #0
 8003294:	4619      	mov	r1, r3
 8003296:	4848      	ldr	r0, [pc, #288]	; (80033b8 <mode_planner+0x238>)
 8003298:	f003 fd5e 	bl	8006d58 <HAL_GPIO_WritePin>
				line1relay = (x) ? 0:1;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <mode_planner+0x248>)
 80032ac:	601a      	str	r2, [r3, #0]
				line2relay = (x) ? 1:0;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	4b43      	ldr	r3, [pc, #268]	; (80033cc <mode_planner+0x24c>)
 80032be:	601a      	str	r2, [r3, #0]
		for(int x = 0; x < adc_line_number; x++){
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3301      	adds	r3, #1
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	2202      	movs	r2, #2
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	4293      	cmp	r3, r2
 80032cc:	db95      	blt.n	80031fa <mode_planner+0x7a>
			}
			//}
		}
		if(relay_end_flag == 2){
 80032ce:	4b43      	ldr	r3, [pc, #268]	; (80033dc <mode_planner+0x25c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d168      	bne.n	80033a8 <mode_planner+0x228>
			for(int a = 0; a < 2; a++){
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	e007      	b.n	80032ec <mode_planner+0x16c>
				relay_set[a] = 0;	//Debug
 80032dc:	4a3e      	ldr	r2, [pc, #248]	; (80033d8 <mode_planner+0x258>)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	2100      	movs	r1, #0
 80032e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int a = 0; a < 2; a++){
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	3301      	adds	r3, #1
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	ddf4      	ble.n	80032dc <mode_planner+0x15c>
			}
			donewatering = 1;
 80032f2:	4b30      	ldr	r3, [pc, #192]	; (80033b4 <mode_planner+0x234>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
			global_planner_start = 0;
 80032f8:	4b3a      	ldr	r3, [pc, #232]	; (80033e4 <mode_planner+0x264>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
			relay_end_flag = 0;
 80032fe:	4b37      	ldr	r3, [pc, #220]	; (80033dc <mode_planner+0x25c>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin, GPIO_PIN_SET);
 8003304:	2201      	movs	r2, #1
 8003306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800330a:	482b      	ldr	r0, [pc, #172]	; (80033b8 <mode_planner+0x238>)
 800330c:	f003 fd24 	bl	8006d58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, wellmotor_relay_Pin, GPIO_PIN_SET);
 8003310:	2201      	movs	r2, #1
 8003312:	2104      	movs	r1, #4
 8003314:	4829      	ldr	r0, [pc, #164]	; (80033bc <mode_planner+0x23c>)
 8003316:	f003 fd1f 	bl	8006d58 <HAL_GPIO_WritePin>
			wellrelay = 0;
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <mode_planner+0x240>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
			tankrelay = 0;
 8003320:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <mode_planner+0x244>)
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
			delay_us(1000);
 8003326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800332a:	f7ff fbed 	bl	8002b08 <delay_us>
			HAL_GPIO_WritePin(GPIOC, line0_relay_Pin, GPIO_PIN_SET);
 800332e:	2201      	movs	r2, #1
 8003330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003334:	4820      	ldr	r0, [pc, #128]	; (80033b8 <mode_planner+0x238>)
 8003336:	f003 fd0f 	bl	8006d58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, line1_relay_Pin, GPIO_PIN_SET);
 800333a:	2201      	movs	r2, #1
 800333c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003340:	481d      	ldr	r0, [pc, #116]	; (80033b8 <mode_planner+0x238>)
 8003342:	f003 fd09 	bl	8006d58 <HAL_GPIO_WritePin>
			line1relay = 0;
 8003346:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <mode_planner+0x248>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
			line2relay = 0;
 800334c:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <mode_planner+0x24c>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
			current_mode = 0;
 8003352:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <mode_planner+0x230>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

			//Alarm for the Next Day
			for(int x = bcdToDec(current_wday-1); x <7; x++){
 8003358:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <mode_planner+0x268>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3b01      	subs	r3, #1
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f902 	bl	8003568 <bcdToDec>
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	e01c      	b.n	80033a2 <mode_planner+0x222>
				if(planner_weekdays[x] == 1){
 8003368:	4a20      	ldr	r2, [pc, #128]	; (80033ec <mode_planner+0x26c>)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d113      	bne.n	800339c <mode_planner+0x21c>
					set_alarm(decToBcd(planner_start_time_hours), decToBcd(planner_start_time_mins), x+1);
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <mode_planner+0x270>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f913 	bl	80035a4 <decToBcd>
 800337e:	4604      	mov	r4, r0
 8003380:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <mode_planner+0x274>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f90d 	bl	80035a4 <decToBcd>
 800338a:	4601      	mov	r1, r0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3301      	adds	r3, #1
 8003390:	461a      	mov	r2, r3
 8003392:	4620      	mov	r0, r4
 8003394:	f000 f962 	bl	800365c <set_alarm>
					break;
 8003398:	bf00      	nop
				}
			}
		}
	}
}
 800339a:	e005      	b.n	80033a8 <mode_planner+0x228>
			for(int x = bcdToDec(current_wday-1); x <7; x++){
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3301      	adds	r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b06      	cmp	r3, #6
 80033a6:	dddf      	ble.n	8003368 <mode_planner+0x1e8>
}
 80033a8:	bf00      	nop
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd90      	pop	{r4, r7, pc}
 80033b0:	2000031c 	.word	0x2000031c
 80033b4:	20000310 	.word	0x20000310
 80033b8:	40020800 	.word	0x40020800
 80033bc:	40020400 	.word	0x40020400
 80033c0:	20000300 	.word	0x20000300
 80033c4:	20000304 	.word	0x20000304
 80033c8:	20000308 	.word	0x20000308
 80033cc:	2000030c 	.word	0x2000030c
 80033d0:	2000023c 	.word	0x2000023c
 80033d4:	2000000c 	.word	0x2000000c
 80033d8:	20003214 	.word	0x20003214
 80033dc:	20000260 	.word	0x20000260
 80033e0:	20000014 	.word	0x20000014
 80033e4:	20000264 	.word	0x20000264
 80033e8:	200002f0 	.word	0x200002f0
 80033ec:	20000268 	.word	0x20000268
 80033f0:	20000020 	.word	0x20000020
 80033f4:	20000024 	.word	0x20000024

080033f8 <mode_auto>:

void mode_auto(int start){
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
						//evet: moda gore sula
						///hayir: skip
*/

//Function is called with alarm
	current_mode = 3;
 8003400:	4b4e      	ldr	r3, [pc, #312]	; (800353c <mode_auto+0x144>)
 8003402:	2203      	movs	r2, #3
 8003404:	601a      	str	r2, [r3, #0]
	//int auto_hours = 0;
	//int auto_mins = 0;
//	int auto_secs = 0;

	if(adc_result_dma[4] > 2000 || adc_total_moist_avg > 80 || debug_auto_case == 4){
 8003406:	4b4e      	ldr	r3, [pc, #312]	; (8003540 <mode_auto+0x148>)
 8003408:	891b      	ldrh	r3, [r3, #8]
 800340a:	b29b      	uxth	r3, r3
 800340c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003410:	d807      	bhi.n	8003422 <mode_auto+0x2a>
 8003412:	4b4c      	ldr	r3, [pc, #304]	; (8003544 <mode_auto+0x14c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b50      	cmp	r3, #80	; 0x50
 8003418:	dc03      	bgt.n	8003422 <mode_auto+0x2a>
 800341a:	4b4b      	ldr	r3, [pc, #300]	; (8003548 <mode_auto+0x150>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b04      	cmp	r3, #4
 8003420:	d140      	bne.n	80034a4 <mode_auto+0xac>
		//Skip Day
		auto_week_skip_vector[currDate.WeekDay-1] = 1;
 8003422:	4b4a      	ldr	r3, [pc, #296]	; (800354c <mode_auto+0x154>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	3b01      	subs	r3, #1
 8003428:	4a49      	ldr	r2, [pc, #292]	; (8003550 <mode_auto+0x158>)
 800342a:	2101      	movs	r1, #1
 800342c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		skipday = 1;
 8003430:	4b48      	ldr	r3, [pc, #288]	; (8003554 <mode_auto+0x15c>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]

		if(week_reset_flag){
 8003436:	4b48      	ldr	r3, [pc, #288]	; (8003558 <mode_auto+0x160>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <mode_auto+0x5c>
			if(currDate.WeekDay == reset_day){
 800343e:	4b43      	ldr	r3, [pc, #268]	; (800354c <mode_auto+0x154>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	4b45      	ldr	r3, [pc, #276]	; (800355c <mode_auto+0x164>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d150      	bne.n	80034ee <mode_auto+0xf6>
				week_reset_flag = 1;
 800344c:	4b42      	ldr	r3, [pc, #264]	; (8003558 <mode_auto+0x160>)
 800344e:	2201      	movs	r2, #1
 8003450:	601a      	str	r2, [r3, #0]
		if(week_reset_flag){
 8003452:	e04c      	b.n	80034ee <mode_auto+0xf6>
			}
		}else{
			//Repeated: Skip Rest of the Week
			if(auto_week_skip_vector[(currDate.WeekDay == 1) ? 6:currDate.WeekDay-2] == 1){ //One day before
 8003454:	4b3d      	ldr	r3, [pc, #244]	; (800354c <mode_auto+0x154>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d003      	beq.n	8003464 <mode_auto+0x6c>
 800345c:	4b3b      	ldr	r3, [pc, #236]	; (800354c <mode_auto+0x154>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	3b02      	subs	r3, #2
 8003462:	e000      	b.n	8003466 <mode_auto+0x6e>
 8003464:	2306      	movs	r3, #6
 8003466:	4a3a      	ldr	r2, [pc, #232]	; (8003550 <mode_auto+0x158>)
 8003468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d13e      	bne.n	80034ee <mode_auto+0xf6>
				reset_day = currDate.WeekDay;
 8003470:	4b36      	ldr	r3, [pc, #216]	; (800354c <mode_auto+0x154>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <mode_auto+0x164>)
 8003478:	601a      	str	r2, [r3, #0]
				week_reset_flag = 1;
 800347a:	4b37      	ldr	r3, [pc, #220]	; (8003558 <mode_auto+0x160>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]
				for(int x = 0; x <7; x ++){
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	e00a      	b.n	800349c <mode_auto+0xa4>
					skipday = 2;
 8003486:	4b33      	ldr	r3, [pc, #204]	; (8003554 <mode_auto+0x15c>)
 8003488:	2202      	movs	r2, #2
 800348a:	601a      	str	r2, [r3, #0]
					auto_week_skip_vector[x] = 1;
 800348c:	4a30      	ldr	r2, [pc, #192]	; (8003550 <mode_auto+0x158>)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2101      	movs	r1, #1
 8003492:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int x = 0; x <7; x ++){
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3301      	adds	r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b06      	cmp	r3, #6
 80034a0:	ddf1      	ble.n	8003486 <mode_auto+0x8e>
		if(week_reset_flag){
 80034a2:	e024      	b.n	80034ee <mode_auto+0xf6>
				}
			}
		}
	}else{
		if(week_reset_flag){
 80034a4:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <mode_auto+0x160>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d018      	beq.n	80034de <mode_auto+0xe6>
			if(currDate.WeekDay == reset_day){
 80034ac:	4b27      	ldr	r3, [pc, #156]	; (800354c <mode_auto+0x154>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b2a      	ldr	r3, [pc, #168]	; (800355c <mode_auto+0x164>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d11a      	bne.n	80034f0 <mode_auto+0xf8>
				week_reset_flag = 0;
 80034ba:	4b27      	ldr	r3, [pc, #156]	; (8003558 <mode_auto+0x160>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
				for(int x = 0; x <7; x ++){
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	e007      	b.n	80034d6 <mode_auto+0xde>
					auto_week_skip_vector[x] = 0;
 80034c6:	4a22      	ldr	r2, [pc, #136]	; (8003550 <mode_auto+0x158>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2100      	movs	r1, #0
 80034cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int x = 0; x <7; x ++){
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	3301      	adds	r3, #1
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b06      	cmp	r3, #6
 80034da:	ddf4      	ble.n	80034c6 <mode_auto+0xce>
 80034dc:	e008      	b.n	80034f0 <mode_auto+0xf8>
				}
			}
		}else{
			auto_week_skip_vector[currDate.WeekDay-1] = 0;
 80034de:	4b1b      	ldr	r3, [pc, #108]	; (800354c <mode_auto+0x154>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	4a1a      	ldr	r2, [pc, #104]	; (8003550 <mode_auto+0x158>)
 80034e6:	2100      	movs	r1, #0
 80034e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80034ec:	e000      	b.n	80034f0 <mode_auto+0xf8>
		if(week_reset_flag){
 80034ee:	bf00      	nop
		}
	}

	//Day Skipped?
	if(auto_week_skip_vector[(currDate.WeekDay)-1] == 0){
 80034f0:	4b16      	ldr	r3, [pc, #88]	; (800354c <mode_auto+0x154>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	4a16      	ldr	r2, [pc, #88]	; (8003550 <mode_auto+0x158>)
 80034f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d117      	bne.n	8003530 <mode_auto+0x138>
		//Rain or >80 humidity (Just Rained)
		if(inst_humidity > 80 || adc_result_dma[4] > 3000){
 8003500:	4b17      	ldr	r3, [pc, #92]	; (8003560 <mode_auto+0x168>)
 8003502:	edd3 7a00 	vldr	s15, [r3]
 8003506:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003564 <mode_auto+0x16c>
 800350a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003512:	dc06      	bgt.n	8003522 <mode_auto+0x12a>
 8003514:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <mode_auto+0x148>)
 8003516:	891b      	ldrh	r3, [r3, #8]
 8003518:	b29b      	uxth	r3, r3
 800351a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800351e:	4293      	cmp	r3, r2
 8003520:	d906      	bls.n	8003530 <mode_auto+0x138>
			auto_week_skip_vector[(currDate.WeekDay)-1] = 1;
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <mode_auto+0x154>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	3b01      	subs	r3, #1
 8003528:	4a09      	ldr	r2, [pc, #36]	; (8003550 <mode_auto+0x158>)
 800352a:	2101      	movs	r1, #1
 800352c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					auto_week_skip_vector[(currDate.WeekDay)-1] = 1;
				}
			}
		}*/
	}
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	2000031c 	.word	0x2000031c
 8003540:	20000d7c 	.word	0x20000d7c
 8003544:	20000244 	.word	0x20000244
 8003548:	2000033c 	.word	0x2000033c
 800354c:	200002bc 	.word	0x200002bc
 8003550:	20000284 	.word	0x20000284
 8003554:	20000340 	.word	0x20000340
 8003558:	200002a0 	.word	0x200002a0
 800355c:	200002a4 	.word	0x200002a4
 8003560:	200002f8 	.word	0x200002f8
 8003564:	42a00000 	.word	0x42a00000

08003568 <bcdToDec>:


/*-----------------RTC FUNCTIONS BEGIN-----------------*/

int bcdToDec(int val)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  return( (val/16*10) + (val%16) );
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	da00      	bge.n	8003578 <bcdToDec+0x10>
 8003576:	330f      	adds	r3, #15
 8003578:	111b      	asrs	r3, r3, #4
 800357a:	461a      	mov	r2, r3
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4619      	mov	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	425a      	negs	r2, r3
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	f002 020f 	and.w	r2, r2, #15
 8003592:	bf58      	it	pl
 8003594:	4253      	negpl	r3, r2
 8003596:	440b      	add	r3, r1
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <decToBcd>:

int decToBcd(int val)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  return( (val/10*16) + (val%10) );
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a0d      	ldr	r2, [pc, #52]	; (80035e4 <decToBcd+0x40>)
 80035b0:	fb82 1203 	smull	r1, r2, r2, r3
 80035b4:	1092      	asrs	r2, r2, #2
 80035b6:	17db      	asrs	r3, r3, #31
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	0118      	lsls	r0, r3, #4
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <decToBcd+0x40>)
 80035c0:	fb83 2301 	smull	r2, r3, r3, r1
 80035c4:	109a      	asrs	r2, r3, #2
 80035c6:	17cb      	asrs	r3, r1, #31
 80035c8:	1ad2      	subs	r2, r2, r3
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	1aca      	subs	r2, r1, r3
 80035d4:	1883      	adds	r3, r0, r2
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	66666667 	.word	0x66666667

080035e8 <set_time>:

void set_time (int set_hours, int set_minutes, int set_weekday){
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	; 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
	  sTime.Hours = set_hours;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	753b      	strb	r3, [r7, #20]
	  sTime.Minutes = set_minutes;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	757b      	strb	r3, [r7, #21]
	  sTime.Seconds = 0x00;
 8003600:	2300      	movs	r3, #0
 8003602:	75bb      	strb	r3, [r7, #22]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003604:	2300      	movs	r3, #0
 8003606:	623b      	str	r3, [r7, #32]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003608:	2300      	movs	r3, #0
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800360c:	f107 0314 	add.w	r3, r7, #20
 8003610:	2201      	movs	r2, #1
 8003612:	4619      	mov	r1, r3
 8003614:	4810      	ldr	r0, [pc, #64]	; (8003658 <set_time+0x70>)
 8003616:	f004 fde4 	bl	80081e2 <HAL_RTC_SetTime>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <set_time+0x3c>
	  {
	    Error_Handler();
 8003620:	f001 fc20 	bl	8004e64 <Error_Handler>
	  }
	  sDate.WeekDay = set_weekday;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	743b      	strb	r3, [r7, #16]
	  sDate.Month = RTC_MONTH_JUNE;
 800362a:	2306      	movs	r3, #6
 800362c:	747b      	strb	r3, [r7, #17]
	  sDate.Date = 0x13;
 800362e:	2313      	movs	r3, #19
 8003630:	74bb      	strb	r3, [r7, #18]
	  sDate.Year = 0x22;
 8003632:	2322      	movs	r3, #34	; 0x22
 8003634:	74fb      	strb	r3, [r7, #19]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003636:	f107 0310 	add.w	r3, r7, #16
 800363a:	2201      	movs	r2, #1
 800363c:	4619      	mov	r1, r3
 800363e:	4806      	ldr	r0, [pc, #24]	; (8003658 <set_time+0x70>)
 8003640:	f004 feea 	bl	8008418 <HAL_RTC_SetDate>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <set_time+0x66>
	  {
	    Error_Handler();
 800364a:	f001 fc0b 	bl	8004e64 <Error_Handler>
	  }
}
 800364e:	bf00      	nop
 8003650:	3728      	adds	r7, #40	; 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200031f4 	.word	0x200031f4

0800365c <set_alarm>:

void set_alarm(int hours_hex, int mins_hex, int weekday_hex){
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
	{
	Error_Handler();
	}*/

	  sAlarmA.AlarmTime.Hours = hours_hex;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <set_alarm+0x78>)
 800366e:	701a      	strb	r2, [r3, #0]
	  sAlarmA.AlarmTime.Minutes = mins_hex;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	b2da      	uxtb	r2, r3
 8003674:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <set_alarm+0x78>)
 8003676:	705a      	strb	r2, [r3, #1]
	  sAlarmA.AlarmTime.Seconds = 0x15;
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <set_alarm+0x78>)
 800367a:	2215      	movs	r2, #21
 800367c:	709a      	strb	r2, [r3, #2]
	  sAlarmA.AlarmTime.SubSeconds = 0x0;
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <set_alarm+0x78>)
 8003680:	2200      	movs	r2, #0
 8003682:	605a      	str	r2, [r3, #4]
	  sAlarmA.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <set_alarm+0x78>)
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]
	  sAlarmA.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <set_alarm+0x78>)
 800368c:	2200      	movs	r2, #0
 800368e:	611a      	str	r2, [r3, #16]
	  sAlarmA.AlarmMask = RTC_ALARMMASK_NONE;
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <set_alarm+0x78>)
 8003692:	2200      	movs	r2, #0
 8003694:	615a      	str	r2, [r3, #20]
	  sAlarmA.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <set_alarm+0x78>)
 8003698:	2200      	movs	r2, #0
 800369a:	619a      	str	r2, [r3, #24]
	  sAlarmA.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800369c:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <set_alarm+0x78>)
 800369e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036a2:	61da      	str	r2, [r3, #28]
	  sAlarmA.AlarmDateWeekDay = weekday_hex;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <set_alarm+0x78>)
 80036aa:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarmA.Alarm = RTC_ALARM_A;
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <set_alarm+0x78>)
 80036b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarmA, RTC_FORMAT_BCD) != HAL_OK)
 80036b6:	2201      	movs	r2, #1
 80036b8:	4906      	ldr	r1, [pc, #24]	; (80036d4 <set_alarm+0x78>)
 80036ba:	4807      	ldr	r0, [pc, #28]	; (80036d8 <set_alarm+0x7c>)
 80036bc:	f004 ffa2 	bl	8008604 <HAL_RTC_SetAlarm_IT>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <set_alarm+0x6e>
	  {
	    Error_Handler();
 80036c6:	f001 fbcd 	bl	8004e64 <Error_Handler>
	  }
}
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200002c0 	.word	0x200002c0
 80036d8:	200031f4 	.word	0x200031f4

080036dc <get_time>:

void get_time(){
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80036e2:	2200      	movs	r2, #0
 80036e4:	491c      	ldr	r1, [pc, #112]	; (8003758 <get_time+0x7c>)
 80036e6:	481d      	ldr	r0, [pc, #116]	; (800375c <get_time+0x80>)
 80036e8:	f004 fe38 	bl	800835c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 80036ec:	2200      	movs	r2, #0
 80036ee:	491c      	ldr	r1, [pc, #112]	; (8003760 <get_time+0x84>)
 80036f0:	481a      	ldr	r0, [pc, #104]	; (800375c <get_time+0x80>)
 80036f2:	f004 ff38 	bl	8008566 <HAL_RTC_GetDate>
	sprintf(timeBuff,"%d,%d.%d", currTime.Hours, currTime.Minutes, currTime.Seconds);
 80036f6:	4b18      	ldr	r3, [pc, #96]	; (8003758 <get_time+0x7c>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b16      	ldr	r3, [pc, #88]	; (8003758 <get_time+0x7c>)
 80036fe:	785b      	ldrb	r3, [r3, #1]
 8003700:	4619      	mov	r1, r3
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <get_time+0x7c>)
 8003704:	789b      	ldrb	r3, [r3, #2]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	460b      	mov	r3, r1
 800370a:	4916      	ldr	r1, [pc, #88]	; (8003764 <get_time+0x88>)
 800370c:	4816      	ldr	r0, [pc, #88]	; (8003768 <get_time+0x8c>)
 800370e:	f006 fe4f 	bl	800a3b0 <siprintf>
	sprintf(dateBuff,"%02d-%02d-%2d",currDate.Date, currDate.Month, 2000 + currDate.Year);
 8003712:	4b13      	ldr	r3, [pc, #76]	; (8003760 <get_time+0x84>)
 8003714:	789b      	ldrb	r3, [r3, #2]
 8003716:	461a      	mov	r2, r3
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <get_time+0x84>)
 800371a:	785b      	ldrb	r3, [r3, #1]
 800371c:	4619      	mov	r1, r3
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <get_time+0x84>)
 8003720:	78db      	ldrb	r3, [r3, #3]
 8003722:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	460b      	mov	r3, r1
 800372a:	4910      	ldr	r1, [pc, #64]	; (800376c <get_time+0x90>)
 800372c:	4810      	ldr	r0, [pc, #64]	; (8003770 <get_time+0x94>)
 800372e:	f006 fe3f 	bl	800a3b0 <siprintf>
	current_hour = currTime.Hours;
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <get_time+0x7c>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <get_time+0x98>)
 800373a:	601a      	str	r2, [r3, #0]
	current_min = currTime.Minutes;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <get_time+0x7c>)
 800373e:	785b      	ldrb	r3, [r3, #1]
 8003740:	461a      	mov	r2, r3
 8003742:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <get_time+0x9c>)
 8003744:	601a      	str	r2, [r3, #0]
	current_wday = currDate.WeekDay;
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <get_time+0x84>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <get_time+0xa0>)
 800374e:	601a      	str	r2, [r3, #0]
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	200002a8 	.word	0x200002a8
 800375c:	200031f4 	.word	0x200031f4
 8003760:	200002bc 	.word	0x200002bc
 8003764:	0800d38c 	.word	0x0800d38c
 8003768:	20004660 	.word	0x20004660
 800376c:	0800d398 	.word	0x0800d398
 8003770:	2000321c 	.word	0x2000321c
 8003774:	200002e8 	.word	0x200002e8
 8003778:	200002ec 	.word	0x200002ec
 800377c:	200002f0 	.word	0x200002f0

08003780 <SendData>:
/*-----------------ESP32 UART BEGIN------------------*/
void SendData(unsigned int tempJSON, unsigned int humJSON, unsigned int flowJSON, unsigned int s1JSON, unsigned int s2JSON,
		unsigned int s3JSON, unsigned int s4JSON, unsigned int rainJSON, unsigned int daylightJSON, unsigned int tankJSON,
		unsigned int modJSON, unsigned int relaytankJSON, unsigned int relaywellJSON, unsigned int relayline1JSON,
		unsigned int relayline2JSON, unsigned int donewateringJSON, unsigned int debughourJSON, unsigned int debugminuteJSON,
		unsigned int debugskipdayJSON){
 8003780:	b5b0      	push	{r4, r5, r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]

	for(int i = 0; i < 1200; i++){
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	e007      	b.n	80037a4 <SendData+0x24>
			JSON[i] = 0;
 8003794:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <SendData+0x34>)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	4413      	add	r3, r2
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 1200; i++){
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	3301      	adds	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80037aa:	dbf3      	blt.n	8003794 <SendData+0x14>
		}

	for(int i = 0; i < 1000; i++){
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	e064      	b.n	800387c <SendData+0xfc>
 80037b2:	bf00      	nop
 80037b4:	200023d4 	.word	0x200023d4
		str_tempJSON[i] = 0;
 80037b8:	4ab4      	ldr	r2, [pc, #720]	; (8003a8c <SendData+0x30c>)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4413      	add	r3, r2
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
		str_humJSON[i] = 0;
 80037c2:	4ab3      	ldr	r2, [pc, #716]	; (8003a90 <SendData+0x310>)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
		str_flowJSON[i] = 0;
 80037cc:	4ab1      	ldr	r2, [pc, #708]	; (8003a94 <SendData+0x314>)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
		str_s1JSON[i] = 0;
 80037d6:	4ab0      	ldr	r2, [pc, #704]	; (8003a98 <SendData+0x318>)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
		str_s2JSON[i] = 0;
 80037e0:	4aae      	ldr	r2, [pc, #696]	; (8003a9c <SendData+0x31c>)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4413      	add	r3, r2
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]
		str_s3JSON[i] = 0;
 80037ea:	4aad      	ldr	r2, [pc, #692]	; (8003aa0 <SendData+0x320>)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4413      	add	r3, r2
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
		str_s4JSON[i] = 0;
 80037f4:	4aab      	ldr	r2, [pc, #684]	; (8003aa4 <SendData+0x324>)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4413      	add	r3, r2
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
		str_rainJSON[i] = 0;
 80037fe:	4aaa      	ldr	r2, [pc, #680]	; (8003aa8 <SendData+0x328>)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4413      	add	r3, r2
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
		str_daylightJSON[i] = 0;
 8003808:	4aa8      	ldr	r2, [pc, #672]	; (8003aac <SendData+0x32c>)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4413      	add	r3, r2
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
		str_tankJSON[i] = 0;
 8003812:	4aa7      	ldr	r2, [pc, #668]	; (8003ab0 <SendData+0x330>)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
		str_modJSON[i] = 0;
 800381c:	4aa5      	ldr	r2, [pc, #660]	; (8003ab4 <SendData+0x334>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4413      	add	r3, r2
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
		str_relaytankJSON[i] = 0;
 8003826:	4aa4      	ldr	r2, [pc, #656]	; (8003ab8 <SendData+0x338>)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4413      	add	r3, r2
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
		str_relaywellJSON[i] = 0;
 8003830:	4aa2      	ldr	r2, [pc, #648]	; (8003abc <SendData+0x33c>)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
		str_relayline1JSON[i] = 0;
 800383a:	4aa1      	ldr	r2, [pc, #644]	; (8003ac0 <SendData+0x340>)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4413      	add	r3, r2
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
		str_relayline2JSON[i] = 0;
 8003844:	4a9f      	ldr	r2, [pc, #636]	; (8003ac4 <SendData+0x344>)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4413      	add	r3, r2
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
		str_donewateringJSON[i] = 0;
 800384e:	4a9e      	ldr	r2, [pc, #632]	; (8003ac8 <SendData+0x348>)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4413      	add	r3, r2
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
		str_debughourJSON[i] = 0;
 8003858:	4a9c      	ldr	r2, [pc, #624]	; (8003acc <SendData+0x34c>)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4413      	add	r3, r2
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
		str_debugminuteJSON[i] = 0;
 8003862:	4a9b      	ldr	r2, [pc, #620]	; (8003ad0 <SendData+0x350>)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4413      	add	r3, r2
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
		JSON[i] = 0;
 800386c:	4a99      	ldr	r2, [pc, #612]	; (8003ad4 <SendData+0x354>)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 1000; i++){
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	3301      	adds	r3, #1
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003882:	db99      	blt.n	80037b8 <SendData+0x38>
	}

	sprintf(str_tempJSON, "%d", tempJSON);
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4994      	ldr	r1, [pc, #592]	; (8003ad8 <SendData+0x358>)
 8003888:	4880      	ldr	r0, [pc, #512]	; (8003a8c <SendData+0x30c>)
 800388a:	f006 fd91 	bl	800a3b0 <siprintf>
	sprintf(str_humJSON, "%d", humJSON);
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	4991      	ldr	r1, [pc, #580]	; (8003ad8 <SendData+0x358>)
 8003892:	487f      	ldr	r0, [pc, #508]	; (8003a90 <SendData+0x310>)
 8003894:	f006 fd8c 	bl	800a3b0 <siprintf>
	sprintf(str_flowJSON, "%d", flowJSON);
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	498f      	ldr	r1, [pc, #572]	; (8003ad8 <SendData+0x358>)
 800389c:	487d      	ldr	r0, [pc, #500]	; (8003a94 <SendData+0x314>)
 800389e:	f006 fd87 	bl	800a3b0 <siprintf>
	sprintf(str_s1JSON, "%d", s1JSON);
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	498c      	ldr	r1, [pc, #560]	; (8003ad8 <SendData+0x358>)
 80038a6:	487c      	ldr	r0, [pc, #496]	; (8003a98 <SendData+0x318>)
 80038a8:	f006 fd82 	bl	800a3b0 <siprintf>
	sprintf(str_s2JSON, "%d", s2JSON);
 80038ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ae:	498a      	ldr	r1, [pc, #552]	; (8003ad8 <SendData+0x358>)
 80038b0:	487a      	ldr	r0, [pc, #488]	; (8003a9c <SendData+0x31c>)
 80038b2:	f006 fd7d 	bl	800a3b0 <siprintf>
	sprintf(str_s3JSON, "%d", s3JSON);
 80038b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b8:	4987      	ldr	r1, [pc, #540]	; (8003ad8 <SendData+0x358>)
 80038ba:	4879      	ldr	r0, [pc, #484]	; (8003aa0 <SendData+0x320>)
 80038bc:	f006 fd78 	bl	800a3b0 <siprintf>
	sprintf(str_s4JSON, "%d", s4JSON);
 80038c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c2:	4985      	ldr	r1, [pc, #532]	; (8003ad8 <SendData+0x358>)
 80038c4:	4877      	ldr	r0, [pc, #476]	; (8003aa4 <SendData+0x324>)
 80038c6:	f006 fd73 	bl	800a3b0 <siprintf>
	sprintf(str_rainJSON, "%d", rainJSON);
 80038ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038cc:	4982      	ldr	r1, [pc, #520]	; (8003ad8 <SendData+0x358>)
 80038ce:	4876      	ldr	r0, [pc, #472]	; (8003aa8 <SendData+0x328>)
 80038d0:	f006 fd6e 	bl	800a3b0 <siprintf>
	sprintf(str_daylightJSON, "%d", daylightJSON);
 80038d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038d6:	4980      	ldr	r1, [pc, #512]	; (8003ad8 <SendData+0x358>)
 80038d8:	4874      	ldr	r0, [pc, #464]	; (8003aac <SendData+0x32c>)
 80038da:	f006 fd69 	bl	800a3b0 <siprintf>
	sprintf(str_tankJSON, "%d", tankJSON);
 80038de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038e0:	497d      	ldr	r1, [pc, #500]	; (8003ad8 <SendData+0x358>)
 80038e2:	4873      	ldr	r0, [pc, #460]	; (8003ab0 <SendData+0x330>)
 80038e4:	f006 fd64 	bl	800a3b0 <siprintf>
	sprintf(str_modJSON, "%d", modJSON);
 80038e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038ea:	497b      	ldr	r1, [pc, #492]	; (8003ad8 <SendData+0x358>)
 80038ec:	4871      	ldr	r0, [pc, #452]	; (8003ab4 <SendData+0x334>)
 80038ee:	f006 fd5f 	bl	800a3b0 <siprintf>
	sprintf(str_relaytankJSON, "%d", relaytankJSON);
 80038f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038f4:	4978      	ldr	r1, [pc, #480]	; (8003ad8 <SendData+0x358>)
 80038f6:	4870      	ldr	r0, [pc, #448]	; (8003ab8 <SendData+0x338>)
 80038f8:	f006 fd5a 	bl	800a3b0 <siprintf>
	sprintf(str_relaywellJSON, "%d", relaywellJSON);
 80038fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038fe:	4976      	ldr	r1, [pc, #472]	; (8003ad8 <SendData+0x358>)
 8003900:	486e      	ldr	r0, [pc, #440]	; (8003abc <SendData+0x33c>)
 8003902:	f006 fd55 	bl	800a3b0 <siprintf>
	sprintf(str_relayline1JSON, "%d", relayline1JSON);
 8003906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003908:	4973      	ldr	r1, [pc, #460]	; (8003ad8 <SendData+0x358>)
 800390a:	486d      	ldr	r0, [pc, #436]	; (8003ac0 <SendData+0x340>)
 800390c:	f006 fd50 	bl	800a3b0 <siprintf>
	sprintf(str_relayline2JSON, "%d", relayline2JSON);
 8003910:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003912:	4971      	ldr	r1, [pc, #452]	; (8003ad8 <SendData+0x358>)
 8003914:	486b      	ldr	r0, [pc, #428]	; (8003ac4 <SendData+0x344>)
 8003916:	f006 fd4b 	bl	800a3b0 <siprintf>
	sprintf(str_donewateringJSON, "%d", donewateringJSON);
 800391a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800391c:	496e      	ldr	r1, [pc, #440]	; (8003ad8 <SendData+0x358>)
 800391e:	486a      	ldr	r0, [pc, #424]	; (8003ac8 <SendData+0x348>)
 8003920:	f006 fd46 	bl	800a3b0 <siprintf>
	sprintf(str_debughourJSON, "%d", debughourJSON);
 8003924:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003926:	496c      	ldr	r1, [pc, #432]	; (8003ad8 <SendData+0x358>)
 8003928:	4868      	ldr	r0, [pc, #416]	; (8003acc <SendData+0x34c>)
 800392a:	f006 fd41 	bl	800a3b0 <siprintf>
	sprintf(str_debugminuteJSON, "%d", debugminuteJSON);
 800392e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003930:	4969      	ldr	r1, [pc, #420]	; (8003ad8 <SendData+0x358>)
 8003932:	4867      	ldr	r0, [pc, #412]	; (8003ad0 <SendData+0x350>)
 8003934:	f006 fd3c 	bl	800a3b0 <siprintf>
	sprintf(str_debugskipdayJSON, "%d", debugskipdayJSON);
 8003938:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800393a:	4967      	ldr	r1, [pc, #412]	; (8003ad8 <SendData+0x358>)
 800393c:	4867      	ldr	r0, [pc, #412]	; (8003adc <SendData+0x35c>)
 800393e:	f006 fd37 	bl	800a3b0 <siprintf>

	strcat(JSON, "{\"temperature\":\"");
 8003942:	4864      	ldr	r0, [pc, #400]	; (8003ad4 <SendData+0x354>)
 8003944:	f7fc fc56 	bl	80001f4 <strlen>
 8003948:	4603      	mov	r3, r0
 800394a:	461a      	mov	r2, r3
 800394c:	4b61      	ldr	r3, [pc, #388]	; (8003ad4 <SendData+0x354>)
 800394e:	4413      	add	r3, r2
 8003950:	4a63      	ldr	r2, [pc, #396]	; (8003ae0 <SendData+0x360>)
 8003952:	461d      	mov	r5, r3
 8003954:	4614      	mov	r4, r2
 8003956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003958:	6028      	str	r0, [r5, #0]
 800395a:	6069      	str	r1, [r5, #4]
 800395c:	60aa      	str	r2, [r5, #8]
 800395e:	60eb      	str	r3, [r5, #12]
 8003960:	7823      	ldrb	r3, [r4, #0]
 8003962:	742b      	strb	r3, [r5, #16]
	strcat(JSON, str_tempJSON);
 8003964:	4949      	ldr	r1, [pc, #292]	; (8003a8c <SendData+0x30c>)
 8003966:	485b      	ldr	r0, [pc, #364]	; (8003ad4 <SendData+0x354>)
 8003968:	f006 fd85 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 800396c:	4859      	ldr	r0, [pc, #356]	; (8003ad4 <SendData+0x354>)
 800396e:	f7fc fc41 	bl	80001f4 <strlen>
 8003972:	4603      	mov	r3, r0
 8003974:	461a      	mov	r2, r3
 8003976:	4b57      	ldr	r3, [pc, #348]	; (8003ad4 <SendData+0x354>)
 8003978:	4413      	add	r3, r2
 800397a:	4a5a      	ldr	r2, [pc, #360]	; (8003ae4 <SendData+0x364>)
 800397c:	8811      	ldrh	r1, [r2, #0]
 800397e:	7892      	ldrb	r2, [r2, #2]
 8003980:	8019      	strh	r1, [r3, #0]
 8003982:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"humidity\":\"");
 8003984:	4853      	ldr	r0, [pc, #332]	; (8003ad4 <SendData+0x354>)
 8003986:	f7fc fc35 	bl	80001f4 <strlen>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	4b51      	ldr	r3, [pc, #324]	; (8003ad4 <SendData+0x354>)
 8003990:	4413      	add	r3, r2
 8003992:	4a55      	ldr	r2, [pc, #340]	; (8003ae8 <SendData+0x368>)
 8003994:	461c      	mov	r4, r3
 8003996:	4613      	mov	r3, r2
 8003998:	cb07      	ldmia	r3!, {r0, r1, r2}
 800399a:	6020      	str	r0, [r4, #0]
 800399c:	6061      	str	r1, [r4, #4]
 800399e:	60a2      	str	r2, [r4, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	7323      	strb	r3, [r4, #12]
	strcat(JSON, str_humJSON);
 80039a4:	493a      	ldr	r1, [pc, #232]	; (8003a90 <SendData+0x310>)
 80039a6:	484b      	ldr	r0, [pc, #300]	; (8003ad4 <SendData+0x354>)
 80039a8:	f006 fd65 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 80039ac:	4849      	ldr	r0, [pc, #292]	; (8003ad4 <SendData+0x354>)
 80039ae:	f7fc fc21 	bl	80001f4 <strlen>
 80039b2:	4603      	mov	r3, r0
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <SendData+0x354>)
 80039b8:	4413      	add	r3, r2
 80039ba:	4a4a      	ldr	r2, [pc, #296]	; (8003ae4 <SendData+0x364>)
 80039bc:	8811      	ldrh	r1, [r2, #0]
 80039be:	7892      	ldrb	r2, [r2, #2]
 80039c0:	8019      	strh	r1, [r3, #0]
 80039c2:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"flowrate\":\"");
 80039c4:	4843      	ldr	r0, [pc, #268]	; (8003ad4 <SendData+0x354>)
 80039c6:	f7fc fc15 	bl	80001f4 <strlen>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <SendData+0x354>)
 80039d0:	4413      	add	r3, r2
 80039d2:	4a46      	ldr	r2, [pc, #280]	; (8003aec <SendData+0x36c>)
 80039d4:	461c      	mov	r4, r3
 80039d6:	4613      	mov	r3, r2
 80039d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80039da:	6020      	str	r0, [r4, #0]
 80039dc:	6061      	str	r1, [r4, #4]
 80039de:	60a2      	str	r2, [r4, #8]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	7323      	strb	r3, [r4, #12]
	strcat(JSON, str_flowJSON);
 80039e4:	492b      	ldr	r1, [pc, #172]	; (8003a94 <SendData+0x314>)
 80039e6:	483b      	ldr	r0, [pc, #236]	; (8003ad4 <SendData+0x354>)
 80039e8:	f006 fd45 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 80039ec:	4839      	ldr	r0, [pc, #228]	; (8003ad4 <SendData+0x354>)
 80039ee:	f7fc fc01 	bl	80001f4 <strlen>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	4b37      	ldr	r3, [pc, #220]	; (8003ad4 <SendData+0x354>)
 80039f8:	4413      	add	r3, r2
 80039fa:	4a3a      	ldr	r2, [pc, #232]	; (8003ae4 <SendData+0x364>)
 80039fc:	8811      	ldrh	r1, [r2, #0]
 80039fe:	7892      	ldrb	r2, [r2, #2]
 8003a00:	8019      	strh	r1, [r3, #0]
 8003a02:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"s1\":\"");
 8003a04:	4833      	ldr	r0, [pc, #204]	; (8003ad4 <SendData+0x354>)
 8003a06:	f7fc fbf5 	bl	80001f4 <strlen>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4b31      	ldr	r3, [pc, #196]	; (8003ad4 <SendData+0x354>)
 8003a10:	4413      	add	r3, r2
 8003a12:	4a37      	ldr	r2, [pc, #220]	; (8003af0 <SendData+0x370>)
 8003a14:	6810      	ldr	r0, [r2, #0]
 8003a16:	6018      	str	r0, [r3, #0]
 8003a18:	8891      	ldrh	r1, [r2, #4]
 8003a1a:	7992      	ldrb	r2, [r2, #6]
 8003a1c:	8099      	strh	r1, [r3, #4]
 8003a1e:	719a      	strb	r2, [r3, #6]
	strcat(JSON, str_s1JSON);
 8003a20:	491d      	ldr	r1, [pc, #116]	; (8003a98 <SendData+0x318>)
 8003a22:	482c      	ldr	r0, [pc, #176]	; (8003ad4 <SendData+0x354>)
 8003a24:	f006 fd27 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003a28:	482a      	ldr	r0, [pc, #168]	; (8003ad4 <SendData+0x354>)
 8003a2a:	f7fc fbe3 	bl	80001f4 <strlen>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <SendData+0x354>)
 8003a34:	4413      	add	r3, r2
 8003a36:	4a2b      	ldr	r2, [pc, #172]	; (8003ae4 <SendData+0x364>)
 8003a38:	8811      	ldrh	r1, [r2, #0]
 8003a3a:	7892      	ldrb	r2, [r2, #2]
 8003a3c:	8019      	strh	r1, [r3, #0]
 8003a3e:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"s2\":\"");
 8003a40:	4824      	ldr	r0, [pc, #144]	; (8003ad4 <SendData+0x354>)
 8003a42:	f7fc fbd7 	bl	80001f4 <strlen>
 8003a46:	4603      	mov	r3, r0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <SendData+0x354>)
 8003a4c:	4413      	add	r3, r2
 8003a4e:	4a29      	ldr	r2, [pc, #164]	; (8003af4 <SendData+0x374>)
 8003a50:	6810      	ldr	r0, [r2, #0]
 8003a52:	6018      	str	r0, [r3, #0]
 8003a54:	8891      	ldrh	r1, [r2, #4]
 8003a56:	7992      	ldrb	r2, [r2, #6]
 8003a58:	8099      	strh	r1, [r3, #4]
 8003a5a:	719a      	strb	r2, [r3, #6]
	strcat(JSON, str_s2JSON);
 8003a5c:	490f      	ldr	r1, [pc, #60]	; (8003a9c <SendData+0x31c>)
 8003a5e:	481d      	ldr	r0, [pc, #116]	; (8003ad4 <SendData+0x354>)
 8003a60:	f006 fd09 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003a64:	481b      	ldr	r0, [pc, #108]	; (8003ad4 <SendData+0x354>)
 8003a66:	f7fc fbc5 	bl	80001f4 <strlen>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <SendData+0x354>)
 8003a70:	4413      	add	r3, r2
 8003a72:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <SendData+0x364>)
 8003a74:	8811      	ldrh	r1, [r2, #0]
 8003a76:	7892      	ldrb	r2, [r2, #2]
 8003a78:	8019      	strh	r1, [r3, #0]
 8003a7a:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"s3\":\"");
 8003a7c:	4815      	ldr	r0, [pc, #84]	; (8003ad4 <SendData+0x354>)
 8003a7e:	f7fc fbb9 	bl	80001f4 <strlen>
 8003a82:	4603      	mov	r3, r0
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <SendData+0x354>)
 8003a88:	4413      	add	r3, r2
 8003a8a:	e035      	b.n	8003af8 <SendData+0x378>
 8003a8c:	20004a64 	.word	0x20004a64
 8003a90:	20003a54 	.word	0x20003a54
 8003a94:	20002d7c 	.word	0x20002d7c
 8003a98:	20004278 	.word	0x20004278
 8003a9c:	20002994 	.word	0x20002994
 8003aa0:	20001fe4 	.word	0x20001fe4
 8003aa4:	20000d8c 	.word	0x20000d8c
 8003aa8:	20001cbc 	.word	0x20001cbc
 8003aac:	20000a58 	.word	0x20000a58
 8003ab0:	20003664 	.word	0x20003664
 8003ab4:	20000350 	.word	0x20000350
 8003ab8:	20000738 	.word	0x20000738
 8003abc:	200018d0 	.word	0x200018d0
 8003ac0:	20004674 	.word	0x20004674
 8003ac4:	20004e54 	.word	0x20004e54
 8003ac8:	200010ac 	.word	0x200010ac
 8003acc:	200014e8 	.word	0x200014e8
 8003ad0:	20003230 	.word	0x20003230
 8003ad4:	200023d4 	.word	0x200023d4
 8003ad8:	0800d3a8 	.word	0x0800d3a8
 8003adc:	20003e44 	.word	0x20003e44
 8003ae0:	0800d3ac 	.word	0x0800d3ac
 8003ae4:	0800d3c0 	.word	0x0800d3c0
 8003ae8:	0800d3c4 	.word	0x0800d3c4
 8003aec:	0800d3d4 	.word	0x0800d3d4
 8003af0:	0800d3e4 	.word	0x0800d3e4
 8003af4:	0800d3ec 	.word	0x0800d3ec
 8003af8:	4ac5      	ldr	r2, [pc, #788]	; (8003e10 <SendData+0x690>)
 8003afa:	6810      	ldr	r0, [r2, #0]
 8003afc:	6018      	str	r0, [r3, #0]
 8003afe:	8891      	ldrh	r1, [r2, #4]
 8003b00:	7992      	ldrb	r2, [r2, #6]
 8003b02:	8099      	strh	r1, [r3, #4]
 8003b04:	719a      	strb	r2, [r3, #6]
	strcat(JSON, str_s3JSON);
 8003b06:	49c3      	ldr	r1, [pc, #780]	; (8003e14 <SendData+0x694>)
 8003b08:	48c3      	ldr	r0, [pc, #780]	; (8003e18 <SendData+0x698>)
 8003b0a:	f006 fcb4 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003b0e:	48c2      	ldr	r0, [pc, #776]	; (8003e18 <SendData+0x698>)
 8003b10:	f7fc fb70 	bl	80001f4 <strlen>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	4bbf      	ldr	r3, [pc, #764]	; (8003e18 <SendData+0x698>)
 8003b1a:	4413      	add	r3, r2
 8003b1c:	4abf      	ldr	r2, [pc, #764]	; (8003e1c <SendData+0x69c>)
 8003b1e:	8811      	ldrh	r1, [r2, #0]
 8003b20:	7892      	ldrb	r2, [r2, #2]
 8003b22:	8019      	strh	r1, [r3, #0]
 8003b24:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"s4\":\"");
 8003b26:	48bc      	ldr	r0, [pc, #752]	; (8003e18 <SendData+0x698>)
 8003b28:	f7fc fb64 	bl	80001f4 <strlen>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4bb9      	ldr	r3, [pc, #740]	; (8003e18 <SendData+0x698>)
 8003b32:	4413      	add	r3, r2
 8003b34:	4aba      	ldr	r2, [pc, #744]	; (8003e20 <SendData+0x6a0>)
 8003b36:	6810      	ldr	r0, [r2, #0]
 8003b38:	6018      	str	r0, [r3, #0]
 8003b3a:	8891      	ldrh	r1, [r2, #4]
 8003b3c:	7992      	ldrb	r2, [r2, #6]
 8003b3e:	8099      	strh	r1, [r3, #4]
 8003b40:	719a      	strb	r2, [r3, #6]
	strcat(JSON, str_s4JSON);
 8003b42:	49b8      	ldr	r1, [pc, #736]	; (8003e24 <SendData+0x6a4>)
 8003b44:	48b4      	ldr	r0, [pc, #720]	; (8003e18 <SendData+0x698>)
 8003b46:	f006 fc96 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003b4a:	48b3      	ldr	r0, [pc, #716]	; (8003e18 <SendData+0x698>)
 8003b4c:	f7fc fb52 	bl	80001f4 <strlen>
 8003b50:	4603      	mov	r3, r0
 8003b52:	461a      	mov	r2, r3
 8003b54:	4bb0      	ldr	r3, [pc, #704]	; (8003e18 <SendData+0x698>)
 8003b56:	4413      	add	r3, r2
 8003b58:	4ab0      	ldr	r2, [pc, #704]	; (8003e1c <SendData+0x69c>)
 8003b5a:	8811      	ldrh	r1, [r2, #0]
 8003b5c:	7892      	ldrb	r2, [r2, #2]
 8003b5e:	8019      	strh	r1, [r3, #0]
 8003b60:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"rain\":\"");
 8003b62:	48ad      	ldr	r0, [pc, #692]	; (8003e18 <SendData+0x698>)
 8003b64:	f7fc fb46 	bl	80001f4 <strlen>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4baa      	ldr	r3, [pc, #680]	; (8003e18 <SendData+0x698>)
 8003b6e:	4413      	add	r3, r2
 8003b70:	49ad      	ldr	r1, [pc, #692]	; (8003e28 <SendData+0x6a8>)
 8003b72:	461a      	mov	r2, r3
 8003b74:	460b      	mov	r3, r1
 8003b76:	cb03      	ldmia	r3!, {r0, r1}
 8003b78:	6010      	str	r0, [r2, #0]
 8003b7a:	6051      	str	r1, [r2, #4]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	7213      	strb	r3, [r2, #8]
	strcat(JSON, str_rainJSON);
 8003b80:	49aa      	ldr	r1, [pc, #680]	; (8003e2c <SendData+0x6ac>)
 8003b82:	48a5      	ldr	r0, [pc, #660]	; (8003e18 <SendData+0x698>)
 8003b84:	f006 fc77 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003b88:	48a3      	ldr	r0, [pc, #652]	; (8003e18 <SendData+0x698>)
 8003b8a:	f7fc fb33 	bl	80001f4 <strlen>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	461a      	mov	r2, r3
 8003b92:	4ba1      	ldr	r3, [pc, #644]	; (8003e18 <SendData+0x698>)
 8003b94:	4413      	add	r3, r2
 8003b96:	4aa1      	ldr	r2, [pc, #644]	; (8003e1c <SendData+0x69c>)
 8003b98:	8811      	ldrh	r1, [r2, #0]
 8003b9a:	7892      	ldrb	r2, [r2, #2]
 8003b9c:	8019      	strh	r1, [r3, #0]
 8003b9e:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"daylight\":\"");
 8003ba0:	489d      	ldr	r0, [pc, #628]	; (8003e18 <SendData+0x698>)
 8003ba2:	f7fc fb27 	bl	80001f4 <strlen>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4b9b      	ldr	r3, [pc, #620]	; (8003e18 <SendData+0x698>)
 8003bac:	4413      	add	r3, r2
 8003bae:	4aa0      	ldr	r2, [pc, #640]	; (8003e30 <SendData+0x6b0>)
 8003bb0:	461c      	mov	r4, r3
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003bb6:	6020      	str	r0, [r4, #0]
 8003bb8:	6061      	str	r1, [r4, #4]
 8003bba:	60a2      	str	r2, [r4, #8]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	7323      	strb	r3, [r4, #12]
	strcat(JSON, str_daylightJSON);
 8003bc0:	499c      	ldr	r1, [pc, #624]	; (8003e34 <SendData+0x6b4>)
 8003bc2:	4895      	ldr	r0, [pc, #596]	; (8003e18 <SendData+0x698>)
 8003bc4:	f006 fc57 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003bc8:	4893      	ldr	r0, [pc, #588]	; (8003e18 <SendData+0x698>)
 8003bca:	f7fc fb13 	bl	80001f4 <strlen>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b91      	ldr	r3, [pc, #580]	; (8003e18 <SendData+0x698>)
 8003bd4:	4413      	add	r3, r2
 8003bd6:	4a91      	ldr	r2, [pc, #580]	; (8003e1c <SendData+0x69c>)
 8003bd8:	8811      	ldrh	r1, [r2, #0]
 8003bda:	7892      	ldrb	r2, [r2, #2]
 8003bdc:	8019      	strh	r1, [r3, #0]
 8003bde:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"tank\":\"");
 8003be0:	488d      	ldr	r0, [pc, #564]	; (8003e18 <SendData+0x698>)
 8003be2:	f7fc fb07 	bl	80001f4 <strlen>
 8003be6:	4603      	mov	r3, r0
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b8b      	ldr	r3, [pc, #556]	; (8003e18 <SendData+0x698>)
 8003bec:	4413      	add	r3, r2
 8003bee:	4992      	ldr	r1, [pc, #584]	; (8003e38 <SendData+0x6b8>)
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	cb03      	ldmia	r3!, {r0, r1}
 8003bf6:	6010      	str	r0, [r2, #0]
 8003bf8:	6051      	str	r1, [r2, #4]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	7213      	strb	r3, [r2, #8]
	strcat(JSON, str_tankJSON);
 8003bfe:	498f      	ldr	r1, [pc, #572]	; (8003e3c <SendData+0x6bc>)
 8003c00:	4885      	ldr	r0, [pc, #532]	; (8003e18 <SendData+0x698>)
 8003c02:	f006 fc38 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003c06:	4884      	ldr	r0, [pc, #528]	; (8003e18 <SendData+0x698>)
 8003c08:	f7fc faf4 	bl	80001f4 <strlen>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4b81      	ldr	r3, [pc, #516]	; (8003e18 <SendData+0x698>)
 8003c12:	4413      	add	r3, r2
 8003c14:	4a81      	ldr	r2, [pc, #516]	; (8003e1c <SendData+0x69c>)
 8003c16:	8811      	ldrh	r1, [r2, #0]
 8003c18:	7892      	ldrb	r2, [r2, #2]
 8003c1a:	8019      	strh	r1, [r3, #0]
 8003c1c:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"mod\":\"");
 8003c1e:	487e      	ldr	r0, [pc, #504]	; (8003e18 <SendData+0x698>)
 8003c20:	f7fc fae8 	bl	80001f4 <strlen>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b7b      	ldr	r3, [pc, #492]	; (8003e18 <SendData+0x698>)
 8003c2a:	4413      	add	r3, r2
 8003c2c:	4984      	ldr	r1, [pc, #528]	; (8003e40 <SendData+0x6c0>)
 8003c2e:	461a      	mov	r2, r3
 8003c30:	460b      	mov	r3, r1
 8003c32:	cb03      	ldmia	r3!, {r0, r1}
 8003c34:	6010      	str	r0, [r2, #0]
 8003c36:	6051      	str	r1, [r2, #4]
	strcat(JSON, str_modJSON);
 8003c38:	4982      	ldr	r1, [pc, #520]	; (8003e44 <SendData+0x6c4>)
 8003c3a:	4877      	ldr	r0, [pc, #476]	; (8003e18 <SendData+0x698>)
 8003c3c:	f006 fc1b 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003c40:	4875      	ldr	r0, [pc, #468]	; (8003e18 <SendData+0x698>)
 8003c42:	f7fc fad7 	bl	80001f4 <strlen>
 8003c46:	4603      	mov	r3, r0
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4b73      	ldr	r3, [pc, #460]	; (8003e18 <SendData+0x698>)
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4a73      	ldr	r2, [pc, #460]	; (8003e1c <SendData+0x69c>)
 8003c50:	8811      	ldrh	r1, [r2, #0]
 8003c52:	7892      	ldrb	r2, [r2, #2]
 8003c54:	8019      	strh	r1, [r3, #0]
 8003c56:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"relaytank\":\"");
 8003c58:	486f      	ldr	r0, [pc, #444]	; (8003e18 <SendData+0x698>)
 8003c5a:	f7fc facb 	bl	80001f4 <strlen>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <SendData+0x698>)
 8003c64:	4413      	add	r3, r2
 8003c66:	4a78      	ldr	r2, [pc, #480]	; (8003e48 <SendData+0x6c8>)
 8003c68:	461c      	mov	r4, r3
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c6e:	6020      	str	r0, [r4, #0]
 8003c70:	6061      	str	r1, [r4, #4]
 8003c72:	60a2      	str	r2, [r4, #8]
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	81a3      	strh	r3, [r4, #12]
	strcat(JSON, str_relaytankJSON);
 8003c78:	4974      	ldr	r1, [pc, #464]	; (8003e4c <SendData+0x6cc>)
 8003c7a:	4867      	ldr	r0, [pc, #412]	; (8003e18 <SendData+0x698>)
 8003c7c:	f006 fbfb 	bl	800a476 <strcat>
	//relay_set
	strcat(JSON, "\",");
 8003c80:	4865      	ldr	r0, [pc, #404]	; (8003e18 <SendData+0x698>)
 8003c82:	f7fc fab7 	bl	80001f4 <strlen>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b63      	ldr	r3, [pc, #396]	; (8003e18 <SendData+0x698>)
 8003c8c:	4413      	add	r3, r2
 8003c8e:	4a63      	ldr	r2, [pc, #396]	; (8003e1c <SendData+0x69c>)
 8003c90:	8811      	ldrh	r1, [r2, #0]
 8003c92:	7892      	ldrb	r2, [r2, #2]
 8003c94:	8019      	strh	r1, [r3, #0]
 8003c96:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"relaywell\":\"");
 8003c98:	485f      	ldr	r0, [pc, #380]	; (8003e18 <SendData+0x698>)
 8003c9a:	f7fc faab 	bl	80001f4 <strlen>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4b5d      	ldr	r3, [pc, #372]	; (8003e18 <SendData+0x698>)
 8003ca4:	4413      	add	r3, r2
 8003ca6:	4a6a      	ldr	r2, [pc, #424]	; (8003e50 <SendData+0x6d0>)
 8003ca8:	461c      	mov	r4, r3
 8003caa:	4613      	mov	r3, r2
 8003cac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003cae:	6020      	str	r0, [r4, #0]
 8003cb0:	6061      	str	r1, [r4, #4]
 8003cb2:	60a2      	str	r2, [r4, #8]
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	81a3      	strh	r3, [r4, #12]
	strcat(JSON, str_relaywellJSON);
 8003cb8:	4966      	ldr	r1, [pc, #408]	; (8003e54 <SendData+0x6d4>)
 8003cba:	4857      	ldr	r0, [pc, #348]	; (8003e18 <SendData+0x698>)
 8003cbc:	f006 fbdb 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003cc0:	4855      	ldr	r0, [pc, #340]	; (8003e18 <SendData+0x698>)
 8003cc2:	f7fc fa97 	bl	80001f4 <strlen>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4b53      	ldr	r3, [pc, #332]	; (8003e18 <SendData+0x698>)
 8003ccc:	4413      	add	r3, r2
 8003cce:	4a53      	ldr	r2, [pc, #332]	; (8003e1c <SendData+0x69c>)
 8003cd0:	8811      	ldrh	r1, [r2, #0]
 8003cd2:	7892      	ldrb	r2, [r2, #2]
 8003cd4:	8019      	strh	r1, [r3, #0]
 8003cd6:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"relayline1\":\"");
 8003cd8:	484f      	ldr	r0, [pc, #316]	; (8003e18 <SendData+0x698>)
 8003cda:	f7fc fa8b 	bl	80001f4 <strlen>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b4d      	ldr	r3, [pc, #308]	; (8003e18 <SendData+0x698>)
 8003ce4:	4413      	add	r3, r2
 8003ce6:	4a5c      	ldr	r2, [pc, #368]	; (8003e58 <SendData+0x6d8>)
 8003ce8:	461c      	mov	r4, r3
 8003cea:	4613      	mov	r3, r2
 8003cec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003cee:	6020      	str	r0, [r4, #0]
 8003cf0:	6061      	str	r1, [r4, #4]
 8003cf2:	60a2      	str	r2, [r4, #8]
 8003cf4:	881a      	ldrh	r2, [r3, #0]
 8003cf6:	789b      	ldrb	r3, [r3, #2]
 8003cf8:	81a2      	strh	r2, [r4, #12]
 8003cfa:	73a3      	strb	r3, [r4, #14]
	strcat(JSON, str_relayline1JSON);
 8003cfc:	4957      	ldr	r1, [pc, #348]	; (8003e5c <SendData+0x6dc>)
 8003cfe:	4846      	ldr	r0, [pc, #280]	; (8003e18 <SendData+0x698>)
 8003d00:	f006 fbb9 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003d04:	4844      	ldr	r0, [pc, #272]	; (8003e18 <SendData+0x698>)
 8003d06:	f7fc fa75 	bl	80001f4 <strlen>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b42      	ldr	r3, [pc, #264]	; (8003e18 <SendData+0x698>)
 8003d10:	4413      	add	r3, r2
 8003d12:	4a42      	ldr	r2, [pc, #264]	; (8003e1c <SendData+0x69c>)
 8003d14:	8811      	ldrh	r1, [r2, #0]
 8003d16:	7892      	ldrb	r2, [r2, #2]
 8003d18:	8019      	strh	r1, [r3, #0]
 8003d1a:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"relayline2\":\"");
 8003d1c:	483e      	ldr	r0, [pc, #248]	; (8003e18 <SendData+0x698>)
 8003d1e:	f7fc fa69 	bl	80001f4 <strlen>
 8003d22:	4603      	mov	r3, r0
 8003d24:	461a      	mov	r2, r3
 8003d26:	4b3c      	ldr	r3, [pc, #240]	; (8003e18 <SendData+0x698>)
 8003d28:	4413      	add	r3, r2
 8003d2a:	4a4d      	ldr	r2, [pc, #308]	; (8003e60 <SendData+0x6e0>)
 8003d2c:	461c      	mov	r4, r3
 8003d2e:	4613      	mov	r3, r2
 8003d30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003d32:	6020      	str	r0, [r4, #0]
 8003d34:	6061      	str	r1, [r4, #4]
 8003d36:	60a2      	str	r2, [r4, #8]
 8003d38:	881a      	ldrh	r2, [r3, #0]
 8003d3a:	789b      	ldrb	r3, [r3, #2]
 8003d3c:	81a2      	strh	r2, [r4, #12]
 8003d3e:	73a3      	strb	r3, [r4, #14]
	strcat(JSON, str_relayline2JSON);
 8003d40:	4948      	ldr	r1, [pc, #288]	; (8003e64 <SendData+0x6e4>)
 8003d42:	4835      	ldr	r0, [pc, #212]	; (8003e18 <SendData+0x698>)
 8003d44:	f006 fb97 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003d48:	4833      	ldr	r0, [pc, #204]	; (8003e18 <SendData+0x698>)
 8003d4a:	f7fc fa53 	bl	80001f4 <strlen>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <SendData+0x698>)
 8003d54:	4413      	add	r3, r2
 8003d56:	4a31      	ldr	r2, [pc, #196]	; (8003e1c <SendData+0x69c>)
 8003d58:	8811      	ldrh	r1, [r2, #0]
 8003d5a:	7892      	ldrb	r2, [r2, #2]
 8003d5c:	8019      	strh	r1, [r3, #0]
 8003d5e:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"debughour\":\"");
 8003d60:	482d      	ldr	r0, [pc, #180]	; (8003e18 <SendData+0x698>)
 8003d62:	f7fc fa47 	bl	80001f4 <strlen>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <SendData+0x698>)
 8003d6c:	4413      	add	r3, r2
 8003d6e:	4a3e      	ldr	r2, [pc, #248]	; (8003e68 <SendData+0x6e8>)
 8003d70:	461c      	mov	r4, r3
 8003d72:	4613      	mov	r3, r2
 8003d74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003d76:	6020      	str	r0, [r4, #0]
 8003d78:	6061      	str	r1, [r4, #4]
 8003d7a:	60a2      	str	r2, [r4, #8]
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	81a3      	strh	r3, [r4, #12]
	strcat(JSON, str_debughourJSON);
 8003d80:	493a      	ldr	r1, [pc, #232]	; (8003e6c <SendData+0x6ec>)
 8003d82:	4825      	ldr	r0, [pc, #148]	; (8003e18 <SendData+0x698>)
 8003d84:	f006 fb77 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003d88:	4823      	ldr	r0, [pc, #140]	; (8003e18 <SendData+0x698>)
 8003d8a:	f7fc fa33 	bl	80001f4 <strlen>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <SendData+0x698>)
 8003d94:	4413      	add	r3, r2
 8003d96:	4a21      	ldr	r2, [pc, #132]	; (8003e1c <SendData+0x69c>)
 8003d98:	8811      	ldrh	r1, [r2, #0]
 8003d9a:	7892      	ldrb	r2, [r2, #2]
 8003d9c:	8019      	strh	r1, [r3, #0]
 8003d9e:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"debugminute\":\"");
 8003da0:	481d      	ldr	r0, [pc, #116]	; (8003e18 <SendData+0x698>)
 8003da2:	f7fc fa27 	bl	80001f4 <strlen>
 8003da6:	4603      	mov	r3, r0
 8003da8:	461a      	mov	r2, r3
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <SendData+0x698>)
 8003dac:	4413      	add	r3, r2
 8003dae:	4a30      	ldr	r2, [pc, #192]	; (8003e70 <SendData+0x6f0>)
 8003db0:	461c      	mov	r4, r3
 8003db2:	4615      	mov	r5, r2
 8003db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003db6:	6020      	str	r0, [r4, #0]
 8003db8:	6061      	str	r1, [r4, #4]
 8003dba:	60a2      	str	r2, [r4, #8]
 8003dbc:	60e3      	str	r3, [r4, #12]
	strcat(JSON, str_debugminuteJSON);
 8003dbe:	492d      	ldr	r1, [pc, #180]	; (8003e74 <SendData+0x6f4>)
 8003dc0:	4815      	ldr	r0, [pc, #84]	; (8003e18 <SendData+0x698>)
 8003dc2:	f006 fb58 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003dc6:	4814      	ldr	r0, [pc, #80]	; (8003e18 <SendData+0x698>)
 8003dc8:	f7fc fa14 	bl	80001f4 <strlen>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <SendData+0x698>)
 8003dd2:	4413      	add	r3, r2
 8003dd4:	4a11      	ldr	r2, [pc, #68]	; (8003e1c <SendData+0x69c>)
 8003dd6:	8811      	ldrh	r1, [r2, #0]
 8003dd8:	7892      	ldrb	r2, [r2, #2]
 8003dda:	8019      	strh	r1, [r3, #0]
 8003ddc:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"skipday\":\"");
 8003dde:	480e      	ldr	r0, [pc, #56]	; (8003e18 <SendData+0x698>)
 8003de0:	f7fc fa08 	bl	80001f4 <strlen>
 8003de4:	4603      	mov	r3, r0
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <SendData+0x698>)
 8003dea:	4413      	add	r3, r2
 8003dec:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <SendData+0x6f8>)
 8003dee:	461c      	mov	r4, r3
 8003df0:	4613      	mov	r3, r2
 8003df2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003df4:	6020      	str	r0, [r4, #0]
 8003df6:	6061      	str	r1, [r4, #4]
 8003df8:	60a2      	str	r2, [r4, #8]
	strcat(JSON, str_debugskipdayJSON);
 8003dfa:	4920      	ldr	r1, [pc, #128]	; (8003e7c <SendData+0x6fc>)
 8003dfc:	4806      	ldr	r0, [pc, #24]	; (8003e18 <SendData+0x698>)
 8003dfe:	f006 fb3a 	bl	800a476 <strcat>
	strcat(JSON, "\",");
 8003e02:	4805      	ldr	r0, [pc, #20]	; (8003e18 <SendData+0x698>)
 8003e04:	f7fc f9f6 	bl	80001f4 <strlen>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	e038      	b.n	8003e80 <SendData+0x700>
 8003e0e:	bf00      	nop
 8003e10:	0800d3f4 	.word	0x0800d3f4
 8003e14:	20001fe4 	.word	0x20001fe4
 8003e18:	200023d4 	.word	0x200023d4
 8003e1c:	0800d3c0 	.word	0x0800d3c0
 8003e20:	0800d3fc 	.word	0x0800d3fc
 8003e24:	20000d8c 	.word	0x20000d8c
 8003e28:	0800d404 	.word	0x0800d404
 8003e2c:	20001cbc 	.word	0x20001cbc
 8003e30:	0800d410 	.word	0x0800d410
 8003e34:	20000a58 	.word	0x20000a58
 8003e38:	0800d420 	.word	0x0800d420
 8003e3c:	20003664 	.word	0x20003664
 8003e40:	0800d42c 	.word	0x0800d42c
 8003e44:	20000350 	.word	0x20000350
 8003e48:	0800d434 	.word	0x0800d434
 8003e4c:	20000738 	.word	0x20000738
 8003e50:	0800d444 	.word	0x0800d444
 8003e54:	200018d0 	.word	0x200018d0
 8003e58:	0800d454 	.word	0x0800d454
 8003e5c:	20004674 	.word	0x20004674
 8003e60:	0800d464 	.word	0x0800d464
 8003e64:	20004e54 	.word	0x20004e54
 8003e68:	0800d474 	.word	0x0800d474
 8003e6c:	200014e8 	.word	0x200014e8
 8003e70:	0800d484 	.word	0x0800d484
 8003e74:	20003230 	.word	0x20003230
 8003e78:	0800d494 	.word	0x0800d494
 8003e7c:	20003e44 	.word	0x20003e44
 8003e80:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <SendData+0x76c>)
 8003e82:	4413      	add	r3, r2
 8003e84:	4a1a      	ldr	r2, [pc, #104]	; (8003ef0 <SendData+0x770>)
 8003e86:	8811      	ldrh	r1, [r2, #0]
 8003e88:	7892      	ldrb	r2, [r2, #2]
 8003e8a:	8019      	strh	r1, [r3, #0]
 8003e8c:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"donewatering\":\"");
 8003e8e:	4817      	ldr	r0, [pc, #92]	; (8003eec <SendData+0x76c>)
 8003e90:	f7fc f9b0 	bl	80001f4 <strlen>
 8003e94:	4603      	mov	r3, r0
 8003e96:	461a      	mov	r2, r3
 8003e98:	4b14      	ldr	r3, [pc, #80]	; (8003eec <SendData+0x76c>)
 8003e9a:	4413      	add	r3, r2
 8003e9c:	4a15      	ldr	r2, [pc, #84]	; (8003ef4 <SendData+0x774>)
 8003e9e:	461d      	mov	r5, r3
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ea4:	6028      	str	r0, [r5, #0]
 8003ea6:	6069      	str	r1, [r5, #4]
 8003ea8:	60aa      	str	r2, [r5, #8]
 8003eaa:	60eb      	str	r3, [r5, #12]
 8003eac:	7823      	ldrb	r3, [r4, #0]
 8003eae:	742b      	strb	r3, [r5, #16]
	strcat(JSON, str_donewateringJSON);
 8003eb0:	4911      	ldr	r1, [pc, #68]	; (8003ef8 <SendData+0x778>)
 8003eb2:	480e      	ldr	r0, [pc, #56]	; (8003eec <SendData+0x76c>)
 8003eb4:	f006 fadf 	bl	800a476 <strcat>
	strcat(JSON, "\"}\n");
 8003eb8:	480c      	ldr	r0, [pc, #48]	; (8003eec <SendData+0x76c>)
 8003eba:	f7fc f99b 	bl	80001f4 <strlen>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <SendData+0x76c>)
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4a0d      	ldr	r2, [pc, #52]	; (8003efc <SendData+0x77c>)
 8003ec8:	6810      	ldr	r0, [r2, #0]
 8003eca:	6018      	str	r0, [r3, #0]

	//HAL_Delay(100);
	//printf("%s", JSON);
	HAL_UART_Transmit(&huart6,(uint8_t *)&JSON , strlen(JSON), 0xFFFF);
 8003ecc:	4807      	ldr	r0, [pc, #28]	; (8003eec <SendData+0x76c>)
 8003ece:	f7fc f991 	bl	80001f4 <strlen>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eda:	4904      	ldr	r1, [pc, #16]	; (8003eec <SendData+0x76c>)
 8003edc:	4808      	ldr	r0, [pc, #32]	; (8003f00 <SendData+0x780>)
 8003ede:	f005 f94a 	bl	8009176 <HAL_UART_Transmit>


}
 8003ee2:	bf00      	nop
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200023d4 	.word	0x200023d4
 8003ef0:	0800d3c0 	.word	0x0800d3c0
 8003ef4:	0800d4a0 	.word	0x0800d4a0
 8003ef8:	200010ac 	.word	0x200010ac
 8003efc:	0800d4b4 	.word	0x0800d4b4
 8003f00:	2000422c 	.word	0x2000422c

08003f04 <uart_received>:

void uart_received(void){
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
	if(rx_data != '\n'){
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <uart_received+0x30>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b0a      	cmp	r3, #10
 8003f0e:	d009      	beq.n	8003f24 <uart_received+0x20>
		rx_buffer[rx_index++] = rx_data;
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <uart_received+0x34>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	4908      	ldr	r1, [pc, #32]	; (8003f38 <uart_received+0x34>)
 8003f18:	600a      	str	r2, [r1, #0]
 8003f1a:	4a06      	ldr	r2, [pc, #24]	; (8003f34 <uart_received+0x30>)
 8003f1c:	7811      	ldrb	r1, [r2, #0]
 8003f1e:	4a07      	ldr	r2, [pc, #28]	; (8003f3c <uart_received+0x38>)
 8003f20:	54d1      	strb	r1, [r2, r3]
	}else{
		XuLyJson(rx_buffer);
		clearbufferEnd();
	}
}
 8003f22:	e004      	b.n	8003f2e <uart_received+0x2a>
		XuLyJson(rx_buffer);
 8003f24:	4805      	ldr	r0, [pc, #20]	; (8003f3c <uart_received+0x38>)
 8003f26:	f000 f82f 	bl	8003f88 <XuLyJson>
		clearbufferEnd();
 8003f2a:	f000 f809 	bl	8003f40 <clearbufferEnd>
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000324 	.word	0x20000324
 8003f38:	20000328 	.word	0x20000328
 8003f3c:	20002884 	.word	0x20002884

08003f40 <clearbufferEnd>:

void clearbufferEnd(void){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
	rx_index = 0;
 8003f46:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <clearbufferEnd+0x3c>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
	for(int i =0; i <200; i++){
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	e007      	b.n	8003f62 <clearbufferEnd+0x22>
		rx_buffer[i] = 0;
 8003f52:	4a0b      	ldr	r2, [pc, #44]	; (8003f80 <clearbufferEnd+0x40>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4413      	add	r3, r2
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
	for(int i =0; i <200; i++){
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2bc7      	cmp	r3, #199	; 0xc7
 8003f66:	ddf4      	ble.n	8003f52 <clearbufferEnd+0x12>
	}
	last = HAL_GetTick();
 8003f68:	f001 fada 	bl	8005520 <HAL_GetTick>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <clearbufferEnd+0x44>)
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000328 	.word	0x20000328
 8003f80:	20002884 	.word	0x20002884
 8003f84:	2000032c 	.word	0x2000032c

08003f88 <XuLyJson>:

void XuLyJson(char *DataJson){
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	str_json = cJSON_Parse(DataJson);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7fd fd59 	bl	8001a48 <cJSON_Parse>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4a04      	ldr	r2, [pc, #16]	; (8003fac <XuLyJson+0x24>)
 8003f9a:	6013      	str	r3, [r2, #0]
	if(!str_json){
 8003f9c:	4b03      	ldr	r3, [pc, #12]	; (8003fac <XuLyJson+0x24>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d107      	bne.n	8003fb4 <XuLyJson+0x2c>
		printf("JSON ERROR! \r\n");
 8003fa4:	4802      	ldr	r0, [pc, #8]	; (8003fb0 <XuLyJson+0x28>)
 8003fa6:	f006 f9e3 	bl	800a370 <puts>
		return;
 8003faa:	e204      	b.n	80043b6 <XuLyJson+0x42e>
 8003fac:	200023d0 	.word	0x200023d0
 8003fb0:	0800d4b8 	.word	0x0800d4b8
	}else{
		printf("JSON OK! \r\n");
 8003fb4:	48a4      	ldr	r0, [pc, #656]	; (8004248 <XuLyJson+0x2c0>)
 8003fb6:	f006 f9db 	bl	800a370 <puts>
		if(cJSON_GetObjectItem(str_json, "reqline1")){
 8003fba:	4ba4      	ldr	r3, [pc, #656]	; (800424c <XuLyJson+0x2c4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	49a4      	ldr	r1, [pc, #656]	; (8004250 <XuLyJson+0x2c8>)
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe f846 	bl	8002052 <cJSON_GetObjectItem>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <XuLyJson+0x58>
			planner_line_compare[0] = cJSON_GetObjectItem(str_json, "reqline1")->valueint;
 8003fcc:	4b9f      	ldr	r3, [pc, #636]	; (800424c <XuLyJson+0x2c4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	499f      	ldr	r1, [pc, #636]	; (8004250 <XuLyJson+0x2c8>)
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe f83d 	bl	8002052 <cJSON_GetObjectItem>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	4a9d      	ldr	r2, [pc, #628]	; (8004254 <XuLyJson+0x2cc>)
 8003fde:	6013      	str	r3, [r2, #0]
		}if(cJSON_GetObjectItem(str_json, "reqline2")){
 8003fe0:	4b9a      	ldr	r3, [pc, #616]	; (800424c <XuLyJson+0x2c4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	499c      	ldr	r1, [pc, #624]	; (8004258 <XuLyJson+0x2d0>)
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe f833 	bl	8002052 <cJSON_GetObjectItem>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <XuLyJson+0x7e>
			planner_line_compare[1] = cJSON_GetObjectItem(str_json, "reqline2")->valueint;
 8003ff2:	4b96      	ldr	r3, [pc, #600]	; (800424c <XuLyJson+0x2c4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4998      	ldr	r1, [pc, #608]	; (8004258 <XuLyJson+0x2d0>)
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe f82a 	bl	8002052 <cJSON_GetObjectItem>
 8003ffe:	4603      	mov	r3, r0
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	4a94      	ldr	r2, [pc, #592]	; (8004254 <XuLyJson+0x2cc>)
 8004004:	6053      	str	r3, [r2, #4]
		}if(cJSON_GetObjectItem(str_json, "hour")){
 8004006:	4b91      	ldr	r3, [pc, #580]	; (800424c <XuLyJson+0x2c4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4994      	ldr	r1, [pc, #592]	; (800425c <XuLyJson+0x2d4>)
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe f820 	bl	8002052 <cJSON_GetObjectItem>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <XuLyJson+0xa4>
			planner_start_time_hours = cJSON_GetObjectItem(str_json, "hour")->valueint;
 8004018:	4b8c      	ldr	r3, [pc, #560]	; (800424c <XuLyJson+0x2c4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	498f      	ldr	r1, [pc, #572]	; (800425c <XuLyJson+0x2d4>)
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe f817 	bl	8002052 <cJSON_GetObjectItem>
 8004024:	4603      	mov	r3, r0
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	4a8d      	ldr	r2, [pc, #564]	; (8004260 <XuLyJson+0x2d8>)
 800402a:	6013      	str	r3, [r2, #0]
		}if(cJSON_GetObjectItem(str_json, "minute")){
 800402c:	4b87      	ldr	r3, [pc, #540]	; (800424c <XuLyJson+0x2c4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	498c      	ldr	r1, [pc, #560]	; (8004264 <XuLyJson+0x2dc>)
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe f80d 	bl	8002052 <cJSON_GetObjectItem>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <XuLyJson+0xca>
			planner_start_time_mins = cJSON_GetObjectItem(str_json, "minute")->valueint;
 800403e:	4b83      	ldr	r3, [pc, #524]	; (800424c <XuLyJson+0x2c4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4988      	ldr	r1, [pc, #544]	; (8004264 <XuLyJson+0x2dc>)
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe f804 	bl	8002052 <cJSON_GetObjectItem>
 800404a:	4603      	mov	r3, r0
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4a86      	ldr	r2, [pc, #536]	; (8004268 <XuLyJson+0x2e0>)
 8004050:	6013      	str	r3, [r2, #0]
		}if(cJSON_GetObjectItem(str_json, "mon")){
 8004052:	4b7e      	ldr	r3, [pc, #504]	; (800424c <XuLyJson+0x2c4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4985      	ldr	r1, [pc, #532]	; (800426c <XuLyJson+0x2e4>)
 8004058:	4618      	mov	r0, r3
 800405a:	f7fd fffa 	bl	8002052 <cJSON_GetObjectItem>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00f      	beq.n	8004084 <XuLyJson+0xfc>
			planner_weekdays[0] = (cJSON_GetObjectItem(str_json, "mon")->valueint) ? 1:0;
 8004064:	4b79      	ldr	r3, [pc, #484]	; (800424c <XuLyJson+0x2c4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4980      	ldr	r1, [pc, #512]	; (800426c <XuLyJson+0x2e4>)
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd fff1 	bl	8002052 <cJSON_GetObjectItem>
 8004070:	4603      	mov	r3, r0
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf14      	ite	ne
 8004078:	2301      	movne	r3, #1
 800407a:	2300      	moveq	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	4b7b      	ldr	r3, [pc, #492]	; (8004270 <XuLyJson+0x2e8>)
 8004082:	601a      	str	r2, [r3, #0]
		}if(cJSON_GetObjectItem(str_json, "tue")){
 8004084:	4b71      	ldr	r3, [pc, #452]	; (800424c <XuLyJson+0x2c4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	497a      	ldr	r1, [pc, #488]	; (8004274 <XuLyJson+0x2ec>)
 800408a:	4618      	mov	r0, r3
 800408c:	f7fd ffe1 	bl	8002052 <cJSON_GetObjectItem>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00f      	beq.n	80040b6 <XuLyJson+0x12e>
			planner_weekdays[1] = (cJSON_GetObjectItem(str_json, "tue")->valueint) ? 1:0;
 8004096:	4b6d      	ldr	r3, [pc, #436]	; (800424c <XuLyJson+0x2c4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4976      	ldr	r1, [pc, #472]	; (8004274 <XuLyJson+0x2ec>)
 800409c:	4618      	mov	r0, r3
 800409e:	f7fd ffd8 	bl	8002052 <cJSON_GetObjectItem>
 80040a2:	4603      	mov	r3, r0
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bf14      	ite	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	2300      	moveq	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	4b6f      	ldr	r3, [pc, #444]	; (8004270 <XuLyJson+0x2e8>)
 80040b4:	605a      	str	r2, [r3, #4]
		}if(cJSON_GetObjectItem(str_json, "wed")){
 80040b6:	4b65      	ldr	r3, [pc, #404]	; (800424c <XuLyJson+0x2c4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	496f      	ldr	r1, [pc, #444]	; (8004278 <XuLyJson+0x2f0>)
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fd ffc8 	bl	8002052 <cJSON_GetObjectItem>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00f      	beq.n	80040e8 <XuLyJson+0x160>
			planner_weekdays[2] = (cJSON_GetObjectItem(str_json, "wed")->valueint) ? 1:0;
 80040c8:	4b60      	ldr	r3, [pc, #384]	; (800424c <XuLyJson+0x2c4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	496a      	ldr	r1, [pc, #424]	; (8004278 <XuLyJson+0x2f0>)
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fd ffbf 	bl	8002052 <cJSON_GetObjectItem>
 80040d4:	4603      	mov	r3, r0
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	4b62      	ldr	r3, [pc, #392]	; (8004270 <XuLyJson+0x2e8>)
 80040e6:	609a      	str	r2, [r3, #8]
		}if(cJSON_GetObjectItem(str_json, "thu")){
 80040e8:	4b58      	ldr	r3, [pc, #352]	; (800424c <XuLyJson+0x2c4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4963      	ldr	r1, [pc, #396]	; (800427c <XuLyJson+0x2f4>)
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fd ffaf 	bl	8002052 <cJSON_GetObjectItem>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00f      	beq.n	800411a <XuLyJson+0x192>
			planner_weekdays[3] = (cJSON_GetObjectItem(str_json, "thu")->valueint) ? 1:0;
 80040fa:	4b54      	ldr	r3, [pc, #336]	; (800424c <XuLyJson+0x2c4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	495f      	ldr	r1, [pc, #380]	; (800427c <XuLyJson+0x2f4>)
 8004100:	4618      	mov	r0, r3
 8004102:	f7fd ffa6 	bl	8002052 <cJSON_GetObjectItem>
 8004106:	4603      	mov	r3, r0
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf14      	ite	ne
 800410e:	2301      	movne	r3, #1
 8004110:	2300      	moveq	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	4b56      	ldr	r3, [pc, #344]	; (8004270 <XuLyJson+0x2e8>)
 8004118:	60da      	str	r2, [r3, #12]
		}if(cJSON_GetObjectItem(str_json, "fri")){
 800411a:	4b4c      	ldr	r3, [pc, #304]	; (800424c <XuLyJson+0x2c4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4958      	ldr	r1, [pc, #352]	; (8004280 <XuLyJson+0x2f8>)
 8004120:	4618      	mov	r0, r3
 8004122:	f7fd ff96 	bl	8002052 <cJSON_GetObjectItem>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00f      	beq.n	800414c <XuLyJson+0x1c4>
			planner_weekdays[4] = (cJSON_GetObjectItem(str_json, "fri")->valueint) ? 1:0;
 800412c:	4b47      	ldr	r3, [pc, #284]	; (800424c <XuLyJson+0x2c4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4953      	ldr	r1, [pc, #332]	; (8004280 <XuLyJson+0x2f8>)
 8004132:	4618      	mov	r0, r3
 8004134:	f7fd ff8d 	bl	8002052 <cJSON_GetObjectItem>
 8004138:	4603      	mov	r3, r0
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf14      	ite	ne
 8004140:	2301      	movne	r3, #1
 8004142:	2300      	moveq	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	4b49      	ldr	r3, [pc, #292]	; (8004270 <XuLyJson+0x2e8>)
 800414a:	611a      	str	r2, [r3, #16]
		}if(cJSON_GetObjectItem(str_json, "sat")){
 800414c:	4b3f      	ldr	r3, [pc, #252]	; (800424c <XuLyJson+0x2c4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	494c      	ldr	r1, [pc, #304]	; (8004284 <XuLyJson+0x2fc>)
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd ff7d 	bl	8002052 <cJSON_GetObjectItem>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00f      	beq.n	800417e <XuLyJson+0x1f6>
			planner_weekdays[5] = (cJSON_GetObjectItem(str_json, "sat")->valueint) ? 1:0;
 800415e:	4b3b      	ldr	r3, [pc, #236]	; (800424c <XuLyJson+0x2c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4948      	ldr	r1, [pc, #288]	; (8004284 <XuLyJson+0x2fc>)
 8004164:	4618      	mov	r0, r3
 8004166:	f7fd ff74 	bl	8002052 <cJSON_GetObjectItem>
 800416a:	4603      	mov	r3, r0
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf14      	ite	ne
 8004172:	2301      	movne	r3, #1
 8004174:	2300      	moveq	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	4b3d      	ldr	r3, [pc, #244]	; (8004270 <XuLyJson+0x2e8>)
 800417c:	615a      	str	r2, [r3, #20]
		}if(cJSON_GetObjectItem(str_json, "sun")){
 800417e:	4b33      	ldr	r3, [pc, #204]	; (800424c <XuLyJson+0x2c4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4941      	ldr	r1, [pc, #260]	; (8004288 <XuLyJson+0x300>)
 8004184:	4618      	mov	r0, r3
 8004186:	f7fd ff64 	bl	8002052 <cJSON_GetObjectItem>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00f      	beq.n	80041b0 <XuLyJson+0x228>
			planner_weekdays[6] = (cJSON_GetObjectItem(str_json, "sun")->valueint) ? 1:0;
 8004190:	4b2e      	ldr	r3, [pc, #184]	; (800424c <XuLyJson+0x2c4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	493c      	ldr	r1, [pc, #240]	; (8004288 <XuLyJson+0x300>)
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd ff5b 	bl	8002052 <cJSON_GetObjectItem>
 800419c:	4603      	mov	r3, r0
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf14      	ite	ne
 80041a4:	2301      	movne	r3, #1
 80041a6:	2300      	moveq	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	4b30      	ldr	r3, [pc, #192]	; (8004270 <XuLyJson+0x2e8>)
 80041ae:	619a      	str	r2, [r3, #24]
		}if(cJSON_GetObjectItem(str_json, "temphigh")){
 80041b0:	4b26      	ldr	r3, [pc, #152]	; (800424c <XuLyJson+0x2c4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4935      	ldr	r1, [pc, #212]	; (800428c <XuLyJson+0x304>)
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fd ff4b 	bl	8002052 <cJSON_GetObjectItem>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <XuLyJson+0x24e>
			auto_limits[0] = cJSON_GetObjectItem(str_json, "temphigh")->valueint;
 80041c2:	4b22      	ldr	r3, [pc, #136]	; (800424c <XuLyJson+0x2c4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4931      	ldr	r1, [pc, #196]	; (800428c <XuLyJson+0x304>)
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fd ff42 	bl	8002052 <cJSON_GetObjectItem>
 80041ce:	4603      	mov	r3, r0
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	4a2f      	ldr	r2, [pc, #188]	; (8004290 <XuLyJson+0x308>)
 80041d4:	6013      	str	r3, [r2, #0]
		}if(cJSON_GetObjectItem(str_json, "templow")){
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <XuLyJson+0x2c4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	492e      	ldr	r1, [pc, #184]	; (8004294 <XuLyJson+0x30c>)
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fd ff38 	bl	8002052 <cJSON_GetObjectItem>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d009      	beq.n	80041fc <XuLyJson+0x274>
			auto_limits[1] = cJSON_GetObjectItem(str_json, "templow")->valueint;
 80041e8:	4b18      	ldr	r3, [pc, #96]	; (800424c <XuLyJson+0x2c4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4929      	ldr	r1, [pc, #164]	; (8004294 <XuLyJson+0x30c>)
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fd ff2f 	bl	8002052 <cJSON_GetObjectItem>
 80041f4:	4603      	mov	r3, r0
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	4a25      	ldr	r2, [pc, #148]	; (8004290 <XuLyJson+0x308>)
 80041fa:	6053      	str	r3, [r2, #4]
		}if(cJSON_GetObjectItem(str_json, "humhigh")){
 80041fc:	4b13      	ldr	r3, [pc, #76]	; (800424c <XuLyJson+0x2c4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4925      	ldr	r1, [pc, #148]	; (8004298 <XuLyJson+0x310>)
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd ff25 	bl	8002052 <cJSON_GetObjectItem>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <XuLyJson+0x29a>
			auto_limits[2] = cJSON_GetObjectItem(str_json, "humhigh")->valueint;
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <XuLyJson+0x2c4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4921      	ldr	r1, [pc, #132]	; (8004298 <XuLyJson+0x310>)
 8004214:	4618      	mov	r0, r3
 8004216:	f7fd ff1c 	bl	8002052 <cJSON_GetObjectItem>
 800421a:	4603      	mov	r3, r0
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <XuLyJson+0x308>)
 8004220:	6093      	str	r3, [r2, #8]
		}if(cJSON_GetObjectItem(str_json, "humlow")){
 8004222:	4b0a      	ldr	r3, [pc, #40]	; (800424c <XuLyJson+0x2c4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	491d      	ldr	r1, [pc, #116]	; (800429c <XuLyJson+0x314>)
 8004228:	4618      	mov	r0, r3
 800422a:	f7fd ff12 	bl	8002052 <cJSON_GetObjectItem>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d037      	beq.n	80042a4 <XuLyJson+0x31c>
			auto_limits[3] = cJSON_GetObjectItem(str_json, "humlow")->valueint;
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <XuLyJson+0x2c4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4918      	ldr	r1, [pc, #96]	; (800429c <XuLyJson+0x314>)
 800423a:	4618      	mov	r0, r3
 800423c:	f7fd ff09 	bl	8002052 <cJSON_GetObjectItem>
 8004240:	4603      	mov	r3, r0
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	e02c      	b.n	80042a0 <XuLyJson+0x318>
 8004246:	bf00      	nop
 8004248:	0800d4c8 	.word	0x0800d4c8
 800424c:	200023d0 	.word	0x200023d0
 8004250:	0800d4d4 	.word	0x0800d4d4
 8004254:	2000000c 	.word	0x2000000c
 8004258:	0800d4e0 	.word	0x0800d4e0
 800425c:	0800d4ec 	.word	0x0800d4ec
 8004260:	20000020 	.word	0x20000020
 8004264:	0800d4f4 	.word	0x0800d4f4
 8004268:	20000024 	.word	0x20000024
 800426c:	0800d4fc 	.word	0x0800d4fc
 8004270:	20000268 	.word	0x20000268
 8004274:	0800d500 	.word	0x0800d500
 8004278:	0800d504 	.word	0x0800d504
 800427c:	0800d508 	.word	0x0800d508
 8004280:	0800d50c 	.word	0x0800d50c
 8004284:	0800d510 	.word	0x0800d510
 8004288:	0800d514 	.word	0x0800d514
 800428c:	0800d518 	.word	0x0800d518
 8004290:	20000028 	.word	0x20000028
 8004294:	0800d524 	.word	0x0800d524
 8004298:	0800d52c 	.word	0x0800d52c
 800429c:	0800d534 	.word	0x0800d534
 80042a0:	4a46      	ldr	r2, [pc, #280]	; (80043bc <XuLyJson+0x434>)
 80042a2:	60d3      	str	r3, [r2, #12]
		}if(cJSON_GetObjectItem(str_json, "debugweek")){
 80042a4:	4b46      	ldr	r3, [pc, #280]	; (80043c0 <XuLyJson+0x438>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4946      	ldr	r1, [pc, #280]	; (80043c4 <XuLyJson+0x43c>)
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fd fed1 	bl	8002052 <cJSON_GetObjectItem>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <XuLyJson+0x342>
			auto_debug_weekday = cJSON_GetObjectItem(str_json, "debugweek")->valueint;
 80042b6:	4b42      	ldr	r3, [pc, #264]	; (80043c0 <XuLyJson+0x438>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4942      	ldr	r1, [pc, #264]	; (80043c4 <XuLyJson+0x43c>)
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fd fec8 	bl	8002052 <cJSON_GetObjectItem>
 80042c2:	4603      	mov	r3, r0
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	4a40      	ldr	r2, [pc, #256]	; (80043c8 <XuLyJson+0x440>)
 80042c8:	6013      	str	r3, [r2, #0]
		}if(cJSON_GetObjectItem(str_json, "debugon")){
 80042ca:	4b3d      	ldr	r3, [pc, #244]	; (80043c0 <XuLyJson+0x438>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	493f      	ldr	r1, [pc, #252]	; (80043cc <XuLyJson+0x444>)
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fd febe 	bl	8002052 <cJSON_GetObjectItem>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00f      	beq.n	80042fc <XuLyJson+0x374>
			nextday_dummy = (cJSON_GetObjectItem(str_json, "debugon")->valueint) ? 1:0;
 80042dc:	4b38      	ldr	r3, [pc, #224]	; (80043c0 <XuLyJson+0x438>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	493a      	ldr	r1, [pc, #232]	; (80043cc <XuLyJson+0x444>)
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fd feb5 	bl	8002052 <cJSON_GetObjectItem>
 80042e8:	4603      	mov	r3, r0
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bf14      	ite	ne
 80042f0:	2301      	movne	r3, #1
 80042f2:	2300      	moveq	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	4b35      	ldr	r3, [pc, #212]	; (80043d0 <XuLyJson+0x448>)
 80042fa:	601a      	str	r2, [r3, #0]
		}if(cJSON_GetObjectItem(str_json, "debugswitch")){
 80042fc:	4b30      	ldr	r3, [pc, #192]	; (80043c0 <XuLyJson+0x438>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4934      	ldr	r1, [pc, #208]	; (80043d4 <XuLyJson+0x44c>)
 8004302:	4618      	mov	r0, r3
 8004304:	f7fd fea5 	bl	8002052 <cJSON_GetObjectItem>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <XuLyJson+0x39a>
			debug_auto_case = cJSON_GetObjectItem(str_json, "debugswitch")->valueint;
 800430e:	4b2c      	ldr	r3, [pc, #176]	; (80043c0 <XuLyJson+0x438>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4930      	ldr	r1, [pc, #192]	; (80043d4 <XuLyJson+0x44c>)
 8004314:	4618      	mov	r0, r3
 8004316:	f7fd fe9c 	bl	8002052 <cJSON_GetObjectItem>
 800431a:	4603      	mov	r3, r0
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	4a2e      	ldr	r2, [pc, #184]	; (80043d8 <XuLyJson+0x450>)
 8004320:	6013      	str	r3, [r2, #0]
		}if(cJSON_GetObjectItem(str_json, "modselect")){
 8004322:	4b27      	ldr	r3, [pc, #156]	; (80043c0 <XuLyJson+0x438>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	492d      	ldr	r1, [pc, #180]	; (80043dc <XuLyJson+0x454>)
 8004328:	4618      	mov	r0, r3
 800432a:	f7fd fe92 	bl	8002052 <cJSON_GetObjectItem>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d03a      	beq.n	80043aa <XuLyJson+0x422>
			switch(cJSON_GetObjectItem(str_json, "modselect")->valueint){
 8004334:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <XuLyJson+0x438>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4928      	ldr	r1, [pc, #160]	; (80043dc <XuLyJson+0x454>)
 800433a:	4618      	mov	r0, r3
 800433c:	f7fd fe89 	bl	8002052 <cJSON_GetObjectItem>
 8004340:	4603      	mov	r3, r0
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	2b03      	cmp	r3, #3
 8004346:	d831      	bhi.n	80043ac <XuLyJson+0x424>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <XuLyJson+0x3c8>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004361 	.word	0x08004361
 8004354:	0800437b 	.word	0x0800437b
 8004358:	08004389 	.word	0x08004389
 800435c:	080043a3 	.word	0x080043a3
				case 0://off
					mode_manual(0);
 8004360:	2000      	movs	r0, #0
 8004362:	f7fe fe97 	bl	8003094 <mode_manual>
					mode_dummy = 0;
 8004366:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <XuLyJson+0x458>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
					skipday = 0;
 800436c:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <XuLyJson+0x45c>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
					global_planner_start = 0;
 8004372:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <XuLyJson+0x460>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
					break;
 8004378:	e018      	b.n	80043ac <XuLyJson+0x424>
				case 1://manual
					mode_manual(1);
 800437a:	2001      	movs	r0, #1
 800437c:	f7fe fe8a 	bl	8003094 <mode_manual>
					mode_dummy = 1;
 8004380:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <XuLyJson+0x458>)
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]
					break;
 8004386:	e011      	b.n	80043ac <XuLyJson+0x424>
				case 2://planner
					global_planner_start = 1;
 8004388:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <XuLyJson+0x460>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]
					mode_dummy = 2;
 800438e:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <XuLyJson+0x458>)
 8004390:	2202      	movs	r2, #2
 8004392:	601a      	str	r2, [r3, #0]
					mode_planner(0, global_planner_start);
 8004394:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <XuLyJson+0x460>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4619      	mov	r1, r3
 800439a:	2000      	movs	r0, #0
 800439c:	f7fe fef0 	bl	8003180 <mode_planner>
					break;
 80043a0:	e004      	b.n	80043ac <XuLyJson+0x424>
				case 3://auto
					mode_auto(1);
 80043a2:	2001      	movs	r0, #1
 80043a4:	f7ff f828 	bl	80033f8 <mode_auto>
					break;
 80043a8:	e000      	b.n	80043ac <XuLyJson+0x424>
			}
		}
 80043aa:	bf00      	nop
		cJSON_Delete(str_json);
 80043ac:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <XuLyJson+0x438>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fc fe4f 	bl	8001054 <cJSON_Delete>
	}
}
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000028 	.word	0x20000028
 80043c0:	200023d0 	.word	0x200023d0
 80043c4:	0800d53c 	.word	0x0800d53c
 80043c8:	20000338 	.word	0x20000338
 80043cc:	0800d548 	.word	0x0800d548
 80043d0:	20000330 	.word	0x20000330
 80043d4:	0800d550 	.word	0x0800d550
 80043d8:	2000033c 	.word	0x2000033c
 80043dc:	0800d55c 	.word	0x0800d55c
 80043e0:	20000334 	.word	0x20000334
 80043e4:	20000340 	.word	0x20000340
 80043e8:	20000264 	.word	0x20000264

080043ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART6){
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a09      	ldr	r2, [pc, #36]	; (8004420 <HAL_UART_RxCpltCallback+0x34>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d10c      	bne.n	8004418 <HAL_UART_RxCpltCallback+0x2c>
		last = HAL_GetTick();
 80043fe:	f001 f88f 	bl	8005520 <HAL_GetTick>
 8004402:	4603      	mov	r3, r0
 8004404:	461a      	mov	r2, r3
 8004406:	4b07      	ldr	r3, [pc, #28]	; (8004424 <HAL_UART_RxCpltCallback+0x38>)
 8004408:	601a      	str	r2, [r3, #0]
		uart_received();
 800440a:	f7ff fd7b 	bl	8003f04 <uart_received>
		HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 800440e:	2201      	movs	r2, #1
 8004410:	4905      	ldr	r1, [pc, #20]	; (8004428 <HAL_UART_RxCpltCallback+0x3c>)
 8004412:	4806      	ldr	r0, [pc, #24]	; (800442c <HAL_UART_RxCpltCallback+0x40>)
 8004414:	f004 ff41 	bl	800929a <HAL_UART_Receive_IT>
	}
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40011400 	.word	0x40011400
 8004424:	2000032c 	.word	0x2000032c
 8004428:	20000324 	.word	0x20000324
 800442c:	2000422c 	.word	0x2000422c

08004430 <lcd_initial_message>:
/*-----------------ESP32 UART END---------------------*/


/*-----------------MENU BEGIN-------------------------*/
void lcd_initial_message(){
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
	lcd_init ();
 8004434:	f7fd feb2 	bl	800219c <lcd_init>
	lcd_send_string ("ECODROP");
 8004438:	4812      	ldr	r0, [pc, #72]	; (8004484 <lcd_initial_message+0x54>)
 800443a:	f7fd fef1 	bl	8002220 <lcd_send_string>
	HAL_Delay(500);
 800443e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004442:	f001 f879 	bl	8005538 <HAL_Delay>
	lcd_put_cur(1, 0);
 8004446:	2100      	movs	r1, #0
 8004448:	2001      	movs	r0, #1
 800444a:	f7fd fe88 	bl	800215e <lcd_put_cur>
	lcd_send_string("Irrigation");
 800444e:	480e      	ldr	r0, [pc, #56]	; (8004488 <lcd_initial_message+0x58>)
 8004450:	f7fd fee6 	bl	8002220 <lcd_send_string>
	HAL_Delay(1000);
 8004454:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004458:	f001 f86e 	bl	8005538 <HAL_Delay>
	lcd_send_cmd (0x01);
 800445c:	2001      	movs	r0, #1
 800445e:	f7fd fe07 	bl	8002070 <lcd_send_cmd>
	HAL_Delay(100);
 8004462:	2064      	movs	r0, #100	; 0x64
 8004464:	f001 f868 	bl	8005538 <HAL_Delay>
	lcd_init ();
 8004468:	f7fd fe98 	bl	800219c <lcd_init>
	lcd_send_string ("> Manual Mode");
 800446c:	4807      	ldr	r0, [pc, #28]	; (800448c <lcd_initial_message+0x5c>)
 800446e:	f7fd fed7 	bl	8002220 <lcd_send_string>
	lcd_put_cur(1, 0);
 8004472:	2100      	movs	r1, #0
 8004474:	2001      	movs	r0, #1
 8004476:	f7fd fe72 	bl	800215e <lcd_put_cur>
	lcd_send_string("  Planner Mode  ");
 800447a:	4805      	ldr	r0, [pc, #20]	; (8004490 <lcd_initial_message+0x60>)
 800447c:	f7fd fed0 	bl	8002220 <lcd_send_string>

}
 8004480:	bf00      	nop
 8004482:	bd80      	pop	{r7, pc}
 8004484:	0800d568 	.word	0x0800d568
 8004488:	0800d570 	.word	0x0800d570
 800448c:	0800d57c 	.word	0x0800d57c
 8004490:	0800d58c 	.word	0x0800d58c

08004494 <menu_func>:

void menu_func(int refresh, int reset){
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
	if(refresh){
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 84cd 	beq.w	8004e40 <menu_func+0x9ac>
		current_page = (reset) ? 0:current_page;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <menu_func+0x1e>
 80044ac:	4bb0      	ldr	r3, [pc, #704]	; (8004770 <menu_func+0x2dc>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	e000      	b.n	80044b4 <menu_func+0x20>
 80044b2:	2300      	movs	r3, #0
 80044b4:	4aae      	ldr	r2, [pc, #696]	; (8004770 <menu_func+0x2dc>)
 80044b6:	6013      	str	r3, [r2, #0]
		lcd_clear();
 80044b8:	f7fd fe3a 	bl	8002130 <lcd_clear>
		switch(current_page){
 80044bc:	4bac      	ldr	r3, [pc, #688]	; (8004770 <menu_func+0x2dc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b11      	cmp	r3, #17
 80044c2:	f200 84b1 	bhi.w	8004e28 <menu_func+0x994>
 80044c6:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <menu_func+0x38>)
 80044c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044cc:	08004515 	.word	0x08004515
 80044d0:	08004591 	.word	0x08004591
 80044d4:	0800460d 	.word	0x0800460d
 80044d8:	08004681 	.word	0x08004681
 80044dc:	080046f5 	.word	0x080046f5
 80044e0:	080047a9 	.word	0x080047a9
 80044e4:	0800481d 	.word	0x0800481d
 80044e8:	0800486d 	.word	0x0800486d
 80044ec:	080048e1 	.word	0x080048e1
 80044f0:	08004955 	.word	0x08004955
 80044f4:	080049c9 	.word	0x080049c9
 80044f8:	08004a07 	.word	0x08004a07
 80044fc:	08004a89 	.word	0x08004a89
 8004500:	08004b0f 	.word	0x08004b0f
 8004504:	08004b83 	.word	0x08004b83
 8004508:	08004c61 	.word	0x08004c61
 800450c:	08004cd5 	.word	0x08004cd5
 8004510:	08004db5 	.word	0x08004db5
			case 0:
				if(menu_click){
 8004514:	4b97      	ldr	r3, [pc, #604]	; (8004774 <menu_func+0x2e0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00b      	beq.n	8004534 <menu_func+0xa0>
					current_page = 4;
 800451c:	4b94      	ldr	r3, [pc, #592]	; (8004770 <menu_func+0x2dc>)
 800451e:	2204      	movs	r2, #4
 8004520:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8004522:	4b94      	ldr	r3, [pc, #592]	; (8004774 <menu_func+0x2e0>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004528:	2100      	movs	r1, #0
 800452a:	2001      	movs	r0, #1
 800452c:	f7ff ffb2 	bl	8004494 <menu_func>
					break;
 8004530:	f000 bc7a 	b.w	8004e28 <menu_func+0x994>
				  }else if(menu_down){
 8004534:	4b90      	ldr	r3, [pc, #576]	; (8004778 <menu_func+0x2e4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <menu_func+0xc0>
					 current_page = 1;
 800453c:	4b8c      	ldr	r3, [pc, #560]	; (8004770 <menu_func+0x2dc>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]
					 menu_down=0;
 8004542:	4b8d      	ldr	r3, [pc, #564]	; (8004778 <menu_func+0x2e4>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
					 menu_func(1, 0);
 8004548:	2100      	movs	r1, #0
 800454a:	2001      	movs	r0, #1
 800454c:	f7ff ffa2 	bl	8004494 <menu_func>
					 break;
 8004550:	f000 bc6a 	b.w	8004e28 <menu_func+0x994>
				  }else if(menu_up){
 8004554:	4b89      	ldr	r3, [pc, #548]	; (800477c <menu_func+0x2e8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00b      	beq.n	8004574 <menu_func+0xe0>
					 current_page = 3;
 800455c:	4b84      	ldr	r3, [pc, #528]	; (8004770 <menu_func+0x2dc>)
 800455e:	2203      	movs	r2, #3
 8004560:	601a      	str	r2, [r3, #0]
					 menu_up =0;
 8004562:	4b86      	ldr	r3, [pc, #536]	; (800477c <menu_func+0x2e8>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
					 menu_func(1, 0);
 8004568:	2100      	movs	r1, #0
 800456a:	2001      	movs	r0, #1
 800456c:	f7ff ff92 	bl	8004494 <menu_func>
					 break;
 8004570:	f000 bc5a 	b.w	8004e28 <menu_func+0x994>
				  }
				lcd_init ();
 8004574:	f7fd fe12 	bl	800219c <lcd_init>
				lcd_send_string ("> Manual Mode");
 8004578:	4881      	ldr	r0, [pc, #516]	; (8004780 <menu_func+0x2ec>)
 800457a:	f7fd fe51 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 800457e:	2100      	movs	r1, #0
 8004580:	2001      	movs	r0, #1
 8004582:	f7fd fdec 	bl	800215e <lcd_put_cur>
				lcd_send_string("  Planner Mode  ");
 8004586:	487f      	ldr	r0, [pc, #508]	; (8004784 <menu_func+0x2f0>)
 8004588:	f7fd fe4a 	bl	8002220 <lcd_send_string>
				break;
 800458c:	f000 bc4c 	b.w	8004e28 <menu_func+0x994>

			case 1:
				if(menu_click){
 8004590:	4b78      	ldr	r3, [pc, #480]	; (8004774 <menu_func+0x2e0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <menu_func+0x11c>
					current_page = 7;
 8004598:	4b75      	ldr	r3, [pc, #468]	; (8004770 <menu_func+0x2dc>)
 800459a:	2207      	movs	r2, #7
 800459c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800459e:	4b75      	ldr	r3, [pc, #468]	; (8004774 <menu_func+0x2e0>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80045a4:	2100      	movs	r1, #0
 80045a6:	2001      	movs	r0, #1
 80045a8:	f7ff ff74 	bl	8004494 <menu_func>
					break;
 80045ac:	f000 bc3c 	b.w	8004e28 <menu_func+0x994>
				}else if(menu_down){
 80045b0:	4b71      	ldr	r3, [pc, #452]	; (8004778 <menu_func+0x2e4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00b      	beq.n	80045d0 <menu_func+0x13c>
					current_page = 2;
 80045b8:	4b6d      	ldr	r3, [pc, #436]	; (8004770 <menu_func+0x2dc>)
 80045ba:	2202      	movs	r2, #2
 80045bc:	601a      	str	r2, [r3, #0]
					menu_down =0;
 80045be:	4b6e      	ldr	r3, [pc, #440]	; (8004778 <menu_func+0x2e4>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80045c4:	2100      	movs	r1, #0
 80045c6:	2001      	movs	r0, #1
 80045c8:	f7ff ff64 	bl	8004494 <menu_func>
					break;
 80045cc:	f000 bc2c 	b.w	8004e28 <menu_func+0x994>
				}else if(menu_up){
 80045d0:	4b6a      	ldr	r3, [pc, #424]	; (800477c <menu_func+0x2e8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <menu_func+0x15c>
					current_page = 0;
 80045d8:	4b65      	ldr	r3, [pc, #404]	; (8004770 <menu_func+0x2dc>)
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
					menu_up =0;
 80045de:	4b67      	ldr	r3, [pc, #412]	; (800477c <menu_func+0x2e8>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80045e4:	2100      	movs	r1, #0
 80045e6:	2001      	movs	r0, #1
 80045e8:	f7ff ff54 	bl	8004494 <menu_func>
					break;
 80045ec:	f000 bc1c 	b.w	8004e28 <menu_func+0x994>
				}
				lcd_init ();
 80045f0:	f7fd fdd4 	bl	800219c <lcd_init>
				lcd_send_string ("> Planner Mode  ");
 80045f4:	4864      	ldr	r0, [pc, #400]	; (8004788 <menu_func+0x2f4>)
 80045f6:	f7fd fe13 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 80045fa:	2100      	movs	r1, #0
 80045fc:	2001      	movs	r0, #1
 80045fe:	f7fd fdae 	bl	800215e <lcd_put_cur>
				lcd_send_string("  Auto Mode");
 8004602:	4862      	ldr	r0, [pc, #392]	; (800478c <menu_func+0x2f8>)
 8004604:	f7fd fe0c 	bl	8002220 <lcd_send_string>
				break;
 8004608:	f000 bc0e 	b.w	8004e28 <menu_func+0x994>

			case 2:
				if(menu_click){
 800460c:	4b59      	ldr	r3, [pc, #356]	; (8004774 <menu_func+0x2e0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <menu_func+0x196>
					current_page = 14;
 8004614:	4b56      	ldr	r3, [pc, #344]	; (8004770 <menu_func+0x2dc>)
 8004616:	220e      	movs	r2, #14
 8004618:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800461a:	4b56      	ldr	r3, [pc, #344]	; (8004774 <menu_func+0x2e0>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004620:	2100      	movs	r1, #0
 8004622:	2001      	movs	r0, #1
 8004624:	f7ff ff36 	bl	8004494 <menu_func>
					break;
 8004628:	e3fe      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_down){
 800462a:	4b53      	ldr	r3, [pc, #332]	; (8004778 <menu_func+0x2e4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <menu_func+0x1b4>
					current_page = 3;
 8004632:	4b4f      	ldr	r3, [pc, #316]	; (8004770 <menu_func+0x2dc>)
 8004634:	2203      	movs	r2, #3
 8004636:	601a      	str	r2, [r3, #0]
					menu_down =0;
 8004638:	4b4f      	ldr	r3, [pc, #316]	; (8004778 <menu_func+0x2e4>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800463e:	2100      	movs	r1, #0
 8004640:	2001      	movs	r0, #1
 8004642:	f7ff ff27 	bl	8004494 <menu_func>
					break;
 8004646:	e3ef      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_up){
 8004648:	4b4c      	ldr	r3, [pc, #304]	; (800477c <menu_func+0x2e8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <menu_func+0x1d2>
					current_page = 1;
 8004650:	4b47      	ldr	r3, [pc, #284]	; (8004770 <menu_func+0x2dc>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]
					menu_up =0;
 8004656:	4b49      	ldr	r3, [pc, #292]	; (800477c <menu_func+0x2e8>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800465c:	2100      	movs	r1, #0
 800465e:	2001      	movs	r0, #1
 8004660:	f7ff ff18 	bl	8004494 <menu_func>
					break;
 8004664:	e3e0      	b.n	8004e28 <menu_func+0x994>
				}
				lcd_init ();
 8004666:	f7fd fd99 	bl	800219c <lcd_init>
				lcd_send_string ("> Auto Mode");
 800466a:	4849      	ldr	r0, [pc, #292]	; (8004790 <menu_func+0x2fc>)
 800466c:	f7fd fdd8 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 8004670:	2100      	movs	r1, #0
 8004672:	2001      	movs	r0, #1
 8004674:	f7fd fd73 	bl	800215e <lcd_put_cur>
				lcd_send_string("  Settings");
 8004678:	4846      	ldr	r0, [pc, #280]	; (8004794 <menu_func+0x300>)
 800467a:	f7fd fdd1 	bl	8002220 <lcd_send_string>
				break;
 800467e:	e3d3      	b.n	8004e28 <menu_func+0x994>

			case 3:
				if(menu_click){
 8004680:	4b3c      	ldr	r3, [pc, #240]	; (8004774 <menu_func+0x2e0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <menu_func+0x20a>
					current_page = 15;
 8004688:	4b39      	ldr	r3, [pc, #228]	; (8004770 <menu_func+0x2dc>)
 800468a:	220f      	movs	r2, #15
 800468c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800468e:	4b39      	ldr	r3, [pc, #228]	; (8004774 <menu_func+0x2e0>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004694:	2100      	movs	r1, #0
 8004696:	2001      	movs	r0, #1
 8004698:	f7ff fefc 	bl	8004494 <menu_func>
					break;
 800469c:	e3c4      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_down){
 800469e:	4b36      	ldr	r3, [pc, #216]	; (8004778 <menu_func+0x2e4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <menu_func+0x228>
					current_page = 0;
 80046a6:	4b32      	ldr	r3, [pc, #200]	; (8004770 <menu_func+0x2dc>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80046ac:	4b32      	ldr	r3, [pc, #200]	; (8004778 <menu_func+0x2e4>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80046b2:	2100      	movs	r1, #0
 80046b4:	2001      	movs	r0, #1
 80046b6:	f7ff feed 	bl	8004494 <menu_func>
					break;
 80046ba:	e3b5      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_up){
 80046bc:	4b2f      	ldr	r3, [pc, #188]	; (800477c <menu_func+0x2e8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <menu_func+0x246>
					current_page = 2;
 80046c4:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <menu_func+0x2dc>)
 80046c6:	2202      	movs	r2, #2
 80046c8:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80046ca:	4b2c      	ldr	r3, [pc, #176]	; (800477c <menu_func+0x2e8>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80046d0:	2100      	movs	r1, #0
 80046d2:	2001      	movs	r0, #1
 80046d4:	f7ff fede 	bl	8004494 <menu_func>
					break;
 80046d8:	e3a6      	b.n	8004e28 <menu_func+0x994>
				}
				lcd_init ();
 80046da:	f7fd fd5f 	bl	800219c <lcd_init>
				lcd_send_string ("> Settings");
 80046de:	482e      	ldr	r0, [pc, #184]	; (8004798 <menu_func+0x304>)
 80046e0:	f7fd fd9e 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 80046e4:	2100      	movs	r1, #0
 80046e6:	2001      	movs	r0, #1
 80046e8:	f7fd fd39 	bl	800215e <lcd_put_cur>
				lcd_send_string("  ");
 80046ec:	482b      	ldr	r0, [pc, #172]	; (800479c <menu_func+0x308>)
 80046ee:	f7fd fd97 	bl	8002220 <lcd_send_string>
				break;
 80046f2:	e399      	b.n	8004e28 <menu_func+0x994>

			case 4:
				if(menu_click){
 80046f4:	4b1f      	ldr	r3, [pc, #124]	; (8004774 <menu_func+0x2e0>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00d      	beq.n	8004718 <menu_func+0x284>
					current_page = 6;
 80046fc:	4b1c      	ldr	r3, [pc, #112]	; (8004770 <menu_func+0x2dc>)
 80046fe:	2206      	movs	r2, #6
 8004700:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8004702:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <menu_func+0x2e0>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
					mode_manual(1);
 8004708:	2001      	movs	r0, #1
 800470a:	f7fe fcc3 	bl	8003094 <mode_manual>
					menu_func(1, 0);
 800470e:	2100      	movs	r1, #0
 8004710:	2001      	movs	r0, #1
 8004712:	f7ff febf 	bl	8004494 <menu_func>
					break;
 8004716:	e387      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_down){
 8004718:	4b17      	ldr	r3, [pc, #92]	; (8004778 <menu_func+0x2e4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <menu_func+0x2a2>
					current_page = 5;
 8004720:	4b13      	ldr	r3, [pc, #76]	; (8004770 <menu_func+0x2dc>)
 8004722:	2205      	movs	r2, #5
 8004724:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <menu_func+0x2e4>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800472c:	2100      	movs	r1, #0
 800472e:	2001      	movs	r0, #1
 8004730:	f7ff feb0 	bl	8004494 <menu_func>
					break;
 8004734:	e378      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_up){
 8004736:	4b11      	ldr	r3, [pc, #68]	; (800477c <menu_func+0x2e8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <menu_func+0x2c0>
					current_page = 5;
 800473e:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <menu_func+0x2dc>)
 8004740:	2205      	movs	r2, #5
 8004742:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8004744:	4b0d      	ldr	r3, [pc, #52]	; (800477c <menu_func+0x2e8>)
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800474a:	2100      	movs	r1, #0
 800474c:	2001      	movs	r0, #1
 800474e:	f7ff fea1 	bl	8004494 <menu_func>
					break;
 8004752:	e369      	b.n	8004e28 <menu_func+0x994>
				}
				lcd_init ();
 8004754:	f7fd fd22 	bl	800219c <lcd_init>
				lcd_send_string ("> Press Start");
 8004758:	4811      	ldr	r0, [pc, #68]	; (80047a0 <menu_func+0x30c>)
 800475a:	f7fd fd61 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 800475e:	2100      	movs	r1, #0
 8004760:	2001      	movs	r0, #1
 8004762:	f7fd fcfc 	bl	800215e <lcd_put_cur>
				lcd_send_string(" Back");
 8004766:	480f      	ldr	r0, [pc, #60]	; (80047a4 <menu_func+0x310>)
 8004768:	f7fd fd5a 	bl	8002220 <lcd_send_string>
				break;
 800476c:	e35c      	b.n	8004e28 <menu_func+0x994>
 800476e:	bf00      	nop
 8004770:	20000258 	.word	0x20000258
 8004774:	2000024c 	.word	0x2000024c
 8004778:	20000254 	.word	0x20000254
 800477c:	20000250 	.word	0x20000250
 8004780:	0800d57c 	.word	0x0800d57c
 8004784:	0800d58c 	.word	0x0800d58c
 8004788:	0800d5a0 	.word	0x0800d5a0
 800478c:	0800d5b4 	.word	0x0800d5b4
 8004790:	0800d5c0 	.word	0x0800d5c0
 8004794:	0800d5cc 	.word	0x0800d5cc
 8004798:	0800d5d8 	.word	0x0800d5d8
 800479c:	0800d5e4 	.word	0x0800d5e4
 80047a0:	0800d5e8 	.word	0x0800d5e8
 80047a4:	0800d5f8 	.word	0x0800d5f8

			case 5:
				if(menu_click){
 80047a8:	4ba6      	ldr	r3, [pc, #664]	; (8004a44 <menu_func+0x5b0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <menu_func+0x332>
					current_page = 0;
 80047b0:	4ba5      	ldr	r3, [pc, #660]	; (8004a48 <menu_func+0x5b4>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80047b6:	4ba3      	ldr	r3, [pc, #652]	; (8004a44 <menu_func+0x5b0>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80047bc:	2100      	movs	r1, #0
 80047be:	2001      	movs	r0, #1
 80047c0:	f7ff fe68 	bl	8004494 <menu_func>
					break;
 80047c4:	e330      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_down){
 80047c6:	4ba1      	ldr	r3, [pc, #644]	; (8004a4c <menu_func+0x5b8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <menu_func+0x350>
					current_page = 4;
 80047ce:	4b9e      	ldr	r3, [pc, #632]	; (8004a48 <menu_func+0x5b4>)
 80047d0:	2204      	movs	r2, #4
 80047d2:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80047d4:	4b9d      	ldr	r3, [pc, #628]	; (8004a4c <menu_func+0x5b8>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80047da:	2100      	movs	r1, #0
 80047dc:	2001      	movs	r0, #1
 80047de:	f7ff fe59 	bl	8004494 <menu_func>
					break;
 80047e2:	e321      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_up){
 80047e4:	4b9a      	ldr	r3, [pc, #616]	; (8004a50 <menu_func+0x5bc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <menu_func+0x36e>
					current_page = 4;
 80047ec:	4b96      	ldr	r3, [pc, #600]	; (8004a48 <menu_func+0x5b4>)
 80047ee:	2204      	movs	r2, #4
 80047f0:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80047f2:	4b97      	ldr	r3, [pc, #604]	; (8004a50 <menu_func+0x5bc>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80047f8:	2100      	movs	r1, #0
 80047fa:	2001      	movs	r0, #1
 80047fc:	f7ff fe4a 	bl	8004494 <menu_func>
					break;
 8004800:	e312      	b.n	8004e28 <menu_func+0x994>
				}
				lcd_init ();
 8004802:	f7fd fccb 	bl	800219c <lcd_init>
				lcd_send_string ("> Back");
 8004806:	4893      	ldr	r0, [pc, #588]	; (8004a54 <menu_func+0x5c0>)
 8004808:	f7fd fd0a 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 800480c:	2100      	movs	r1, #0
 800480e:	2001      	movs	r0, #1
 8004810:	f7fd fca5 	bl	800215e <lcd_put_cur>
				lcd_send_string("");
 8004814:	4890      	ldr	r0, [pc, #576]	; (8004a58 <menu_func+0x5c4>)
 8004816:	f7fd fd03 	bl	8002220 <lcd_send_string>
				break;
 800481a:	e305      	b.n	8004e28 <menu_func+0x994>

			case 6:
				if(menu_click){
 800481c:	4b89      	ldr	r3, [pc, #548]	; (8004a44 <menu_func+0x5b0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00d      	beq.n	8004840 <menu_func+0x3ac>
					current_page = 4;
 8004824:	4b88      	ldr	r3, [pc, #544]	; (8004a48 <menu_func+0x5b4>)
 8004826:	2204      	movs	r2, #4
 8004828:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800482a:	4b86      	ldr	r3, [pc, #536]	; (8004a44 <menu_func+0x5b0>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
					mode_manual(0);
 8004830:	2000      	movs	r0, #0
 8004832:	f7fe fc2f 	bl	8003094 <mode_manual>
					menu_func(1, 0);
 8004836:	2100      	movs	r1, #0
 8004838:	2001      	movs	r0, #1
 800483a:	f7ff fe2b 	bl	8004494 <menu_func>
					lcd_init ();
					lcd_send_string ("Watering");
					lcd_put_cur(1, 0);
					lcd_send_string("Now");
				}
				break;
 800483e:	e2f3      	b.n	8004e28 <menu_func+0x994>
					current_page = 6;
 8004840:	4b81      	ldr	r3, [pc, #516]	; (8004a48 <menu_func+0x5b4>)
 8004842:	2206      	movs	r2, #6
 8004844:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8004846:	4b82      	ldr	r3, [pc, #520]	; (8004a50 <menu_func+0x5bc>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800484c:	4b7f      	ldr	r3, [pc, #508]	; (8004a4c <menu_func+0x5b8>)
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
					lcd_init ();
 8004852:	f7fd fca3 	bl	800219c <lcd_init>
					lcd_send_string ("Watering");
 8004856:	4881      	ldr	r0, [pc, #516]	; (8004a5c <menu_func+0x5c8>)
 8004858:	f7fd fce2 	bl	8002220 <lcd_send_string>
					lcd_put_cur(1, 0);
 800485c:	2100      	movs	r1, #0
 800485e:	2001      	movs	r0, #1
 8004860:	f7fd fc7d 	bl	800215e <lcd_put_cur>
					lcd_send_string("Now");
 8004864:	487e      	ldr	r0, [pc, #504]	; (8004a60 <menu_func+0x5cc>)
 8004866:	f7fd fcdb 	bl	8002220 <lcd_send_string>
				break;
 800486a:	e2dd      	b.n	8004e28 <menu_func+0x994>

			case 7:
				if(menu_click){
 800486c:	4b75      	ldr	r3, [pc, #468]	; (8004a44 <menu_func+0x5b0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <menu_func+0x3f6>
					current_page = 10;
 8004874:	4b74      	ldr	r3, [pc, #464]	; (8004a48 <menu_func+0x5b4>)
 8004876:	220a      	movs	r2, #10
 8004878:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800487a:	4b72      	ldr	r3, [pc, #456]	; (8004a44 <menu_func+0x5b0>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004880:	2100      	movs	r1, #0
 8004882:	2001      	movs	r0, #1
 8004884:	f7ff fe06 	bl	8004494 <menu_func>
					break;
 8004888:	e2ce      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_down){
 800488a:	4b70      	ldr	r3, [pc, #448]	; (8004a4c <menu_func+0x5b8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <menu_func+0x414>
					current_page = 8;
 8004892:	4b6d      	ldr	r3, [pc, #436]	; (8004a48 <menu_func+0x5b4>)
 8004894:	2208      	movs	r2, #8
 8004896:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8004898:	4b6c      	ldr	r3, [pc, #432]	; (8004a4c <menu_func+0x5b8>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800489e:	2100      	movs	r1, #0
 80048a0:	2001      	movs	r0, #1
 80048a2:	f7ff fdf7 	bl	8004494 <menu_func>
					break;
 80048a6:	e2bf      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_up){
 80048a8:	4b69      	ldr	r3, [pc, #420]	; (8004a50 <menu_func+0x5bc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <menu_func+0x432>
					current_page = 13;
 80048b0:	4b65      	ldr	r3, [pc, #404]	; (8004a48 <menu_func+0x5b4>)
 80048b2:	220d      	movs	r2, #13
 80048b4:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80048b6:	4b66      	ldr	r3, [pc, #408]	; (8004a50 <menu_func+0x5bc>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80048bc:	2100      	movs	r1, #0
 80048be:	2001      	movs	r0, #1
 80048c0:	f7ff fde8 	bl	8004494 <menu_func>
					break;
 80048c4:	e2b0      	b.n	8004e28 <menu_func+0x994>
				}
				lcd_init ();
 80048c6:	f7fd fc69 	bl	800219c <lcd_init>
				lcd_send_string ("> Line 1");
 80048ca:	4866      	ldr	r0, [pc, #408]	; (8004a64 <menu_func+0x5d0>)
 80048cc:	f7fd fca8 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 80048d0:	2100      	movs	r1, #0
 80048d2:	2001      	movs	r0, #1
 80048d4:	f7fd fc43 	bl	800215e <lcd_put_cur>
				lcd_send_string("  Line 2");
 80048d8:	4863      	ldr	r0, [pc, #396]	; (8004a68 <menu_func+0x5d4>)
 80048da:	f7fd fca1 	bl	8002220 <lcd_send_string>
				break;
 80048de:	e2a3      	b.n	8004e28 <menu_func+0x994>

			case 8:
				if(menu_click){
 80048e0:	4b58      	ldr	r3, [pc, #352]	; (8004a44 <menu_func+0x5b0>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <menu_func+0x46a>
					current_page = 10;
 80048e8:	4b57      	ldr	r3, [pc, #348]	; (8004a48 <menu_func+0x5b4>)
 80048ea:	220a      	movs	r2, #10
 80048ec:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80048ee:	4b55      	ldr	r3, [pc, #340]	; (8004a44 <menu_func+0x5b0>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80048f4:	2100      	movs	r1, #0
 80048f6:	2001      	movs	r0, #1
 80048f8:	f7ff fdcc 	bl	8004494 <menu_func>
					break;
 80048fc:	e294      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_down){
 80048fe:	4b53      	ldr	r3, [pc, #332]	; (8004a4c <menu_func+0x5b8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <menu_func+0x488>
					current_page = 9;
 8004906:	4b50      	ldr	r3, [pc, #320]	; (8004a48 <menu_func+0x5b4>)
 8004908:	2209      	movs	r2, #9
 800490a:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800490c:	4b4f      	ldr	r3, [pc, #316]	; (8004a4c <menu_func+0x5b8>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004912:	2100      	movs	r1, #0
 8004914:	2001      	movs	r0, #1
 8004916:	f7ff fdbd 	bl	8004494 <menu_func>
					break;
 800491a:	e285      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_up){
 800491c:	4b4c      	ldr	r3, [pc, #304]	; (8004a50 <menu_func+0x5bc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <menu_func+0x4a6>
					current_page = 7;
 8004924:	4b48      	ldr	r3, [pc, #288]	; (8004a48 <menu_func+0x5b4>)
 8004926:	2207      	movs	r2, #7
 8004928:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 800492a:	4b49      	ldr	r3, [pc, #292]	; (8004a50 <menu_func+0x5bc>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004930:	2100      	movs	r1, #0
 8004932:	2001      	movs	r0, #1
 8004934:	f7ff fdae 	bl	8004494 <menu_func>
					break;
 8004938:	e276      	b.n	8004e28 <menu_func+0x994>
				}
				lcd_init ();
 800493a:	f7fd fc2f 	bl	800219c <lcd_init>
				lcd_send_string ("> Line 2");
 800493e:	484b      	ldr	r0, [pc, #300]	; (8004a6c <menu_func+0x5d8>)
 8004940:	f7fd fc6e 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 8004944:	2100      	movs	r1, #0
 8004946:	2001      	movs	r0, #1
 8004948:	f7fd fc09 	bl	800215e <lcd_put_cur>
				lcd_send_string("  Time");
 800494c:	4848      	ldr	r0, [pc, #288]	; (8004a70 <menu_func+0x5dc>)
 800494e:	f7fd fc67 	bl	8002220 <lcd_send_string>
				break;
 8004952:	e269      	b.n	8004e28 <menu_func+0x994>

			case 9:
				if(menu_click){
 8004954:	4b3b      	ldr	r3, [pc, #236]	; (8004a44 <menu_func+0x5b0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <menu_func+0x4de>
					current_page = 11;
 800495c:	4b3a      	ldr	r3, [pc, #232]	; (8004a48 <menu_func+0x5b4>)
 800495e:	220b      	movs	r2, #11
 8004960:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8004962:	4b38      	ldr	r3, [pc, #224]	; (8004a44 <menu_func+0x5b0>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004968:	2100      	movs	r1, #0
 800496a:	2001      	movs	r0, #1
 800496c:	f7ff fd92 	bl	8004494 <menu_func>
					break;
 8004970:	e25a      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_down){
 8004972:	4b36      	ldr	r3, [pc, #216]	; (8004a4c <menu_func+0x5b8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <menu_func+0x4fc>
					current_page = 12;
 800497a:	4b33      	ldr	r3, [pc, #204]	; (8004a48 <menu_func+0x5b4>)
 800497c:	220c      	movs	r2, #12
 800497e:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8004980:	4b32      	ldr	r3, [pc, #200]	; (8004a4c <menu_func+0x5b8>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004986:	2100      	movs	r1, #0
 8004988:	2001      	movs	r0, #1
 800498a:	f7ff fd83 	bl	8004494 <menu_func>
					break;
 800498e:	e24b      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_up){
 8004990:	4b2f      	ldr	r3, [pc, #188]	; (8004a50 <menu_func+0x5bc>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <menu_func+0x51a>
					current_page = 8;
 8004998:	4b2b      	ldr	r3, [pc, #172]	; (8004a48 <menu_func+0x5b4>)
 800499a:	2208      	movs	r2, #8
 800499c:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 800499e:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <menu_func+0x5bc>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80049a4:	2100      	movs	r1, #0
 80049a6:	2001      	movs	r0, #1
 80049a8:	f7ff fd74 	bl	8004494 <menu_func>
					break;
 80049ac:	e23c      	b.n	8004e28 <menu_func+0x994>
				}
				lcd_init ();
 80049ae:	f7fd fbf5 	bl	800219c <lcd_init>
				lcd_send_string ("> Time");
 80049b2:	4830      	ldr	r0, [pc, #192]	; (8004a74 <menu_func+0x5e0>)
 80049b4:	f7fd fc34 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 80049b8:	2100      	movs	r1, #0
 80049ba:	2001      	movs	r0, #1
 80049bc:	f7fd fbcf 	bl	800215e <lcd_put_cur>
				lcd_send_string("  Start");
 80049c0:	482d      	ldr	r0, [pc, #180]	; (8004a78 <menu_func+0x5e4>)
 80049c2:	f7fd fc2d 	bl	8002220 <lcd_send_string>
				break;
 80049c6:	e22f      	b.n	8004e28 <menu_func+0x994>

			case 10:
				if(menu_click){
 80049c8:	4b1e      	ldr	r3, [pc, #120]	; (8004a44 <menu_func+0x5b0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <menu_func+0x552>
					current_page = 7;
 80049d0:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <menu_func+0x5b4>)
 80049d2:	2207      	movs	r2, #7
 80049d4:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80049d6:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <menu_func+0x5b0>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80049dc:	2100      	movs	r1, #0
 80049de:	2001      	movs	r0, #1
 80049e0:	f7ff fd58 	bl	8004494 <menu_func>
					break;
 80049e4:	e220      	b.n	8004e28 <menu_func+0x994>
				}else{
					current_page = 10;
 80049e6:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <menu_func+0x5b4>)
 80049e8:	220a      	movs	r2, #10
 80049ea:	601a      	str	r2, [r3, #0]
					lcd_init ();
 80049ec:	f7fd fbd6 	bl	800219c <lcd_init>
					lcd_send_string ("> 20");
 80049f0:	4822      	ldr	r0, [pc, #136]	; (8004a7c <menu_func+0x5e8>)
 80049f2:	f7fd fc15 	bl	8002220 <lcd_send_string>
					lcd_put_cur(1, 0);
 80049f6:	2100      	movs	r1, #0
 80049f8:	2001      	movs	r0, #1
 80049fa:	f7fd fbb0 	bl	800215e <lcd_put_cur>
					lcd_send_string("  ");
 80049fe:	4820      	ldr	r0, [pc, #128]	; (8004a80 <menu_func+0x5ec>)
 8004a00:	f7fd fc0e 	bl	8002220 <lcd_send_string>
				}
				break;
 8004a04:	e210      	b.n	8004e28 <menu_func+0x994>

			case 11:
				if(menu_click){
 8004a06:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <menu_func+0x5b0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <menu_func+0x590>
					current_page = 9;
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <menu_func+0x5b4>)
 8004a10:	2209      	movs	r2, #9
 8004a12:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8004a14:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <menu_func+0x5b0>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	f7ff fd39 	bl	8004494 <menu_func>
					break;
 8004a22:	e201      	b.n	8004e28 <menu_func+0x994>
				}else{
					current_page = 11;
 8004a24:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <menu_func+0x5b4>)
 8004a26:	220b      	movs	r2, #11
 8004a28:	601a      	str	r2, [r3, #0]
					lcd_init ();
 8004a2a:	f7fd fbb7 	bl	800219c <lcd_init>
					lcd_send_string ("> Clock Loop");
 8004a2e:	4815      	ldr	r0, [pc, #84]	; (8004a84 <menu_func+0x5f0>)
 8004a30:	f7fd fbf6 	bl	8002220 <lcd_send_string>
					lcd_put_cur(1, 0);
 8004a34:	2100      	movs	r1, #0
 8004a36:	2001      	movs	r0, #1
 8004a38:	f7fd fb91 	bl	800215e <lcd_put_cur>
					lcd_send_string("  ");
 8004a3c:	4810      	ldr	r0, [pc, #64]	; (8004a80 <menu_func+0x5ec>)
 8004a3e:	f7fd fbef 	bl	8002220 <lcd_send_string>
				}
				break;
 8004a42:	e1f1      	b.n	8004e28 <menu_func+0x994>
 8004a44:	2000024c 	.word	0x2000024c
 8004a48:	20000258 	.word	0x20000258
 8004a4c:	20000254 	.word	0x20000254
 8004a50:	20000250 	.word	0x20000250
 8004a54:	0800d600 	.word	0x0800d600
 8004a58:	0800d608 	.word	0x0800d608
 8004a5c:	0800d60c 	.word	0x0800d60c
 8004a60:	0800d618 	.word	0x0800d618
 8004a64:	0800d61c 	.word	0x0800d61c
 8004a68:	0800d628 	.word	0x0800d628
 8004a6c:	0800d634 	.word	0x0800d634
 8004a70:	0800d640 	.word	0x0800d640
 8004a74:	0800d648 	.word	0x0800d648
 8004a78:	0800d650 	.word	0x0800d650
 8004a7c:	0800d658 	.word	0x0800d658
 8004a80:	0800d5e4 	.word	0x0800d5e4
 8004a84:	0800d660 	.word	0x0800d660

			case 12:
				if(menu_click){
 8004a88:	4baf      	ldr	r3, [pc, #700]	; (8004d48 <menu_func+0x8b4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d013      	beq.n	8004ab8 <menu_func+0x624>
					current_page = 1;
 8004a90:	4bae      	ldr	r3, [pc, #696]	; (8004d4c <menu_func+0x8b8>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8004a96:	4bac      	ldr	r3, [pc, #688]	; (8004d48 <menu_func+0x8b4>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
					global_planner_start = 1;
 8004a9c:	4bac      	ldr	r3, [pc, #688]	; (8004d50 <menu_func+0x8bc>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
					mode_planner(0, global_planner_start);
 8004aa2:	4bab      	ldr	r3, [pc, #684]	; (8004d50 <menu_func+0x8bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	f7fe fb69 	bl	8003180 <mode_planner>
					menu_func(1, 0);
 8004aae:	2100      	movs	r1, #0
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	f7ff fcef 	bl	8004494 <menu_func>
					break;
 8004ab6:	e1b7      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_down){
 8004ab8:	4ba6      	ldr	r3, [pc, #664]	; (8004d54 <menu_func+0x8c0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <menu_func+0x642>
					current_page = 13;
 8004ac0:	4ba2      	ldr	r3, [pc, #648]	; (8004d4c <menu_func+0x8b8>)
 8004ac2:	220d      	movs	r2, #13
 8004ac4:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8004ac6:	4ba3      	ldr	r3, [pc, #652]	; (8004d54 <menu_func+0x8c0>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004acc:	2100      	movs	r1, #0
 8004ace:	2001      	movs	r0, #1
 8004ad0:	f7ff fce0 	bl	8004494 <menu_func>
					break;
 8004ad4:	e1a8      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_up){
 8004ad6:	4ba0      	ldr	r3, [pc, #640]	; (8004d58 <menu_func+0x8c4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <menu_func+0x660>
					current_page = 9;
 8004ade:	4b9b      	ldr	r3, [pc, #620]	; (8004d4c <menu_func+0x8b8>)
 8004ae0:	2209      	movs	r2, #9
 8004ae2:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8004ae4:	4b9c      	ldr	r3, [pc, #624]	; (8004d58 <menu_func+0x8c4>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004aea:	2100      	movs	r1, #0
 8004aec:	2001      	movs	r0, #1
 8004aee:	f7ff fcd1 	bl	8004494 <menu_func>
					break;
 8004af2:	e199      	b.n	8004e28 <menu_func+0x994>
				}
				lcd_init ();
 8004af4:	f7fd fb52 	bl	800219c <lcd_init>
				lcd_send_string ("> Start");
 8004af8:	4898      	ldr	r0, [pc, #608]	; (8004d5c <menu_func+0x8c8>)
 8004afa:	f7fd fb91 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 8004afe:	2100      	movs	r1, #0
 8004b00:	2001      	movs	r0, #1
 8004b02:	f7fd fb2c 	bl	800215e <lcd_put_cur>
				lcd_send_string("  Back");
 8004b06:	4896      	ldr	r0, [pc, #600]	; (8004d60 <menu_func+0x8cc>)
 8004b08:	f7fd fb8a 	bl	8002220 <lcd_send_string>
				break;
 8004b0c:	e18c      	b.n	8004e28 <menu_func+0x994>

			case 13:
				if(menu_click){
 8004b0e:	4b8e      	ldr	r3, [pc, #568]	; (8004d48 <menu_func+0x8b4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <menu_func+0x698>
					current_page = 1;
 8004b16:	4b8d      	ldr	r3, [pc, #564]	; (8004d4c <menu_func+0x8b8>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8004b1c:	4b8a      	ldr	r3, [pc, #552]	; (8004d48 <menu_func+0x8b4>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004b22:	2100      	movs	r1, #0
 8004b24:	2001      	movs	r0, #1
 8004b26:	f7ff fcb5 	bl	8004494 <menu_func>
					break;
 8004b2a:	e17d      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_down){
 8004b2c:	4b89      	ldr	r3, [pc, #548]	; (8004d54 <menu_func+0x8c0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <menu_func+0x6b6>
					current_page = 7;
 8004b34:	4b85      	ldr	r3, [pc, #532]	; (8004d4c <menu_func+0x8b8>)
 8004b36:	2207      	movs	r2, #7
 8004b38:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8004b3a:	4b86      	ldr	r3, [pc, #536]	; (8004d54 <menu_func+0x8c0>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004b40:	2100      	movs	r1, #0
 8004b42:	2001      	movs	r0, #1
 8004b44:	f7ff fca6 	bl	8004494 <menu_func>
					break;
 8004b48:	e16e      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_up){
 8004b4a:	4b83      	ldr	r3, [pc, #524]	; (8004d58 <menu_func+0x8c4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <menu_func+0x6d4>
					current_page = 12;
 8004b52:	4b7e      	ldr	r3, [pc, #504]	; (8004d4c <menu_func+0x8b8>)
 8004b54:	220c      	movs	r2, #12
 8004b56:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8004b58:	4b7f      	ldr	r3, [pc, #508]	; (8004d58 <menu_func+0x8c4>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004b5e:	2100      	movs	r1, #0
 8004b60:	2001      	movs	r0, #1
 8004b62:	f7ff fc97 	bl	8004494 <menu_func>
					break;
 8004b66:	e15f      	b.n	8004e28 <menu_func+0x994>
				}
				lcd_init ();
 8004b68:	f7fd fb18 	bl	800219c <lcd_init>
				lcd_send_string ("> Back");
 8004b6c:	487d      	ldr	r0, [pc, #500]	; (8004d64 <menu_func+0x8d0>)
 8004b6e:	f7fd fb57 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 8004b72:	2100      	movs	r1, #0
 8004b74:	2001      	movs	r0, #1
 8004b76:	f7fd faf2 	bl	800215e <lcd_put_cur>
				lcd_send_string(" ");
 8004b7a:	487b      	ldr	r0, [pc, #492]	; (8004d68 <menu_func+0x8d4>)
 8004b7c:	f7fd fb50 	bl	8002220 <lcd_send_string>
				break;
 8004b80:	e152      	b.n	8004e28 <menu_func+0x994>

			case 14:
				if(menu_click){
 8004b82:	4b71      	ldr	r3, [pc, #452]	; (8004d48 <menu_func+0x8b4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <menu_func+0x70c>
					current_page = 2;
 8004b8a:	4b70      	ldr	r3, [pc, #448]	; (8004d4c <menu_func+0x8b8>)
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8004b90:	4b6d      	ldr	r3, [pc, #436]	; (8004d48 <menu_func+0x8b4>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004b96:	2100      	movs	r1, #0
 8004b98:	2001      	movs	r0, #1
 8004b9a:	f7ff fc7b 	bl	8004494 <menu_func>
					break;
 8004b9e:	e143      	b.n	8004e28 <menu_func+0x994>
				}else{
					current_page = 14;
 8004ba0:	4b6a      	ldr	r3, [pc, #424]	; (8004d4c <menu_func+0x8b8>)
 8004ba2:	220e      	movs	r2, #14
 8004ba4:	601a      	str	r2, [r3, #0]
					lcd_init ();
 8004ba6:	f7fd faf9 	bl	800219c <lcd_init>
					itoa(inst_temperature, inst_temperature_s,10);
 8004baa:	4b70      	ldr	r3, [pc, #448]	; (8004d6c <menu_func+0x8d8>)
 8004bac:	edd3 7a00 	vldr	s15, [r3]
 8004bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bb4:	220a      	movs	r2, #10
 8004bb6:	496e      	ldr	r1, [pc, #440]	; (8004d70 <menu_func+0x8dc>)
 8004bb8:	ee17 0a90 	vmov	r0, s15
 8004bbc:	f005 fa98 	bl	800a0f0 <itoa>
					itoa(inst_humidity,inst_humidity_s,10);
 8004bc0:	4b6c      	ldr	r3, [pc, #432]	; (8004d74 <menu_func+0x8e0>)
 8004bc2:	edd3 7a00 	vldr	s15, [r3]
 8004bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bca:	220a      	movs	r2, #10
 8004bcc:	496a      	ldr	r1, [pc, #424]	; (8004d78 <menu_func+0x8e4>)
 8004bce:	ee17 0a90 	vmov	r0, s15
 8004bd2:	f005 fa8d 	bl	800a0f0 <itoa>
					itoa(adc_result_percentage[0],adc_percentage_s0,10);
 8004bd6:	4b69      	ldr	r3, [pc, #420]	; (8004d7c <menu_func+0x8e8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	220a      	movs	r2, #10
 8004bdc:	4968      	ldr	r1, [pc, #416]	; (8004d80 <menu_func+0x8ec>)
 8004bde:	4618      	mov	r0, r3
 8004be0:	f005 fa86 	bl	800a0f0 <itoa>
					lcd_send_string("T:");
 8004be4:	4867      	ldr	r0, [pc, #412]	; (8004d84 <menu_func+0x8f0>)
 8004be6:	f7fd fb1b 	bl	8002220 <lcd_send_string>
					lcd_send_string(inst_temperature_s);
 8004bea:	4861      	ldr	r0, [pc, #388]	; (8004d70 <menu_func+0x8dc>)
 8004bec:	f7fd fb18 	bl	8002220 <lcd_send_string>
					lcd_send_string(" H:");
 8004bf0:	4865      	ldr	r0, [pc, #404]	; (8004d88 <menu_func+0x8f4>)
 8004bf2:	f7fd fb15 	bl	8002220 <lcd_send_string>
					lcd_send_string(inst_humidity_s);
 8004bf6:	4860      	ldr	r0, [pc, #384]	; (8004d78 <menu_func+0x8e4>)
 8004bf8:	f7fd fb12 	bl	8002220 <lcd_send_string>
					lcd_send_string(" S1:");
 8004bfc:	4863      	ldr	r0, [pc, #396]	; (8004d8c <menu_func+0x8f8>)
 8004bfe:	f7fd fb0f 	bl	8002220 <lcd_send_string>
					lcd_send_string(adc_percentage_s0);
 8004c02:	485f      	ldr	r0, [pc, #380]	; (8004d80 <menu_func+0x8ec>)
 8004c04:	f7fd fb0c 	bl	8002220 <lcd_send_string>
					lcd_put_cur(1, 0);
 8004c08:	2100      	movs	r1, #0
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	f7fd faa7 	bl	800215e <lcd_put_cur>
					itoa(adc_result_percentage[1],adc_percentage_s1,10);
 8004c10:	4b5a      	ldr	r3, [pc, #360]	; (8004d7c <menu_func+0x8e8>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	220a      	movs	r2, #10
 8004c16:	495e      	ldr	r1, [pc, #376]	; (8004d90 <menu_func+0x8fc>)
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f005 fa69 	bl	800a0f0 <itoa>
					itoa(adc_result_percentage[2],adc_percentage_s2,10);
 8004c1e:	4b57      	ldr	r3, [pc, #348]	; (8004d7c <menu_func+0x8e8>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	220a      	movs	r2, #10
 8004c24:	495b      	ldr	r1, [pc, #364]	; (8004d94 <menu_func+0x900>)
 8004c26:	4618      	mov	r0, r3
 8004c28:	f005 fa62 	bl	800a0f0 <itoa>
					itoa(adc_result_percentage[3],adc_percentage_s3,10);
 8004c2c:	4b53      	ldr	r3, [pc, #332]	; (8004d7c <menu_func+0x8e8>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	220a      	movs	r2, #10
 8004c32:	4959      	ldr	r1, [pc, #356]	; (8004d98 <menu_func+0x904>)
 8004c34:	4618      	mov	r0, r3
 8004c36:	f005 fa5b 	bl	800a0f0 <itoa>
					lcd_send_string(" S2:");
 8004c3a:	4858      	ldr	r0, [pc, #352]	; (8004d9c <menu_func+0x908>)
 8004c3c:	f7fd faf0 	bl	8002220 <lcd_send_string>
					lcd_send_string(adc_percentage_s1);
 8004c40:	4853      	ldr	r0, [pc, #332]	; (8004d90 <menu_func+0x8fc>)
 8004c42:	f7fd faed 	bl	8002220 <lcd_send_string>
					lcd_send_string(" S3:");
 8004c46:	4856      	ldr	r0, [pc, #344]	; (8004da0 <menu_func+0x90c>)
 8004c48:	f7fd faea 	bl	8002220 <lcd_send_string>
					lcd_send_string(adc_percentage_s2);
 8004c4c:	4851      	ldr	r0, [pc, #324]	; (8004d94 <menu_func+0x900>)
 8004c4e:	f7fd fae7 	bl	8002220 <lcd_send_string>
					lcd_send_string(" S4:");
 8004c52:	4854      	ldr	r0, [pc, #336]	; (8004da4 <menu_func+0x910>)
 8004c54:	f7fd fae4 	bl	8002220 <lcd_send_string>
					lcd_send_string(adc_percentage_s3);
 8004c58:	484f      	ldr	r0, [pc, #316]	; (8004d98 <menu_func+0x904>)
 8004c5a:	f7fd fae1 	bl	8002220 <lcd_send_string>
				}
				break;
 8004c5e:	e0e3      	b.n	8004e28 <menu_func+0x994>

			case 15:
				if(menu_click){
 8004c60:	4b39      	ldr	r3, [pc, #228]	; (8004d48 <menu_func+0x8b4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <menu_func+0x7ea>
					current_page = 11;
 8004c68:	4b38      	ldr	r3, [pc, #224]	; (8004d4c <menu_func+0x8b8>)
 8004c6a:	220b      	movs	r2, #11
 8004c6c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8004c6e:	4b36      	ldr	r3, [pc, #216]	; (8004d48 <menu_func+0x8b4>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004c74:	2100      	movs	r1, #0
 8004c76:	2001      	movs	r0, #1
 8004c78:	f7ff fc0c 	bl	8004494 <menu_func>
					break;
 8004c7c:	e0d4      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_down){
 8004c7e:	4b35      	ldr	r3, [pc, #212]	; (8004d54 <menu_func+0x8c0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <menu_func+0x808>
					current_page = 16;
 8004c86:	4b31      	ldr	r3, [pc, #196]	; (8004d4c <menu_func+0x8b8>)
 8004c88:	2210      	movs	r2, #16
 8004c8a:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8004c8c:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <menu_func+0x8c0>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004c92:	2100      	movs	r1, #0
 8004c94:	2001      	movs	r0, #1
 8004c96:	f7ff fbfd 	bl	8004494 <menu_func>
					break;
 8004c9a:	e0c5      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_up){
 8004c9c:	4b2e      	ldr	r3, [pc, #184]	; (8004d58 <menu_func+0x8c4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <menu_func+0x826>
					current_page = 17;
 8004ca4:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <menu_func+0x8b8>)
 8004ca6:	2211      	movs	r2, #17
 8004ca8:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8004caa:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <menu_func+0x8c4>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	f7ff fbee 	bl	8004494 <menu_func>
					break;
 8004cb8:	e0b6      	b.n	8004e28 <menu_func+0x994>
				}
				lcd_init ();
 8004cba:	f7fd fa6f 	bl	800219c <lcd_init>
				lcd_send_string ("> Time S.");
 8004cbe:	483a      	ldr	r0, [pc, #232]	; (8004da8 <menu_func+0x914>)
 8004cc0:	f7fd faae 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	f7fd fa49 	bl	800215e <lcd_put_cur>
				lcd_send_string("  Bluetooth");
 8004ccc:	4837      	ldr	r0, [pc, #220]	; (8004dac <menu_func+0x918>)
 8004cce:	f7fd faa7 	bl	8002220 <lcd_send_string>
				break;
 8004cd2:	e0a9      	b.n	8004e28 <menu_func+0x994>

			case 16:
				if(menu_click){
 8004cd4:	4b1c      	ldr	r3, [pc, #112]	; (8004d48 <menu_func+0x8b4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <menu_func+0x85e>
					current_page = 11;
 8004cdc:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <menu_func+0x8b8>)
 8004cde:	220b      	movs	r2, #11
 8004ce0:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8004ce2:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <menu_func+0x8b4>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004ce8:	2100      	movs	r1, #0
 8004cea:	2001      	movs	r0, #1
 8004cec:	f7ff fbd2 	bl	8004494 <menu_func>
					break;
 8004cf0:	e09a      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_down){
 8004cf2:	4b18      	ldr	r3, [pc, #96]	; (8004d54 <menu_func+0x8c0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <menu_func+0x87c>
					current_page = 17;
 8004cfa:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <menu_func+0x8b8>)
 8004cfc:	2211      	movs	r2, #17
 8004cfe:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8004d00:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <menu_func+0x8c0>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004d06:	2100      	movs	r1, #0
 8004d08:	2001      	movs	r0, #1
 8004d0a:	f7ff fbc3 	bl	8004494 <menu_func>
					break;
 8004d0e:	e08b      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_up){
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <menu_func+0x8c4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <menu_func+0x89a>
					current_page = 15;
 8004d18:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <menu_func+0x8b8>)
 8004d1a:	220f      	movs	r2, #15
 8004d1c:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8004d1e:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <menu_func+0x8c4>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004d24:	2100      	movs	r1, #0
 8004d26:	2001      	movs	r0, #1
 8004d28:	f7ff fbb4 	bl	8004494 <menu_func>
					break;
 8004d2c:	e07c      	b.n	8004e28 <menu_func+0x994>
				}
				lcd_init ();
 8004d2e:	f7fd fa35 	bl	800219c <lcd_init>
				lcd_send_string ("> Bluetooth");
 8004d32:	481f      	ldr	r0, [pc, #124]	; (8004db0 <menu_func+0x91c>)
 8004d34:	f7fd fa74 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 8004d38:	2100      	movs	r1, #0
 8004d3a:	2001      	movs	r0, #1
 8004d3c:	f7fd fa0f 	bl	800215e <lcd_put_cur>
				lcd_send_string("  Back");
 8004d40:	4807      	ldr	r0, [pc, #28]	; (8004d60 <menu_func+0x8cc>)
 8004d42:	f7fd fa6d 	bl	8002220 <lcd_send_string>
				break;
 8004d46:	e06f      	b.n	8004e28 <menu_func+0x994>
 8004d48:	2000024c 	.word	0x2000024c
 8004d4c:	20000258 	.word	0x20000258
 8004d50:	20000264 	.word	0x20000264
 8004d54:	20000254 	.word	0x20000254
 8004d58:	20000250 	.word	0x20000250
 8004d5c:	0800d670 	.word	0x0800d670
 8004d60:	0800d678 	.word	0x0800d678
 8004d64:	0800d600 	.word	0x0800d600
 8004d68:	0800d680 	.word	0x0800d680
 8004d6c:	200002f4 	.word	0x200002f4
 8004d70:	20003168 	.word	0x20003168
 8004d74:	200002f8 	.word	0x200002f8
 8004d78:	20001fdc 	.word	0x20001fdc
 8004d7c:	20003178 	.word	0x20003178
 8004d80:	20004a5c 	.word	0x20004a5c
 8004d84:	0800d684 	.word	0x0800d684
 8004d88:	0800d688 	.word	0x0800d688
 8004d8c:	0800d68c 	.word	0x0800d68c
 8004d90:	20003e3c 	.word	0x20003e3c
 8004d94:	2000523c 	.word	0x2000523c
 8004d98:	20003170 	.word	0x20003170
 8004d9c:	0800d694 	.word	0x0800d694
 8004da0:	0800d69c 	.word	0x0800d69c
 8004da4:	0800d6a4 	.word	0x0800d6a4
 8004da8:	0800d6ac 	.word	0x0800d6ac
 8004dac:	0800d6b8 	.word	0x0800d6b8
 8004db0:	0800d6c4 	.word	0x0800d6c4
			case 17:
				if(menu_click){
 8004db4:	4b24      	ldr	r3, [pc, #144]	; (8004e48 <menu_func+0x9b4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <menu_func+0x93e>
					current_page = 3;
 8004dbc:	4b23      	ldr	r3, [pc, #140]	; (8004e4c <menu_func+0x9b8>)
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8004dc2:	4b21      	ldr	r3, [pc, #132]	; (8004e48 <menu_func+0x9b4>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004dc8:	2100      	movs	r1, #0
 8004dca:	2001      	movs	r0, #1
 8004dcc:	f7ff fb62 	bl	8004494 <menu_func>
					break;
 8004dd0:	e02a      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_down){
 8004dd2:	4b1f      	ldr	r3, [pc, #124]	; (8004e50 <menu_func+0x9bc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <menu_func+0x95c>
					current_page = 15;
 8004dda:	4b1c      	ldr	r3, [pc, #112]	; (8004e4c <menu_func+0x9b8>)
 8004ddc:	220f      	movs	r2, #15
 8004dde:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8004de0:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <menu_func+0x9bc>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004de6:	2100      	movs	r1, #0
 8004de8:	2001      	movs	r0, #1
 8004dea:	f7ff fb53 	bl	8004494 <menu_func>
					break;
 8004dee:	e01b      	b.n	8004e28 <menu_func+0x994>
				}else if(menu_up){
 8004df0:	4b18      	ldr	r3, [pc, #96]	; (8004e54 <menu_func+0x9c0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <menu_func+0x97a>
					current_page = 16;
 8004df8:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <menu_func+0x9b8>)
 8004dfa:	2210      	movs	r2, #16
 8004dfc:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8004dfe:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <menu_func+0x9c0>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8004e04:	2100      	movs	r1, #0
 8004e06:	2001      	movs	r0, #1
 8004e08:	f7ff fb44 	bl	8004494 <menu_func>
					break;
 8004e0c:	e00c      	b.n	8004e28 <menu_func+0x994>
				}
				lcd_init ();
 8004e0e:	f7fd f9c5 	bl	800219c <lcd_init>
				lcd_send_string ("> Back");
 8004e12:	4811      	ldr	r0, [pc, #68]	; (8004e58 <menu_func+0x9c4>)
 8004e14:	f7fd fa04 	bl	8002220 <lcd_send_string>
				lcd_put_cur(1, 0);
 8004e18:	2100      	movs	r1, #0
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	f7fd f99f 	bl	800215e <lcd_put_cur>
				lcd_send_string("  ");
 8004e20:	480e      	ldr	r0, [pc, #56]	; (8004e5c <menu_func+0x9c8>)
 8004e22:	f7fd f9fd 	bl	8002220 <lcd_send_string>
				break;
 8004e26:	bf00      	nop
		}
		menu_lcd_refresh = 0;
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <menu_func+0x9cc>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
		menu_click= 0;
 8004e2e:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <menu_func+0x9b4>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
		menu_up = 0;
 8004e34:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <menu_func+0x9c0>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
		menu_down = 0;
 8004e3a:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <menu_func+0x9bc>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
	}
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	2000024c 	.word	0x2000024c
 8004e4c:	20000258 	.word	0x20000258
 8004e50:	20000254 	.word	0x20000254
 8004e54:	20000250 	.word	0x20000250
 8004e58:	0800d600 	.word	0x0800d600
 8004e5c:	0800d5e4 	.word	0x0800d5e4
 8004e60:	20000248 	.word	0x20000248

08004e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e68:	b672      	cpsid	i
}
 8004e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e6c:	e7fe      	b.n	8004e6c <Error_Handler+0x8>
	...

08004e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e76:	2300      	movs	r3, #0
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <HAL_MspInit+0x4c>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	4a0f      	ldr	r2, [pc, #60]	; (8004ebc <HAL_MspInit+0x4c>)
 8004e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e84:	6453      	str	r3, [r2, #68]	; 0x44
 8004e86:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <HAL_MspInit+0x4c>)
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e8e:	607b      	str	r3, [r7, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	603b      	str	r3, [r7, #0]
 8004e96:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <HAL_MspInit+0x4c>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <HAL_MspInit+0x4c>)
 8004e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <HAL_MspInit+0x4c>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40023800 	.word	0x40023800

08004ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	; 0x28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec8:	f107 0314 	add.w	r3, r7, #20
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
 8004ed4:	60da      	str	r2, [r3, #12]
 8004ed6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a32      	ldr	r2, [pc, #200]	; (8004fa8 <HAL_ADC_MspInit+0xe8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d15e      	bne.n	8004fa0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	4b31      	ldr	r3, [pc, #196]	; (8004fac <HAL_ADC_MspInit+0xec>)
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eea:	4a30      	ldr	r2, [pc, #192]	; (8004fac <HAL_ADC_MspInit+0xec>)
 8004eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ef2:	4b2e      	ldr	r3, [pc, #184]	; (8004fac <HAL_ADC_MspInit+0xec>)
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	4b2a      	ldr	r3, [pc, #168]	; (8004fac <HAL_ADC_MspInit+0xec>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	4a29      	ldr	r2, [pc, #164]	; (8004fac <HAL_ADC_MspInit+0xec>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0e:	4b27      	ldr	r3, [pc, #156]	; (8004fac <HAL_ADC_MspInit+0xec>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = moisture_adc_sens0_Pin|moisture_adc_sens1_Pin|moisture_adc_sens2_Pin|moisture_adc_sens3_Pin
 8004f1a:	237f      	movs	r3, #127	; 0x7f
 8004f1c:	617b      	str	r3, [r7, #20]
                          |rain_adc_sens_Pin|waterlevel_adc_sens_Pin|waterflow_adc_sens_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f26:	f107 0314 	add.w	r3, r7, #20
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4820      	ldr	r0, [pc, #128]	; (8004fb0 <HAL_ADC_MspInit+0xf0>)
 8004f2e:	f001 fd77 	bl	8006a20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004f32:	4b20      	ldr	r3, [pc, #128]	; (8004fb4 <HAL_ADC_MspInit+0xf4>)
 8004f34:	4a20      	ldr	r2, [pc, #128]	; (8004fb8 <HAL_ADC_MspInit+0xf8>)
 8004f36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004f38:	4b1e      	ldr	r3, [pc, #120]	; (8004fb4 <HAL_ADC_MspInit+0xf4>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f3e:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <HAL_ADC_MspInit+0xf4>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f44:	4b1b      	ldr	r3, [pc, #108]	; (8004fb4 <HAL_ADC_MspInit+0xf4>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004f4a:	4b1a      	ldr	r3, [pc, #104]	; (8004fb4 <HAL_ADC_MspInit+0xf4>)
 8004f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004f52:	4b18      	ldr	r3, [pc, #96]	; (8004fb4 <HAL_ADC_MspInit+0xf4>)
 8004f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004f5a:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <HAL_ADC_MspInit+0xf4>)
 8004f5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004f62:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <HAL_ADC_MspInit+0xf4>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004f68:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <HAL_ADC_MspInit+0xf4>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f6e:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <HAL_ADC_MspInit+0xf4>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004f74:	480f      	ldr	r0, [pc, #60]	; (8004fb4 <HAL_ADC_MspInit+0xf4>)
 8004f76:	f001 f951 	bl	800621c <HAL_DMA_Init>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8004f80:	f7ff ff70 	bl	8004e64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a0b      	ldr	r2, [pc, #44]	; (8004fb4 <HAL_ADC_MspInit+0xf4>)
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
 8004f8a:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <HAL_ADC_MspInit+0xf4>)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004f90:	2200      	movs	r2, #0
 8004f92:	2100      	movs	r1, #0
 8004f94:	2012      	movs	r0, #18
 8004f96:	f001 f90a 	bl	80061ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004f9a:	2012      	movs	r0, #18
 8004f9c:	f001 f923 	bl	80061e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004fa0:	bf00      	nop
 8004fa2:	3728      	adds	r7, #40	; 0x28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40012000 	.word	0x40012000
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	40020000 	.word	0x40020000
 8004fb4:	20003194 	.word	0x20003194
 8004fb8:	40026410 	.word	0x40026410

08004fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08a      	sub	sp, #40	; 0x28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc4:	f107 0314 	add.w	r3, r7, #20
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	609a      	str	r2, [r3, #8]
 8004fd0:	60da      	str	r2, [r3, #12]
 8004fd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a19      	ldr	r2, [pc, #100]	; (8005040 <HAL_I2C_MspInit+0x84>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d12b      	bne.n	8005036 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	4b18      	ldr	r3, [pc, #96]	; (8005044 <HAL_I2C_MspInit+0x88>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	4a17      	ldr	r2, [pc, #92]	; (8005044 <HAL_I2C_MspInit+0x88>)
 8004fe8:	f043 0302 	orr.w	r3, r3, #2
 8004fec:	6313      	str	r3, [r2, #48]	; 0x30
 8004fee:	4b15      	ldr	r3, [pc, #84]	; (8005044 <HAL_I2C_MspInit+0x88>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_LCD_Pin|I2C1_SDA_LCD_Pin;
 8004ffa:	23c0      	movs	r3, #192	; 0xc0
 8004ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ffe:	2312      	movs	r3, #18
 8005000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005002:	2301      	movs	r3, #1
 8005004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005006:	2303      	movs	r3, #3
 8005008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800500a:	2304      	movs	r3, #4
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800500e:	f107 0314 	add.w	r3, r7, #20
 8005012:	4619      	mov	r1, r3
 8005014:	480c      	ldr	r0, [pc, #48]	; (8005048 <HAL_I2C_MspInit+0x8c>)
 8005016:	f001 fd03 	bl	8006a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	4b09      	ldr	r3, [pc, #36]	; (8005044 <HAL_I2C_MspInit+0x88>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	4a08      	ldr	r2, [pc, #32]	; (8005044 <HAL_I2C_MspInit+0x88>)
 8005024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005028:	6413      	str	r3, [r2, #64]	; 0x40
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <HAL_I2C_MspInit+0x88>)
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005036:	bf00      	nop
 8005038:	3728      	adds	r7, #40	; 0x28
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40005400 	.word	0x40005400
 8005044:	40023800 	.word	0x40023800
 8005048:	40020400 	.word	0x40020400

0800504c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a08      	ldr	r2, [pc, #32]	; (800507c <HAL_RTC_MspInit+0x30>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d10a      	bne.n	8005074 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800505e:	4b08      	ldr	r3, [pc, #32]	; (8005080 <HAL_RTC_MspInit+0x34>)
 8005060:	2201      	movs	r2, #1
 8005062:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8005064:	2200      	movs	r2, #0
 8005066:	2100      	movs	r1, #0
 8005068:	2029      	movs	r0, #41	; 0x29
 800506a:	f001 f8a0 	bl	80061ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800506e:	2029      	movs	r0, #41	; 0x29
 8005070:	f001 f8b9 	bl	80061e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005074:	bf00      	nop
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40002800 	.word	0x40002800
 8005080:	42470e3c 	.word	0x42470e3c

08005084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0b      	ldr	r2, [pc, #44]	; (80050c0 <HAL_TIM_Base_MspInit+0x3c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d10d      	bne.n	80050b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <HAL_TIM_Base_MspInit+0x40>)
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <HAL_TIM_Base_MspInit+0x40>)
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	6453      	str	r3, [r2, #68]	; 0x44
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <HAL_TIM_Base_MspInit+0x40>)
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40023800 	.word	0x40023800

080050c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d0:	f107 0314 	add.w	r3, r7, #20
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	605a      	str	r2, [r3, #4]
 80050da:	609a      	str	r2, [r3, #8]
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1d      	ldr	r2, [pc, #116]	; (800515c <HAL_UART_MspInit+0x94>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d134      	bne.n	8005154 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	4b1c      	ldr	r3, [pc, #112]	; (8005160 <HAL_UART_MspInit+0x98>)
 80050f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f2:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <HAL_UART_MspInit+0x98>)
 80050f4:	f043 0320 	orr.w	r3, r3, #32
 80050f8:	6453      	str	r3, [r2, #68]	; 0x44
 80050fa:	4b19      	ldr	r3, [pc, #100]	; (8005160 <HAL_UART_MspInit+0x98>)
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	4b15      	ldr	r3, [pc, #84]	; (8005160 <HAL_UART_MspInit+0x98>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	4a14      	ldr	r2, [pc, #80]	; (8005160 <HAL_UART_MspInit+0x98>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	6313      	str	r3, [r2, #48]	; 0x30
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_UART_MspInit+0x98>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005122:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005128:	2302      	movs	r3, #2
 800512a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005130:	2303      	movs	r3, #3
 8005132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005134:	2308      	movs	r3, #8
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005138:	f107 0314 	add.w	r3, r7, #20
 800513c:	4619      	mov	r1, r3
 800513e:	4809      	ldr	r0, [pc, #36]	; (8005164 <HAL_UART_MspInit+0x9c>)
 8005140:	f001 fc6e 	bl	8006a20 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005144:	2200      	movs	r2, #0
 8005146:	2100      	movs	r1, #0
 8005148:	2047      	movs	r0, #71	; 0x47
 800514a:	f001 f830 	bl	80061ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800514e:	2047      	movs	r0, #71	; 0x47
 8005150:	f001 f849 	bl	80061e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005154:	bf00      	nop
 8005156:	3728      	adds	r7, #40	; 0x28
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40011400 	.word	0x40011400
 8005160:	40023800 	.word	0x40023800
 8005164:	40020000 	.word	0x40020000

08005168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800516c:	e7fe      	b.n	800516c <NMI_Handler+0x4>

0800516e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800516e:	b480      	push	{r7}
 8005170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005172:	e7fe      	b.n	8005172 <HardFault_Handler+0x4>

08005174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005178:	e7fe      	b.n	8005178 <MemManage_Handler+0x4>

0800517a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800517a:	b480      	push	{r7}
 800517c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800517e:	e7fe      	b.n	800517e <BusFault_Handler+0x4>

08005180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005184:	e7fe      	b.n	8005184 <UsageFault_Handler+0x4>

08005186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005186:	b480      	push	{r7}
 8005188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800518a:	bf00      	nop
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005198:	bf00      	nop
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051a2:	b480      	push	{r7}
 80051a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051a6:	bf00      	nop
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051b4:	f000 f9a0 	bl	80054f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051b8:	bf00      	nop
 80051ba:	bd80      	pop	{r7, pc}

080051bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80051c0:	2001      	movs	r0, #1
 80051c2:	f001 fde3 	bl	8006d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80051c6:	bf00      	nop
 80051c8:	bd80      	pop	{r7, pc}

080051ca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80051ce:	2002      	movs	r0, #2
 80051d0:	f001 fddc 	bl	8006d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80051d4:	bf00      	nop
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80051dc:	4802      	ldr	r0, [pc, #8]	; (80051e8 <ADC_IRQHandler+0x10>)
 80051de:	f000 fa12 	bl	8005606 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	2000294c 	.word	0x2000294c

080051ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80051f0:	2080      	movs	r0, #128	; 0x80
 80051f2:	f001 fdcb 	bl	8006d8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80051f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80051fa:	f001 fdc7 	bl	8006d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80051fe:	bf00      	nop
 8005200:	bd80      	pop	{r7, pc}

08005202 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005206:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800520a:	f001 fdbf 	bl	8006d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8005218:	4802      	ldr	r0, [pc, #8]	; (8005224 <RTC_Alarm_IRQHandler+0x10>)
 800521a:	f003 fb2b 	bl	8008874 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	200031f4 	.word	0x200031f4

08005228 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800522c:	4802      	ldr	r0, [pc, #8]	; (8005238 <DMA2_Stream0_IRQHandler+0x10>)
 800522e:	f001 f98d 	bl	800654c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20003194 	.word	0x20003194

0800523c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005240:	4802      	ldr	r0, [pc, #8]	; (800524c <USART6_IRQHandler+0x10>)
 8005242:	f004 f85b 	bl	80092fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005246:	bf00      	nop
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	2000422c 	.word	0x2000422c

08005250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
	return 1;
 8005254:	2301      	movs	r3, #1
}
 8005256:	4618      	mov	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <_kill>:

int _kill(int pid, int sig)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800526a:	f004 feff 	bl	800a06c <__errno>
 800526e:	4603      	mov	r3, r0
 8005270:	2216      	movs	r2, #22
 8005272:	601a      	str	r2, [r3, #0]
	return -1;
 8005274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <_exit>:

void _exit (int status)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005288:	f04f 31ff 	mov.w	r1, #4294967295
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff ffe7 	bl	8005260 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005292:	e7fe      	b.n	8005292 <_exit+0x12>

08005294 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	e00a      	b.n	80052bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80052a6:	f3af 8000 	nop.w
 80052aa:	4601      	mov	r1, r0
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	60ba      	str	r2, [r7, #8]
 80052b2:	b2ca      	uxtb	r2, r1
 80052b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	3301      	adds	r3, #1
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	dbf0      	blt.n	80052a6 <_read+0x12>
	}

return len;
 80052c4:	687b      	ldr	r3, [r7, #4]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b086      	sub	sp, #24
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	e009      	b.n	80052f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	60ba      	str	r2, [r7, #8]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	3301      	adds	r3, #1
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	dbf1      	blt.n	80052e0 <_write+0x12>
	}
	return len;
 80052fc:	687b      	ldr	r3, [r7, #4]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <_close>:

int _close(int file)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
	return -1;
 800530e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800532e:	605a      	str	r2, [r3, #4]
	return 0;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <_isatty>:

int _isatty(int file)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
	return 1;
 8005346:	2301      	movs	r3, #1
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
	return 0;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005378:	4a14      	ldr	r2, [pc, #80]	; (80053cc <_sbrk+0x5c>)
 800537a:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <_sbrk+0x60>)
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005384:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <_sbrk+0x64>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800538c:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <_sbrk+0x64>)
 800538e:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <_sbrk+0x68>)
 8005390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <_sbrk+0x64>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4413      	add	r3, r2
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	429a      	cmp	r2, r3
 800539e:	d207      	bcs.n	80053b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053a0:	f004 fe64 	bl	800a06c <__errno>
 80053a4:	4603      	mov	r3, r0
 80053a6:	220c      	movs	r2, #12
 80053a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053aa:	f04f 33ff 	mov.w	r3, #4294967295
 80053ae:	e009      	b.n	80053c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053b0:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <_sbrk+0x64>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053b6:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <_sbrk+0x64>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	4a05      	ldr	r2, [pc, #20]	; (80053d4 <_sbrk+0x64>)
 80053c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053c2:	68fb      	ldr	r3, [r7, #12]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20010000 	.word	0x20010000
 80053d0:	00000400 	.word	0x00000400
 80053d4:	20000344 	.word	0x20000344
 80053d8:	20005258 	.word	0x20005258

080053dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <SystemInit+0x20>)
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e6:	4a05      	ldr	r2, [pc, #20]	; (80053fc <SystemInit+0x20>)
 80053e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053f0:	bf00      	nop
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	e000ed00 	.word	0xe000ed00

08005400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005438 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005404:	480d      	ldr	r0, [pc, #52]	; (800543c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005406:	490e      	ldr	r1, [pc, #56]	; (8005440 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005408:	4a0e      	ldr	r2, [pc, #56]	; (8005444 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800540a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800540c:	e002      	b.n	8005414 <LoopCopyDataInit>

0800540e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800540e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005412:	3304      	adds	r3, #4

08005414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005418:	d3f9      	bcc.n	800540e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800541a:	4a0b      	ldr	r2, [pc, #44]	; (8005448 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800541c:	4c0b      	ldr	r4, [pc, #44]	; (800544c <LoopFillZerobss+0x26>)
  movs r3, #0
 800541e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005420:	e001      	b.n	8005426 <LoopFillZerobss>

08005422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005424:	3204      	adds	r2, #4

08005426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005428:	d3fb      	bcc.n	8005422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800542a:	f7ff ffd7 	bl	80053dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800542e:	f004 fe23 	bl	800a078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005432:	f7fc ff0b 	bl	800224c <main>
  bx  lr    
 8005436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005438:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800543c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005440:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8005444:	0800db6c 	.word	0x0800db6c
  ldr r2, =_sbss
 8005448:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800544c:	20005258 	.word	0x20005258

08005450 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005450:	e7fe      	b.n	8005450 <DMA1_Stream0_IRQHandler>
	...

08005454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005458:	4b0e      	ldr	r3, [pc, #56]	; (8005494 <HAL_Init+0x40>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a0d      	ldr	r2, [pc, #52]	; (8005494 <HAL_Init+0x40>)
 800545e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005462:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_Init+0x40>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <HAL_Init+0x40>)
 800546a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800546e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005470:	4b08      	ldr	r3, [pc, #32]	; (8005494 <HAL_Init+0x40>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a07      	ldr	r2, [pc, #28]	; (8005494 <HAL_Init+0x40>)
 8005476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800547a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800547c:	2003      	movs	r0, #3
 800547e:	f000 fe8b 	bl	8006198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005482:	2000      	movs	r0, #0
 8005484:	f000 f808 	bl	8005498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005488:	f7ff fcf2 	bl	8004e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40023c00 	.word	0x40023c00

08005498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054a0:	4b12      	ldr	r3, [pc, #72]	; (80054ec <HAL_InitTick+0x54>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <HAL_InitTick+0x58>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	4619      	mov	r1, r3
 80054aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fea3 	bl	8006202 <HAL_SYSTICK_Config>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e00e      	b.n	80054e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b0f      	cmp	r3, #15
 80054ca:	d80a      	bhi.n	80054e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054cc:	2200      	movs	r2, #0
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	f04f 30ff 	mov.w	r0, #4294967295
 80054d4:	f000 fe6b 	bl	80061ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054d8:	4a06      	ldr	r2, [pc, #24]	; (80054f4 <HAL_InitTick+0x5c>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	e000      	b.n	80054e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20000038 	.word	0x20000038
 80054f0:	20000040 	.word	0x20000040
 80054f4:	2000003c 	.word	0x2000003c

080054f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054fc:	4b06      	ldr	r3, [pc, #24]	; (8005518 <HAL_IncTick+0x20>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_IncTick+0x24>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4413      	add	r3, r2
 8005508:	4a04      	ldr	r2, [pc, #16]	; (800551c <HAL_IncTick+0x24>)
 800550a:	6013      	str	r3, [r2, #0]
}
 800550c:	bf00      	nop
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	20000040 	.word	0x20000040
 800551c:	20005244 	.word	0x20005244

08005520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  return uwTick;
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <HAL_GetTick+0x14>)
 8005526:	681b      	ldr	r3, [r3, #0]
}
 8005528:	4618      	mov	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20005244 	.word	0x20005244

08005538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005540:	f7ff ffee 	bl	8005520 <HAL_GetTick>
 8005544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d005      	beq.n	800555e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <HAL_Delay+0x44>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800555e:	bf00      	nop
 8005560:	f7ff ffde 	bl	8005520 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	429a      	cmp	r2, r3
 800556e:	d8f7      	bhi.n	8005560 <HAL_Delay+0x28>
  {
  }
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000040 	.word	0x20000040

08005580 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e033      	b.n	80055fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff fc8e 	bl	8004ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d118      	bne.n	80055f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80055c6:	f023 0302 	bic.w	r3, r3, #2
 80055ca:	f043 0202 	orr.w	r2, r3, #2
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fb88 	bl	8005ce8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f023 0303 	bic.w	r3, r3, #3
 80055e6:	f043 0201 	orr.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	641a      	str	r2, [r3, #64]	; 0x40
 80055ee:	e001      	b.n	80055f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b02      	cmp	r3, #2
 8005622:	bf0c      	ite	eq
 8005624:	2301      	moveq	r3, #1
 8005626:	2300      	movne	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b20      	cmp	r3, #32
 8005638:	bf0c      	ite	eq
 800563a:	2301      	moveq	r3, #1
 800563c:	2300      	movne	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d049      	beq.n	80056dc <HAL_ADC_IRQHandler+0xd6>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d046      	beq.n	80056dc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b00      	cmp	r3, #0
 8005658:	d105      	bne.n	8005666 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d12b      	bne.n	80056cc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005678:	2b00      	cmp	r3, #0
 800567a:	d127      	bne.n	80056cc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005686:	2b00      	cmp	r3, #0
 8005688:	d006      	beq.n	8005698 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005694:	2b00      	cmp	r3, #0
 8005696:	d119      	bne.n	80056cc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0220 	bic.w	r2, r2, #32
 80056a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d105      	bne.n	80056cc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	f043 0201 	orr.w	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7fd fa35 	bl	8002b3c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f06f 0212 	mvn.w	r2, #18
 80056da:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fc:	2b80      	cmp	r3, #128	; 0x80
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d057      	beq.n	80057be <HAL_ADC_IRQHandler+0x1b8>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d054      	beq.n	80057be <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	f003 0310 	and.w	r3, r3, #16
 800571c:	2b00      	cmp	r3, #0
 800571e:	d105      	bne.n	800572c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d139      	bne.n	80057ae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005744:	2b00      	cmp	r3, #0
 8005746:	d006      	beq.n	8005756 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005752:	2b00      	cmp	r3, #0
 8005754:	d12b      	bne.n	80057ae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005760:	2b00      	cmp	r3, #0
 8005762:	d124      	bne.n	80057ae <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800576e:	2b00      	cmp	r3, #0
 8005770:	d11d      	bne.n	80057ae <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005776:	2b00      	cmp	r3, #0
 8005778:	d119      	bne.n	80057ae <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005788:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d105      	bne.n	80057ae <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f043 0201 	orr.w	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fc18 	bl	8005fe4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 020c 	mvn.w	r2, #12
 80057bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	bf0c      	ite	eq
 80057cc:	2301      	moveq	r3, #1
 80057ce:	2300      	movne	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	bf0c      	ite	eq
 80057e2:	2301      	moveq	r3, #1
 80057e4:	2300      	movne	r3, #0
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d017      	beq.n	8005820 <HAL_ADC_IRQHandler+0x21a>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d014      	beq.n	8005820 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b01      	cmp	r3, #1
 8005802:	d10d      	bne.n	8005820 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f933 	bl	8005a7c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f06f 0201 	mvn.w	r2, #1
 800581e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b20      	cmp	r3, #32
 800582c:	bf0c      	ite	eq
 800582e:	2301      	moveq	r3, #1
 8005830:	2300      	movne	r3, #0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005844:	bf0c      	ite	eq
 8005846:	2301      	moveq	r3, #1
 8005848:	2300      	movne	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d015      	beq.n	8005880 <HAL_ADC_IRQHandler+0x27a>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d012      	beq.n	8005880 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	f043 0202 	orr.w	r2, r3, #2
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f06f 0220 	mvn.w	r2, #32
 800586e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f90d 	bl	8005a90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f06f 0220 	mvn.w	r2, #32
 800587e:	601a      	str	r2, [r3, #0]
  }
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_ADC_Start_DMA+0x1e>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e0ce      	b.n	8005a44 <HAL_ADC_Start_DMA+0x1bc>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d018      	beq.n	80058ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80058cc:	4b5f      	ldr	r3, [pc, #380]	; (8005a4c <HAL_ADC_Start_DMA+0x1c4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a5f      	ldr	r2, [pc, #380]	; (8005a50 <HAL_ADC_Start_DMA+0x1c8>)
 80058d2:	fba2 2303 	umull	r2, r3, r2, r3
 80058d6:	0c9a      	lsrs	r2, r3, #18
 80058d8:	4613      	mov	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	4413      	add	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80058e0:	e002      	b.n	80058e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f9      	bne.n	80058e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fc:	d107      	bne.n	800590e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800590c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b01      	cmp	r3, #1
 800591a:	f040 8086 	bne.w	8005a2a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005926:	f023 0301 	bic.w	r3, r3, #1
 800592a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005948:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595c:	d106      	bne.n	800596c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005962:	f023 0206 	bic.w	r2, r3, #6
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	645a      	str	r2, [r3, #68]	; 0x44
 800596a:	e002      	b.n	8005972 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800597a:	4b36      	ldr	r3, [pc, #216]	; (8005a54 <HAL_ADC_Start_DMA+0x1cc>)
 800597c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	4a35      	ldr	r2, [pc, #212]	; (8005a58 <HAL_ADC_Start_DMA+0x1d0>)
 8005984:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	4a34      	ldr	r2, [pc, #208]	; (8005a5c <HAL_ADC_Start_DMA+0x1d4>)
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	4a33      	ldr	r2, [pc, #204]	; (8005a60 <HAL_ADC_Start_DMA+0x1d8>)
 8005994:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800599e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80059ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	334c      	adds	r3, #76	; 0x4c
 80059ca:	4619      	mov	r1, r3
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f000 fcd2 	bl	8006378 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f003 031f 	and.w	r3, r3, #31
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10f      	bne.n	8005a00 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d129      	bne.n	8005a42 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059fc:	609a      	str	r2, [r3, #8]
 80059fe:	e020      	b.n	8005a42 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a17      	ldr	r2, [pc, #92]	; (8005a64 <HAL_ADC_Start_DMA+0x1dc>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d11b      	bne.n	8005a42 <HAL_ADC_Start_DMA+0x1ba>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d114      	bne.n	8005a42 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a26:	609a      	str	r2, [r3, #8]
 8005a28:	e00b      	b.n	8005a42 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f043 0210 	orr.w	r2, r3, #16
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3a:	f043 0201 	orr.w	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20000038 	.word	0x20000038
 8005a50:	431bde83 	.word	0x431bde83
 8005a54:	40012300 	.word	0x40012300
 8005a58:	08005ee1 	.word	0x08005ee1
 8005a5c:	08005f9b 	.word	0x08005f9b
 8005a60:	08005fb7 	.word	0x08005fb7
 8005a64:	40012000 	.word	0x40012000

08005a68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_ADC_ConfigChannel+0x1c>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e105      	b.n	8005ccc <HAL_ADC_ConfigChannel+0x228>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b09      	cmp	r3, #9
 8005ace:	d925      	bls.n	8005b1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68d9      	ldr	r1, [r3, #12]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	4613      	mov	r3, r2
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	4413      	add	r3, r2
 8005ae4:	3b1e      	subs	r3, #30
 8005ae6:	2207      	movs	r2, #7
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	43da      	mvns	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	400a      	ands	r2, r1
 8005af4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68d9      	ldr	r1, [r3, #12]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	4618      	mov	r0, r3
 8005b08:	4603      	mov	r3, r0
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	4403      	add	r3, r0
 8005b0e:	3b1e      	subs	r3, #30
 8005b10:	409a      	lsls	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	60da      	str	r2, [r3, #12]
 8005b1a:	e022      	b.n	8005b62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6919      	ldr	r1, [r3, #16]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	4413      	add	r3, r2
 8005b30:	2207      	movs	r2, #7
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	43da      	mvns	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	400a      	ands	r2, r1
 8005b3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6919      	ldr	r1, [r3, #16]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	4618      	mov	r0, r3
 8005b52:	4603      	mov	r3, r0
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	4403      	add	r3, r0
 8005b58:	409a      	lsls	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b06      	cmp	r3, #6
 8005b68:	d824      	bhi.n	8005bb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	3b05      	subs	r3, #5
 8005b7c:	221f      	movs	r2, #31
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	43da      	mvns	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	400a      	ands	r2, r1
 8005b8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	4618      	mov	r0, r3
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3b05      	subs	r3, #5
 8005ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8005bb2:	e04c      	b.n	8005c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2b0c      	cmp	r3, #12
 8005bba:	d824      	bhi.n	8005c06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	3b23      	subs	r3, #35	; 0x23
 8005bce:	221f      	movs	r2, #31
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	43da      	mvns	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	400a      	ands	r2, r1
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	4618      	mov	r0, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3b23      	subs	r3, #35	; 0x23
 8005bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	631a      	str	r2, [r3, #48]	; 0x30
 8005c04:	e023      	b.n	8005c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	3b41      	subs	r3, #65	; 0x41
 8005c18:	221f      	movs	r2, #31
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	43da      	mvns	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	400a      	ands	r2, r1
 8005c26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	4618      	mov	r0, r3
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	3b41      	subs	r3, #65	; 0x41
 8005c42:	fa00 f203 	lsl.w	r2, r0, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c4e:	4b22      	ldr	r3, [pc, #136]	; (8005cd8 <HAL_ADC_ConfigChannel+0x234>)
 8005c50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a21      	ldr	r2, [pc, #132]	; (8005cdc <HAL_ADC_ConfigChannel+0x238>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d109      	bne.n	8005c70 <HAL_ADC_ConfigChannel+0x1cc>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b12      	cmp	r3, #18
 8005c62:	d105      	bne.n	8005c70 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a19      	ldr	r2, [pc, #100]	; (8005cdc <HAL_ADC_ConfigChannel+0x238>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d123      	bne.n	8005cc2 <HAL_ADC_ConfigChannel+0x21e>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b10      	cmp	r3, #16
 8005c80:	d003      	beq.n	8005c8a <HAL_ADC_ConfigChannel+0x1e6>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b11      	cmp	r3, #17
 8005c88:	d11b      	bne.n	8005cc2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b10      	cmp	r3, #16
 8005c9c:	d111      	bne.n	8005cc2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c9e:	4b10      	ldr	r3, [pc, #64]	; (8005ce0 <HAL_ADC_ConfigChannel+0x23c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a10      	ldr	r2, [pc, #64]	; (8005ce4 <HAL_ADC_ConfigChannel+0x240>)
 8005ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca8:	0c9a      	lsrs	r2, r3, #18
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005cb4:	e002      	b.n	8005cbc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f9      	bne.n	8005cb6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	40012300 	.word	0x40012300
 8005cdc:	40012000 	.word	0x40012000
 8005ce0:	20000038 	.word	0x20000038
 8005ce4:	431bde83 	.word	0x431bde83

08005ce8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005cf0:	4b79      	ldr	r3, [pc, #484]	; (8005ed8 <ADC_Init+0x1f0>)
 8005cf2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6859      	ldr	r1, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	021a      	lsls	r2, r3, #8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6859      	ldr	r1, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6899      	ldr	r1, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	4a58      	ldr	r2, [pc, #352]	; (8005edc <ADC_Init+0x1f4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d022      	beq.n	8005dc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6899      	ldr	r1, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6899      	ldr	r1, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	e00f      	b.n	8005de6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005de4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0202 	bic.w	r2, r2, #2
 8005df4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6899      	ldr	r1, [r3, #8]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	7e1b      	ldrb	r3, [r3, #24]
 8005e00:	005a      	lsls	r2, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d01b      	beq.n	8005e4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005e32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6859      	ldr	r1, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	035a      	lsls	r2, r3, #13
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
 8005e4a:	e007      	b.n	8005e5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	051a      	lsls	r2, r3, #20
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005e90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6899      	ldr	r1, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e9e:	025a      	lsls	r2, r3, #9
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6899      	ldr	r1, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	029a      	lsls	r2, r3, #10
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	609a      	str	r2, [r3, #8]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	40012300 	.word	0x40012300
 8005edc:	0f000001 	.word	0x0f000001

08005ee0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d13c      	bne.n	8005f74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d12b      	bne.n	8005f6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d127      	bne.n	8005f6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d006      	beq.n	8005f38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d119      	bne.n	8005f6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0220 	bic.w	r2, r2, #32
 8005f46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	f043 0201 	orr.w	r2, r3, #1
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f7fc fde5 	bl	8002b3c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005f72:	e00e      	b.n	8005f92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7ff fd85 	bl	8005a90 <HAL_ADC_ErrorCallback>
}
 8005f86:	e004      	b.n	8005f92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	4798      	blx	r3
}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff fd5d 	bl	8005a68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2240      	movs	r2, #64	; 0x40
 8005fc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fce:	f043 0204 	orr.w	r2, r3, #4
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7ff fd5a 	bl	8005a90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006008:	4b0c      	ldr	r3, [pc, #48]	; (800603c <__NVIC_SetPriorityGrouping+0x44>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006014:	4013      	ands	r3, r2
 8006016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800602a:	4a04      	ldr	r2, [pc, #16]	; (800603c <__NVIC_SetPriorityGrouping+0x44>)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	60d3      	str	r3, [r2, #12]
}
 8006030:	bf00      	nop
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	e000ed00 	.word	0xe000ed00

08006040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006044:	4b04      	ldr	r3, [pc, #16]	; (8006058 <__NVIC_GetPriorityGrouping+0x18>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	0a1b      	lsrs	r3, r3, #8
 800604a:	f003 0307 	and.w	r3, r3, #7
}
 800604e:	4618      	mov	r0, r3
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	e000ed00 	.word	0xe000ed00

0800605c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	4603      	mov	r3, r0
 8006064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800606a:	2b00      	cmp	r3, #0
 800606c:	db0b      	blt.n	8006086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	f003 021f 	and.w	r2, r3, #31
 8006074:	4907      	ldr	r1, [pc, #28]	; (8006094 <__NVIC_EnableIRQ+0x38>)
 8006076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	2001      	movs	r0, #1
 800607e:	fa00 f202 	lsl.w	r2, r0, r2
 8006082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	e000e100 	.word	0xe000e100

08006098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	6039      	str	r1, [r7, #0]
 80060a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	db0a      	blt.n	80060c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	490c      	ldr	r1, [pc, #48]	; (80060e4 <__NVIC_SetPriority+0x4c>)
 80060b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b6:	0112      	lsls	r2, r2, #4
 80060b8:	b2d2      	uxtb	r2, r2
 80060ba:	440b      	add	r3, r1
 80060bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060c0:	e00a      	b.n	80060d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	4908      	ldr	r1, [pc, #32]	; (80060e8 <__NVIC_SetPriority+0x50>)
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	3b04      	subs	r3, #4
 80060d0:	0112      	lsls	r2, r2, #4
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	440b      	add	r3, r1
 80060d6:	761a      	strb	r2, [r3, #24]
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	e000e100 	.word	0xe000e100
 80060e8:	e000ed00 	.word	0xe000ed00

080060ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b089      	sub	sp, #36	; 0x24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f1c3 0307 	rsb	r3, r3, #7
 8006106:	2b04      	cmp	r3, #4
 8006108:	bf28      	it	cs
 800610a:	2304      	movcs	r3, #4
 800610c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	3304      	adds	r3, #4
 8006112:	2b06      	cmp	r3, #6
 8006114:	d902      	bls.n	800611c <NVIC_EncodePriority+0x30>
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	3b03      	subs	r3, #3
 800611a:	e000      	b.n	800611e <NVIC_EncodePriority+0x32>
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006120:	f04f 32ff 	mov.w	r2, #4294967295
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	fa02 f303 	lsl.w	r3, r2, r3
 800612a:	43da      	mvns	r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	401a      	ands	r2, r3
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006134:	f04f 31ff 	mov.w	r1, #4294967295
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	fa01 f303 	lsl.w	r3, r1, r3
 800613e:	43d9      	mvns	r1, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006144:	4313      	orrs	r3, r2
         );
}
 8006146:	4618      	mov	r0, r3
 8006148:	3724      	adds	r7, #36	; 0x24
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
	...

08006154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3b01      	subs	r3, #1
 8006160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006164:	d301      	bcc.n	800616a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006166:	2301      	movs	r3, #1
 8006168:	e00f      	b.n	800618a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800616a:	4a0a      	ldr	r2, [pc, #40]	; (8006194 <SysTick_Config+0x40>)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3b01      	subs	r3, #1
 8006170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006172:	210f      	movs	r1, #15
 8006174:	f04f 30ff 	mov.w	r0, #4294967295
 8006178:	f7ff ff8e 	bl	8006098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800617c:	4b05      	ldr	r3, [pc, #20]	; (8006194 <SysTick_Config+0x40>)
 800617e:	2200      	movs	r2, #0
 8006180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006182:	4b04      	ldr	r3, [pc, #16]	; (8006194 <SysTick_Config+0x40>)
 8006184:	2207      	movs	r2, #7
 8006186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	e000e010 	.word	0xe000e010

08006198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff ff29 	bl	8005ff8 <__NVIC_SetPriorityGrouping>
}
 80061a6:	bf00      	nop
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	4603      	mov	r3, r0
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
 80061ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061c0:	f7ff ff3e 	bl	8006040 <__NVIC_GetPriorityGrouping>
 80061c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	6978      	ldr	r0, [r7, #20]
 80061cc:	f7ff ff8e 	bl	80060ec <NVIC_EncodePriority>
 80061d0:	4602      	mov	r2, r0
 80061d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d6:	4611      	mov	r1, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff ff5d 	bl	8006098 <__NVIC_SetPriority>
}
 80061de:	bf00      	nop
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b082      	sub	sp, #8
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	4603      	mov	r3, r0
 80061ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff ff31 	bl	800605c <__NVIC_EnableIRQ>
}
 80061fa:	bf00      	nop
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff ffa2 	bl	8006154 <SysTick_Config>
 8006210:	4603      	mov	r3, r0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006228:	f7ff f97a 	bl	8005520 <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e099      	b.n	800636c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0201 	bic.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006258:	e00f      	b.n	800627a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800625a:	f7ff f961 	bl	8005520 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b05      	cmp	r3, #5
 8006266:	d908      	bls.n	800627a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2203      	movs	r2, #3
 8006272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e078      	b.n	800636c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e8      	bne.n	800625a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4b38      	ldr	r3, [pc, #224]	; (8006374 <HAL_DMA_Init+0x158>)
 8006294:	4013      	ands	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d107      	bne.n	80062e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	4313      	orrs	r3, r2
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f023 0307 	bic.w	r3, r3, #7
 80062fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	2b04      	cmp	r3, #4
 800630c:	d117      	bne.n	800633e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00e      	beq.n	800633e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fb01 	bl	8006928 <DMA_CheckFifoParam>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d008      	beq.n	800633e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2240      	movs	r2, #64	; 0x40
 8006330:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800633a:	2301      	movs	r3, #1
 800633c:	e016      	b.n	800636c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fab8 	bl	80068bc <DMA_CalcBaseAndBitshift>
 800634c:	4603      	mov	r3, r0
 800634e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006354:	223f      	movs	r2, #63	; 0x3f
 8006356:	409a      	lsls	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	f010803f 	.word	0xf010803f

08006378 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_DMA_Start_IT+0x26>
 800639a:	2302      	movs	r3, #2
 800639c:	e040      	b.n	8006420 <HAL_DMA_Start_IT+0xa8>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d12f      	bne.n	8006412 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2202      	movs	r2, #2
 80063b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fa4a 	bl	8006860 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d0:	223f      	movs	r2, #63	; 0x3f
 80063d2:	409a      	lsls	r2, r3
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0216 	orr.w	r2, r2, #22
 80063e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d007      	beq.n	8006400 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0208 	orr.w	r2, r2, #8
 80063fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e005      	b.n	800641e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800641a:	2302      	movs	r3, #2
 800641c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800641e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006434:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006436:	f7ff f873 	bl	8005520 <HAL_GetTick>
 800643a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d008      	beq.n	800645a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2280      	movs	r2, #128	; 0x80
 800644c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e052      	b.n	8006500 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0216 	bic.w	r2, r2, #22
 8006468:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	695a      	ldr	r2, [r3, #20]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006478:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d103      	bne.n	800648a <HAL_DMA_Abort+0x62>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006486:	2b00      	cmp	r3, #0
 8006488:	d007      	beq.n	800649a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0208 	bic.w	r2, r2, #8
 8006498:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0201 	bic.w	r2, r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064aa:	e013      	b.n	80064d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064ac:	f7ff f838 	bl	8005520 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b05      	cmp	r3, #5
 80064b8:	d90c      	bls.n	80064d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2220      	movs	r2, #32
 80064be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2203      	movs	r2, #3
 80064c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e015      	b.n	8006500 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e4      	bne.n	80064ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e6:	223f      	movs	r2, #63	; 0x3f
 80064e8:	409a      	lsls	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d004      	beq.n	8006526 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2280      	movs	r2, #128	; 0x80
 8006520:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e00c      	b.n	8006540 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2205      	movs	r2, #5
 800652a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0201 	bic.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006558:	4b92      	ldr	r3, [pc, #584]	; (80067a4 <HAL_DMA_IRQHandler+0x258>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a92      	ldr	r2, [pc, #584]	; (80067a8 <HAL_DMA_IRQHandler+0x25c>)
 800655e:	fba2 2303 	umull	r2, r3, r2, r3
 8006562:	0a9b      	lsrs	r3, r3, #10
 8006564:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006576:	2208      	movs	r2, #8
 8006578:	409a      	lsls	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4013      	ands	r3, r2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d01a      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d013      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0204 	bic.w	r2, r2, #4
 800659e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a4:	2208      	movs	r2, #8
 80065a6:	409a      	lsls	r2, r3
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b0:	f043 0201 	orr.w	r2, r3, #1
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065bc:	2201      	movs	r2, #1
 80065be:	409a      	lsls	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4013      	ands	r3, r2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d012      	beq.n	80065ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00b      	beq.n	80065ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065da:	2201      	movs	r2, #1
 80065dc:	409a      	lsls	r2, r3
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e6:	f043 0202 	orr.w	r2, r3, #2
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f2:	2204      	movs	r2, #4
 80065f4:	409a      	lsls	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d012      	beq.n	8006624 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00b      	beq.n	8006624 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006610:	2204      	movs	r2, #4
 8006612:	409a      	lsls	r2, r3
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661c:	f043 0204 	orr.w	r2, r3, #4
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006628:	2210      	movs	r2, #16
 800662a:	409a      	lsls	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d043      	beq.n	80066bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b00      	cmp	r3, #0
 8006640:	d03c      	beq.n	80066bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006646:	2210      	movs	r2, #16
 8006648:	409a      	lsls	r2, r3
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d018      	beq.n	800668e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d108      	bne.n	800667c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d024      	beq.n	80066bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
 800667a:	e01f      	b.n	80066bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01b      	beq.n	80066bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
 800668c:	e016      	b.n	80066bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006698:	2b00      	cmp	r3, #0
 800669a:	d107      	bne.n	80066ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0208 	bic.w	r2, r2, #8
 80066aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c0:	2220      	movs	r2, #32
 80066c2:	409a      	lsls	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 808e 	beq.w	80067ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 8086 	beq.w	80067ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e2:	2220      	movs	r2, #32
 80066e4:	409a      	lsls	r2, r3
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b05      	cmp	r3, #5
 80066f4:	d136      	bne.n	8006764 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0216 	bic.w	r2, r2, #22
 8006704:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695a      	ldr	r2, [r3, #20]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006714:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	d103      	bne.n	8006726 <HAL_DMA_IRQHandler+0x1da>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006722:	2b00      	cmp	r3, #0
 8006724:	d007      	beq.n	8006736 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0208 	bic.w	r2, r2, #8
 8006734:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673a:	223f      	movs	r2, #63	; 0x3f
 800673c:	409a      	lsls	r2, r3
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006756:	2b00      	cmp	r3, #0
 8006758:	d07d      	beq.n	8006856 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
        }
        return;
 8006762:	e078      	b.n	8006856 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01c      	beq.n	80067ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d108      	bne.n	8006792 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006784:	2b00      	cmp	r3, #0
 8006786:	d030      	beq.n	80067ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
 8006790:	e02b      	b.n	80067ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d027      	beq.n	80067ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4798      	blx	r3
 80067a2:	e022      	b.n	80067ea <HAL_DMA_IRQHandler+0x29e>
 80067a4:	20000038 	.word	0x20000038
 80067a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10f      	bne.n	80067da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0210 	bic.w	r2, r2, #16
 80067c8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d032      	beq.n	8006858 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d022      	beq.n	8006844 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2205      	movs	r2, #5
 8006802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0201 	bic.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	3301      	adds	r3, #1
 800681a:	60bb      	str	r3, [r7, #8]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	429a      	cmp	r2, r3
 8006820:	d307      	bcc.n	8006832 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1f2      	bne.n	8006816 <HAL_DMA_IRQHandler+0x2ca>
 8006830:	e000      	b.n	8006834 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006832:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d005      	beq.n	8006858 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
 8006854:	e000      	b.n	8006858 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006856:	bf00      	nop
    }
  }
}
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop

08006860 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800687c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2b40      	cmp	r3, #64	; 0x40
 800688c:	d108      	bne.n	80068a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800689e:	e007      	b.n	80068b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	60da      	str	r2, [r3, #12]
}
 80068b0:	bf00      	nop
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	3b10      	subs	r3, #16
 80068cc:	4a14      	ldr	r2, [pc, #80]	; (8006920 <DMA_CalcBaseAndBitshift+0x64>)
 80068ce:	fba2 2303 	umull	r2, r3, r2, r3
 80068d2:	091b      	lsrs	r3, r3, #4
 80068d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80068d6:	4a13      	ldr	r2, [pc, #76]	; (8006924 <DMA_CalcBaseAndBitshift+0x68>)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d909      	bls.n	80068fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068f2:	f023 0303 	bic.w	r3, r3, #3
 80068f6:	1d1a      	adds	r2, r3, #4
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	659a      	str	r2, [r3, #88]	; 0x58
 80068fc:	e007      	b.n	800690e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006906:	f023 0303 	bic.w	r3, r3, #3
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	aaaaaaab 	.word	0xaaaaaaab
 8006924:	0800d6f0 	.word	0x0800d6f0

08006928 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d11f      	bne.n	8006982 <DMA_CheckFifoParam+0x5a>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b03      	cmp	r3, #3
 8006946:	d856      	bhi.n	80069f6 <DMA_CheckFifoParam+0xce>
 8006948:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <DMA_CheckFifoParam+0x28>)
 800694a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694e:	bf00      	nop
 8006950:	08006961 	.word	0x08006961
 8006954:	08006973 	.word	0x08006973
 8006958:	08006961 	.word	0x08006961
 800695c:	080069f7 	.word	0x080069f7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d046      	beq.n	80069fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006970:	e043      	b.n	80069fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006976:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800697a:	d140      	bne.n	80069fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006980:	e03d      	b.n	80069fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698a:	d121      	bne.n	80069d0 <DMA_CheckFifoParam+0xa8>
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2b03      	cmp	r3, #3
 8006990:	d837      	bhi.n	8006a02 <DMA_CheckFifoParam+0xda>
 8006992:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <DMA_CheckFifoParam+0x70>)
 8006994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006998:	080069a9 	.word	0x080069a9
 800699c:	080069af 	.word	0x080069af
 80069a0:	080069a9 	.word	0x080069a9
 80069a4:	080069c1 	.word	0x080069c1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	73fb      	strb	r3, [r7, #15]
      break;
 80069ac:	e030      	b.n	8006a10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d025      	beq.n	8006a06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069be:	e022      	b.n	8006a06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069c8:	d11f      	bne.n	8006a0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80069ce:	e01c      	b.n	8006a0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d903      	bls.n	80069de <DMA_CheckFifoParam+0xb6>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d003      	beq.n	80069e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80069dc:	e018      	b.n	8006a10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	73fb      	strb	r3, [r7, #15]
      break;
 80069e2:	e015      	b.n	8006a10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00e      	beq.n	8006a0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	73fb      	strb	r3, [r7, #15]
      break;
 80069f4:	e00b      	b.n	8006a0e <DMA_CheckFifoParam+0xe6>
      break;
 80069f6:	bf00      	nop
 80069f8:	e00a      	b.n	8006a10 <DMA_CheckFifoParam+0xe8>
      break;
 80069fa:	bf00      	nop
 80069fc:	e008      	b.n	8006a10 <DMA_CheckFifoParam+0xe8>
      break;
 80069fe:	bf00      	nop
 8006a00:	e006      	b.n	8006a10 <DMA_CheckFifoParam+0xe8>
      break;
 8006a02:	bf00      	nop
 8006a04:	e004      	b.n	8006a10 <DMA_CheckFifoParam+0xe8>
      break;
 8006a06:	bf00      	nop
 8006a08:	e002      	b.n	8006a10 <DMA_CheckFifoParam+0xe8>
      break;   
 8006a0a:	bf00      	nop
 8006a0c:	e000      	b.n	8006a10 <DMA_CheckFifoParam+0xe8>
      break;
 8006a0e:	bf00      	nop
    }
  } 
  
  return status; 
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop

08006a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b089      	sub	sp, #36	; 0x24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a36:	2300      	movs	r3, #0
 8006a38:	61fb      	str	r3, [r7, #28]
 8006a3a:	e159      	b.n	8006cf0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	f040 8148 	bne.w	8006cea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d005      	beq.n	8006a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d130      	bne.n	8006ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	2203      	movs	r2, #3
 8006a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a82:	43db      	mvns	r3, r3
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	4013      	ands	r3, r2
 8006a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	091b      	lsrs	r3, r3, #4
 8006abe:	f003 0201 	and.w	r2, r3, #1
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d017      	beq.n	8006b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	2203      	movs	r2, #3
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	43db      	mvns	r3, r3
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	4013      	ands	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	fa02 f303 	lsl.w	r3, r2, r3
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d123      	bne.n	8006b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	08da      	lsrs	r2, r3, #3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3208      	adds	r2, #8
 8006b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	220f      	movs	r2, #15
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	08da      	lsrs	r2, r3, #3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3208      	adds	r2, #8
 8006b5e:	69b9      	ldr	r1, [r7, #24]
 8006b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	2203      	movs	r2, #3
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	43db      	mvns	r3, r3
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f003 0203 	and.w	r2, r3, #3
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80a2 	beq.w	8006cea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	4b57      	ldr	r3, [pc, #348]	; (8006d08 <HAL_GPIO_Init+0x2e8>)
 8006bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bae:	4a56      	ldr	r2, [pc, #344]	; (8006d08 <HAL_GPIO_Init+0x2e8>)
 8006bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8006bb6:	4b54      	ldr	r3, [pc, #336]	; (8006d08 <HAL_GPIO_Init+0x2e8>)
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bc2:	4a52      	ldr	r2, [pc, #328]	; (8006d0c <HAL_GPIO_Init+0x2ec>)
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	3302      	adds	r3, #2
 8006bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	220f      	movs	r2, #15
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	43db      	mvns	r3, r3
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	4013      	ands	r3, r2
 8006be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a49      	ldr	r2, [pc, #292]	; (8006d10 <HAL_GPIO_Init+0x2f0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d019      	beq.n	8006c22 <HAL_GPIO_Init+0x202>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a48      	ldr	r2, [pc, #288]	; (8006d14 <HAL_GPIO_Init+0x2f4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <HAL_GPIO_Init+0x1fe>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a47      	ldr	r2, [pc, #284]	; (8006d18 <HAL_GPIO_Init+0x2f8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00d      	beq.n	8006c1a <HAL_GPIO_Init+0x1fa>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a46      	ldr	r2, [pc, #280]	; (8006d1c <HAL_GPIO_Init+0x2fc>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d007      	beq.n	8006c16 <HAL_GPIO_Init+0x1f6>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a45      	ldr	r2, [pc, #276]	; (8006d20 <HAL_GPIO_Init+0x300>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d101      	bne.n	8006c12 <HAL_GPIO_Init+0x1f2>
 8006c0e:	2304      	movs	r3, #4
 8006c10:	e008      	b.n	8006c24 <HAL_GPIO_Init+0x204>
 8006c12:	2307      	movs	r3, #7
 8006c14:	e006      	b.n	8006c24 <HAL_GPIO_Init+0x204>
 8006c16:	2303      	movs	r3, #3
 8006c18:	e004      	b.n	8006c24 <HAL_GPIO_Init+0x204>
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e002      	b.n	8006c24 <HAL_GPIO_Init+0x204>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <HAL_GPIO_Init+0x204>
 8006c22:	2300      	movs	r3, #0
 8006c24:	69fa      	ldr	r2, [r7, #28]
 8006c26:	f002 0203 	and.w	r2, r2, #3
 8006c2a:	0092      	lsls	r2, r2, #2
 8006c2c:	4093      	lsls	r3, r2
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c34:	4935      	ldr	r1, [pc, #212]	; (8006d0c <HAL_GPIO_Init+0x2ec>)
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	089b      	lsrs	r3, r3, #2
 8006c3a:	3302      	adds	r3, #2
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c42:	4b38      	ldr	r3, [pc, #224]	; (8006d24 <HAL_GPIO_Init+0x304>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	43db      	mvns	r3, r3
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c66:	4a2f      	ldr	r2, [pc, #188]	; (8006d24 <HAL_GPIO_Init+0x304>)
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c6c:	4b2d      	ldr	r3, [pc, #180]	; (8006d24 <HAL_GPIO_Init+0x304>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	43db      	mvns	r3, r3
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c90:	4a24      	ldr	r2, [pc, #144]	; (8006d24 <HAL_GPIO_Init+0x304>)
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c96:	4b23      	ldr	r3, [pc, #140]	; (8006d24 <HAL_GPIO_Init+0x304>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	43db      	mvns	r3, r3
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cba:	4a1a      	ldr	r2, [pc, #104]	; (8006d24 <HAL_GPIO_Init+0x304>)
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006cc0:	4b18      	ldr	r3, [pc, #96]	; (8006d24 <HAL_GPIO_Init+0x304>)
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	4013      	ands	r3, r2
 8006cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ce4:	4a0f      	ldr	r2, [pc, #60]	; (8006d24 <HAL_GPIO_Init+0x304>)
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	3301      	adds	r3, #1
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	2b0f      	cmp	r3, #15
 8006cf4:	f67f aea2 	bls.w	8006a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	3724      	adds	r7, #36	; 0x24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	40013800 	.word	0x40013800
 8006d10:	40020000 	.word	0x40020000
 8006d14:	40020400 	.word	0x40020400
 8006d18:	40020800 	.word	0x40020800
 8006d1c:	40020c00 	.word	0x40020c00
 8006d20:	40021000 	.word	0x40021000
 8006d24:	40013c00 	.word	0x40013c00

08006d28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	887b      	ldrh	r3, [r7, #2]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d40:	2301      	movs	r3, #1
 8006d42:	73fb      	strb	r3, [r7, #15]
 8006d44:	e001      	b.n	8006d4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	807b      	strh	r3, [r7, #2]
 8006d64:	4613      	mov	r3, r2
 8006d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d68:	787b      	ldrb	r3, [r7, #1]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d6e:	887a      	ldrh	r2, [r7, #2]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d74:	e003      	b.n	8006d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d76:	887b      	ldrh	r3, [r7, #2]
 8006d78:	041a      	lsls	r2, r3, #16
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	619a      	str	r2, [r3, #24]
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006d96:	4b08      	ldr	r3, [pc, #32]	; (8006db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d98:	695a      	ldr	r2, [r3, #20]
 8006d9a:	88fb      	ldrh	r3, [r7, #6]
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d006      	beq.n	8006db0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006da2:	4a05      	ldr	r2, [pc, #20]	; (8006db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006da8:	88fb      	ldrh	r3, [r7, #6]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fc f800 	bl	8002db0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40013c00 	.word	0x40013c00

08006dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e12b      	b.n	8007026 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fe f8ea 	bl	8004fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2224      	movs	r2, #36	; 0x24
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0201 	bic.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e20:	f001 f838 	bl	8007e94 <HAL_RCC_GetPCLK1Freq>
 8006e24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	4a81      	ldr	r2, [pc, #516]	; (8007030 <HAL_I2C_Init+0x274>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d807      	bhi.n	8006e40 <HAL_I2C_Init+0x84>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4a80      	ldr	r2, [pc, #512]	; (8007034 <HAL_I2C_Init+0x278>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	bf94      	ite	ls
 8006e38:	2301      	movls	r3, #1
 8006e3a:	2300      	movhi	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	e006      	b.n	8006e4e <HAL_I2C_Init+0x92>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4a7d      	ldr	r2, [pc, #500]	; (8007038 <HAL_I2C_Init+0x27c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	bf94      	ite	ls
 8006e48:	2301      	movls	r3, #1
 8006e4a:	2300      	movhi	r3, #0
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e0e7      	b.n	8007026 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4a78      	ldr	r2, [pc, #480]	; (800703c <HAL_I2C_Init+0x280>)
 8006e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5e:	0c9b      	lsrs	r3, r3, #18
 8006e60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	4a6a      	ldr	r2, [pc, #424]	; (8007030 <HAL_I2C_Init+0x274>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d802      	bhi.n	8006e90 <HAL_I2C_Init+0xd4>
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	e009      	b.n	8006ea4 <HAL_I2C_Init+0xe8>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	4a69      	ldr	r2, [pc, #420]	; (8007040 <HAL_I2C_Init+0x284>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	099b      	lsrs	r3, r3, #6
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	6812      	ldr	r2, [r2, #0]
 8006ea8:	430b      	orrs	r3, r1
 8006eaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006eb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	495c      	ldr	r1, [pc, #368]	; (8007030 <HAL_I2C_Init+0x274>)
 8006ec0:	428b      	cmp	r3, r1
 8006ec2:	d819      	bhi.n	8006ef8 <HAL_I2C_Init+0x13c>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	1e59      	subs	r1, r3, #1
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ed2:	1c59      	adds	r1, r3, #1
 8006ed4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006ed8:	400b      	ands	r3, r1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <HAL_I2C_Init+0x138>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	1e59      	subs	r1, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eec:	3301      	adds	r3, #1
 8006eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ef2:	e051      	b.n	8006f98 <HAL_I2C_Init+0x1dc>
 8006ef4:	2304      	movs	r3, #4
 8006ef6:	e04f      	b.n	8006f98 <HAL_I2C_Init+0x1dc>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d111      	bne.n	8006f24 <HAL_I2C_Init+0x168>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	1e58      	subs	r0, r3, #1
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6859      	ldr	r1, [r3, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	440b      	add	r3, r1
 8006f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f12:	3301      	adds	r3, #1
 8006f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bf0c      	ite	eq
 8006f1c:	2301      	moveq	r3, #1
 8006f1e:	2300      	movne	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	e012      	b.n	8006f4a <HAL_I2C_Init+0x18e>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	1e58      	subs	r0, r3, #1
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6859      	ldr	r1, [r3, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	0099      	lsls	r1, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	bf0c      	ite	eq
 8006f44:	2301      	moveq	r3, #1
 8006f46:	2300      	movne	r3, #0
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <HAL_I2C_Init+0x196>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e022      	b.n	8006f98 <HAL_I2C_Init+0x1dc>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10e      	bne.n	8006f78 <HAL_I2C_Init+0x1bc>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	1e58      	subs	r0, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6859      	ldr	r1, [r3, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	440b      	add	r3, r1
 8006f68:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f76:	e00f      	b.n	8006f98 <HAL_I2C_Init+0x1dc>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	1e58      	subs	r0, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	440b      	add	r3, r1
 8006f86:	0099      	lsls	r1, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f8e:	3301      	adds	r3, #1
 8006f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	6809      	ldr	r1, [r1, #0]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69da      	ldr	r2, [r3, #28]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6911      	ldr	r1, [r2, #16]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	68d2      	ldr	r2, [r2, #12]
 8006fd2:	4311      	orrs	r1, r2
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6812      	ldr	r2, [r2, #0]
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695a      	ldr	r2, [r3, #20]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0201 	orr.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2220      	movs	r2, #32
 8007012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	000186a0 	.word	0x000186a0
 8007034:	001e847f 	.word	0x001e847f
 8007038:	003d08ff 	.word	0x003d08ff
 800703c:	431bde83 	.word	0x431bde83
 8007040:	10624dd3 	.word	0x10624dd3

08007044 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af02      	add	r7, sp, #8
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	461a      	mov	r2, r3
 8007050:	460b      	mov	r3, r1
 8007052:	817b      	strh	r3, [r7, #10]
 8007054:	4613      	mov	r3, r2
 8007056:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007058:	f7fe fa62 	bl	8005520 <HAL_GetTick>
 800705c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b20      	cmp	r3, #32
 8007068:	f040 80e0 	bne.w	800722c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	2319      	movs	r3, #25
 8007072:	2201      	movs	r2, #1
 8007074:	4970      	ldr	r1, [pc, #448]	; (8007238 <HAL_I2C_Master_Transmit+0x1f4>)
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 f964 	bl	8007344 <I2C_WaitOnFlagUntilTimeout>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007082:	2302      	movs	r3, #2
 8007084:	e0d3      	b.n	800722e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_I2C_Master_Transmit+0x50>
 8007090:	2302      	movs	r3, #2
 8007092:	e0cc      	b.n	800722e <HAL_I2C_Master_Transmit+0x1ea>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d007      	beq.n	80070ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0201 	orr.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2221      	movs	r2, #33	; 0x21
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2210      	movs	r2, #16
 80070d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	893a      	ldrh	r2, [r7, #8]
 80070ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4a50      	ldr	r2, [pc, #320]	; (800723c <HAL_I2C_Master_Transmit+0x1f8>)
 80070fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80070fc:	8979      	ldrh	r1, [r7, #10]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	6a3a      	ldr	r2, [r7, #32]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 f89c 	bl	8007240 <I2C_MasterRequestWrite>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e08d      	b.n	800722e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007112:	2300      	movs	r3, #0
 8007114:	613b      	str	r3, [r7, #16]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	613b      	str	r3, [r7, #16]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007128:	e066      	b.n	80071f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	6a39      	ldr	r1, [r7, #32]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 f9de 	bl	80074f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00d      	beq.n	8007156 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	2b04      	cmp	r3, #4
 8007140:	d107      	bne.n	8007152 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007150:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e06b      	b.n	800722e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	781a      	ldrb	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b04      	cmp	r3, #4
 8007192:	d11b      	bne.n	80071cc <HAL_I2C_Master_Transmit+0x188>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007198:	2b00      	cmp	r3, #0
 800719a:	d017      	beq.n	80071cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	781a      	ldrb	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	6a39      	ldr	r1, [r7, #32]
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f9ce 	bl	8007572 <I2C_WaitOnBTFFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00d      	beq.n	80071f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d107      	bne.n	80071f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e01a      	b.n	800722e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d194      	bne.n	800712a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800720e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	e000      	b.n	800722e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800722c:	2302      	movs	r3, #2
  }
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	00100002 	.word	0x00100002
 800723c:	ffff0000 	.word	0xffff0000

08007240 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af02      	add	r7, sp, #8
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	607a      	str	r2, [r7, #4]
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	460b      	mov	r3, r1
 800724e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b08      	cmp	r3, #8
 800725a:	d006      	beq.n	800726a <I2C_MasterRequestWrite+0x2a>
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d003      	beq.n	800726a <I2C_MasterRequestWrite+0x2a>
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007268:	d108      	bne.n	800727c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	e00b      	b.n	8007294 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007280:	2b12      	cmp	r3, #18
 8007282:	d107      	bne.n	8007294 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007292:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f84f 	bl	8007344 <I2C_WaitOnFlagUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00d      	beq.n	80072c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ba:	d103      	bne.n	80072c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e035      	b.n	8007334 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072d0:	d108      	bne.n	80072e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072d2:	897b      	ldrh	r3, [r7, #10]
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	461a      	mov	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072e0:	611a      	str	r2, [r3, #16]
 80072e2:	e01b      	b.n	800731c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80072e4:	897b      	ldrh	r3, [r7, #10]
 80072e6:	11db      	asrs	r3, r3, #7
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	f003 0306 	and.w	r3, r3, #6
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	f063 030f 	orn	r3, r3, #15
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	490e      	ldr	r1, [pc, #56]	; (800733c <I2C_MasterRequestWrite+0xfc>)
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 f875 	bl	80073f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e010      	b.n	8007334 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007312:	897b      	ldrh	r3, [r7, #10]
 8007314:	b2da      	uxtb	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	4907      	ldr	r1, [pc, #28]	; (8007340 <I2C_MasterRequestWrite+0x100>)
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 f865 	bl	80073f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e000      	b.n	8007334 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	00010008 	.word	0x00010008
 8007340:	00010002 	.word	0x00010002

08007344 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	603b      	str	r3, [r7, #0]
 8007350:	4613      	mov	r3, r2
 8007352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007354:	e025      	b.n	80073a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735c:	d021      	beq.n	80073a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800735e:	f7fe f8df 	bl	8005520 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d302      	bcc.n	8007374 <I2C_WaitOnFlagUntilTimeout+0x30>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d116      	bne.n	80073a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2220      	movs	r2, #32
 800737e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	f043 0220 	orr.w	r2, r3, #32
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e023      	b.n	80073ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d10d      	bne.n	80073c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	43da      	mvns	r2, r3
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	4013      	ands	r3, r2
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	bf0c      	ite	eq
 80073be:	2301      	moveq	r3, #1
 80073c0:	2300      	movne	r3, #0
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	461a      	mov	r2, r3
 80073c6:	e00c      	b.n	80073e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	43da      	mvns	r2, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4013      	ands	r3, r2
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	bf0c      	ite	eq
 80073da:	2301      	moveq	r3, #1
 80073dc:	2300      	movne	r3, #0
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	461a      	mov	r2, r3
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d0b6      	beq.n	8007356 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	607a      	str	r2, [r7, #4]
 80073fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007400:	e051      	b.n	80074a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800740c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007410:	d123      	bne.n	800745a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007420:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800742a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f043 0204 	orr.w	r2, r3, #4
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e046      	b.n	80074e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007460:	d021      	beq.n	80074a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007462:	f7fe f85d 	bl	8005520 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	429a      	cmp	r2, r3
 8007470:	d302      	bcc.n	8007478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d116      	bne.n	80074a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2220      	movs	r2, #32
 8007482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	f043 0220 	orr.w	r2, r3, #32
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e020      	b.n	80074e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	0c1b      	lsrs	r3, r3, #16
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d10c      	bne.n	80074ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	43da      	mvns	r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4013      	ands	r3, r2
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	bf14      	ite	ne
 80074c2:	2301      	movne	r3, #1
 80074c4:	2300      	moveq	r3, #0
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	e00b      	b.n	80074e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	43da      	mvns	r2, r3
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	4013      	ands	r3, r2
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	bf14      	ite	ne
 80074dc:	2301      	movne	r3, #1
 80074de:	2300      	moveq	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d18d      	bne.n	8007402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074fc:	e02d      	b.n	800755a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 f878 	bl	80075f4 <I2C_IsAcknowledgeFailed>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e02d      	b.n	800756a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007514:	d021      	beq.n	800755a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007516:	f7fe f803 	bl	8005520 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	429a      	cmp	r2, r3
 8007524:	d302      	bcc.n	800752c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d116      	bne.n	800755a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	f043 0220 	orr.w	r2, r3, #32
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e007      	b.n	800756a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007564:	2b80      	cmp	r3, #128	; 0x80
 8007566:	d1ca      	bne.n	80074fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800757e:	e02d      	b.n	80075dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 f837 	bl	80075f4 <I2C_IsAcknowledgeFailed>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e02d      	b.n	80075ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007596:	d021      	beq.n	80075dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007598:	f7fd ffc2 	bl	8005520 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d302      	bcc.n	80075ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d116      	bne.n	80075dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	f043 0220 	orr.w	r2, r3, #32
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e007      	b.n	80075ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	f003 0304 	and.w	r3, r3, #4
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	d1ca      	bne.n	8007580 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800760a:	d11b      	bne.n	8007644 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007614:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	f043 0204 	orr.w	r2, r3, #4
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
	...

08007654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e264      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d075      	beq.n	800775e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007672:	4ba3      	ldr	r3, [pc, #652]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 030c 	and.w	r3, r3, #12
 800767a:	2b04      	cmp	r3, #4
 800767c:	d00c      	beq.n	8007698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800767e:	4ba0      	ldr	r3, [pc, #640]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007686:	2b08      	cmp	r3, #8
 8007688:	d112      	bne.n	80076b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800768a:	4b9d      	ldr	r3, [pc, #628]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007696:	d10b      	bne.n	80076b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007698:	4b99      	ldr	r3, [pc, #612]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d05b      	beq.n	800775c <HAL_RCC_OscConfig+0x108>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d157      	bne.n	800775c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e23f      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b8:	d106      	bne.n	80076c8 <HAL_RCC_OscConfig+0x74>
 80076ba:	4b91      	ldr	r3, [pc, #580]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a90      	ldr	r2, [pc, #576]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	e01d      	b.n	8007704 <HAL_RCC_OscConfig+0xb0>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076d0:	d10c      	bne.n	80076ec <HAL_RCC_OscConfig+0x98>
 80076d2:	4b8b      	ldr	r3, [pc, #556]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a8a      	ldr	r2, [pc, #552]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	4b88      	ldr	r3, [pc, #544]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a87      	ldr	r2, [pc, #540]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	e00b      	b.n	8007704 <HAL_RCC_OscConfig+0xb0>
 80076ec:	4b84      	ldr	r3, [pc, #528]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a83      	ldr	r2, [pc, #524]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	4b81      	ldr	r3, [pc, #516]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a80      	ldr	r2, [pc, #512]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d013      	beq.n	8007734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800770c:	f7fd ff08 	bl	8005520 <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007714:	f7fd ff04 	bl	8005520 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b64      	cmp	r3, #100	; 0x64
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e204      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007726:	4b76      	ldr	r3, [pc, #472]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0f0      	beq.n	8007714 <HAL_RCC_OscConfig+0xc0>
 8007732:	e014      	b.n	800775e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007734:	f7fd fef4 	bl	8005520 <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800773c:	f7fd fef0 	bl	8005520 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b64      	cmp	r3, #100	; 0x64
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e1f0      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800774e:	4b6c      	ldr	r3, [pc, #432]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1f0      	bne.n	800773c <HAL_RCC_OscConfig+0xe8>
 800775a:	e000      	b.n	800775e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800775c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d063      	beq.n	8007832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800776a:	4b65      	ldr	r3, [pc, #404]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 030c 	and.w	r3, r3, #12
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007776:	4b62      	ldr	r3, [pc, #392]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800777e:	2b08      	cmp	r3, #8
 8007780:	d11c      	bne.n	80077bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007782:	4b5f      	ldr	r3, [pc, #380]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d116      	bne.n	80077bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800778e:	4b5c      	ldr	r3, [pc, #368]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <HAL_RCC_OscConfig+0x152>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d001      	beq.n	80077a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e1c4      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077a6:	4b56      	ldr	r3, [pc, #344]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4952      	ldr	r1, [pc, #328]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ba:	e03a      	b.n	8007832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d020      	beq.n	8007806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077c4:	4b4f      	ldr	r3, [pc, #316]	; (8007904 <HAL_RCC_OscConfig+0x2b0>)
 80077c6:	2201      	movs	r2, #1
 80077c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ca:	f7fd fea9 	bl	8005520 <HAL_GetTick>
 80077ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077d0:	e008      	b.n	80077e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077d2:	f7fd fea5 	bl	8005520 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e1a5      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077e4:	4b46      	ldr	r3, [pc, #280]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077f0:	4b43      	ldr	r3, [pc, #268]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	4940      	ldr	r1, [pc, #256]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007800:	4313      	orrs	r3, r2
 8007802:	600b      	str	r3, [r1, #0]
 8007804:	e015      	b.n	8007832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007806:	4b3f      	ldr	r3, [pc, #252]	; (8007904 <HAL_RCC_OscConfig+0x2b0>)
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780c:	f7fd fe88 	bl	8005520 <HAL_GetTick>
 8007810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007812:	e008      	b.n	8007826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007814:	f7fd fe84 	bl	8005520 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e184      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007826:	4b36      	ldr	r3, [pc, #216]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1f0      	bne.n	8007814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	2b00      	cmp	r3, #0
 800783c:	d030      	beq.n	80078a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d016      	beq.n	8007874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007846:	4b30      	ldr	r3, [pc, #192]	; (8007908 <HAL_RCC_OscConfig+0x2b4>)
 8007848:	2201      	movs	r2, #1
 800784a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800784c:	f7fd fe68 	bl	8005520 <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007854:	f7fd fe64 	bl	8005520 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e164      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007866:	4b26      	ldr	r3, [pc, #152]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f0      	beq.n	8007854 <HAL_RCC_OscConfig+0x200>
 8007872:	e015      	b.n	80078a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007874:	4b24      	ldr	r3, [pc, #144]	; (8007908 <HAL_RCC_OscConfig+0x2b4>)
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800787a:	f7fd fe51 	bl	8005520 <HAL_GetTick>
 800787e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007880:	e008      	b.n	8007894 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007882:	f7fd fe4d 	bl	8005520 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e14d      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007894:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1f0      	bne.n	8007882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 80a0 	beq.w	80079ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078ae:	2300      	movs	r3, #0
 80078b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078b2:	4b13      	ldr	r3, [pc, #76]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10f      	bne.n	80078de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078be:	2300      	movs	r3, #0
 80078c0:	60bb      	str	r3, [r7, #8]
 80078c2:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	4a0e      	ldr	r2, [pc, #56]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80078c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078cc:	6413      	str	r3, [r2, #64]	; 0x40
 80078ce:	4b0c      	ldr	r3, [pc, #48]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d6:	60bb      	str	r3, [r7, #8]
 80078d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078da:	2301      	movs	r3, #1
 80078dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078de:	4b0b      	ldr	r3, [pc, #44]	; (800790c <HAL_RCC_OscConfig+0x2b8>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d121      	bne.n	800792e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078ea:	4b08      	ldr	r3, [pc, #32]	; (800790c <HAL_RCC_OscConfig+0x2b8>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a07      	ldr	r2, [pc, #28]	; (800790c <HAL_RCC_OscConfig+0x2b8>)
 80078f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078f6:	f7fd fe13 	bl	8005520 <HAL_GetTick>
 80078fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078fc:	e011      	b.n	8007922 <HAL_RCC_OscConfig+0x2ce>
 80078fe:	bf00      	nop
 8007900:	40023800 	.word	0x40023800
 8007904:	42470000 	.word	0x42470000
 8007908:	42470e80 	.word	0x42470e80
 800790c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007910:	f7fd fe06 	bl	8005520 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e106      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007922:	4b85      	ldr	r3, [pc, #532]	; (8007b38 <HAL_RCC_OscConfig+0x4e4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0f0      	beq.n	8007910 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d106      	bne.n	8007944 <HAL_RCC_OscConfig+0x2f0>
 8007936:	4b81      	ldr	r3, [pc, #516]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793a:	4a80      	ldr	r2, [pc, #512]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 800793c:	f043 0301 	orr.w	r3, r3, #1
 8007940:	6713      	str	r3, [r2, #112]	; 0x70
 8007942:	e01c      	b.n	800797e <HAL_RCC_OscConfig+0x32a>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	2b05      	cmp	r3, #5
 800794a:	d10c      	bne.n	8007966 <HAL_RCC_OscConfig+0x312>
 800794c:	4b7b      	ldr	r3, [pc, #492]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 800794e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007950:	4a7a      	ldr	r2, [pc, #488]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007952:	f043 0304 	orr.w	r3, r3, #4
 8007956:	6713      	str	r3, [r2, #112]	; 0x70
 8007958:	4b78      	ldr	r3, [pc, #480]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 800795a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795c:	4a77      	ldr	r2, [pc, #476]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 800795e:	f043 0301 	orr.w	r3, r3, #1
 8007962:	6713      	str	r3, [r2, #112]	; 0x70
 8007964:	e00b      	b.n	800797e <HAL_RCC_OscConfig+0x32a>
 8007966:	4b75      	ldr	r3, [pc, #468]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796a:	4a74      	ldr	r2, [pc, #464]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	6713      	str	r3, [r2, #112]	; 0x70
 8007972:	4b72      	ldr	r3, [pc, #456]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007976:	4a71      	ldr	r2, [pc, #452]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007978:	f023 0304 	bic.w	r3, r3, #4
 800797c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d015      	beq.n	80079b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007986:	f7fd fdcb 	bl	8005520 <HAL_GetTick>
 800798a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800798c:	e00a      	b.n	80079a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800798e:	f7fd fdc7 	bl	8005520 <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	f241 3288 	movw	r2, #5000	; 0x1388
 800799c:	4293      	cmp	r3, r2
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e0c5      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a4:	4b65      	ldr	r3, [pc, #404]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 80079a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0ee      	beq.n	800798e <HAL_RCC_OscConfig+0x33a>
 80079b0:	e014      	b.n	80079dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079b2:	f7fd fdb5 	bl	8005520 <HAL_GetTick>
 80079b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079b8:	e00a      	b.n	80079d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079ba:	f7fd fdb1 	bl	8005520 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d901      	bls.n	80079d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e0af      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079d0:	4b5a      	ldr	r3, [pc, #360]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 80079d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1ee      	bne.n	80079ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079dc:	7dfb      	ldrb	r3, [r7, #23]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d105      	bne.n	80079ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079e2:	4b56      	ldr	r3, [pc, #344]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	4a55      	ldr	r2, [pc, #340]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 80079e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 809b 	beq.w	8007b2e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079f8:	4b50      	ldr	r3, [pc, #320]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f003 030c 	and.w	r3, r3, #12
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d05c      	beq.n	8007abe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d141      	bne.n	8007a90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a0c:	4b4c      	ldr	r3, [pc, #304]	; (8007b40 <HAL_RCC_OscConfig+0x4ec>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a12:	f7fd fd85 	bl	8005520 <HAL_GetTick>
 8007a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a18:	e008      	b.n	8007a2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a1a:	f7fd fd81 	bl	8005520 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d901      	bls.n	8007a2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e081      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a2c:	4b43      	ldr	r3, [pc, #268]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1f0      	bne.n	8007a1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69da      	ldr	r2, [r3, #28]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a46:	019b      	lsls	r3, r3, #6
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4e:	085b      	lsrs	r3, r3, #1
 8007a50:	3b01      	subs	r3, #1
 8007a52:	041b      	lsls	r3, r3, #16
 8007a54:	431a      	orrs	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	061b      	lsls	r3, r3, #24
 8007a5c:	4937      	ldr	r1, [pc, #220]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a62:	4b37      	ldr	r3, [pc, #220]	; (8007b40 <HAL_RCC_OscConfig+0x4ec>)
 8007a64:	2201      	movs	r2, #1
 8007a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a68:	f7fd fd5a 	bl	8005520 <HAL_GetTick>
 8007a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a6e:	e008      	b.n	8007a82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a70:	f7fd fd56 	bl	8005520 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e056      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a82:	4b2e      	ldr	r3, [pc, #184]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0f0      	beq.n	8007a70 <HAL_RCC_OscConfig+0x41c>
 8007a8e:	e04e      	b.n	8007b2e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a90:	4b2b      	ldr	r3, [pc, #172]	; (8007b40 <HAL_RCC_OscConfig+0x4ec>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a96:	f7fd fd43 	bl	8005520 <HAL_GetTick>
 8007a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a9c:	e008      	b.n	8007ab0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a9e:	f7fd fd3f 	bl	8005520 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d901      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e03f      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ab0:	4b22      	ldr	r3, [pc, #136]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1f0      	bne.n	8007a9e <HAL_RCC_OscConfig+0x44a>
 8007abc:	e037      	b.n	8007b2e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e032      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007aca:	4b1c      	ldr	r3, [pc, #112]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d028      	beq.n	8007b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d121      	bne.n	8007b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d11a      	bne.n	8007b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007afa:	4013      	ands	r3, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d111      	bne.n	8007b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b10:	085b      	lsrs	r3, r3, #1
 8007b12:	3b01      	subs	r3, #1
 8007b14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d107      	bne.n	8007b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d001      	beq.n	8007b2e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	40007000 	.word	0x40007000
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	42470060 	.word	0x42470060

08007b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e0cc      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b58:	4b68      	ldr	r3, [pc, #416]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d90c      	bls.n	8007b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b66:	4b65      	ldr	r3, [pc, #404]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6e:	4b63      	ldr	r3, [pc, #396]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d001      	beq.n	8007b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e0b8      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d020      	beq.n	8007bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b98:	4b59      	ldr	r3, [pc, #356]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	4a58      	ldr	r2, [pc, #352]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0308 	and.w	r3, r3, #8
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bb0:	4b53      	ldr	r3, [pc, #332]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	4a52      	ldr	r2, [pc, #328]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bbc:	4b50      	ldr	r3, [pc, #320]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	494d      	ldr	r1, [pc, #308]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d044      	beq.n	8007c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d107      	bne.n	8007bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007be2:	4b47      	ldr	r3, [pc, #284]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d119      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e07f      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d003      	beq.n	8007c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d107      	bne.n	8007c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c02:	4b3f      	ldr	r3, [pc, #252]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d109      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e06f      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c12:	4b3b      	ldr	r3, [pc, #236]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e067      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c22:	4b37      	ldr	r3, [pc, #220]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f023 0203 	bic.w	r2, r3, #3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	4934      	ldr	r1, [pc, #208]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c34:	f7fd fc74 	bl	8005520 <HAL_GetTick>
 8007c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c3a:	e00a      	b.n	8007c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c3c:	f7fd fc70 	bl	8005520 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e04f      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c52:	4b2b      	ldr	r3, [pc, #172]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 020c 	and.w	r2, r3, #12
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d1eb      	bne.n	8007c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c64:	4b25      	ldr	r3, [pc, #148]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d20c      	bcs.n	8007c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c72:	4b22      	ldr	r3, [pc, #136]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c7a:	4b20      	ldr	r3, [pc, #128]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0307 	and.w	r3, r3, #7
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d001      	beq.n	8007c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e032      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c98:	4b19      	ldr	r3, [pc, #100]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	4916      	ldr	r1, [pc, #88]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cb6:	4b12      	ldr	r3, [pc, #72]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	490e      	ldr	r1, [pc, #56]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007cca:	f000 f821 	bl	8007d10 <HAL_RCC_GetSysClockFreq>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	091b      	lsrs	r3, r3, #4
 8007cd6:	f003 030f 	and.w	r3, r3, #15
 8007cda:	490a      	ldr	r1, [pc, #40]	; (8007d04 <HAL_RCC_ClockConfig+0x1c0>)
 8007cdc:	5ccb      	ldrb	r3, [r1, r3]
 8007cde:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce2:	4a09      	ldr	r2, [pc, #36]	; (8007d08 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ce6:	4b09      	ldr	r3, [pc, #36]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fd fbd4 	bl	8005498 <HAL_InitTick>

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40023c00 	.word	0x40023c00
 8007d00:	40023800 	.word	0x40023800
 8007d04:	0800d6d8 	.word	0x0800d6d8
 8007d08:	20000038 	.word	0x20000038
 8007d0c:	2000003c 	.word	0x2000003c

08007d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d10:	b5b0      	push	{r4, r5, r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d16:	2100      	movs	r1, #0
 8007d18:	6079      	str	r1, [r7, #4]
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	60f9      	str	r1, [r7, #12]
 8007d1e:	2100      	movs	r1, #0
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007d22:	2100      	movs	r1, #0
 8007d24:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d26:	4952      	ldr	r1, [pc, #328]	; (8007e70 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d28:	6889      	ldr	r1, [r1, #8]
 8007d2a:	f001 010c 	and.w	r1, r1, #12
 8007d2e:	2908      	cmp	r1, #8
 8007d30:	d00d      	beq.n	8007d4e <HAL_RCC_GetSysClockFreq+0x3e>
 8007d32:	2908      	cmp	r1, #8
 8007d34:	f200 8094 	bhi.w	8007e60 <HAL_RCC_GetSysClockFreq+0x150>
 8007d38:	2900      	cmp	r1, #0
 8007d3a:	d002      	beq.n	8007d42 <HAL_RCC_GetSysClockFreq+0x32>
 8007d3c:	2904      	cmp	r1, #4
 8007d3e:	d003      	beq.n	8007d48 <HAL_RCC_GetSysClockFreq+0x38>
 8007d40:	e08e      	b.n	8007e60 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d42:	4b4c      	ldr	r3, [pc, #304]	; (8007e74 <HAL_RCC_GetSysClockFreq+0x164>)
 8007d44:	60bb      	str	r3, [r7, #8]
       break;
 8007d46:	e08e      	b.n	8007e66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d48:	4b4b      	ldr	r3, [pc, #300]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d4a:	60bb      	str	r3, [r7, #8]
      break;
 8007d4c:	e08b      	b.n	8007e66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d4e:	4948      	ldr	r1, [pc, #288]	; (8007e70 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d50:	6849      	ldr	r1, [r1, #4]
 8007d52:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007d56:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d58:	4945      	ldr	r1, [pc, #276]	; (8007e70 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d5a:	6849      	ldr	r1, [r1, #4]
 8007d5c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007d60:	2900      	cmp	r1, #0
 8007d62:	d024      	beq.n	8007dae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d64:	4942      	ldr	r1, [pc, #264]	; (8007e70 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d66:	6849      	ldr	r1, [r1, #4]
 8007d68:	0989      	lsrs	r1, r1, #6
 8007d6a:	4608      	mov	r0, r1
 8007d6c:	f04f 0100 	mov.w	r1, #0
 8007d70:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007d74:	f04f 0500 	mov.w	r5, #0
 8007d78:	ea00 0204 	and.w	r2, r0, r4
 8007d7c:	ea01 0305 	and.w	r3, r1, r5
 8007d80:	493d      	ldr	r1, [pc, #244]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d82:	fb01 f003 	mul.w	r0, r1, r3
 8007d86:	2100      	movs	r1, #0
 8007d88:	fb01 f102 	mul.w	r1, r1, r2
 8007d8c:	1844      	adds	r4, r0, r1
 8007d8e:	493a      	ldr	r1, [pc, #232]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d90:	fba2 0101 	umull	r0, r1, r2, r1
 8007d94:	1863      	adds	r3, r4, r1
 8007d96:	4619      	mov	r1, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f04f 0300 	mov.w	r3, #0
 8007da0:	f7f8 ff24 	bl	8000bec <__aeabi_uldivmod>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4613      	mov	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	e04a      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dae:	4b30      	ldr	r3, [pc, #192]	; (8007e70 <HAL_RCC_GetSysClockFreq+0x160>)
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	099b      	lsrs	r3, r3, #6
 8007db4:	461a      	mov	r2, r3
 8007db6:	f04f 0300 	mov.w	r3, #0
 8007dba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007dbe:	f04f 0100 	mov.w	r1, #0
 8007dc2:	ea02 0400 	and.w	r4, r2, r0
 8007dc6:	ea03 0501 	and.w	r5, r3, r1
 8007dca:	4620      	mov	r0, r4
 8007dcc:	4629      	mov	r1, r5
 8007dce:	f04f 0200 	mov.w	r2, #0
 8007dd2:	f04f 0300 	mov.w	r3, #0
 8007dd6:	014b      	lsls	r3, r1, #5
 8007dd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ddc:	0142      	lsls	r2, r0, #5
 8007dde:	4610      	mov	r0, r2
 8007de0:	4619      	mov	r1, r3
 8007de2:	1b00      	subs	r0, r0, r4
 8007de4:	eb61 0105 	sbc.w	r1, r1, r5
 8007de8:	f04f 0200 	mov.w	r2, #0
 8007dec:	f04f 0300 	mov.w	r3, #0
 8007df0:	018b      	lsls	r3, r1, #6
 8007df2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007df6:	0182      	lsls	r2, r0, #6
 8007df8:	1a12      	subs	r2, r2, r0
 8007dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8007dfe:	f04f 0000 	mov.w	r0, #0
 8007e02:	f04f 0100 	mov.w	r1, #0
 8007e06:	00d9      	lsls	r1, r3, #3
 8007e08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e0c:	00d0      	lsls	r0, r2, #3
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	1912      	adds	r2, r2, r4
 8007e14:	eb45 0303 	adc.w	r3, r5, r3
 8007e18:	f04f 0000 	mov.w	r0, #0
 8007e1c:	f04f 0100 	mov.w	r1, #0
 8007e20:	0299      	lsls	r1, r3, #10
 8007e22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e26:	0290      	lsls	r0, r2, #10
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4619      	mov	r1, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f04f 0300 	mov.w	r3, #0
 8007e38:	f7f8 fed8 	bl	8000bec <__aeabi_uldivmod>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4613      	mov	r3, r2
 8007e42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e44:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <HAL_RCC_GetSysClockFreq+0x160>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	0c1b      	lsrs	r3, r3, #16
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	3301      	adds	r3, #1
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5c:	60bb      	str	r3, [r7, #8]
      break;
 8007e5e:	e002      	b.n	8007e66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e60:	4b04      	ldr	r3, [pc, #16]	; (8007e74 <HAL_RCC_GetSysClockFreq+0x164>)
 8007e62:	60bb      	str	r3, [r7, #8]
      break;
 8007e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e66:	68bb      	ldr	r3, [r7, #8]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8007e70:	40023800 	.word	0x40023800
 8007e74:	00f42400 	.word	0x00f42400
 8007e78:	017d7840 	.word	0x017d7840

08007e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e80:	4b03      	ldr	r3, [pc, #12]	; (8007e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e82:	681b      	ldr	r3, [r3, #0]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	20000038 	.word	0x20000038

08007e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e98:	f7ff fff0 	bl	8007e7c <HAL_RCC_GetHCLKFreq>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	0a9b      	lsrs	r3, r3, #10
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	4903      	ldr	r1, [pc, #12]	; (8007eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eaa:	5ccb      	ldrb	r3, [r1, r3]
 8007eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	40023800 	.word	0x40023800
 8007eb8:	0800d6e8 	.word	0x0800d6e8

08007ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ec0:	f7ff ffdc 	bl	8007e7c <HAL_RCC_GetHCLKFreq>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	4b05      	ldr	r3, [pc, #20]	; (8007edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	0b5b      	lsrs	r3, r3, #13
 8007ecc:	f003 0307 	and.w	r3, r3, #7
 8007ed0:	4903      	ldr	r1, [pc, #12]	; (8007ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ed2:	5ccb      	ldrb	r3, [r1, r3]
 8007ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	40023800 	.word	0x40023800
 8007ee0:	0800d6e8 	.word	0x0800d6e8

08007ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d105      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d035      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f0c:	4b67      	ldr	r3, [pc, #412]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007f12:	f7fd fb05 	bl	8005520 <HAL_GetTick>
 8007f16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f18:	e008      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007f1a:	f7fd fb01 	bl	8005520 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d901      	bls.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e0ba      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f2c:	4b60      	ldr	r3, [pc, #384]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1f0      	bne.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	019a      	lsls	r2, r3, #6
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	071b      	lsls	r3, r3, #28
 8007f44:	495a      	ldr	r1, [pc, #360]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f4c:	4b57      	ldr	r3, [pc, #348]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007f52:	f7fd fae5 	bl	8005520 <HAL_GetTick>
 8007f56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f58:	e008      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007f5a:	f7fd fae1 	bl	8005520 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e09a      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f6c:	4b50      	ldr	r3, [pc, #320]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d0f0      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 8083 	beq.w	800808c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	4b49      	ldr	r3, [pc, #292]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	4a48      	ldr	r2, [pc, #288]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f94:	6413      	str	r3, [r2, #64]	; 0x40
 8007f96:	4b46      	ldr	r3, [pc, #280]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007fa2:	4b44      	ldr	r3, [pc, #272]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a43      	ldr	r2, [pc, #268]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fae:	f7fd fab7 	bl	8005520 <HAL_GetTick>
 8007fb2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007fb4:	e008      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007fb6:	f7fd fab3 	bl	8005520 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e06c      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007fc8:	4b3a      	ldr	r3, [pc, #232]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d0f0      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fd4:	4b36      	ldr	r3, [pc, #216]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fdc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d02f      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d028      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ff2:	4b2f      	ldr	r3, [pc, #188]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ffc:	4b2e      	ldr	r3, [pc, #184]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ffe:	2201      	movs	r2, #1
 8008000:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008002:	4b2d      	ldr	r3, [pc, #180]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008008:	4a29      	ldr	r2, [pc, #164]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800800e:	4b28      	ldr	r3, [pc, #160]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b01      	cmp	r3, #1
 8008018:	d114      	bne.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800801a:	f7fd fa81 	bl	8005520 <HAL_GetTick>
 800801e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008020:	e00a      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008022:	f7fd fa7d 	bl	8005520 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008030:	4293      	cmp	r3, r2
 8008032:	d901      	bls.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e034      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008038:	4b1d      	ldr	r3, [pc, #116]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800803a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0ee      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800804c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008050:	d10d      	bne.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008052:	4b17      	ldr	r3, [pc, #92]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008066:	4912      	ldr	r1, [pc, #72]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008068:	4313      	orrs	r3, r2
 800806a:	608b      	str	r3, [r1, #8]
 800806c:	e005      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800806e:	4b10      	ldr	r3, [pc, #64]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	4a0f      	ldr	r2, [pc, #60]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008074:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008078:	6093      	str	r3, [r2, #8]
 800807a:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800807c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008086:	490a      	ldr	r1, [pc, #40]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008088:	4313      	orrs	r3, r2
 800808a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0308 	and.w	r3, r3, #8
 8008094:	2b00      	cmp	r3, #0
 8008096:	d003      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	7c1a      	ldrb	r2, [r3, #16]
 800809c:	4b07      	ldr	r3, [pc, #28]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800809e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	42470068 	.word	0x42470068
 80080b0:	40023800 	.word	0x40023800
 80080b4:	40007000 	.word	0x40007000
 80080b8:	42470e40 	.word	0x42470e40
 80080bc:	424711e0 	.word	0x424711e0

080080c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e083      	b.n	80081da <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	7f5b      	ldrb	r3, [r3, #29]
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d105      	bne.n	80080e8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7fc ffb2 	bl	800504c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	22ca      	movs	r2, #202	; 0xca
 80080f4:	625a      	str	r2, [r3, #36]	; 0x24
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2253      	movs	r2, #83	; 0x53
 80080fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fc26 	bl	8008950 <RTC_EnterInitMode>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d008      	beq.n	800811c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	22ff      	movs	r2, #255	; 0xff
 8008110:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2204      	movs	r2, #4
 8008116:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e05e      	b.n	80081da <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	6812      	ldr	r2, [r2, #0]
 8008126:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800812a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800812e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6899      	ldr	r1, [r3, #8]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	431a      	orrs	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	431a      	orrs	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	68d2      	ldr	r2, [r2, #12]
 8008156:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6919      	ldr	r1, [r3, #16]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	041a      	lsls	r2, r3, #16
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800817a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10e      	bne.n	80081a8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fbb8 	bl	8008900 <HAL_RTC_WaitForSynchro>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d008      	beq.n	80081a8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	22ff      	movs	r2, #255	; 0xff
 800819c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2204      	movs	r2, #4
 80081a2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e018      	b.n	80081da <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80081b6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	22ff      	movs	r2, #255	; 0xff
 80081d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80081d8:	2300      	movs	r3, #0
  }
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80081e2:	b590      	push	{r4, r7, lr}
 80081e4:	b087      	sub	sp, #28
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	7f1b      	ldrb	r3, [r3, #28]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_RTC_SetTime+0x1c>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e0aa      	b.n	8008354 <HAL_RTC_SetTime+0x172>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2202      	movs	r2, #2
 8008208:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d126      	bne.n	800825e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2200      	movs	r2, #0
 8008222:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	4618      	mov	r0, r3
 800822a:	f000 fbbd 	bl	80089a8 <RTC_ByteToBcd2>
 800822e:	4603      	mov	r3, r0
 8008230:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	785b      	ldrb	r3, [r3, #1]
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fbb6 	bl	80089a8 <RTC_ByteToBcd2>
 800823c:	4603      	mov	r3, r0
 800823e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008240:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	789b      	ldrb	r3, [r3, #2]
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fbae 	bl	80089a8 <RTC_ByteToBcd2>
 800824c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800824e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	78db      	ldrb	r3, [r3, #3]
 8008256:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	e018      	b.n	8008290 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008268:	2b00      	cmp	r3, #0
 800826a:	d102      	bne.n	8008272 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2200      	movs	r2, #0
 8008270:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	785b      	ldrb	r3, [r3, #1]
 800827c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800827e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008284:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	78db      	ldrb	r3, [r3, #3]
 800828a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800828c:	4313      	orrs	r3, r2
 800828e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	22ca      	movs	r2, #202	; 0xca
 8008296:	625a      	str	r2, [r3, #36]	; 0x24
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2253      	movs	r2, #83	; 0x53
 800829e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 fb55 	bl	8008950 <RTC_EnterInitMode>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00b      	beq.n	80082c4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	22ff      	movs	r2, #255	; 0xff
 80082b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2204      	movs	r2, #4
 80082b8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e047      	b.n	8008354 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80082ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80082d2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689a      	ldr	r2, [r3, #8]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082e2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6899      	ldr	r1, [r3, #8]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	431a      	orrs	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800830a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f003 0320 	and.w	r3, r3, #32
 8008316:	2b00      	cmp	r3, #0
 8008318:	d111      	bne.n	800833e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 faf0 	bl	8008900 <HAL_RTC_WaitForSynchro>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00b      	beq.n	800833e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	22ff      	movs	r2, #255	; 0xff
 800832c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2204      	movs	r2, #4
 8008332:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e00a      	b.n	8008354 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	22ff      	movs	r2, #255	; 0xff
 8008344:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008352:	2300      	movs	r3, #0
  }
}
 8008354:	4618      	mov	r0, r3
 8008356:	371c      	adds	r7, #28
 8008358:	46bd      	mov	sp, r7
 800835a:	bd90      	pop	{r4, r7, pc}

0800835c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800838e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008392:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	0c1b      	lsrs	r3, r3, #16
 8008398:	b2db      	uxtb	r3, r3
 800839a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	0a1b      	lsrs	r3, r3, #8
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	0c1b      	lsrs	r3, r3, #16
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d11a      	bne.n	800840e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fb01 	bl	80089e4 <RTC_Bcd2ToByte>
 80083e2:	4603      	mov	r3, r0
 80083e4:	461a      	mov	r2, r3
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	785b      	ldrb	r3, [r3, #1]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 faf8 	bl	80089e4 <RTC_Bcd2ToByte>
 80083f4:	4603      	mov	r3, r0
 80083f6:	461a      	mov	r2, r3
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	789b      	ldrb	r3, [r3, #2]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 faef 	bl	80089e4 <RTC_Bcd2ToByte>
 8008406:	4603      	mov	r3, r0
 8008408:	461a      	mov	r2, r3
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008418:	b590      	push	{r4, r7, lr}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	7f1b      	ldrb	r3, [r3, #28]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_RTC_SetDate+0x1c>
 8008430:	2302      	movs	r3, #2
 8008432:	e094      	b.n	800855e <HAL_RTC_SetDate+0x146>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2201      	movs	r2, #1
 8008438:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2202      	movs	r2, #2
 800843e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10e      	bne.n	8008464 <HAL_RTC_SetDate+0x4c>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	f003 0310 	and.w	r3, r3, #16
 800844e:	2b00      	cmp	r3, #0
 8008450:	d008      	beq.n	8008464 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	f023 0310 	bic.w	r3, r3, #16
 800845a:	b2db      	uxtb	r3, r3
 800845c:	330a      	adds	r3, #10
 800845e:	b2da      	uxtb	r2, r3
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d11c      	bne.n	80084a4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	78db      	ldrb	r3, [r3, #3]
 800846e:	4618      	mov	r0, r3
 8008470:	f000 fa9a 	bl	80089a8 <RTC_ByteToBcd2>
 8008474:	4603      	mov	r3, r0
 8008476:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	785b      	ldrb	r3, [r3, #1]
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fa93 	bl	80089a8 <RTC_ByteToBcd2>
 8008482:	4603      	mov	r3, r0
 8008484:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008486:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	789b      	ldrb	r3, [r3, #2]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fa8b 	bl	80089a8 <RTC_ByteToBcd2>
 8008492:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008494:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]
 80084a2:	e00e      	b.n	80084c2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	78db      	ldrb	r3, [r3, #3]
 80084a8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80084b0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80084b6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80084be:	4313      	orrs	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	22ca      	movs	r2, #202	; 0xca
 80084c8:	625a      	str	r2, [r3, #36]	; 0x24
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2253      	movs	r2, #83	; 0x53
 80084d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 fa3c 	bl	8008950 <RTC_EnterInitMode>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00b      	beq.n	80084f6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	22ff      	movs	r2, #255	; 0xff
 80084e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2204      	movs	r2, #4
 80084ea:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e033      	b.n	800855e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008500:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008504:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008514:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b00      	cmp	r3, #0
 8008522:	d111      	bne.n	8008548 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f9eb 	bl	8008900 <HAL_RTC_WaitForSynchro>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	22ff      	movs	r2, #255	; 0xff
 8008536:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2204      	movs	r2, #4
 800853c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e00a      	b.n	800855e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	22ff      	movs	r2, #255	; 0xff
 800854e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800855c:	2300      	movs	r3, #0
  }
}
 800855e:	4618      	mov	r0, r3
 8008560:	371c      	adds	r7, #28
 8008562:	46bd      	mov	sp, r7
 8008564:	bd90      	pop	{r4, r7, pc}

08008566 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b086      	sub	sp, #24
 800856a:	af00      	add	r7, sp, #0
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008580:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008584:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	0c1b      	lsrs	r3, r3, #16
 800858a:	b2da      	uxtb	r2, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	0a1b      	lsrs	r3, r3, #8
 8008594:	b2db      	uxtb	r3, r3
 8008596:	f003 031f 	and.w	r3, r3, #31
 800859a:	b2da      	uxtb	r2, r3
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	0b5b      	lsrs	r3, r3, #13
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	f003 0307 	and.w	r3, r3, #7
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d11a      	bne.n	80085fa <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	78db      	ldrb	r3, [r3, #3]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 fa0b 	bl	80089e4 <RTC_Bcd2ToByte>
 80085ce:	4603      	mov	r3, r0
 80085d0:	461a      	mov	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	785b      	ldrb	r3, [r3, #1]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fa02 	bl	80089e4 <RTC_Bcd2ToByte>
 80085e0:	4603      	mov	r3, r0
 80085e2:	461a      	mov	r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	789b      	ldrb	r3, [r3, #2]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 f9f9 	bl	80089e4 <RTC_Bcd2ToByte>
 80085f2:	4603      	mov	r3, r0
 80085f4:	461a      	mov	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008604:	b590      	push	{r4, r7, lr}
 8008606:	b089      	sub	sp, #36	; 0x24
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	61fb      	str	r3, [r7, #28]
 8008614:	2300      	movs	r3, #0
 8008616:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8008618:	4b93      	ldr	r3, [pc, #588]	; (8008868 <HAL_RTC_SetAlarm_IT+0x264>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a93      	ldr	r2, [pc, #588]	; (800886c <HAL_RTC_SetAlarm_IT+0x268>)
 800861e:	fba2 2303 	umull	r2, r3, r2, r3
 8008622:	0adb      	lsrs	r3, r3, #11
 8008624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008628:	fb02 f303 	mul.w	r3, r2, r3
 800862c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	7f1b      	ldrb	r3, [r3, #28]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d101      	bne.n	800863a <HAL_RTC_SetAlarm_IT+0x36>
 8008636:	2302      	movs	r3, #2
 8008638:	e111      	b.n	800885e <HAL_RTC_SetAlarm_IT+0x25a>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2201      	movs	r2, #1
 800863e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2202      	movs	r2, #2
 8008644:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d137      	bne.n	80086bc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	d102      	bne.n	8008660 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2200      	movs	r2, #0
 800865e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f000 f99f 	bl	80089a8 <RTC_ByteToBcd2>
 800866a:	4603      	mov	r3, r0
 800866c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	785b      	ldrb	r3, [r3, #1]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f998 	bl	80089a8 <RTC_ByteToBcd2>
 8008678:	4603      	mov	r3, r0
 800867a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800867c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	789b      	ldrb	r3, [r3, #2]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 f990 	bl	80089a8 <RTC_ByteToBcd2>
 8008688:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800868a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	78db      	ldrb	r3, [r3, #3]
 8008692:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008694:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 f982 	bl	80089a8 <RTC_ByteToBcd2>
 80086a4:	4603      	mov	r3, r0
 80086a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80086a8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80086b0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80086b6:	4313      	orrs	r3, r2
 80086b8:	61fb      	str	r3, [r7, #28]
 80086ba:	e023      	b.n	8008704 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d102      	bne.n	80086d0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2200      	movs	r2, #0
 80086ce:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	785b      	ldrb	r3, [r3, #1]
 80086da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80086dc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80086e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	78db      	ldrb	r3, [r3, #3]
 80086e8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80086ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086f2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80086f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80086fa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008700:	4313      	orrs	r3, r2
 8008702:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	4313      	orrs	r3, r2
 800870e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	22ca      	movs	r2, #202	; 0xca
 8008716:	625a      	str	r2, [r3, #36]	; 0x24
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2253      	movs	r2, #83	; 0x53
 800871e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008728:	d141      	bne.n	80087ae <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689a      	ldr	r2, [r3, #8]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008738:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	b2da      	uxtb	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800874a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	1e5a      	subs	r2, r3, #1
 8008750:	617a      	str	r2, [r7, #20]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10b      	bne.n	800876e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	22ff      	movs	r2, #255	; 0xff
 800875c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2203      	movs	r2, #3
 8008762:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	e077      	b.n	800885e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0e7      	beq.n	800874c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	69fa      	ldr	r2, [r7, #28]
 8008782:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800879a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689a      	ldr	r2, [r3, #8]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087aa:	609a      	str	r2, [r3, #8]
 80087ac:	e040      	b.n	8008830 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80087bc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f462 7220 	orn	r2, r2, #640	; 0x280
 80087ce:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	1e5a      	subs	r2, r3, #1
 80087d4:	617a      	str	r2, [r7, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10b      	bne.n	80087f2 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	22ff      	movs	r2, #255	; 0xff
 80087e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2203      	movs	r2, #3
 80087e6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e035      	b.n	800885e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0e7      	beq.n	80087d0 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69fa      	ldr	r2, [r7, #28]
 8008806:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800881e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800882e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008830:	4b0f      	ldr	r3, [pc, #60]	; (8008870 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a0e      	ldr	r2, [pc, #56]	; (8008870 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800883a:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800883c:	4b0c      	ldr	r3, [pc, #48]	; (8008870 <HAL_RTC_SetAlarm_IT+0x26c>)
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	4a0b      	ldr	r2, [pc, #44]	; (8008870 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008846:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	22ff      	movs	r2, #255	; 0xff
 800884e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3724      	adds	r7, #36	; 0x24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd90      	pop	{r4, r7, pc}
 8008866:	bf00      	nop
 8008868:	20000038 	.word	0x20000038
 800886c:	10624dd3 	.word	0x10624dd3
 8008870:	40013c00 	.word	0x40013c00

08008874 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d012      	beq.n	80088b0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00b      	beq.n	80088b0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7fa fab5 	bl	8002e08 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80088ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d012      	beq.n	80088e4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00b      	beq.n	80088e4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f902 	bl	8008ad6 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	b2da      	uxtb	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f462 7220 	orn	r2, r2, #640	; 0x280
 80088e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <HAL_RTC_AlarmIRQHandler+0x88>)
 80088e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80088ea:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	775a      	strb	r2, [r3, #29]
}
 80088f2:	bf00      	nop
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	40013c00 	.word	0x40013c00

08008900 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800891a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800891c:	f7fc fe00 	bl	8005520 <HAL_GetTick>
 8008920:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008922:	e009      	b.n	8008938 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008924:	f7fc fdfc 	bl	8005520 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008932:	d901      	bls.n	8008938 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008934:	2303      	movs	r3, #3
 8008936:	e007      	b.n	8008948 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	f003 0320 	and.w	r3, r3, #32
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0ee      	beq.n	8008924 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008958:	2300      	movs	r3, #0
 800895a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	d119      	bne.n	800899e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f04f 32ff 	mov.w	r2, #4294967295
 8008972:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008974:	f7fc fdd4 	bl	8005520 <HAL_GetTick>
 8008978:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800897a:	e009      	b.n	8008990 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800897c:	f7fc fdd0 	bl	8005520 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800898a:	d901      	bls.n	8008990 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e007      	b.n	80089a0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0ee      	beq.n	800897c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	4603      	mov	r3, r0
 80089b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80089b6:	e005      	b.n	80089c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3301      	adds	r3, #1
 80089bc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80089be:	79fb      	ldrb	r3, [r7, #7]
 80089c0:	3b0a      	subs	r3, #10
 80089c2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	2b09      	cmp	r3, #9
 80089c8:	d8f6      	bhi.n	80089b8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	011b      	lsls	r3, r3, #4
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	b2db      	uxtb	r3, r3
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	091b      	lsrs	r3, r3, #4
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	461a      	mov	r2, r3
 80089fa:	4613      	mov	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	4413      	add	r3, r2
 8008a12:	b2db      	uxtb	r3, r3
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmouthCalibMinusPulsesValue must be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmouthCalibMinusPulsesValue)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmouthCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	7f1b      	ldrb	r3, [r3, #28]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d101      	bne.n	8008a3e <HAL_RTCEx_SetSmoothCalib+0x1e>
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	e047      	b.n	8008ace <HAL_RTCEx_SetSmoothCalib+0xae>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2201      	movs	r2, #1
 8008a42:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2202      	movs	r2, #2
 8008a48:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	22ca      	movs	r2, #202	; 0xca
 8008a50:	625a      	str	r2, [r3, #36]	; 0x24
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2253      	movs	r2, #83	; 0x53
 8008a58:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d01e      	beq.n	8008aa6 <HAL_RTCEx_SetSmoothCalib+0x86>
  {
  /* Get tick */
  tickstart = HAL_GetTick();
 8008a68:	f7fc fd5a 	bl	8005520 <HAL_GetTick>
 8008a6c:	6178      	str	r0, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8008a6e:	e013      	b.n	8008a98 <HAL_RTCEx_SetSmoothCalib+0x78>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008a70:	f7fc fd56 	bl	8005520 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a7e:	d90b      	bls.n	8008a98 <HAL_RTCEx_SetSmoothCalib+0x78>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	22ff      	movs	r2, #255	; 0xff
 8008a86:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2203      	movs	r2, #3
 8008a8c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008a94:	2303      	movs	r3, #3
 8008a96:	e01a      	b.n	8008ace <HAL_RTCEx_SetSmoothCalib+0xae>
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e4      	bne.n	8008a70 <HAL_RTCEx_SetSmoothCalib+0x50>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmouthCalibMinusPulsesValue);
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	ea42 0103 	orr.w	r1, r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	22ff      	movs	r2, #255	; 0xff
 8008abe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8008ade:	bf00      	nop
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b082      	sub	sp, #8
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e041      	b.n	8008b80 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d106      	bne.n	8008b16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7fc fab7 	bl	8005084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2202      	movs	r2, #2
 8008b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3304      	adds	r3, #4
 8008b26:	4619      	mov	r1, r3
 8008b28:	4610      	mov	r0, r2
 8008b2a:	f000 f94f 	bl	8008dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d001      	beq.n	8008ba0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e03c      	b.n	8008c1a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a1e      	ldr	r2, [pc, #120]	; (8008c28 <HAL_TIM_Base_Start+0xa0>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d018      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bba:	d013      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a1a      	ldr	r2, [pc, #104]	; (8008c2c <HAL_TIM_Base_Start+0xa4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00e      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a19      	ldr	r2, [pc, #100]	; (8008c30 <HAL_TIM_Base_Start+0xa8>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d009      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a17      	ldr	r2, [pc, #92]	; (8008c34 <HAL_TIM_Base_Start+0xac>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d004      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a16      	ldr	r2, [pc, #88]	; (8008c38 <HAL_TIM_Base_Start+0xb0>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d111      	bne.n	8008c08 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f003 0307 	and.w	r3, r3, #7
 8008bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b06      	cmp	r3, #6
 8008bf4:	d010      	beq.n	8008c18 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f042 0201 	orr.w	r2, r2, #1
 8008c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c06:	e007      	b.n	8008c18 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f042 0201 	orr.w	r2, r2, #1
 8008c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	40010000 	.word	0x40010000
 8008c2c:	40000400 	.word	0x40000400
 8008c30:	40000800 	.word	0x40000800
 8008c34:	40000c00 	.word	0x40000c00
 8008c38:	40014000 	.word	0x40014000

08008c3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d101      	bne.n	8008c58 <HAL_TIM_ConfigClockSource+0x1c>
 8008c54:	2302      	movs	r3, #2
 8008c56:	e0b4      	b.n	8008dc2 <HAL_TIM_ConfigClockSource+0x186>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c90:	d03e      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0xd4>
 8008c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c96:	f200 8087 	bhi.w	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c9e:	f000 8086 	beq.w	8008dae <HAL_TIM_ConfigClockSource+0x172>
 8008ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ca6:	d87f      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ca8:	2b70      	cmp	r3, #112	; 0x70
 8008caa:	d01a      	beq.n	8008ce2 <HAL_TIM_ConfigClockSource+0xa6>
 8008cac:	2b70      	cmp	r3, #112	; 0x70
 8008cae:	d87b      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cb0:	2b60      	cmp	r3, #96	; 0x60
 8008cb2:	d050      	beq.n	8008d56 <HAL_TIM_ConfigClockSource+0x11a>
 8008cb4:	2b60      	cmp	r3, #96	; 0x60
 8008cb6:	d877      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cb8:	2b50      	cmp	r3, #80	; 0x50
 8008cba:	d03c      	beq.n	8008d36 <HAL_TIM_ConfigClockSource+0xfa>
 8008cbc:	2b50      	cmp	r3, #80	; 0x50
 8008cbe:	d873      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cc0:	2b40      	cmp	r3, #64	; 0x40
 8008cc2:	d058      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x13a>
 8008cc4:	2b40      	cmp	r3, #64	; 0x40
 8008cc6:	d86f      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cc8:	2b30      	cmp	r3, #48	; 0x30
 8008cca:	d064      	beq.n	8008d96 <HAL_TIM_ConfigClockSource+0x15a>
 8008ccc:	2b30      	cmp	r3, #48	; 0x30
 8008cce:	d86b      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cd0:	2b20      	cmp	r3, #32
 8008cd2:	d060      	beq.n	8008d96 <HAL_TIM_ConfigClockSource+0x15a>
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	d867      	bhi.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d05c      	beq.n	8008d96 <HAL_TIM_ConfigClockSource+0x15a>
 8008cdc:	2b10      	cmp	r3, #16
 8008cde:	d05a      	beq.n	8008d96 <HAL_TIM_ConfigClockSource+0x15a>
 8008ce0:	e062      	b.n	8008da8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	6899      	ldr	r1, [r3, #8]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f000 f965 	bl	8008fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	609a      	str	r2, [r3, #8]
      break;
 8008d0e:	e04f      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	6899      	ldr	r1, [r3, #8]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f000 f94e 	bl	8008fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d32:	609a      	str	r2, [r3, #8]
      break;
 8008d34:	e03c      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6818      	ldr	r0, [r3, #0]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	6859      	ldr	r1, [r3, #4]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	461a      	mov	r2, r3
 8008d44:	f000 f8c2 	bl	8008ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2150      	movs	r1, #80	; 0x50
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 f91b 	bl	8008f8a <TIM_ITRx_SetConfig>
      break;
 8008d54:	e02c      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6818      	ldr	r0, [r3, #0]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	6859      	ldr	r1, [r3, #4]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	461a      	mov	r2, r3
 8008d64:	f000 f8e1 	bl	8008f2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2160      	movs	r1, #96	; 0x60
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 f90b 	bl	8008f8a <TIM_ITRx_SetConfig>
      break;
 8008d74:	e01c      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6818      	ldr	r0, [r3, #0]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	6859      	ldr	r1, [r3, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	461a      	mov	r2, r3
 8008d84:	f000 f8a2 	bl	8008ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2140      	movs	r1, #64	; 0x40
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 f8fb 	bl	8008f8a <TIM_ITRx_SetConfig>
      break;
 8008d94:	e00c      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f000 f8f2 	bl	8008f8a <TIM_ITRx_SetConfig>
      break;
 8008da6:	e003      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	73fb      	strb	r3, [r7, #15]
      break;
 8008dac:	e000      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
	...

08008dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a34      	ldr	r2, [pc, #208]	; (8008eb0 <TIM_Base_SetConfig+0xe4>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00f      	beq.n	8008e04 <TIM_Base_SetConfig+0x38>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dea:	d00b      	beq.n	8008e04 <TIM_Base_SetConfig+0x38>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a31      	ldr	r2, [pc, #196]	; (8008eb4 <TIM_Base_SetConfig+0xe8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d007      	beq.n	8008e04 <TIM_Base_SetConfig+0x38>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a30      	ldr	r2, [pc, #192]	; (8008eb8 <TIM_Base_SetConfig+0xec>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d003      	beq.n	8008e04 <TIM_Base_SetConfig+0x38>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a2f      	ldr	r2, [pc, #188]	; (8008ebc <TIM_Base_SetConfig+0xf0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d108      	bne.n	8008e16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a25      	ldr	r2, [pc, #148]	; (8008eb0 <TIM_Base_SetConfig+0xe4>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d01b      	beq.n	8008e56 <TIM_Base_SetConfig+0x8a>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e24:	d017      	beq.n	8008e56 <TIM_Base_SetConfig+0x8a>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a22      	ldr	r2, [pc, #136]	; (8008eb4 <TIM_Base_SetConfig+0xe8>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d013      	beq.n	8008e56 <TIM_Base_SetConfig+0x8a>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a21      	ldr	r2, [pc, #132]	; (8008eb8 <TIM_Base_SetConfig+0xec>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d00f      	beq.n	8008e56 <TIM_Base_SetConfig+0x8a>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a20      	ldr	r2, [pc, #128]	; (8008ebc <TIM_Base_SetConfig+0xf0>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d00b      	beq.n	8008e56 <TIM_Base_SetConfig+0x8a>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a1f      	ldr	r2, [pc, #124]	; (8008ec0 <TIM_Base_SetConfig+0xf4>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d007      	beq.n	8008e56 <TIM_Base_SetConfig+0x8a>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a1e      	ldr	r2, [pc, #120]	; (8008ec4 <TIM_Base_SetConfig+0xf8>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d003      	beq.n	8008e56 <TIM_Base_SetConfig+0x8a>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a1d      	ldr	r2, [pc, #116]	; (8008ec8 <TIM_Base_SetConfig+0xfc>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d108      	bne.n	8008e68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a08      	ldr	r2, [pc, #32]	; (8008eb0 <TIM_Base_SetConfig+0xe4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d103      	bne.n	8008e9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	691a      	ldr	r2, [r3, #16]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	615a      	str	r2, [r3, #20]
}
 8008ea2:	bf00      	nop
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	40010000 	.word	0x40010000
 8008eb4:	40000400 	.word	0x40000400
 8008eb8:	40000800 	.word	0x40000800
 8008ebc:	40000c00 	.word	0x40000c00
 8008ec0:	40014000 	.word	0x40014000
 8008ec4:	40014400 	.word	0x40014400
 8008ec8:	40014800 	.word	0x40014800

08008ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f023 0201 	bic.w	r2, r3, #1
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	011b      	lsls	r3, r3, #4
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f023 030a 	bic.w	r3, r3, #10
 8008f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	621a      	str	r2, [r3, #32]
}
 8008f1e:	bf00      	nop
 8008f20:	371c      	adds	r7, #28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b087      	sub	sp, #28
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	60f8      	str	r0, [r7, #12]
 8008f32:	60b9      	str	r1, [r7, #8]
 8008f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	f023 0210 	bic.w	r2, r3, #16
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6a1b      	ldr	r3, [r3, #32]
 8008f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	031b      	lsls	r3, r3, #12
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	011b      	lsls	r3, r3, #4
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	621a      	str	r2, [r3, #32]
}
 8008f7e:	bf00      	nop
 8008f80:	371c      	adds	r7, #28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b085      	sub	sp, #20
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	f043 0307 	orr.w	r3, r3, #7
 8008fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	609a      	str	r2, [r3, #8]
}
 8008fb4:	bf00      	nop
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	021a      	lsls	r2, r3, #8
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	609a      	str	r2, [r3, #8]
}
 8008ff4:	bf00      	nop
 8008ff6:	371c      	adds	r7, #28
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009014:	2302      	movs	r3, #2
 8009016:	e050      	b.n	80090ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2202      	movs	r2, #2
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800903e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	4313      	orrs	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a1c      	ldr	r2, [pc, #112]	; (80090c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d018      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009064:	d013      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a18      	ldr	r2, [pc, #96]	; (80090cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d00e      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a16      	ldr	r2, [pc, #88]	; (80090d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d009      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a15      	ldr	r2, [pc, #84]	; (80090d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d004      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a13      	ldr	r2, [pc, #76]	; (80090d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d10c      	bne.n	80090a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	4313      	orrs	r3, r2
 800909e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	40010000 	.word	0x40010000
 80090cc:	40000400 	.word	0x40000400
 80090d0:	40000800 	.word	0x40000800
 80090d4:	40000c00 	.word	0x40000c00
 80090d8:	40014000 	.word	0x40014000

080090dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e03f      	b.n	800916e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d106      	bne.n	8009108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7fb ffe0 	bl	80050c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2224      	movs	r2, #36	; 0x24
 800910c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68da      	ldr	r2, [r3, #12]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800911e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fddb 	bl	8009cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	691a      	ldr	r2, [r3, #16]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	695a      	ldr	r2, [r3, #20]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2220      	movs	r2, #32
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2220      	movs	r2, #32
 8009168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b08a      	sub	sp, #40	; 0x28
 800917a:	af02      	add	r7, sp, #8
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	60b9      	str	r1, [r7, #8]
 8009180:	603b      	str	r3, [r7, #0]
 8009182:	4613      	mov	r3, r2
 8009184:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009186:	2300      	movs	r3, #0
 8009188:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b20      	cmp	r3, #32
 8009194:	d17c      	bne.n	8009290 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <HAL_UART_Transmit+0x2c>
 800919c:	88fb      	ldrh	r3, [r7, #6]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e075      	b.n	8009292 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d101      	bne.n	80091b4 <HAL_UART_Transmit+0x3e>
 80091b0:	2302      	movs	r3, #2
 80091b2:	e06e      	b.n	8009292 <HAL_UART_Transmit+0x11c>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2221      	movs	r2, #33	; 0x21
 80091c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091ca:	f7fc f9a9 	bl	8005520 <HAL_GetTick>
 80091ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	88fa      	ldrh	r2, [r7, #6]
 80091d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	88fa      	ldrh	r2, [r7, #6]
 80091da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e4:	d108      	bne.n	80091f8 <HAL_UART_Transmit+0x82>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d104      	bne.n	80091f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80091ee:	2300      	movs	r3, #0
 80091f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	61bb      	str	r3, [r7, #24]
 80091f6:	e003      	b.n	8009200 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091fc:	2300      	movs	r3, #0
 80091fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009208:	e02a      	b.n	8009260 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2200      	movs	r2, #0
 8009212:	2180      	movs	r1, #128	; 0x80
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 fb1f 	bl	8009858 <UART_WaitOnFlagUntilTimeout>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	e036      	b.n	8009292 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10b      	bne.n	8009242 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	881b      	ldrh	r3, [r3, #0]
 800922e:	461a      	mov	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009238:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	3302      	adds	r3, #2
 800923e:	61bb      	str	r3, [r7, #24]
 8009240:	e007      	b.n	8009252 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	781a      	ldrb	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	3301      	adds	r3, #1
 8009250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009256:	b29b      	uxth	r3, r3
 8009258:	3b01      	subs	r3, #1
 800925a:	b29a      	uxth	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009264:	b29b      	uxth	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1cf      	bne.n	800920a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2200      	movs	r2, #0
 8009272:	2140      	movs	r1, #64	; 0x40
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 faef 	bl	8009858 <UART_WaitOnFlagUntilTimeout>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e006      	b.n	8009292 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2220      	movs	r2, #32
 8009288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	e000      	b.n	8009292 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009290:	2302      	movs	r3, #2
  }
}
 8009292:	4618      	mov	r0, r3
 8009294:	3720      	adds	r7, #32
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	60f8      	str	r0, [r7, #12]
 80092a2:	60b9      	str	r1, [r7, #8]
 80092a4:	4613      	mov	r3, r2
 80092a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b20      	cmp	r3, #32
 80092b2:	d11d      	bne.n	80092f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d002      	beq.n	80092c0 <HAL_UART_Receive_IT+0x26>
 80092ba:	88fb      	ldrh	r3, [r7, #6]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d101      	bne.n	80092c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e016      	b.n	80092f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <HAL_UART_Receive_IT+0x38>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e00f      	b.n	80092f2 <HAL_UART_Receive_IT+0x58>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80092e0:	88fb      	ldrh	r3, [r7, #6]
 80092e2:	461a      	mov	r2, r3
 80092e4:	68b9      	ldr	r1, [r7, #8]
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f000 fb24 	bl	8009934 <UART_Start_Receive_IT>
 80092ec:	4603      	mov	r3, r0
 80092ee:	e000      	b.n	80092f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80092f0:	2302      	movs	r3, #2
  }
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b0ba      	sub	sp, #232	; 0xe8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	695b      	ldr	r3, [r3, #20]
 800931e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009322:	2300      	movs	r3, #0
 8009324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009328:	2300      	movs	r3, #0
 800932a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800932e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009332:	f003 030f 	and.w	r3, r3, #15
 8009336:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800933a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10f      	bne.n	8009362 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009346:	f003 0320 	and.w	r3, r3, #32
 800934a:	2b00      	cmp	r3, #0
 800934c:	d009      	beq.n	8009362 <HAL_UART_IRQHandler+0x66>
 800934e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fc03 	bl	8009b66 <UART_Receive_IT>
      return;
 8009360:	e256      	b.n	8009810 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 80de 	beq.w	8009528 <HAL_UART_IRQHandler+0x22c>
 800936c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	2b00      	cmp	r3, #0
 8009376:	d106      	bne.n	8009386 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800937c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80d1 	beq.w	8009528 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00b      	beq.n	80093aa <HAL_UART_IRQHandler+0xae>
 8009392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800939a:	2b00      	cmp	r3, #0
 800939c:	d005      	beq.n	80093aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a2:	f043 0201 	orr.w	r2, r3, #1
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ae:	f003 0304 	and.w	r3, r3, #4
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00b      	beq.n	80093ce <HAL_UART_IRQHandler+0xd2>
 80093b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d005      	beq.n	80093ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c6:	f043 0202 	orr.w	r2, r3, #2
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093d2:	f003 0302 	and.w	r3, r3, #2
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00b      	beq.n	80093f2 <HAL_UART_IRQHandler+0xf6>
 80093da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d005      	beq.n	80093f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ea:	f043 0204 	orr.w	r2, r3, #4
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80093f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f6:	f003 0308 	and.w	r3, r3, #8
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d011      	beq.n	8009422 <HAL_UART_IRQHandler+0x126>
 80093fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009402:	f003 0320 	and.w	r3, r3, #32
 8009406:	2b00      	cmp	r3, #0
 8009408:	d105      	bne.n	8009416 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800940a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d005      	beq.n	8009422 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	f043 0208 	orr.w	r2, r3, #8
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	2b00      	cmp	r3, #0
 8009428:	f000 81ed 	beq.w	8009806 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800942c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009430:	f003 0320 	and.w	r3, r3, #32
 8009434:	2b00      	cmp	r3, #0
 8009436:	d008      	beq.n	800944a <HAL_UART_IRQHandler+0x14e>
 8009438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800943c:	f003 0320 	and.w	r3, r3, #32
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fb8e 	bl	8009b66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009454:	2b40      	cmp	r3, #64	; 0x40
 8009456:	bf0c      	ite	eq
 8009458:	2301      	moveq	r3, #1
 800945a:	2300      	movne	r3, #0
 800945c:	b2db      	uxtb	r3, r3
 800945e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009466:	f003 0308 	and.w	r3, r3, #8
 800946a:	2b00      	cmp	r3, #0
 800946c:	d103      	bne.n	8009476 <HAL_UART_IRQHandler+0x17a>
 800946e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009472:	2b00      	cmp	r3, #0
 8009474:	d04f      	beq.n	8009516 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fa96 	bl	80099a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	695b      	ldr	r3, [r3, #20]
 8009482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009486:	2b40      	cmp	r3, #64	; 0x40
 8009488:	d141      	bne.n	800950e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3314      	adds	r3, #20
 8009490:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009494:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009498:	e853 3f00 	ldrex	r3, [r3]
 800949c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80094a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	3314      	adds	r3, #20
 80094b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80094c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80094c6:	e841 2300 	strex	r3, r2, [r1]
 80094ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80094ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1d9      	bne.n	800948a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d013      	beq.n	8009506 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e2:	4a7d      	ldr	r2, [pc, #500]	; (80096d8 <HAL_UART_IRQHandler+0x3dc>)
 80094e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fd f80c 	bl	8006508 <HAL_DMA_Abort_IT>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d016      	beq.n	8009524 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009500:	4610      	mov	r0, r2
 8009502:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009504:	e00e      	b.n	8009524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f990 	bl	800982c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800950c:	e00a      	b.n	8009524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f98c 	bl	800982c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009514:	e006      	b.n	8009524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f988 	bl	800982c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009522:	e170      	b.n	8009806 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009524:	bf00      	nop
    return;
 8009526:	e16e      	b.n	8009806 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952c:	2b01      	cmp	r3, #1
 800952e:	f040 814a 	bne.w	80097c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009536:	f003 0310 	and.w	r3, r3, #16
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 8143 	beq.w	80097c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009544:	f003 0310 	and.w	r3, r3, #16
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 813c 	beq.w	80097c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800954e:	2300      	movs	r3, #0
 8009550:	60bb      	str	r3, [r7, #8]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	60bb      	str	r3, [r7, #8]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	60bb      	str	r3, [r7, #8]
 8009562:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956e:	2b40      	cmp	r3, #64	; 0x40
 8009570:	f040 80b4 	bne.w	80096dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009580:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 8140 	beq.w	800980a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800958e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009592:	429a      	cmp	r2, r3
 8009594:	f080 8139 	bcs.w	800980a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800959e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a4:	69db      	ldr	r3, [r3, #28]
 80095a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095aa:	f000 8088 	beq.w	80096be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	330c      	adds	r3, #12
 80095b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095bc:	e853 3f00 	ldrex	r3, [r3]
 80095c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80095c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	330c      	adds	r3, #12
 80095d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80095da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80095de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80095e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095ea:	e841 2300 	strex	r3, r2, [r1]
 80095ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80095f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1d9      	bne.n	80095ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3314      	adds	r3, #20
 8009600:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009604:	e853 3f00 	ldrex	r3, [r3]
 8009608:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800960a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800960c:	f023 0301 	bic.w	r3, r3, #1
 8009610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3314      	adds	r3, #20
 800961a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800961e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009622:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009624:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009626:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e1      	bne.n	80095fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3314      	adds	r3, #20
 800963c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800964c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	3314      	adds	r3, #20
 8009656:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800965a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800965c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009660:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e3      	bne.n	8009636 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2220      	movs	r2, #32
 8009672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	330c      	adds	r3, #12
 8009682:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009686:	e853 3f00 	ldrex	r3, [r3]
 800968a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800968c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800968e:	f023 0310 	bic.w	r3, r3, #16
 8009692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	330c      	adds	r3, #12
 800969c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80096a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80096a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096a8:	e841 2300 	strex	r3, r2, [r1]
 80096ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e3      	bne.n	800967c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fc feb5 	bl	8006428 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f8b6 	bl	8009840 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80096d4:	e099      	b.n	800980a <HAL_UART_IRQHandler+0x50e>
 80096d6:	bf00      	nop
 80096d8:	08009a6f 	.word	0x08009a6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 808b 	beq.w	800980e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80096f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f000 8086 	beq.w	800980e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	330c      	adds	r3, #12
 8009708:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009714:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009718:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	330c      	adds	r3, #12
 8009722:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009726:	647a      	str	r2, [r7, #68]	; 0x44
 8009728:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800972c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800972e:	e841 2300 	strex	r3, r2, [r1]
 8009732:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1e3      	bne.n	8009702 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3314      	adds	r3, #20
 8009740:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	e853 3f00 	ldrex	r3, [r3]
 8009748:	623b      	str	r3, [r7, #32]
   return(result);
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	f023 0301 	bic.w	r3, r3, #1
 8009750:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3314      	adds	r3, #20
 800975a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800975e:	633a      	str	r2, [r7, #48]	; 0x30
 8009760:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009762:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009766:	e841 2300 	strex	r3, r2, [r1]
 800976a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1e3      	bne.n	800973a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2220      	movs	r2, #32
 8009776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	330c      	adds	r3, #12
 8009786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	e853 3f00 	ldrex	r3, [r3]
 800978e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f023 0310 	bic.w	r3, r3, #16
 8009796:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	330c      	adds	r3, #12
 80097a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80097a4:	61fa      	str	r2, [r7, #28]
 80097a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a8:	69b9      	ldr	r1, [r7, #24]
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	e841 2300 	strex	r3, r2, [r1]
 80097b0:	617b      	str	r3, [r7, #20]
   return(result);
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1e3      	bne.n	8009780 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097bc:	4619      	mov	r1, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f83e 	bl	8009840 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097c4:	e023      	b.n	800980e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80097c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d009      	beq.n	80097e6 <HAL_UART_IRQHandler+0x4ea>
 80097d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f959 	bl	8009a96 <UART_Transmit_IT>
    return;
 80097e4:	e014      	b.n	8009810 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80097e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00e      	beq.n	8009810 <HAL_UART_IRQHandler+0x514>
 80097f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d008      	beq.n	8009810 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f999 	bl	8009b36 <UART_EndTransmit_IT>
    return;
 8009804:	e004      	b.n	8009810 <HAL_UART_IRQHandler+0x514>
    return;
 8009806:	bf00      	nop
 8009808:	e002      	b.n	8009810 <HAL_UART_IRQHandler+0x514>
      return;
 800980a:	bf00      	nop
 800980c:	e000      	b.n	8009810 <HAL_UART_IRQHandler+0x514>
      return;
 800980e:	bf00      	nop
  }
}
 8009810:	37e8      	adds	r7, #232	; 0xe8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop

08009818 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b090      	sub	sp, #64	; 0x40
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	4613      	mov	r3, r2
 8009866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009868:	e050      	b.n	800990c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800986a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800986c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009870:	d04c      	beq.n	800990c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009874:	2b00      	cmp	r3, #0
 8009876:	d007      	beq.n	8009888 <UART_WaitOnFlagUntilTimeout+0x30>
 8009878:	f7fb fe52 	bl	8005520 <HAL_GetTick>
 800987c:	4602      	mov	r2, r0
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009884:	429a      	cmp	r2, r3
 8009886:	d241      	bcs.n	800990c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	330c      	adds	r3, #12
 800988e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009892:	e853 3f00 	ldrex	r3, [r3]
 8009896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800989e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	330c      	adds	r3, #12
 80098a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098a8:	637a      	str	r2, [r7, #52]	; 0x34
 80098aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e5      	bne.n	8009888 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3314      	adds	r3, #20
 80098c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	e853 3f00 	ldrex	r3, [r3]
 80098ca:	613b      	str	r3, [r7, #16]
   return(result);
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	f023 0301 	bic.w	r3, r3, #1
 80098d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3314      	adds	r3, #20
 80098da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098dc:	623a      	str	r2, [r7, #32]
 80098de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	69f9      	ldr	r1, [r7, #28]
 80098e2:	6a3a      	ldr	r2, [r7, #32]
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e5      	bne.n	80098bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2220      	movs	r2, #32
 80098f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2220      	movs	r2, #32
 80098fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009908:	2303      	movs	r3, #3
 800990a:	e00f      	b.n	800992c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	4013      	ands	r3, r2
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	429a      	cmp	r2, r3
 800991a:	bf0c      	ite	eq
 800991c:	2301      	moveq	r3, #1
 800991e:	2300      	movne	r3, #0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	461a      	mov	r2, r3
 8009924:	79fb      	ldrb	r3, [r7, #7]
 8009926:	429a      	cmp	r2, r3
 8009928:	d09f      	beq.n	800986a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3740      	adds	r7, #64	; 0x40
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	4613      	mov	r3, r2
 8009940:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	88fa      	ldrh	r2, [r7, #6]
 800994c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	88fa      	ldrh	r2, [r7, #6]
 8009952:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2222      	movs	r2, #34	; 0x22
 800995e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68da      	ldr	r2, [r3, #12]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009978:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	695a      	ldr	r2, [r3, #20]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f042 0201 	orr.w	r2, r2, #1
 8009988:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68da      	ldr	r2, [r3, #12]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f042 0220 	orr.w	r2, r2, #32
 8009998:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b095      	sub	sp, #84	; 0x54
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	330c      	adds	r3, #12
 80099b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ba:	e853 3f00 	ldrex	r3, [r3]
 80099be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	330c      	adds	r3, #12
 80099ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099d0:	643a      	str	r2, [r7, #64]	; 0x40
 80099d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099d8:	e841 2300 	strex	r3, r2, [r1]
 80099dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1e5      	bne.n	80099b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3314      	adds	r3, #20
 80099ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	e853 3f00 	ldrex	r3, [r3]
 80099f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	f023 0301 	bic.w	r3, r3, #1
 80099fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3314      	adds	r3, #20
 8009a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e5      	bne.n	80099e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d119      	bne.n	8009a54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	330c      	adds	r3, #12
 8009a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	e853 3f00 	ldrex	r3, [r3]
 8009a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f023 0310 	bic.w	r3, r3, #16
 8009a36:	647b      	str	r3, [r7, #68]	; 0x44
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	330c      	adds	r3, #12
 8009a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a40:	61ba      	str	r2, [r7, #24]
 8009a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a44:	6979      	ldr	r1, [r7, #20]
 8009a46:	69ba      	ldr	r2, [r7, #24]
 8009a48:	e841 2300 	strex	r3, r2, [r1]
 8009a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e5      	bne.n	8009a20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a62:	bf00      	nop
 8009a64:	3754      	adds	r7, #84	; 0x54
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f7ff fecf 	bl	800982c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a8e:	bf00      	nop
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b085      	sub	sp, #20
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b21      	cmp	r3, #33	; 0x21
 8009aa8:	d13e      	bne.n	8009b28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ab2:	d114      	bne.n	8009ade <UART_Transmit_IT+0x48>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d110      	bne.n	8009ade <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a1b      	ldr	r3, [r3, #32]
 8009ac0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ad0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	1c9a      	adds	r2, r3, #2
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	621a      	str	r2, [r3, #32]
 8009adc:	e008      	b.n	8009af0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	1c59      	adds	r1, r3, #1
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	6211      	str	r1, [r2, #32]
 8009ae8:	781a      	ldrb	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	3b01      	subs	r3, #1
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	4619      	mov	r1, r3
 8009afe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10f      	bne.n	8009b24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68da      	ldr	r2, [r3, #12]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	e000      	b.n	8009b2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b28:	2302      	movs	r3, #2
  }
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b082      	sub	sp, #8
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68da      	ldr	r2, [r3, #12]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2220      	movs	r2, #32
 8009b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7ff fe5e 	bl	8009818 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b08c      	sub	sp, #48	; 0x30
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b22      	cmp	r3, #34	; 0x22
 8009b78:	f040 80ab 	bne.w	8009cd2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b84:	d117      	bne.n	8009bb6 <UART_Receive_IT+0x50>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d113      	bne.n	8009bb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bae:	1c9a      	adds	r2, r3, #2
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8009bb4:	e026      	b.n	8009c04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc8:	d007      	beq.n	8009bda <UART_Receive_IT+0x74>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10a      	bne.n	8009be8 <UART_Receive_IT+0x82>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d106      	bne.n	8009be8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	b2da      	uxtb	r2, r3
 8009be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be4:	701a      	strb	r2, [r3, #0]
 8009be6:	e008      	b.n	8009bfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfe:	1c5a      	adds	r2, r3, #1
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	4619      	mov	r1, r3
 8009c12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d15a      	bne.n	8009cce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68da      	ldr	r2, [r3, #12]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f022 0220 	bic.w	r2, r2, #32
 8009c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	695a      	ldr	r2, [r3, #20]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f022 0201 	bic.w	r2, r2, #1
 8009c46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2220      	movs	r2, #32
 8009c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d135      	bne.n	8009cc4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	330c      	adds	r3, #12
 8009c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	e853 3f00 	ldrex	r3, [r3]
 8009c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	f023 0310 	bic.w	r3, r3, #16
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	330c      	adds	r3, #12
 8009c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7e:	623a      	str	r2, [r7, #32]
 8009c80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c82:	69f9      	ldr	r1, [r7, #28]
 8009c84:	6a3a      	ldr	r2, [r7, #32]
 8009c86:	e841 2300 	strex	r3, r2, [r1]
 8009c8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1e5      	bne.n	8009c5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0310 	and.w	r3, r3, #16
 8009c9c:	2b10      	cmp	r3, #16
 8009c9e:	d10a      	bne.n	8009cb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	60fb      	str	r3, [r7, #12]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009cba:	4619      	mov	r1, r3
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff fdbf 	bl	8009840 <HAL_UARTEx_RxEventCallback>
 8009cc2:	e002      	b.n	8009cca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7fa fb91 	bl	80043ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e002      	b.n	8009cd4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	e000      	b.n	8009cd4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009cd2:	2302      	movs	r3, #2
  }
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3730      	adds	r7, #48	; 0x30
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	b09f      	sub	sp, #124	; 0x7c
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cf2:	68d9      	ldr	r1, [r3, #12]
 8009cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	ea40 0301 	orr.w	r3, r0, r1
 8009cfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d00:	689a      	ldr	r2, [r3, #8]
 8009d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	431a      	orrs	r2, r3
 8009d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d0a:	695b      	ldr	r3, [r3, #20]
 8009d0c:	431a      	orrs	r2, r3
 8009d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009d20:	f021 010c 	bic.w	r1, r1, #12
 8009d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d2a:	430b      	orrs	r3, r1
 8009d2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d3a:	6999      	ldr	r1, [r3, #24]
 8009d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	ea40 0301 	orr.w	r3, r0, r1
 8009d44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	4bc5      	ldr	r3, [pc, #788]	; (800a060 <UART_SetConfig+0x384>)
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d004      	beq.n	8009d5a <UART_SetConfig+0x7e>
 8009d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	4bc3      	ldr	r3, [pc, #780]	; (800a064 <UART_SetConfig+0x388>)
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d103      	bne.n	8009d62 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d5a:	f7fe f8af 	bl	8007ebc <HAL_RCC_GetPCLK2Freq>
 8009d5e:	6778      	str	r0, [r7, #116]	; 0x74
 8009d60:	e002      	b.n	8009d68 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d62:	f7fe f897 	bl	8007e94 <HAL_RCC_GetPCLK1Freq>
 8009d66:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d70:	f040 80b6 	bne.w	8009ee0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d76:	461c      	mov	r4, r3
 8009d78:	f04f 0500 	mov.w	r5, #0
 8009d7c:	4622      	mov	r2, r4
 8009d7e:	462b      	mov	r3, r5
 8009d80:	1891      	adds	r1, r2, r2
 8009d82:	6439      	str	r1, [r7, #64]	; 0x40
 8009d84:	415b      	adcs	r3, r3
 8009d86:	647b      	str	r3, [r7, #68]	; 0x44
 8009d88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d8c:	1912      	adds	r2, r2, r4
 8009d8e:	eb45 0303 	adc.w	r3, r5, r3
 8009d92:	f04f 0000 	mov.w	r0, #0
 8009d96:	f04f 0100 	mov.w	r1, #0
 8009d9a:	00d9      	lsls	r1, r3, #3
 8009d9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009da0:	00d0      	lsls	r0, r2, #3
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	1911      	adds	r1, r2, r4
 8009da8:	6639      	str	r1, [r7, #96]	; 0x60
 8009daa:	416b      	adcs	r3, r5
 8009dac:	667b      	str	r3, [r7, #100]	; 0x64
 8009dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	461a      	mov	r2, r3
 8009db4:	f04f 0300 	mov.w	r3, #0
 8009db8:	1891      	adds	r1, r2, r2
 8009dba:	63b9      	str	r1, [r7, #56]	; 0x38
 8009dbc:	415b      	adcs	r3, r3
 8009dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009dc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009dc8:	f7f6 ff10 	bl	8000bec <__aeabi_uldivmod>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4ba5      	ldr	r3, [pc, #660]	; (800a068 <UART_SetConfig+0x38c>)
 8009dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8009dd6:	095b      	lsrs	r3, r3, #5
 8009dd8:	011e      	lsls	r6, r3, #4
 8009dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ddc:	461c      	mov	r4, r3
 8009dde:	f04f 0500 	mov.w	r5, #0
 8009de2:	4622      	mov	r2, r4
 8009de4:	462b      	mov	r3, r5
 8009de6:	1891      	adds	r1, r2, r2
 8009de8:	6339      	str	r1, [r7, #48]	; 0x30
 8009dea:	415b      	adcs	r3, r3
 8009dec:	637b      	str	r3, [r7, #52]	; 0x34
 8009dee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009df2:	1912      	adds	r2, r2, r4
 8009df4:	eb45 0303 	adc.w	r3, r5, r3
 8009df8:	f04f 0000 	mov.w	r0, #0
 8009dfc:	f04f 0100 	mov.w	r1, #0
 8009e00:	00d9      	lsls	r1, r3, #3
 8009e02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e06:	00d0      	lsls	r0, r2, #3
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	1911      	adds	r1, r2, r4
 8009e0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8009e10:	416b      	adcs	r3, r5
 8009e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	f04f 0300 	mov.w	r3, #0
 8009e1e:	1891      	adds	r1, r2, r2
 8009e20:	62b9      	str	r1, [r7, #40]	; 0x28
 8009e22:	415b      	adcs	r3, r3
 8009e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e2a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009e2e:	f7f6 fedd 	bl	8000bec <__aeabi_uldivmod>
 8009e32:	4602      	mov	r2, r0
 8009e34:	460b      	mov	r3, r1
 8009e36:	4b8c      	ldr	r3, [pc, #560]	; (800a068 <UART_SetConfig+0x38c>)
 8009e38:	fba3 1302 	umull	r1, r3, r3, r2
 8009e3c:	095b      	lsrs	r3, r3, #5
 8009e3e:	2164      	movs	r1, #100	; 0x64
 8009e40:	fb01 f303 	mul.w	r3, r1, r3
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	3332      	adds	r3, #50	; 0x32
 8009e4a:	4a87      	ldr	r2, [pc, #540]	; (800a068 <UART_SetConfig+0x38c>)
 8009e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e50:	095b      	lsrs	r3, r3, #5
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e58:	441e      	add	r6, r3
 8009e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f04f 0100 	mov.w	r1, #0
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	1894      	adds	r4, r2, r2
 8009e68:	623c      	str	r4, [r7, #32]
 8009e6a:	415b      	adcs	r3, r3
 8009e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e72:	1812      	adds	r2, r2, r0
 8009e74:	eb41 0303 	adc.w	r3, r1, r3
 8009e78:	f04f 0400 	mov.w	r4, #0
 8009e7c:	f04f 0500 	mov.w	r5, #0
 8009e80:	00dd      	lsls	r5, r3, #3
 8009e82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009e86:	00d4      	lsls	r4, r2, #3
 8009e88:	4622      	mov	r2, r4
 8009e8a:	462b      	mov	r3, r5
 8009e8c:	1814      	adds	r4, r2, r0
 8009e8e:	653c      	str	r4, [r7, #80]	; 0x50
 8009e90:	414b      	adcs	r3, r1
 8009e92:	657b      	str	r3, [r7, #84]	; 0x54
 8009e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	f04f 0300 	mov.w	r3, #0
 8009e9e:	1891      	adds	r1, r2, r2
 8009ea0:	61b9      	str	r1, [r7, #24]
 8009ea2:	415b      	adcs	r3, r3
 8009ea4:	61fb      	str	r3, [r7, #28]
 8009ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009eaa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009eae:	f7f6 fe9d 	bl	8000bec <__aeabi_uldivmod>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4b6c      	ldr	r3, [pc, #432]	; (800a068 <UART_SetConfig+0x38c>)
 8009eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8009ebc:	095b      	lsrs	r3, r3, #5
 8009ebe:	2164      	movs	r1, #100	; 0x64
 8009ec0:	fb01 f303 	mul.w	r3, r1, r3
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	00db      	lsls	r3, r3, #3
 8009ec8:	3332      	adds	r3, #50	; 0x32
 8009eca:	4a67      	ldr	r2, [pc, #412]	; (800a068 <UART_SetConfig+0x38c>)
 8009ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed0:	095b      	lsrs	r3, r3, #5
 8009ed2:	f003 0207 	and.w	r2, r3, #7
 8009ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4432      	add	r2, r6
 8009edc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ede:	e0b9      	b.n	800a054 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ee2:	461c      	mov	r4, r3
 8009ee4:	f04f 0500 	mov.w	r5, #0
 8009ee8:	4622      	mov	r2, r4
 8009eea:	462b      	mov	r3, r5
 8009eec:	1891      	adds	r1, r2, r2
 8009eee:	6139      	str	r1, [r7, #16]
 8009ef0:	415b      	adcs	r3, r3
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009ef8:	1912      	adds	r2, r2, r4
 8009efa:	eb45 0303 	adc.w	r3, r5, r3
 8009efe:	f04f 0000 	mov.w	r0, #0
 8009f02:	f04f 0100 	mov.w	r1, #0
 8009f06:	00d9      	lsls	r1, r3, #3
 8009f08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009f0c:	00d0      	lsls	r0, r2, #3
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	eb12 0804 	adds.w	r8, r2, r4
 8009f16:	eb43 0905 	adc.w	r9, r3, r5
 8009f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f04f 0100 	mov.w	r1, #0
 8009f24:	f04f 0200 	mov.w	r2, #0
 8009f28:	f04f 0300 	mov.w	r3, #0
 8009f2c:	008b      	lsls	r3, r1, #2
 8009f2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f32:	0082      	lsls	r2, r0, #2
 8009f34:	4640      	mov	r0, r8
 8009f36:	4649      	mov	r1, r9
 8009f38:	f7f6 fe58 	bl	8000bec <__aeabi_uldivmod>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4b49      	ldr	r3, [pc, #292]	; (800a068 <UART_SetConfig+0x38c>)
 8009f42:	fba3 2302 	umull	r2, r3, r3, r2
 8009f46:	095b      	lsrs	r3, r3, #5
 8009f48:	011e      	lsls	r6, r3, #4
 8009f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f04f 0100 	mov.w	r1, #0
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	1894      	adds	r4, r2, r2
 8009f58:	60bc      	str	r4, [r7, #8]
 8009f5a:	415b      	adcs	r3, r3
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f62:	1812      	adds	r2, r2, r0
 8009f64:	eb41 0303 	adc.w	r3, r1, r3
 8009f68:	f04f 0400 	mov.w	r4, #0
 8009f6c:	f04f 0500 	mov.w	r5, #0
 8009f70:	00dd      	lsls	r5, r3, #3
 8009f72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f76:	00d4      	lsls	r4, r2, #3
 8009f78:	4622      	mov	r2, r4
 8009f7a:	462b      	mov	r3, r5
 8009f7c:	1814      	adds	r4, r2, r0
 8009f7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8009f80:	414b      	adcs	r3, r1
 8009f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f04f 0100 	mov.w	r1, #0
 8009f8e:	f04f 0200 	mov.w	r2, #0
 8009f92:	f04f 0300 	mov.w	r3, #0
 8009f96:	008b      	lsls	r3, r1, #2
 8009f98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f9c:	0082      	lsls	r2, r0, #2
 8009f9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009fa2:	f7f6 fe23 	bl	8000bec <__aeabi_uldivmod>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4b2f      	ldr	r3, [pc, #188]	; (800a068 <UART_SetConfig+0x38c>)
 8009fac:	fba3 1302 	umull	r1, r3, r3, r2
 8009fb0:	095b      	lsrs	r3, r3, #5
 8009fb2:	2164      	movs	r1, #100	; 0x64
 8009fb4:	fb01 f303 	mul.w	r3, r1, r3
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	011b      	lsls	r3, r3, #4
 8009fbc:	3332      	adds	r3, #50	; 0x32
 8009fbe:	4a2a      	ldr	r2, [pc, #168]	; (800a068 <UART_SetConfig+0x38c>)
 8009fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc4:	095b      	lsrs	r3, r3, #5
 8009fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fca:	441e      	add	r6, r3
 8009fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f04f 0100 	mov.w	r1, #0
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	1894      	adds	r4, r2, r2
 8009fda:	603c      	str	r4, [r7, #0]
 8009fdc:	415b      	adcs	r3, r3
 8009fde:	607b      	str	r3, [r7, #4]
 8009fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe4:	1812      	adds	r2, r2, r0
 8009fe6:	eb41 0303 	adc.w	r3, r1, r3
 8009fea:	f04f 0400 	mov.w	r4, #0
 8009fee:	f04f 0500 	mov.w	r5, #0
 8009ff2:	00dd      	lsls	r5, r3, #3
 8009ff4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009ff8:	00d4      	lsls	r4, r2, #3
 8009ffa:	4622      	mov	r2, r4
 8009ffc:	462b      	mov	r3, r5
 8009ffe:	eb12 0a00 	adds.w	sl, r2, r0
 800a002:	eb43 0b01 	adc.w	fp, r3, r1
 800a006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f04f 0100 	mov.w	r1, #0
 800a010:	f04f 0200 	mov.w	r2, #0
 800a014:	f04f 0300 	mov.w	r3, #0
 800a018:	008b      	lsls	r3, r1, #2
 800a01a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a01e:	0082      	lsls	r2, r0, #2
 800a020:	4650      	mov	r0, sl
 800a022:	4659      	mov	r1, fp
 800a024:	f7f6 fde2 	bl	8000bec <__aeabi_uldivmod>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	4b0e      	ldr	r3, [pc, #56]	; (800a068 <UART_SetConfig+0x38c>)
 800a02e:	fba3 1302 	umull	r1, r3, r3, r2
 800a032:	095b      	lsrs	r3, r3, #5
 800a034:	2164      	movs	r1, #100	; 0x64
 800a036:	fb01 f303 	mul.w	r3, r1, r3
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	011b      	lsls	r3, r3, #4
 800a03e:	3332      	adds	r3, #50	; 0x32
 800a040:	4a09      	ldr	r2, [pc, #36]	; (800a068 <UART_SetConfig+0x38c>)
 800a042:	fba2 2303 	umull	r2, r3, r2, r3
 800a046:	095b      	lsrs	r3, r3, #5
 800a048:	f003 020f 	and.w	r2, r3, #15
 800a04c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4432      	add	r2, r6
 800a052:	609a      	str	r2, [r3, #8]
}
 800a054:	bf00      	nop
 800a056:	377c      	adds	r7, #124	; 0x7c
 800a058:	46bd      	mov	sp, r7
 800a05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05e:	bf00      	nop
 800a060:	40011000 	.word	0x40011000
 800a064:	40011400 	.word	0x40011400
 800a068:	51eb851f 	.word	0x51eb851f

0800a06c <__errno>:
 800a06c:	4b01      	ldr	r3, [pc, #4]	; (800a074 <__errno+0x8>)
 800a06e:	6818      	ldr	r0, [r3, #0]
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	20000044 	.word	0x20000044

0800a078 <__libc_init_array>:
 800a078:	b570      	push	{r4, r5, r6, lr}
 800a07a:	4d0d      	ldr	r5, [pc, #52]	; (800a0b0 <__libc_init_array+0x38>)
 800a07c:	4c0d      	ldr	r4, [pc, #52]	; (800a0b4 <__libc_init_array+0x3c>)
 800a07e:	1b64      	subs	r4, r4, r5
 800a080:	10a4      	asrs	r4, r4, #2
 800a082:	2600      	movs	r6, #0
 800a084:	42a6      	cmp	r6, r4
 800a086:	d109      	bne.n	800a09c <__libc_init_array+0x24>
 800a088:	4d0b      	ldr	r5, [pc, #44]	; (800a0b8 <__libc_init_array+0x40>)
 800a08a:	4c0c      	ldr	r4, [pc, #48]	; (800a0bc <__libc_init_array+0x44>)
 800a08c:	f003 f94c 	bl	800d328 <_init>
 800a090:	1b64      	subs	r4, r4, r5
 800a092:	10a4      	asrs	r4, r4, #2
 800a094:	2600      	movs	r6, #0
 800a096:	42a6      	cmp	r6, r4
 800a098:	d105      	bne.n	800a0a6 <__libc_init_array+0x2e>
 800a09a:	bd70      	pop	{r4, r5, r6, pc}
 800a09c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0a0:	4798      	blx	r3
 800a0a2:	3601      	adds	r6, #1
 800a0a4:	e7ee      	b.n	800a084 <__libc_init_array+0xc>
 800a0a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0aa:	4798      	blx	r3
 800a0ac:	3601      	adds	r6, #1
 800a0ae:	e7f2      	b.n	800a096 <__libc_init_array+0x1e>
 800a0b0:	0800db64 	.word	0x0800db64
 800a0b4:	0800db64 	.word	0x0800db64
 800a0b8:	0800db64 	.word	0x0800db64
 800a0bc:	0800db68 	.word	0x0800db68

0800a0c0 <__itoa>:
 800a0c0:	1e93      	subs	r3, r2, #2
 800a0c2:	2b22      	cmp	r3, #34	; 0x22
 800a0c4:	b510      	push	{r4, lr}
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	d904      	bls.n	800a0d4 <__itoa+0x14>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	700b      	strb	r3, [r1, #0]
 800a0ce:	461c      	mov	r4, r3
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	bd10      	pop	{r4, pc}
 800a0d4:	2a0a      	cmp	r2, #10
 800a0d6:	d109      	bne.n	800a0ec <__itoa+0x2c>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	da07      	bge.n	800a0ec <__itoa+0x2c>
 800a0dc:	232d      	movs	r3, #45	; 0x2d
 800a0de:	700b      	strb	r3, [r1, #0]
 800a0e0:	4240      	negs	r0, r0
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	4421      	add	r1, r4
 800a0e6:	f001 f819 	bl	800b11c <__utoa>
 800a0ea:	e7f1      	b.n	800a0d0 <__itoa+0x10>
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	e7f9      	b.n	800a0e4 <__itoa+0x24>

0800a0f0 <itoa>:
 800a0f0:	f7ff bfe6 	b.w	800a0c0 <__itoa>

0800a0f4 <malloc>:
 800a0f4:	4b02      	ldr	r3, [pc, #8]	; (800a100 <malloc+0xc>)
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	6818      	ldr	r0, [r3, #0]
 800a0fa:	f000 b871 	b.w	800a1e0 <_malloc_r>
 800a0fe:	bf00      	nop
 800a100:	20000044 	.word	0x20000044

0800a104 <free>:
 800a104:	4b02      	ldr	r3, [pc, #8]	; (800a110 <free+0xc>)
 800a106:	4601      	mov	r1, r0
 800a108:	6818      	ldr	r0, [r3, #0]
 800a10a:	f000 b819 	b.w	800a140 <_free_r>
 800a10e:	bf00      	nop
 800a110:	20000044 	.word	0x20000044

0800a114 <memcpy>:
 800a114:	440a      	add	r2, r1
 800a116:	4291      	cmp	r1, r2
 800a118:	f100 33ff 	add.w	r3, r0, #4294967295
 800a11c:	d100      	bne.n	800a120 <memcpy+0xc>
 800a11e:	4770      	bx	lr
 800a120:	b510      	push	{r4, lr}
 800a122:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a12a:	4291      	cmp	r1, r2
 800a12c:	d1f9      	bne.n	800a122 <memcpy+0xe>
 800a12e:	bd10      	pop	{r4, pc}

0800a130 <memset>:
 800a130:	4402      	add	r2, r0
 800a132:	4603      	mov	r3, r0
 800a134:	4293      	cmp	r3, r2
 800a136:	d100      	bne.n	800a13a <memset+0xa>
 800a138:	4770      	bx	lr
 800a13a:	f803 1b01 	strb.w	r1, [r3], #1
 800a13e:	e7f9      	b.n	800a134 <memset+0x4>

0800a140 <_free_r>:
 800a140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a142:	2900      	cmp	r1, #0
 800a144:	d048      	beq.n	800a1d8 <_free_r+0x98>
 800a146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a14a:	9001      	str	r0, [sp, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f1a1 0404 	sub.w	r4, r1, #4
 800a152:	bfb8      	it	lt
 800a154:	18e4      	addlt	r4, r4, r3
 800a156:	f001 feb7 	bl	800bec8 <__malloc_lock>
 800a15a:	4a20      	ldr	r2, [pc, #128]	; (800a1dc <_free_r+0x9c>)
 800a15c:	9801      	ldr	r0, [sp, #4]
 800a15e:	6813      	ldr	r3, [r2, #0]
 800a160:	4615      	mov	r5, r2
 800a162:	b933      	cbnz	r3, 800a172 <_free_r+0x32>
 800a164:	6063      	str	r3, [r4, #4]
 800a166:	6014      	str	r4, [r2, #0]
 800a168:	b003      	add	sp, #12
 800a16a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a16e:	f001 beb1 	b.w	800bed4 <__malloc_unlock>
 800a172:	42a3      	cmp	r3, r4
 800a174:	d90b      	bls.n	800a18e <_free_r+0x4e>
 800a176:	6821      	ldr	r1, [r4, #0]
 800a178:	1862      	adds	r2, r4, r1
 800a17a:	4293      	cmp	r3, r2
 800a17c:	bf04      	itt	eq
 800a17e:	681a      	ldreq	r2, [r3, #0]
 800a180:	685b      	ldreq	r3, [r3, #4]
 800a182:	6063      	str	r3, [r4, #4]
 800a184:	bf04      	itt	eq
 800a186:	1852      	addeq	r2, r2, r1
 800a188:	6022      	streq	r2, [r4, #0]
 800a18a:	602c      	str	r4, [r5, #0]
 800a18c:	e7ec      	b.n	800a168 <_free_r+0x28>
 800a18e:	461a      	mov	r2, r3
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	b10b      	cbz	r3, 800a198 <_free_r+0x58>
 800a194:	42a3      	cmp	r3, r4
 800a196:	d9fa      	bls.n	800a18e <_free_r+0x4e>
 800a198:	6811      	ldr	r1, [r2, #0]
 800a19a:	1855      	adds	r5, r2, r1
 800a19c:	42a5      	cmp	r5, r4
 800a19e:	d10b      	bne.n	800a1b8 <_free_r+0x78>
 800a1a0:	6824      	ldr	r4, [r4, #0]
 800a1a2:	4421      	add	r1, r4
 800a1a4:	1854      	adds	r4, r2, r1
 800a1a6:	42a3      	cmp	r3, r4
 800a1a8:	6011      	str	r1, [r2, #0]
 800a1aa:	d1dd      	bne.n	800a168 <_free_r+0x28>
 800a1ac:	681c      	ldr	r4, [r3, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	6053      	str	r3, [r2, #4]
 800a1b2:	4421      	add	r1, r4
 800a1b4:	6011      	str	r1, [r2, #0]
 800a1b6:	e7d7      	b.n	800a168 <_free_r+0x28>
 800a1b8:	d902      	bls.n	800a1c0 <_free_r+0x80>
 800a1ba:	230c      	movs	r3, #12
 800a1bc:	6003      	str	r3, [r0, #0]
 800a1be:	e7d3      	b.n	800a168 <_free_r+0x28>
 800a1c0:	6825      	ldr	r5, [r4, #0]
 800a1c2:	1961      	adds	r1, r4, r5
 800a1c4:	428b      	cmp	r3, r1
 800a1c6:	bf04      	itt	eq
 800a1c8:	6819      	ldreq	r1, [r3, #0]
 800a1ca:	685b      	ldreq	r3, [r3, #4]
 800a1cc:	6063      	str	r3, [r4, #4]
 800a1ce:	bf04      	itt	eq
 800a1d0:	1949      	addeq	r1, r1, r5
 800a1d2:	6021      	streq	r1, [r4, #0]
 800a1d4:	6054      	str	r4, [r2, #4]
 800a1d6:	e7c7      	b.n	800a168 <_free_r+0x28>
 800a1d8:	b003      	add	sp, #12
 800a1da:	bd30      	pop	{r4, r5, pc}
 800a1dc:	20000348 	.word	0x20000348

0800a1e0 <_malloc_r>:
 800a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e2:	1ccd      	adds	r5, r1, #3
 800a1e4:	f025 0503 	bic.w	r5, r5, #3
 800a1e8:	3508      	adds	r5, #8
 800a1ea:	2d0c      	cmp	r5, #12
 800a1ec:	bf38      	it	cc
 800a1ee:	250c      	movcc	r5, #12
 800a1f0:	2d00      	cmp	r5, #0
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	db01      	blt.n	800a1fa <_malloc_r+0x1a>
 800a1f6:	42a9      	cmp	r1, r5
 800a1f8:	d903      	bls.n	800a202 <_malloc_r+0x22>
 800a1fa:	230c      	movs	r3, #12
 800a1fc:	6033      	str	r3, [r6, #0]
 800a1fe:	2000      	movs	r0, #0
 800a200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a202:	f001 fe61 	bl	800bec8 <__malloc_lock>
 800a206:	4921      	ldr	r1, [pc, #132]	; (800a28c <_malloc_r+0xac>)
 800a208:	680a      	ldr	r2, [r1, #0]
 800a20a:	4614      	mov	r4, r2
 800a20c:	b99c      	cbnz	r4, 800a236 <_malloc_r+0x56>
 800a20e:	4f20      	ldr	r7, [pc, #128]	; (800a290 <_malloc_r+0xb0>)
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	b923      	cbnz	r3, 800a21e <_malloc_r+0x3e>
 800a214:	4621      	mov	r1, r4
 800a216:	4630      	mov	r0, r6
 800a218:	f000 f8ba 	bl	800a390 <_sbrk_r>
 800a21c:	6038      	str	r0, [r7, #0]
 800a21e:	4629      	mov	r1, r5
 800a220:	4630      	mov	r0, r6
 800a222:	f000 f8b5 	bl	800a390 <_sbrk_r>
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	d123      	bne.n	800a272 <_malloc_r+0x92>
 800a22a:	230c      	movs	r3, #12
 800a22c:	6033      	str	r3, [r6, #0]
 800a22e:	4630      	mov	r0, r6
 800a230:	f001 fe50 	bl	800bed4 <__malloc_unlock>
 800a234:	e7e3      	b.n	800a1fe <_malloc_r+0x1e>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	1b5b      	subs	r3, r3, r5
 800a23a:	d417      	bmi.n	800a26c <_malloc_r+0x8c>
 800a23c:	2b0b      	cmp	r3, #11
 800a23e:	d903      	bls.n	800a248 <_malloc_r+0x68>
 800a240:	6023      	str	r3, [r4, #0]
 800a242:	441c      	add	r4, r3
 800a244:	6025      	str	r5, [r4, #0]
 800a246:	e004      	b.n	800a252 <_malloc_r+0x72>
 800a248:	6863      	ldr	r3, [r4, #4]
 800a24a:	42a2      	cmp	r2, r4
 800a24c:	bf0c      	ite	eq
 800a24e:	600b      	streq	r3, [r1, #0]
 800a250:	6053      	strne	r3, [r2, #4]
 800a252:	4630      	mov	r0, r6
 800a254:	f001 fe3e 	bl	800bed4 <__malloc_unlock>
 800a258:	f104 000b 	add.w	r0, r4, #11
 800a25c:	1d23      	adds	r3, r4, #4
 800a25e:	f020 0007 	bic.w	r0, r0, #7
 800a262:	1ac2      	subs	r2, r0, r3
 800a264:	d0cc      	beq.n	800a200 <_malloc_r+0x20>
 800a266:	1a1b      	subs	r3, r3, r0
 800a268:	50a3      	str	r3, [r4, r2]
 800a26a:	e7c9      	b.n	800a200 <_malloc_r+0x20>
 800a26c:	4622      	mov	r2, r4
 800a26e:	6864      	ldr	r4, [r4, #4]
 800a270:	e7cc      	b.n	800a20c <_malloc_r+0x2c>
 800a272:	1cc4      	adds	r4, r0, #3
 800a274:	f024 0403 	bic.w	r4, r4, #3
 800a278:	42a0      	cmp	r0, r4
 800a27a:	d0e3      	beq.n	800a244 <_malloc_r+0x64>
 800a27c:	1a21      	subs	r1, r4, r0
 800a27e:	4630      	mov	r0, r6
 800a280:	f000 f886 	bl	800a390 <_sbrk_r>
 800a284:	3001      	adds	r0, #1
 800a286:	d1dd      	bne.n	800a244 <_malloc_r+0x64>
 800a288:	e7cf      	b.n	800a22a <_malloc_r+0x4a>
 800a28a:	bf00      	nop
 800a28c:	20000348 	.word	0x20000348
 800a290:	2000034c 	.word	0x2000034c

0800a294 <_puts_r>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	460e      	mov	r6, r1
 800a298:	4605      	mov	r5, r0
 800a29a:	b118      	cbz	r0, 800a2a4 <_puts_r+0x10>
 800a29c:	6983      	ldr	r3, [r0, #24]
 800a29e:	b90b      	cbnz	r3, 800a2a4 <_puts_r+0x10>
 800a2a0:	f001 f97a 	bl	800b598 <__sinit>
 800a2a4:	69ab      	ldr	r3, [r5, #24]
 800a2a6:	68ac      	ldr	r4, [r5, #8]
 800a2a8:	b913      	cbnz	r3, 800a2b0 <_puts_r+0x1c>
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f001 f974 	bl	800b598 <__sinit>
 800a2b0:	4b2c      	ldr	r3, [pc, #176]	; (800a364 <_puts_r+0xd0>)
 800a2b2:	429c      	cmp	r4, r3
 800a2b4:	d120      	bne.n	800a2f8 <_puts_r+0x64>
 800a2b6:	686c      	ldr	r4, [r5, #4]
 800a2b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2ba:	07db      	lsls	r3, r3, #31
 800a2bc:	d405      	bmi.n	800a2ca <_puts_r+0x36>
 800a2be:	89a3      	ldrh	r3, [r4, #12]
 800a2c0:	0598      	lsls	r0, r3, #22
 800a2c2:	d402      	bmi.n	800a2ca <_puts_r+0x36>
 800a2c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2c6:	f001 fd74 	bl	800bdb2 <__retarget_lock_acquire_recursive>
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	0719      	lsls	r1, r3, #28
 800a2ce:	d51d      	bpl.n	800a30c <_puts_r+0x78>
 800a2d0:	6923      	ldr	r3, [r4, #16]
 800a2d2:	b1db      	cbz	r3, 800a30c <_puts_r+0x78>
 800a2d4:	3e01      	subs	r6, #1
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	60a3      	str	r3, [r4, #8]
 800a2e0:	bb39      	cbnz	r1, 800a332 <_puts_r+0x9e>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	da38      	bge.n	800a358 <_puts_r+0xc4>
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	210a      	movs	r1, #10
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f000 ff58 	bl	800b1a0 <__swbuf_r>
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	d011      	beq.n	800a318 <_puts_r+0x84>
 800a2f4:	250a      	movs	r5, #10
 800a2f6:	e011      	b.n	800a31c <_puts_r+0x88>
 800a2f8:	4b1b      	ldr	r3, [pc, #108]	; (800a368 <_puts_r+0xd4>)
 800a2fa:	429c      	cmp	r4, r3
 800a2fc:	d101      	bne.n	800a302 <_puts_r+0x6e>
 800a2fe:	68ac      	ldr	r4, [r5, #8]
 800a300:	e7da      	b.n	800a2b8 <_puts_r+0x24>
 800a302:	4b1a      	ldr	r3, [pc, #104]	; (800a36c <_puts_r+0xd8>)
 800a304:	429c      	cmp	r4, r3
 800a306:	bf08      	it	eq
 800a308:	68ec      	ldreq	r4, [r5, #12]
 800a30a:	e7d5      	b.n	800a2b8 <_puts_r+0x24>
 800a30c:	4621      	mov	r1, r4
 800a30e:	4628      	mov	r0, r5
 800a310:	f000 ffaa 	bl	800b268 <__swsetup_r>
 800a314:	2800      	cmp	r0, #0
 800a316:	d0dd      	beq.n	800a2d4 <_puts_r+0x40>
 800a318:	f04f 35ff 	mov.w	r5, #4294967295
 800a31c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a31e:	07da      	lsls	r2, r3, #31
 800a320:	d405      	bmi.n	800a32e <_puts_r+0x9a>
 800a322:	89a3      	ldrh	r3, [r4, #12]
 800a324:	059b      	lsls	r3, r3, #22
 800a326:	d402      	bmi.n	800a32e <_puts_r+0x9a>
 800a328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a32a:	f001 fd43 	bl	800bdb4 <__retarget_lock_release_recursive>
 800a32e:	4628      	mov	r0, r5
 800a330:	bd70      	pop	{r4, r5, r6, pc}
 800a332:	2b00      	cmp	r3, #0
 800a334:	da04      	bge.n	800a340 <_puts_r+0xac>
 800a336:	69a2      	ldr	r2, [r4, #24]
 800a338:	429a      	cmp	r2, r3
 800a33a:	dc06      	bgt.n	800a34a <_puts_r+0xb6>
 800a33c:	290a      	cmp	r1, #10
 800a33e:	d004      	beq.n	800a34a <_puts_r+0xb6>
 800a340:	6823      	ldr	r3, [r4, #0]
 800a342:	1c5a      	adds	r2, r3, #1
 800a344:	6022      	str	r2, [r4, #0]
 800a346:	7019      	strb	r1, [r3, #0]
 800a348:	e7c5      	b.n	800a2d6 <_puts_r+0x42>
 800a34a:	4622      	mov	r2, r4
 800a34c:	4628      	mov	r0, r5
 800a34e:	f000 ff27 	bl	800b1a0 <__swbuf_r>
 800a352:	3001      	adds	r0, #1
 800a354:	d1bf      	bne.n	800a2d6 <_puts_r+0x42>
 800a356:	e7df      	b.n	800a318 <_puts_r+0x84>
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	250a      	movs	r5, #10
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	6022      	str	r2, [r4, #0]
 800a360:	701d      	strb	r5, [r3, #0]
 800a362:	e7db      	b.n	800a31c <_puts_r+0x88>
 800a364:	0800d8a8 	.word	0x0800d8a8
 800a368:	0800d8c8 	.word	0x0800d8c8
 800a36c:	0800d888 	.word	0x0800d888

0800a370 <puts>:
 800a370:	4b02      	ldr	r3, [pc, #8]	; (800a37c <puts+0xc>)
 800a372:	4601      	mov	r1, r0
 800a374:	6818      	ldr	r0, [r3, #0]
 800a376:	f7ff bf8d 	b.w	800a294 <_puts_r>
 800a37a:	bf00      	nop
 800a37c:	20000044 	.word	0x20000044

0800a380 <realloc>:
 800a380:	4b02      	ldr	r3, [pc, #8]	; (800a38c <realloc+0xc>)
 800a382:	460a      	mov	r2, r1
 800a384:	4601      	mov	r1, r0
 800a386:	6818      	ldr	r0, [r3, #0]
 800a388:	f002 ba74 	b.w	800c874 <_realloc_r>
 800a38c:	20000044 	.word	0x20000044

0800a390 <_sbrk_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4d06      	ldr	r5, [pc, #24]	; (800a3ac <_sbrk_r+0x1c>)
 800a394:	2300      	movs	r3, #0
 800a396:	4604      	mov	r4, r0
 800a398:	4608      	mov	r0, r1
 800a39a:	602b      	str	r3, [r5, #0]
 800a39c:	f7fa ffe8 	bl	8005370 <_sbrk>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d102      	bne.n	800a3aa <_sbrk_r+0x1a>
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	b103      	cbz	r3, 800a3aa <_sbrk_r+0x1a>
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	20005254 	.word	0x20005254

0800a3b0 <siprintf>:
 800a3b0:	b40e      	push	{r1, r2, r3}
 800a3b2:	b500      	push	{lr}
 800a3b4:	b09c      	sub	sp, #112	; 0x70
 800a3b6:	ab1d      	add	r3, sp, #116	; 0x74
 800a3b8:	9002      	str	r0, [sp, #8]
 800a3ba:	9006      	str	r0, [sp, #24]
 800a3bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3c0:	4809      	ldr	r0, [pc, #36]	; (800a3e8 <siprintf+0x38>)
 800a3c2:	9107      	str	r1, [sp, #28]
 800a3c4:	9104      	str	r1, [sp, #16]
 800a3c6:	4909      	ldr	r1, [pc, #36]	; (800a3ec <siprintf+0x3c>)
 800a3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3cc:	9105      	str	r1, [sp, #20]
 800a3ce:	6800      	ldr	r0, [r0, #0]
 800a3d0:	9301      	str	r3, [sp, #4]
 800a3d2:	a902      	add	r1, sp, #8
 800a3d4:	f002 fad0 	bl	800c978 <_svfiprintf_r>
 800a3d8:	9b02      	ldr	r3, [sp, #8]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	701a      	strb	r2, [r3, #0]
 800a3de:	b01c      	add	sp, #112	; 0x70
 800a3e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3e4:	b003      	add	sp, #12
 800a3e6:	4770      	bx	lr
 800a3e8:	20000044 	.word	0x20000044
 800a3ec:	ffff0208 	.word	0xffff0208

0800a3f0 <__sread>:
 800a3f0:	b510      	push	{r4, lr}
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3f8:	f002 fd52 	bl	800cea0 <_read_r>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	bfab      	itete	ge
 800a400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a402:	89a3      	ldrhlt	r3, [r4, #12]
 800a404:	181b      	addge	r3, r3, r0
 800a406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a40a:	bfac      	ite	ge
 800a40c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a40e:	81a3      	strhlt	r3, [r4, #12]
 800a410:	bd10      	pop	{r4, pc}

0800a412 <__swrite>:
 800a412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a416:	461f      	mov	r7, r3
 800a418:	898b      	ldrh	r3, [r1, #12]
 800a41a:	05db      	lsls	r3, r3, #23
 800a41c:	4605      	mov	r5, r0
 800a41e:	460c      	mov	r4, r1
 800a420:	4616      	mov	r6, r2
 800a422:	d505      	bpl.n	800a430 <__swrite+0x1e>
 800a424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a428:	2302      	movs	r3, #2
 800a42a:	2200      	movs	r2, #0
 800a42c:	f001 fcc4 	bl	800bdb8 <_lseek_r>
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a43a:	81a3      	strh	r3, [r4, #12]
 800a43c:	4632      	mov	r2, r6
 800a43e:	463b      	mov	r3, r7
 800a440:	4628      	mov	r0, r5
 800a442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a446:	f000 befd 	b.w	800b244 <_write_r>

0800a44a <__sseek>:
 800a44a:	b510      	push	{r4, lr}
 800a44c:	460c      	mov	r4, r1
 800a44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a452:	f001 fcb1 	bl	800bdb8 <_lseek_r>
 800a456:	1c43      	adds	r3, r0, #1
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	bf15      	itete	ne
 800a45c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a45e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a466:	81a3      	strheq	r3, [r4, #12]
 800a468:	bf18      	it	ne
 800a46a:	81a3      	strhne	r3, [r4, #12]
 800a46c:	bd10      	pop	{r4, pc}

0800a46e <__sclose>:
 800a46e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a472:	f000 bf67 	b.w	800b344 <_close_r>

0800a476 <strcat>:
 800a476:	b510      	push	{r4, lr}
 800a478:	4602      	mov	r2, r0
 800a47a:	7814      	ldrb	r4, [r2, #0]
 800a47c:	4613      	mov	r3, r2
 800a47e:	3201      	adds	r2, #1
 800a480:	2c00      	cmp	r4, #0
 800a482:	d1fa      	bne.n	800a47a <strcat+0x4>
 800a484:	3b01      	subs	r3, #1
 800a486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a48a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a48e:	2a00      	cmp	r2, #0
 800a490:	d1f9      	bne.n	800a486 <strcat+0x10>
 800a492:	bd10      	pop	{r4, pc}

0800a494 <strncmp>:
 800a494:	b510      	push	{r4, lr}
 800a496:	b16a      	cbz	r2, 800a4b4 <strncmp+0x20>
 800a498:	3901      	subs	r1, #1
 800a49a:	1884      	adds	r4, r0, r2
 800a49c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a4a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d103      	bne.n	800a4b0 <strncmp+0x1c>
 800a4a8:	42a0      	cmp	r0, r4
 800a4aa:	d001      	beq.n	800a4b0 <strncmp+0x1c>
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1f5      	bne.n	800a49c <strncmp+0x8>
 800a4b0:	1a98      	subs	r0, r3, r2
 800a4b2:	bd10      	pop	{r4, pc}
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	e7fc      	b.n	800a4b2 <strncmp+0x1e>

0800a4b8 <sulp>:
 800a4b8:	b570      	push	{r4, r5, r6, lr}
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	460d      	mov	r5, r1
 800a4be:	ec45 4b10 	vmov	d0, r4, r5
 800a4c2:	4616      	mov	r6, r2
 800a4c4:	f002 f878 	bl	800c5b8 <__ulp>
 800a4c8:	ec51 0b10 	vmov	r0, r1, d0
 800a4cc:	b17e      	cbz	r6, 800a4ee <sulp+0x36>
 800a4ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a4d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	dd09      	ble.n	800a4ee <sulp+0x36>
 800a4da:	051b      	lsls	r3, r3, #20
 800a4dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a4e0:	2400      	movs	r4, #0
 800a4e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a4e6:	4622      	mov	r2, r4
 800a4e8:	462b      	mov	r3, r5
 800a4ea:	f7f6 f89d 	bl	8000628 <__aeabi_dmul>
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}

0800a4f0 <_strtod_l>:
 800a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f4:	b0a3      	sub	sp, #140	; 0x8c
 800a4f6:	461f      	mov	r7, r3
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	931e      	str	r3, [sp, #120]	; 0x78
 800a4fc:	4ba4      	ldr	r3, [pc, #656]	; (800a790 <_strtod_l+0x2a0>)
 800a4fe:	9219      	str	r2, [sp, #100]	; 0x64
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	9307      	str	r3, [sp, #28]
 800a504:	4604      	mov	r4, r0
 800a506:	4618      	mov	r0, r3
 800a508:	4688      	mov	r8, r1
 800a50a:	f7f5 fe73 	bl	80001f4 <strlen>
 800a50e:	f04f 0a00 	mov.w	sl, #0
 800a512:	4605      	mov	r5, r0
 800a514:	f04f 0b00 	mov.w	fp, #0
 800a518:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a51c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a51e:	781a      	ldrb	r2, [r3, #0]
 800a520:	2a2b      	cmp	r2, #43	; 0x2b
 800a522:	d04c      	beq.n	800a5be <_strtod_l+0xce>
 800a524:	d839      	bhi.n	800a59a <_strtod_l+0xaa>
 800a526:	2a0d      	cmp	r2, #13
 800a528:	d832      	bhi.n	800a590 <_strtod_l+0xa0>
 800a52a:	2a08      	cmp	r2, #8
 800a52c:	d832      	bhi.n	800a594 <_strtod_l+0xa4>
 800a52e:	2a00      	cmp	r2, #0
 800a530:	d03c      	beq.n	800a5ac <_strtod_l+0xbc>
 800a532:	2300      	movs	r3, #0
 800a534:	930e      	str	r3, [sp, #56]	; 0x38
 800a536:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a538:	7833      	ldrb	r3, [r6, #0]
 800a53a:	2b30      	cmp	r3, #48	; 0x30
 800a53c:	f040 80b4 	bne.w	800a6a8 <_strtod_l+0x1b8>
 800a540:	7873      	ldrb	r3, [r6, #1]
 800a542:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a546:	2b58      	cmp	r3, #88	; 0x58
 800a548:	d16c      	bne.n	800a624 <_strtod_l+0x134>
 800a54a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a54c:	9301      	str	r3, [sp, #4]
 800a54e:	ab1e      	add	r3, sp, #120	; 0x78
 800a550:	9702      	str	r7, [sp, #8]
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	4a8f      	ldr	r2, [pc, #572]	; (800a794 <_strtod_l+0x2a4>)
 800a556:	ab1f      	add	r3, sp, #124	; 0x7c
 800a558:	a91d      	add	r1, sp, #116	; 0x74
 800a55a:	4620      	mov	r0, r4
 800a55c:	f001 f920 	bl	800b7a0 <__gethex>
 800a560:	f010 0707 	ands.w	r7, r0, #7
 800a564:	4605      	mov	r5, r0
 800a566:	d005      	beq.n	800a574 <_strtod_l+0x84>
 800a568:	2f06      	cmp	r7, #6
 800a56a:	d12a      	bne.n	800a5c2 <_strtod_l+0xd2>
 800a56c:	3601      	adds	r6, #1
 800a56e:	2300      	movs	r3, #0
 800a570:	961d      	str	r6, [sp, #116]	; 0x74
 800a572:	930e      	str	r3, [sp, #56]	; 0x38
 800a574:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a576:	2b00      	cmp	r3, #0
 800a578:	f040 8596 	bne.w	800b0a8 <_strtod_l+0xbb8>
 800a57c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a57e:	b1db      	cbz	r3, 800a5b8 <_strtod_l+0xc8>
 800a580:	4652      	mov	r2, sl
 800a582:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a586:	ec43 2b10 	vmov	d0, r2, r3
 800a58a:	b023      	add	sp, #140	; 0x8c
 800a58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a590:	2a20      	cmp	r2, #32
 800a592:	d1ce      	bne.n	800a532 <_strtod_l+0x42>
 800a594:	3301      	adds	r3, #1
 800a596:	931d      	str	r3, [sp, #116]	; 0x74
 800a598:	e7c0      	b.n	800a51c <_strtod_l+0x2c>
 800a59a:	2a2d      	cmp	r2, #45	; 0x2d
 800a59c:	d1c9      	bne.n	800a532 <_strtod_l+0x42>
 800a59e:	2201      	movs	r2, #1
 800a5a0:	920e      	str	r2, [sp, #56]	; 0x38
 800a5a2:	1c5a      	adds	r2, r3, #1
 800a5a4:	921d      	str	r2, [sp, #116]	; 0x74
 800a5a6:	785b      	ldrb	r3, [r3, #1]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1c4      	bne.n	800a536 <_strtod_l+0x46>
 800a5ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a5ae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f040 8576 	bne.w	800b0a4 <_strtod_l+0xbb4>
 800a5b8:	4652      	mov	r2, sl
 800a5ba:	465b      	mov	r3, fp
 800a5bc:	e7e3      	b.n	800a586 <_strtod_l+0x96>
 800a5be:	2200      	movs	r2, #0
 800a5c0:	e7ee      	b.n	800a5a0 <_strtod_l+0xb0>
 800a5c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a5c4:	b13a      	cbz	r2, 800a5d6 <_strtod_l+0xe6>
 800a5c6:	2135      	movs	r1, #53	; 0x35
 800a5c8:	a820      	add	r0, sp, #128	; 0x80
 800a5ca:	f002 f900 	bl	800c7ce <__copybits>
 800a5ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f001 fcc5 	bl	800bf60 <_Bfree>
 800a5d6:	3f01      	subs	r7, #1
 800a5d8:	2f05      	cmp	r7, #5
 800a5da:	d807      	bhi.n	800a5ec <_strtod_l+0xfc>
 800a5dc:	e8df f007 	tbb	[pc, r7]
 800a5e0:	1d180b0e 	.word	0x1d180b0e
 800a5e4:	030e      	.short	0x030e
 800a5e6:	f04f 0b00 	mov.w	fp, #0
 800a5ea:	46da      	mov	sl, fp
 800a5ec:	0728      	lsls	r0, r5, #28
 800a5ee:	d5c1      	bpl.n	800a574 <_strtod_l+0x84>
 800a5f0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a5f4:	e7be      	b.n	800a574 <_strtod_l+0x84>
 800a5f6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a5fa:	e7f7      	b.n	800a5ec <_strtod_l+0xfc>
 800a5fc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a600:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a602:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a606:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a60a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a60e:	e7ed      	b.n	800a5ec <_strtod_l+0xfc>
 800a610:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a798 <_strtod_l+0x2a8>
 800a614:	f04f 0a00 	mov.w	sl, #0
 800a618:	e7e8      	b.n	800a5ec <_strtod_l+0xfc>
 800a61a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a61e:	f04f 3aff 	mov.w	sl, #4294967295
 800a622:	e7e3      	b.n	800a5ec <_strtod_l+0xfc>
 800a624:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	921d      	str	r2, [sp, #116]	; 0x74
 800a62a:	785b      	ldrb	r3, [r3, #1]
 800a62c:	2b30      	cmp	r3, #48	; 0x30
 800a62e:	d0f9      	beq.n	800a624 <_strtod_l+0x134>
 800a630:	2b00      	cmp	r3, #0
 800a632:	d09f      	beq.n	800a574 <_strtod_l+0x84>
 800a634:	2301      	movs	r3, #1
 800a636:	f04f 0900 	mov.w	r9, #0
 800a63a:	9304      	str	r3, [sp, #16]
 800a63c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a63e:	930a      	str	r3, [sp, #40]	; 0x28
 800a640:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a644:	464f      	mov	r7, r9
 800a646:	220a      	movs	r2, #10
 800a648:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a64a:	7806      	ldrb	r6, [r0, #0]
 800a64c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a650:	b2d9      	uxtb	r1, r3
 800a652:	2909      	cmp	r1, #9
 800a654:	d92a      	bls.n	800a6ac <_strtod_l+0x1bc>
 800a656:	9907      	ldr	r1, [sp, #28]
 800a658:	462a      	mov	r2, r5
 800a65a:	f7ff ff1b 	bl	800a494 <strncmp>
 800a65e:	b398      	cbz	r0, 800a6c8 <_strtod_l+0x1d8>
 800a660:	2000      	movs	r0, #0
 800a662:	4633      	mov	r3, r6
 800a664:	463d      	mov	r5, r7
 800a666:	9007      	str	r0, [sp, #28]
 800a668:	4602      	mov	r2, r0
 800a66a:	2b65      	cmp	r3, #101	; 0x65
 800a66c:	d001      	beq.n	800a672 <_strtod_l+0x182>
 800a66e:	2b45      	cmp	r3, #69	; 0x45
 800a670:	d118      	bne.n	800a6a4 <_strtod_l+0x1b4>
 800a672:	b91d      	cbnz	r5, 800a67c <_strtod_l+0x18c>
 800a674:	9b04      	ldr	r3, [sp, #16]
 800a676:	4303      	orrs	r3, r0
 800a678:	d098      	beq.n	800a5ac <_strtod_l+0xbc>
 800a67a:	2500      	movs	r5, #0
 800a67c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a680:	f108 0301 	add.w	r3, r8, #1
 800a684:	931d      	str	r3, [sp, #116]	; 0x74
 800a686:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a68a:	2b2b      	cmp	r3, #43	; 0x2b
 800a68c:	d075      	beq.n	800a77a <_strtod_l+0x28a>
 800a68e:	2b2d      	cmp	r3, #45	; 0x2d
 800a690:	d07b      	beq.n	800a78a <_strtod_l+0x29a>
 800a692:	f04f 0c00 	mov.w	ip, #0
 800a696:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a69a:	2909      	cmp	r1, #9
 800a69c:	f240 8082 	bls.w	800a7a4 <_strtod_l+0x2b4>
 800a6a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a6a4:	2600      	movs	r6, #0
 800a6a6:	e09d      	b.n	800a7e4 <_strtod_l+0x2f4>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	e7c4      	b.n	800a636 <_strtod_l+0x146>
 800a6ac:	2f08      	cmp	r7, #8
 800a6ae:	bfd8      	it	le
 800a6b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a6b2:	f100 0001 	add.w	r0, r0, #1
 800a6b6:	bfda      	itte	le
 800a6b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800a6bc:	9309      	strle	r3, [sp, #36]	; 0x24
 800a6be:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a6c2:	3701      	adds	r7, #1
 800a6c4:	901d      	str	r0, [sp, #116]	; 0x74
 800a6c6:	e7bf      	b.n	800a648 <_strtod_l+0x158>
 800a6c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6ca:	195a      	adds	r2, r3, r5
 800a6cc:	921d      	str	r2, [sp, #116]	; 0x74
 800a6ce:	5d5b      	ldrb	r3, [r3, r5]
 800a6d0:	2f00      	cmp	r7, #0
 800a6d2:	d037      	beq.n	800a744 <_strtod_l+0x254>
 800a6d4:	9007      	str	r0, [sp, #28]
 800a6d6:	463d      	mov	r5, r7
 800a6d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a6dc:	2a09      	cmp	r2, #9
 800a6de:	d912      	bls.n	800a706 <_strtod_l+0x216>
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	e7c2      	b.n	800a66a <_strtod_l+0x17a>
 800a6e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6e6:	1c5a      	adds	r2, r3, #1
 800a6e8:	921d      	str	r2, [sp, #116]	; 0x74
 800a6ea:	785b      	ldrb	r3, [r3, #1]
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	2b30      	cmp	r3, #48	; 0x30
 800a6f0:	d0f8      	beq.n	800a6e4 <_strtod_l+0x1f4>
 800a6f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a6f6:	2a08      	cmp	r2, #8
 800a6f8:	f200 84db 	bhi.w	800b0b2 <_strtod_l+0xbc2>
 800a6fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a6fe:	9007      	str	r0, [sp, #28]
 800a700:	2000      	movs	r0, #0
 800a702:	920a      	str	r2, [sp, #40]	; 0x28
 800a704:	4605      	mov	r5, r0
 800a706:	3b30      	subs	r3, #48	; 0x30
 800a708:	f100 0201 	add.w	r2, r0, #1
 800a70c:	d014      	beq.n	800a738 <_strtod_l+0x248>
 800a70e:	9907      	ldr	r1, [sp, #28]
 800a710:	4411      	add	r1, r2
 800a712:	9107      	str	r1, [sp, #28]
 800a714:	462a      	mov	r2, r5
 800a716:	eb00 0e05 	add.w	lr, r0, r5
 800a71a:	210a      	movs	r1, #10
 800a71c:	4572      	cmp	r2, lr
 800a71e:	d113      	bne.n	800a748 <_strtod_l+0x258>
 800a720:	182a      	adds	r2, r5, r0
 800a722:	2a08      	cmp	r2, #8
 800a724:	f105 0501 	add.w	r5, r5, #1
 800a728:	4405      	add	r5, r0
 800a72a:	dc1c      	bgt.n	800a766 <_strtod_l+0x276>
 800a72c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a72e:	220a      	movs	r2, #10
 800a730:	fb02 3301 	mla	r3, r2, r1, r3
 800a734:	9309      	str	r3, [sp, #36]	; 0x24
 800a736:	2200      	movs	r2, #0
 800a738:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a73a:	1c59      	adds	r1, r3, #1
 800a73c:	911d      	str	r1, [sp, #116]	; 0x74
 800a73e:	785b      	ldrb	r3, [r3, #1]
 800a740:	4610      	mov	r0, r2
 800a742:	e7c9      	b.n	800a6d8 <_strtod_l+0x1e8>
 800a744:	4638      	mov	r0, r7
 800a746:	e7d2      	b.n	800a6ee <_strtod_l+0x1fe>
 800a748:	2a08      	cmp	r2, #8
 800a74a:	dc04      	bgt.n	800a756 <_strtod_l+0x266>
 800a74c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a74e:	434e      	muls	r6, r1
 800a750:	9609      	str	r6, [sp, #36]	; 0x24
 800a752:	3201      	adds	r2, #1
 800a754:	e7e2      	b.n	800a71c <_strtod_l+0x22c>
 800a756:	f102 0c01 	add.w	ip, r2, #1
 800a75a:	f1bc 0f10 	cmp.w	ip, #16
 800a75e:	bfd8      	it	le
 800a760:	fb01 f909 	mulle.w	r9, r1, r9
 800a764:	e7f5      	b.n	800a752 <_strtod_l+0x262>
 800a766:	2d10      	cmp	r5, #16
 800a768:	bfdc      	itt	le
 800a76a:	220a      	movle	r2, #10
 800a76c:	fb02 3909 	mlale	r9, r2, r9, r3
 800a770:	e7e1      	b.n	800a736 <_strtod_l+0x246>
 800a772:	2300      	movs	r3, #0
 800a774:	9307      	str	r3, [sp, #28]
 800a776:	2201      	movs	r2, #1
 800a778:	e77c      	b.n	800a674 <_strtod_l+0x184>
 800a77a:	f04f 0c00 	mov.w	ip, #0
 800a77e:	f108 0302 	add.w	r3, r8, #2
 800a782:	931d      	str	r3, [sp, #116]	; 0x74
 800a784:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a788:	e785      	b.n	800a696 <_strtod_l+0x1a6>
 800a78a:	f04f 0c01 	mov.w	ip, #1
 800a78e:	e7f6      	b.n	800a77e <_strtod_l+0x28e>
 800a790:	0800d964 	.word	0x0800d964
 800a794:	0800d80c 	.word	0x0800d80c
 800a798:	7ff00000 	.word	0x7ff00000
 800a79c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a79e:	1c59      	adds	r1, r3, #1
 800a7a0:	911d      	str	r1, [sp, #116]	; 0x74
 800a7a2:	785b      	ldrb	r3, [r3, #1]
 800a7a4:	2b30      	cmp	r3, #48	; 0x30
 800a7a6:	d0f9      	beq.n	800a79c <_strtod_l+0x2ac>
 800a7a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a7ac:	2908      	cmp	r1, #8
 800a7ae:	f63f af79 	bhi.w	800a6a4 <_strtod_l+0x1b4>
 800a7b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a7b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7b8:	9308      	str	r3, [sp, #32]
 800a7ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7bc:	1c59      	adds	r1, r3, #1
 800a7be:	911d      	str	r1, [sp, #116]	; 0x74
 800a7c0:	785b      	ldrb	r3, [r3, #1]
 800a7c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a7c6:	2e09      	cmp	r6, #9
 800a7c8:	d937      	bls.n	800a83a <_strtod_l+0x34a>
 800a7ca:	9e08      	ldr	r6, [sp, #32]
 800a7cc:	1b89      	subs	r1, r1, r6
 800a7ce:	2908      	cmp	r1, #8
 800a7d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a7d4:	dc02      	bgt.n	800a7dc <_strtod_l+0x2ec>
 800a7d6:	4576      	cmp	r6, lr
 800a7d8:	bfa8      	it	ge
 800a7da:	4676      	movge	r6, lr
 800a7dc:	f1bc 0f00 	cmp.w	ip, #0
 800a7e0:	d000      	beq.n	800a7e4 <_strtod_l+0x2f4>
 800a7e2:	4276      	negs	r6, r6
 800a7e4:	2d00      	cmp	r5, #0
 800a7e6:	d14f      	bne.n	800a888 <_strtod_l+0x398>
 800a7e8:	9904      	ldr	r1, [sp, #16]
 800a7ea:	4301      	orrs	r1, r0
 800a7ec:	f47f aec2 	bne.w	800a574 <_strtod_l+0x84>
 800a7f0:	2a00      	cmp	r2, #0
 800a7f2:	f47f aedb 	bne.w	800a5ac <_strtod_l+0xbc>
 800a7f6:	2b69      	cmp	r3, #105	; 0x69
 800a7f8:	d027      	beq.n	800a84a <_strtod_l+0x35a>
 800a7fa:	dc24      	bgt.n	800a846 <_strtod_l+0x356>
 800a7fc:	2b49      	cmp	r3, #73	; 0x49
 800a7fe:	d024      	beq.n	800a84a <_strtod_l+0x35a>
 800a800:	2b4e      	cmp	r3, #78	; 0x4e
 800a802:	f47f aed3 	bne.w	800a5ac <_strtod_l+0xbc>
 800a806:	499e      	ldr	r1, [pc, #632]	; (800aa80 <_strtod_l+0x590>)
 800a808:	a81d      	add	r0, sp, #116	; 0x74
 800a80a:	f001 fa21 	bl	800bc50 <__match>
 800a80e:	2800      	cmp	r0, #0
 800a810:	f43f aecc 	beq.w	800a5ac <_strtod_l+0xbc>
 800a814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2b28      	cmp	r3, #40	; 0x28
 800a81a:	d12d      	bne.n	800a878 <_strtod_l+0x388>
 800a81c:	4999      	ldr	r1, [pc, #612]	; (800aa84 <_strtod_l+0x594>)
 800a81e:	aa20      	add	r2, sp, #128	; 0x80
 800a820:	a81d      	add	r0, sp, #116	; 0x74
 800a822:	f001 fa29 	bl	800bc78 <__hexnan>
 800a826:	2805      	cmp	r0, #5
 800a828:	d126      	bne.n	800a878 <_strtod_l+0x388>
 800a82a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a82c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a830:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a834:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a838:	e69c      	b.n	800a574 <_strtod_l+0x84>
 800a83a:	210a      	movs	r1, #10
 800a83c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a840:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a844:	e7b9      	b.n	800a7ba <_strtod_l+0x2ca>
 800a846:	2b6e      	cmp	r3, #110	; 0x6e
 800a848:	e7db      	b.n	800a802 <_strtod_l+0x312>
 800a84a:	498f      	ldr	r1, [pc, #572]	; (800aa88 <_strtod_l+0x598>)
 800a84c:	a81d      	add	r0, sp, #116	; 0x74
 800a84e:	f001 f9ff 	bl	800bc50 <__match>
 800a852:	2800      	cmp	r0, #0
 800a854:	f43f aeaa 	beq.w	800a5ac <_strtod_l+0xbc>
 800a858:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a85a:	498c      	ldr	r1, [pc, #560]	; (800aa8c <_strtod_l+0x59c>)
 800a85c:	3b01      	subs	r3, #1
 800a85e:	a81d      	add	r0, sp, #116	; 0x74
 800a860:	931d      	str	r3, [sp, #116]	; 0x74
 800a862:	f001 f9f5 	bl	800bc50 <__match>
 800a866:	b910      	cbnz	r0, 800a86e <_strtod_l+0x37e>
 800a868:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a86a:	3301      	adds	r3, #1
 800a86c:	931d      	str	r3, [sp, #116]	; 0x74
 800a86e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800aa9c <_strtod_l+0x5ac>
 800a872:	f04f 0a00 	mov.w	sl, #0
 800a876:	e67d      	b.n	800a574 <_strtod_l+0x84>
 800a878:	4885      	ldr	r0, [pc, #532]	; (800aa90 <_strtod_l+0x5a0>)
 800a87a:	f002 fb25 	bl	800cec8 <nan>
 800a87e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a882:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a886:	e675      	b.n	800a574 <_strtod_l+0x84>
 800a888:	9b07      	ldr	r3, [sp, #28]
 800a88a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a88c:	1af3      	subs	r3, r6, r3
 800a88e:	2f00      	cmp	r7, #0
 800a890:	bf08      	it	eq
 800a892:	462f      	moveq	r7, r5
 800a894:	2d10      	cmp	r5, #16
 800a896:	9308      	str	r3, [sp, #32]
 800a898:	46a8      	mov	r8, r5
 800a89a:	bfa8      	it	ge
 800a89c:	f04f 0810 	movge.w	r8, #16
 800a8a0:	f7f5 fe48 	bl	8000534 <__aeabi_ui2d>
 800a8a4:	2d09      	cmp	r5, #9
 800a8a6:	4682      	mov	sl, r0
 800a8a8:	468b      	mov	fp, r1
 800a8aa:	dd13      	ble.n	800a8d4 <_strtod_l+0x3e4>
 800a8ac:	4b79      	ldr	r3, [pc, #484]	; (800aa94 <_strtod_l+0x5a4>)
 800a8ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a8b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a8b6:	f7f5 feb7 	bl	8000628 <__aeabi_dmul>
 800a8ba:	4682      	mov	sl, r0
 800a8bc:	4648      	mov	r0, r9
 800a8be:	468b      	mov	fp, r1
 800a8c0:	f7f5 fe38 	bl	8000534 <__aeabi_ui2d>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	4650      	mov	r0, sl
 800a8ca:	4659      	mov	r1, fp
 800a8cc:	f7f5 fcf6 	bl	80002bc <__adddf3>
 800a8d0:	4682      	mov	sl, r0
 800a8d2:	468b      	mov	fp, r1
 800a8d4:	2d0f      	cmp	r5, #15
 800a8d6:	dc38      	bgt.n	800a94a <_strtod_l+0x45a>
 800a8d8:	9b08      	ldr	r3, [sp, #32]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f43f ae4a 	beq.w	800a574 <_strtod_l+0x84>
 800a8e0:	dd24      	ble.n	800a92c <_strtod_l+0x43c>
 800a8e2:	2b16      	cmp	r3, #22
 800a8e4:	dc0b      	bgt.n	800a8fe <_strtod_l+0x40e>
 800a8e6:	4d6b      	ldr	r5, [pc, #428]	; (800aa94 <_strtod_l+0x5a4>)
 800a8e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a8ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a8f0:	4652      	mov	r2, sl
 800a8f2:	465b      	mov	r3, fp
 800a8f4:	f7f5 fe98 	bl	8000628 <__aeabi_dmul>
 800a8f8:	4682      	mov	sl, r0
 800a8fa:	468b      	mov	fp, r1
 800a8fc:	e63a      	b.n	800a574 <_strtod_l+0x84>
 800a8fe:	9a08      	ldr	r2, [sp, #32]
 800a900:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a904:	4293      	cmp	r3, r2
 800a906:	db20      	blt.n	800a94a <_strtod_l+0x45a>
 800a908:	4c62      	ldr	r4, [pc, #392]	; (800aa94 <_strtod_l+0x5a4>)
 800a90a:	f1c5 050f 	rsb	r5, r5, #15
 800a90e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a912:	4652      	mov	r2, sl
 800a914:	465b      	mov	r3, fp
 800a916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a91a:	f7f5 fe85 	bl	8000628 <__aeabi_dmul>
 800a91e:	9b08      	ldr	r3, [sp, #32]
 800a920:	1b5d      	subs	r5, r3, r5
 800a922:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a926:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a92a:	e7e3      	b.n	800a8f4 <_strtod_l+0x404>
 800a92c:	9b08      	ldr	r3, [sp, #32]
 800a92e:	3316      	adds	r3, #22
 800a930:	db0b      	blt.n	800a94a <_strtod_l+0x45a>
 800a932:	9b07      	ldr	r3, [sp, #28]
 800a934:	4a57      	ldr	r2, [pc, #348]	; (800aa94 <_strtod_l+0x5a4>)
 800a936:	1b9e      	subs	r6, r3, r6
 800a938:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a93c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a940:	4650      	mov	r0, sl
 800a942:	4659      	mov	r1, fp
 800a944:	f7f5 ff9a 	bl	800087c <__aeabi_ddiv>
 800a948:	e7d6      	b.n	800a8f8 <_strtod_l+0x408>
 800a94a:	9b08      	ldr	r3, [sp, #32]
 800a94c:	eba5 0808 	sub.w	r8, r5, r8
 800a950:	4498      	add	r8, r3
 800a952:	f1b8 0f00 	cmp.w	r8, #0
 800a956:	dd71      	ble.n	800aa3c <_strtod_l+0x54c>
 800a958:	f018 030f 	ands.w	r3, r8, #15
 800a95c:	d00a      	beq.n	800a974 <_strtod_l+0x484>
 800a95e:	494d      	ldr	r1, [pc, #308]	; (800aa94 <_strtod_l+0x5a4>)
 800a960:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a964:	4652      	mov	r2, sl
 800a966:	465b      	mov	r3, fp
 800a968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a96c:	f7f5 fe5c 	bl	8000628 <__aeabi_dmul>
 800a970:	4682      	mov	sl, r0
 800a972:	468b      	mov	fp, r1
 800a974:	f038 080f 	bics.w	r8, r8, #15
 800a978:	d04d      	beq.n	800aa16 <_strtod_l+0x526>
 800a97a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a97e:	dd22      	ble.n	800a9c6 <_strtod_l+0x4d6>
 800a980:	2500      	movs	r5, #0
 800a982:	462e      	mov	r6, r5
 800a984:	9509      	str	r5, [sp, #36]	; 0x24
 800a986:	9507      	str	r5, [sp, #28]
 800a988:	2322      	movs	r3, #34	; 0x22
 800a98a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800aa9c <_strtod_l+0x5ac>
 800a98e:	6023      	str	r3, [r4, #0]
 800a990:	f04f 0a00 	mov.w	sl, #0
 800a994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	f43f adec 	beq.w	800a574 <_strtod_l+0x84>
 800a99c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f001 fade 	bl	800bf60 <_Bfree>
 800a9a4:	9907      	ldr	r1, [sp, #28]
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f001 fada 	bl	800bf60 <_Bfree>
 800a9ac:	4631      	mov	r1, r6
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f001 fad6 	bl	800bf60 <_Bfree>
 800a9b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f001 fad2 	bl	800bf60 <_Bfree>
 800a9bc:	4629      	mov	r1, r5
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f001 face 	bl	800bf60 <_Bfree>
 800a9c4:	e5d6      	b.n	800a574 <_strtod_l+0x84>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a9cc:	4650      	mov	r0, sl
 800a9ce:	4659      	mov	r1, fp
 800a9d0:	4699      	mov	r9, r3
 800a9d2:	f1b8 0f01 	cmp.w	r8, #1
 800a9d6:	dc21      	bgt.n	800aa1c <_strtod_l+0x52c>
 800a9d8:	b10b      	cbz	r3, 800a9de <_strtod_l+0x4ee>
 800a9da:	4682      	mov	sl, r0
 800a9dc:	468b      	mov	fp, r1
 800a9de:	4b2e      	ldr	r3, [pc, #184]	; (800aa98 <_strtod_l+0x5a8>)
 800a9e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a9e4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a9e8:	4652      	mov	r2, sl
 800a9ea:	465b      	mov	r3, fp
 800a9ec:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a9f0:	f7f5 fe1a 	bl	8000628 <__aeabi_dmul>
 800a9f4:	4b29      	ldr	r3, [pc, #164]	; (800aa9c <_strtod_l+0x5ac>)
 800a9f6:	460a      	mov	r2, r1
 800a9f8:	400b      	ands	r3, r1
 800a9fa:	4929      	ldr	r1, [pc, #164]	; (800aaa0 <_strtod_l+0x5b0>)
 800a9fc:	428b      	cmp	r3, r1
 800a9fe:	4682      	mov	sl, r0
 800aa00:	d8be      	bhi.n	800a980 <_strtod_l+0x490>
 800aa02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aa06:	428b      	cmp	r3, r1
 800aa08:	bf86      	itte	hi
 800aa0a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800aaa4 <_strtod_l+0x5b4>
 800aa0e:	f04f 3aff 	movhi.w	sl, #4294967295
 800aa12:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aa16:	2300      	movs	r3, #0
 800aa18:	9304      	str	r3, [sp, #16]
 800aa1a:	e081      	b.n	800ab20 <_strtod_l+0x630>
 800aa1c:	f018 0f01 	tst.w	r8, #1
 800aa20:	d007      	beq.n	800aa32 <_strtod_l+0x542>
 800aa22:	4b1d      	ldr	r3, [pc, #116]	; (800aa98 <_strtod_l+0x5a8>)
 800aa24:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	f7f5 fdfc 	bl	8000628 <__aeabi_dmul>
 800aa30:	2301      	movs	r3, #1
 800aa32:	f109 0901 	add.w	r9, r9, #1
 800aa36:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa3a:	e7ca      	b.n	800a9d2 <_strtod_l+0x4e2>
 800aa3c:	d0eb      	beq.n	800aa16 <_strtod_l+0x526>
 800aa3e:	f1c8 0800 	rsb	r8, r8, #0
 800aa42:	f018 020f 	ands.w	r2, r8, #15
 800aa46:	d00a      	beq.n	800aa5e <_strtod_l+0x56e>
 800aa48:	4b12      	ldr	r3, [pc, #72]	; (800aa94 <_strtod_l+0x5a4>)
 800aa4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa4e:	4650      	mov	r0, sl
 800aa50:	4659      	mov	r1, fp
 800aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa56:	f7f5 ff11 	bl	800087c <__aeabi_ddiv>
 800aa5a:	4682      	mov	sl, r0
 800aa5c:	468b      	mov	fp, r1
 800aa5e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aa62:	d0d8      	beq.n	800aa16 <_strtod_l+0x526>
 800aa64:	f1b8 0f1f 	cmp.w	r8, #31
 800aa68:	dd1e      	ble.n	800aaa8 <_strtod_l+0x5b8>
 800aa6a:	2500      	movs	r5, #0
 800aa6c:	462e      	mov	r6, r5
 800aa6e:	9509      	str	r5, [sp, #36]	; 0x24
 800aa70:	9507      	str	r5, [sp, #28]
 800aa72:	2322      	movs	r3, #34	; 0x22
 800aa74:	f04f 0a00 	mov.w	sl, #0
 800aa78:	f04f 0b00 	mov.w	fp, #0
 800aa7c:	6023      	str	r3, [r4, #0]
 800aa7e:	e789      	b.n	800a994 <_strtod_l+0x4a4>
 800aa80:	0800d809 	.word	0x0800d809
 800aa84:	0800d820 	.word	0x0800d820
 800aa88:	0800d800 	.word	0x0800d800
 800aa8c:	0800d803 	.word	0x0800d803
 800aa90:	0800db5a 	.word	0x0800db5a
 800aa94:	0800da18 	.word	0x0800da18
 800aa98:	0800d9f0 	.word	0x0800d9f0
 800aa9c:	7ff00000 	.word	0x7ff00000
 800aaa0:	7ca00000 	.word	0x7ca00000
 800aaa4:	7fefffff 	.word	0x7fefffff
 800aaa8:	f018 0310 	ands.w	r3, r8, #16
 800aaac:	bf18      	it	ne
 800aaae:	236a      	movne	r3, #106	; 0x6a
 800aab0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ae68 <_strtod_l+0x978>
 800aab4:	9304      	str	r3, [sp, #16]
 800aab6:	4650      	mov	r0, sl
 800aab8:	4659      	mov	r1, fp
 800aaba:	2300      	movs	r3, #0
 800aabc:	f018 0f01 	tst.w	r8, #1
 800aac0:	d004      	beq.n	800aacc <_strtod_l+0x5dc>
 800aac2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aac6:	f7f5 fdaf 	bl	8000628 <__aeabi_dmul>
 800aaca:	2301      	movs	r3, #1
 800aacc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aad0:	f109 0908 	add.w	r9, r9, #8
 800aad4:	d1f2      	bne.n	800aabc <_strtod_l+0x5cc>
 800aad6:	b10b      	cbz	r3, 800aadc <_strtod_l+0x5ec>
 800aad8:	4682      	mov	sl, r0
 800aada:	468b      	mov	fp, r1
 800aadc:	9b04      	ldr	r3, [sp, #16]
 800aade:	b1bb      	cbz	r3, 800ab10 <_strtod_l+0x620>
 800aae0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800aae4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	4659      	mov	r1, fp
 800aaec:	dd10      	ble.n	800ab10 <_strtod_l+0x620>
 800aaee:	2b1f      	cmp	r3, #31
 800aaf0:	f340 8128 	ble.w	800ad44 <_strtod_l+0x854>
 800aaf4:	2b34      	cmp	r3, #52	; 0x34
 800aaf6:	bfde      	ittt	le
 800aaf8:	3b20      	suble	r3, #32
 800aafa:	f04f 32ff 	movle.w	r2, #4294967295
 800aafe:	fa02 f303 	lslle.w	r3, r2, r3
 800ab02:	f04f 0a00 	mov.w	sl, #0
 800ab06:	bfcc      	ite	gt
 800ab08:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ab0c:	ea03 0b01 	andle.w	fp, r3, r1
 800ab10:	2200      	movs	r2, #0
 800ab12:	2300      	movs	r3, #0
 800ab14:	4650      	mov	r0, sl
 800ab16:	4659      	mov	r1, fp
 800ab18:	f7f5 ffee 	bl	8000af8 <__aeabi_dcmpeq>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d1a4      	bne.n	800aa6a <_strtod_l+0x57a>
 800ab20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab26:	462b      	mov	r3, r5
 800ab28:	463a      	mov	r2, r7
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f001 fa84 	bl	800c038 <__s2b>
 800ab30:	9009      	str	r0, [sp, #36]	; 0x24
 800ab32:	2800      	cmp	r0, #0
 800ab34:	f43f af24 	beq.w	800a980 <_strtod_l+0x490>
 800ab38:	9b07      	ldr	r3, [sp, #28]
 800ab3a:	1b9e      	subs	r6, r3, r6
 800ab3c:	9b08      	ldr	r3, [sp, #32]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	bfb4      	ite	lt
 800ab42:	4633      	movlt	r3, r6
 800ab44:	2300      	movge	r3, #0
 800ab46:	9310      	str	r3, [sp, #64]	; 0x40
 800ab48:	9b08      	ldr	r3, [sp, #32]
 800ab4a:	2500      	movs	r5, #0
 800ab4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ab50:	9318      	str	r3, [sp, #96]	; 0x60
 800ab52:	462e      	mov	r6, r5
 800ab54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab56:	4620      	mov	r0, r4
 800ab58:	6859      	ldr	r1, [r3, #4]
 800ab5a:	f001 f9c1 	bl	800bee0 <_Balloc>
 800ab5e:	9007      	str	r0, [sp, #28]
 800ab60:	2800      	cmp	r0, #0
 800ab62:	f43f af11 	beq.w	800a988 <_strtod_l+0x498>
 800ab66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab68:	691a      	ldr	r2, [r3, #16]
 800ab6a:	3202      	adds	r2, #2
 800ab6c:	f103 010c 	add.w	r1, r3, #12
 800ab70:	0092      	lsls	r2, r2, #2
 800ab72:	300c      	adds	r0, #12
 800ab74:	f7ff face 	bl	800a114 <memcpy>
 800ab78:	ec4b ab10 	vmov	d0, sl, fp
 800ab7c:	aa20      	add	r2, sp, #128	; 0x80
 800ab7e:	a91f      	add	r1, sp, #124	; 0x7c
 800ab80:	4620      	mov	r0, r4
 800ab82:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ab86:	f001 fd93 	bl	800c6b0 <__d2b>
 800ab8a:	901e      	str	r0, [sp, #120]	; 0x78
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	f43f aefb 	beq.w	800a988 <_strtod_l+0x498>
 800ab92:	2101      	movs	r1, #1
 800ab94:	4620      	mov	r0, r4
 800ab96:	f001 fae9 	bl	800c16c <__i2b>
 800ab9a:	4606      	mov	r6, r0
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	f43f aef3 	beq.w	800a988 <_strtod_l+0x498>
 800aba2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aba4:	9904      	ldr	r1, [sp, #16]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	bfab      	itete	ge
 800abaa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800abac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800abae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800abb0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800abb4:	bfac      	ite	ge
 800abb6:	eb03 0902 	addge.w	r9, r3, r2
 800abba:	1ad7      	sublt	r7, r2, r3
 800abbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800abbe:	eba3 0801 	sub.w	r8, r3, r1
 800abc2:	4490      	add	r8, r2
 800abc4:	4ba3      	ldr	r3, [pc, #652]	; (800ae54 <_strtod_l+0x964>)
 800abc6:	f108 38ff 	add.w	r8, r8, #4294967295
 800abca:	4598      	cmp	r8, r3
 800abcc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800abd0:	f280 80cc 	bge.w	800ad6c <_strtod_l+0x87c>
 800abd4:	eba3 0308 	sub.w	r3, r3, r8
 800abd8:	2b1f      	cmp	r3, #31
 800abda:	eba2 0203 	sub.w	r2, r2, r3
 800abde:	f04f 0101 	mov.w	r1, #1
 800abe2:	f300 80b6 	bgt.w	800ad52 <_strtod_l+0x862>
 800abe6:	fa01 f303 	lsl.w	r3, r1, r3
 800abea:	9311      	str	r3, [sp, #68]	; 0x44
 800abec:	2300      	movs	r3, #0
 800abee:	930c      	str	r3, [sp, #48]	; 0x30
 800abf0:	eb09 0802 	add.w	r8, r9, r2
 800abf4:	9b04      	ldr	r3, [sp, #16]
 800abf6:	45c1      	cmp	r9, r8
 800abf8:	4417      	add	r7, r2
 800abfa:	441f      	add	r7, r3
 800abfc:	464b      	mov	r3, r9
 800abfe:	bfa8      	it	ge
 800ac00:	4643      	movge	r3, r8
 800ac02:	42bb      	cmp	r3, r7
 800ac04:	bfa8      	it	ge
 800ac06:	463b      	movge	r3, r7
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bfc2      	ittt	gt
 800ac0c:	eba8 0803 	subgt.w	r8, r8, r3
 800ac10:	1aff      	subgt	r7, r7, r3
 800ac12:	eba9 0903 	subgt.w	r9, r9, r3
 800ac16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	dd17      	ble.n	800ac4c <_strtod_l+0x75c>
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	461a      	mov	r2, r3
 800ac20:	4620      	mov	r0, r4
 800ac22:	f001 fb5f 	bl	800c2e4 <__pow5mult>
 800ac26:	4606      	mov	r6, r0
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	f43f aead 	beq.w	800a988 <_strtod_l+0x498>
 800ac2e:	4601      	mov	r1, r0
 800ac30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ac32:	4620      	mov	r0, r4
 800ac34:	f001 fab0 	bl	800c198 <__multiply>
 800ac38:	900f      	str	r0, [sp, #60]	; 0x3c
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	f43f aea4 	beq.w	800a988 <_strtod_l+0x498>
 800ac40:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ac42:	4620      	mov	r0, r4
 800ac44:	f001 f98c 	bl	800bf60 <_Bfree>
 800ac48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac4a:	931e      	str	r3, [sp, #120]	; 0x78
 800ac4c:	f1b8 0f00 	cmp.w	r8, #0
 800ac50:	f300 8091 	bgt.w	800ad76 <_strtod_l+0x886>
 800ac54:	9b08      	ldr	r3, [sp, #32]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	dd08      	ble.n	800ac6c <_strtod_l+0x77c>
 800ac5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac5c:	9907      	ldr	r1, [sp, #28]
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f001 fb40 	bl	800c2e4 <__pow5mult>
 800ac64:	9007      	str	r0, [sp, #28]
 800ac66:	2800      	cmp	r0, #0
 800ac68:	f43f ae8e 	beq.w	800a988 <_strtod_l+0x498>
 800ac6c:	2f00      	cmp	r7, #0
 800ac6e:	dd08      	ble.n	800ac82 <_strtod_l+0x792>
 800ac70:	9907      	ldr	r1, [sp, #28]
 800ac72:	463a      	mov	r2, r7
 800ac74:	4620      	mov	r0, r4
 800ac76:	f001 fb8f 	bl	800c398 <__lshift>
 800ac7a:	9007      	str	r0, [sp, #28]
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	f43f ae83 	beq.w	800a988 <_strtod_l+0x498>
 800ac82:	f1b9 0f00 	cmp.w	r9, #0
 800ac86:	dd08      	ble.n	800ac9a <_strtod_l+0x7aa>
 800ac88:	4631      	mov	r1, r6
 800ac8a:	464a      	mov	r2, r9
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f001 fb83 	bl	800c398 <__lshift>
 800ac92:	4606      	mov	r6, r0
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f43f ae77 	beq.w	800a988 <_strtod_l+0x498>
 800ac9a:	9a07      	ldr	r2, [sp, #28]
 800ac9c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f001 fc02 	bl	800c4a8 <__mdiff>
 800aca4:	4605      	mov	r5, r0
 800aca6:	2800      	cmp	r0, #0
 800aca8:	f43f ae6e 	beq.w	800a988 <_strtod_l+0x498>
 800acac:	68c3      	ldr	r3, [r0, #12]
 800acae:	930f      	str	r3, [sp, #60]	; 0x3c
 800acb0:	2300      	movs	r3, #0
 800acb2:	60c3      	str	r3, [r0, #12]
 800acb4:	4631      	mov	r1, r6
 800acb6:	f001 fbdb 	bl	800c470 <__mcmp>
 800acba:	2800      	cmp	r0, #0
 800acbc:	da65      	bge.n	800ad8a <_strtod_l+0x89a>
 800acbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acc0:	ea53 030a 	orrs.w	r3, r3, sl
 800acc4:	f040 8087 	bne.w	800add6 <_strtod_l+0x8e6>
 800acc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800accc:	2b00      	cmp	r3, #0
 800acce:	f040 8082 	bne.w	800add6 <_strtod_l+0x8e6>
 800acd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800acd6:	0d1b      	lsrs	r3, r3, #20
 800acd8:	051b      	lsls	r3, r3, #20
 800acda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800acde:	d97a      	bls.n	800add6 <_strtod_l+0x8e6>
 800ace0:	696b      	ldr	r3, [r5, #20]
 800ace2:	b913      	cbnz	r3, 800acea <_strtod_l+0x7fa>
 800ace4:	692b      	ldr	r3, [r5, #16]
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	dd75      	ble.n	800add6 <_strtod_l+0x8e6>
 800acea:	4629      	mov	r1, r5
 800acec:	2201      	movs	r2, #1
 800acee:	4620      	mov	r0, r4
 800acf0:	f001 fb52 	bl	800c398 <__lshift>
 800acf4:	4631      	mov	r1, r6
 800acf6:	4605      	mov	r5, r0
 800acf8:	f001 fbba 	bl	800c470 <__mcmp>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	dd6a      	ble.n	800add6 <_strtod_l+0x8e6>
 800ad00:	9904      	ldr	r1, [sp, #16]
 800ad02:	4a55      	ldr	r2, [pc, #340]	; (800ae58 <_strtod_l+0x968>)
 800ad04:	465b      	mov	r3, fp
 800ad06:	2900      	cmp	r1, #0
 800ad08:	f000 8085 	beq.w	800ae16 <_strtod_l+0x926>
 800ad0c:	ea02 010b 	and.w	r1, r2, fp
 800ad10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad14:	dc7f      	bgt.n	800ae16 <_strtod_l+0x926>
 800ad16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad1a:	f77f aeaa 	ble.w	800aa72 <_strtod_l+0x582>
 800ad1e:	4a4f      	ldr	r2, [pc, #316]	; (800ae5c <_strtod_l+0x96c>)
 800ad20:	2300      	movs	r3, #0
 800ad22:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ad26:	4650      	mov	r0, sl
 800ad28:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ad2c:	4659      	mov	r1, fp
 800ad2e:	f7f5 fc7b 	bl	8000628 <__aeabi_dmul>
 800ad32:	460b      	mov	r3, r1
 800ad34:	4303      	orrs	r3, r0
 800ad36:	bf08      	it	eq
 800ad38:	2322      	moveq	r3, #34	; 0x22
 800ad3a:	4682      	mov	sl, r0
 800ad3c:	468b      	mov	fp, r1
 800ad3e:	bf08      	it	eq
 800ad40:	6023      	streq	r3, [r4, #0]
 800ad42:	e62b      	b.n	800a99c <_strtod_l+0x4ac>
 800ad44:	f04f 32ff 	mov.w	r2, #4294967295
 800ad48:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4c:	ea03 0a0a 	and.w	sl, r3, sl
 800ad50:	e6de      	b.n	800ab10 <_strtod_l+0x620>
 800ad52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ad56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ad5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ad5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ad62:	fa01 f308 	lsl.w	r3, r1, r8
 800ad66:	930c      	str	r3, [sp, #48]	; 0x30
 800ad68:	9111      	str	r1, [sp, #68]	; 0x44
 800ad6a:	e741      	b.n	800abf0 <_strtod_l+0x700>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	930c      	str	r3, [sp, #48]	; 0x30
 800ad70:	2301      	movs	r3, #1
 800ad72:	9311      	str	r3, [sp, #68]	; 0x44
 800ad74:	e73c      	b.n	800abf0 <_strtod_l+0x700>
 800ad76:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ad78:	4642      	mov	r2, r8
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f001 fb0c 	bl	800c398 <__lshift>
 800ad80:	901e      	str	r0, [sp, #120]	; 0x78
 800ad82:	2800      	cmp	r0, #0
 800ad84:	f47f af66 	bne.w	800ac54 <_strtod_l+0x764>
 800ad88:	e5fe      	b.n	800a988 <_strtod_l+0x498>
 800ad8a:	465f      	mov	r7, fp
 800ad8c:	d16e      	bne.n	800ae6c <_strtod_l+0x97c>
 800ad8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad94:	b342      	cbz	r2, 800ade8 <_strtod_l+0x8f8>
 800ad96:	4a32      	ldr	r2, [pc, #200]	; (800ae60 <_strtod_l+0x970>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d128      	bne.n	800adee <_strtod_l+0x8fe>
 800ad9c:	9b04      	ldr	r3, [sp, #16]
 800ad9e:	4650      	mov	r0, sl
 800ada0:	b1eb      	cbz	r3, 800adde <_strtod_l+0x8ee>
 800ada2:	4a2d      	ldr	r2, [pc, #180]	; (800ae58 <_strtod_l+0x968>)
 800ada4:	403a      	ands	r2, r7
 800ada6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800adaa:	f04f 31ff 	mov.w	r1, #4294967295
 800adae:	d819      	bhi.n	800ade4 <_strtod_l+0x8f4>
 800adb0:	0d12      	lsrs	r2, r2, #20
 800adb2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800adb6:	fa01 f303 	lsl.w	r3, r1, r3
 800adba:	4298      	cmp	r0, r3
 800adbc:	d117      	bne.n	800adee <_strtod_l+0x8fe>
 800adbe:	4b29      	ldr	r3, [pc, #164]	; (800ae64 <_strtod_l+0x974>)
 800adc0:	429f      	cmp	r7, r3
 800adc2:	d102      	bne.n	800adca <_strtod_l+0x8da>
 800adc4:	3001      	adds	r0, #1
 800adc6:	f43f addf 	beq.w	800a988 <_strtod_l+0x498>
 800adca:	4b23      	ldr	r3, [pc, #140]	; (800ae58 <_strtod_l+0x968>)
 800adcc:	403b      	ands	r3, r7
 800adce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800add2:	f04f 0a00 	mov.w	sl, #0
 800add6:	9b04      	ldr	r3, [sp, #16]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1a0      	bne.n	800ad1e <_strtod_l+0x82e>
 800addc:	e5de      	b.n	800a99c <_strtod_l+0x4ac>
 800adde:	f04f 33ff 	mov.w	r3, #4294967295
 800ade2:	e7ea      	b.n	800adba <_strtod_l+0x8ca>
 800ade4:	460b      	mov	r3, r1
 800ade6:	e7e8      	b.n	800adba <_strtod_l+0x8ca>
 800ade8:	ea53 030a 	orrs.w	r3, r3, sl
 800adec:	d088      	beq.n	800ad00 <_strtod_l+0x810>
 800adee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adf0:	b1db      	cbz	r3, 800ae2a <_strtod_l+0x93a>
 800adf2:	423b      	tst	r3, r7
 800adf4:	d0ef      	beq.n	800add6 <_strtod_l+0x8e6>
 800adf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adf8:	9a04      	ldr	r2, [sp, #16]
 800adfa:	4650      	mov	r0, sl
 800adfc:	4659      	mov	r1, fp
 800adfe:	b1c3      	cbz	r3, 800ae32 <_strtod_l+0x942>
 800ae00:	f7ff fb5a 	bl	800a4b8 <sulp>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae0c:	f7f5 fa56 	bl	80002bc <__adddf3>
 800ae10:	4682      	mov	sl, r0
 800ae12:	468b      	mov	fp, r1
 800ae14:	e7df      	b.n	800add6 <_strtod_l+0x8e6>
 800ae16:	4013      	ands	r3, r2
 800ae18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ae20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ae24:	f04f 3aff 	mov.w	sl, #4294967295
 800ae28:	e7d5      	b.n	800add6 <_strtod_l+0x8e6>
 800ae2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae2c:	ea13 0f0a 	tst.w	r3, sl
 800ae30:	e7e0      	b.n	800adf4 <_strtod_l+0x904>
 800ae32:	f7ff fb41 	bl	800a4b8 <sulp>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae3e:	f7f5 fa3b 	bl	80002b8 <__aeabi_dsub>
 800ae42:	2200      	movs	r2, #0
 800ae44:	2300      	movs	r3, #0
 800ae46:	4682      	mov	sl, r0
 800ae48:	468b      	mov	fp, r1
 800ae4a:	f7f5 fe55 	bl	8000af8 <__aeabi_dcmpeq>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d0c1      	beq.n	800add6 <_strtod_l+0x8e6>
 800ae52:	e60e      	b.n	800aa72 <_strtod_l+0x582>
 800ae54:	fffffc02 	.word	0xfffffc02
 800ae58:	7ff00000 	.word	0x7ff00000
 800ae5c:	39500000 	.word	0x39500000
 800ae60:	000fffff 	.word	0x000fffff
 800ae64:	7fefffff 	.word	0x7fefffff
 800ae68:	0800d838 	.word	0x0800d838
 800ae6c:	4631      	mov	r1, r6
 800ae6e:	4628      	mov	r0, r5
 800ae70:	f001 fc7a 	bl	800c768 <__ratio>
 800ae74:	ec59 8b10 	vmov	r8, r9, d0
 800ae78:	ee10 0a10 	vmov	r0, s0
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae82:	4649      	mov	r1, r9
 800ae84:	f7f5 fe4c 	bl	8000b20 <__aeabi_dcmple>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d07c      	beq.n	800af86 <_strtod_l+0xa96>
 800ae8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d04c      	beq.n	800af2c <_strtod_l+0xa3c>
 800ae92:	4b95      	ldr	r3, [pc, #596]	; (800b0e8 <_strtod_l+0xbf8>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ae9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b0e8 <_strtod_l+0xbf8>
 800ae9e:	f04f 0800 	mov.w	r8, #0
 800aea2:	4b92      	ldr	r3, [pc, #584]	; (800b0ec <_strtod_l+0xbfc>)
 800aea4:	403b      	ands	r3, r7
 800aea6:	9311      	str	r3, [sp, #68]	; 0x44
 800aea8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aeaa:	4b91      	ldr	r3, [pc, #580]	; (800b0f0 <_strtod_l+0xc00>)
 800aeac:	429a      	cmp	r2, r3
 800aeae:	f040 80b2 	bne.w	800b016 <_strtod_l+0xb26>
 800aeb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aeb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aeba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800aebe:	ec4b ab10 	vmov	d0, sl, fp
 800aec2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800aec6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800aeca:	f001 fb75 	bl	800c5b8 <__ulp>
 800aece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aed2:	ec53 2b10 	vmov	r2, r3, d0
 800aed6:	f7f5 fba7 	bl	8000628 <__aeabi_dmul>
 800aeda:	4652      	mov	r2, sl
 800aedc:	465b      	mov	r3, fp
 800aede:	f7f5 f9ed 	bl	80002bc <__adddf3>
 800aee2:	460b      	mov	r3, r1
 800aee4:	4981      	ldr	r1, [pc, #516]	; (800b0ec <_strtod_l+0xbfc>)
 800aee6:	4a83      	ldr	r2, [pc, #524]	; (800b0f4 <_strtod_l+0xc04>)
 800aee8:	4019      	ands	r1, r3
 800aeea:	4291      	cmp	r1, r2
 800aeec:	4682      	mov	sl, r0
 800aeee:	d95e      	bls.n	800afae <_strtod_l+0xabe>
 800aef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aef2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d103      	bne.n	800af02 <_strtod_l+0xa12>
 800aefa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aefc:	3301      	adds	r3, #1
 800aefe:	f43f ad43 	beq.w	800a988 <_strtod_l+0x498>
 800af02:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b100 <_strtod_l+0xc10>
 800af06:	f04f 3aff 	mov.w	sl, #4294967295
 800af0a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800af0c:	4620      	mov	r0, r4
 800af0e:	f001 f827 	bl	800bf60 <_Bfree>
 800af12:	9907      	ldr	r1, [sp, #28]
 800af14:	4620      	mov	r0, r4
 800af16:	f001 f823 	bl	800bf60 <_Bfree>
 800af1a:	4631      	mov	r1, r6
 800af1c:	4620      	mov	r0, r4
 800af1e:	f001 f81f 	bl	800bf60 <_Bfree>
 800af22:	4629      	mov	r1, r5
 800af24:	4620      	mov	r0, r4
 800af26:	f001 f81b 	bl	800bf60 <_Bfree>
 800af2a:	e613      	b.n	800ab54 <_strtod_l+0x664>
 800af2c:	f1ba 0f00 	cmp.w	sl, #0
 800af30:	d11b      	bne.n	800af6a <_strtod_l+0xa7a>
 800af32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af36:	b9f3      	cbnz	r3, 800af76 <_strtod_l+0xa86>
 800af38:	4b6b      	ldr	r3, [pc, #428]	; (800b0e8 <_strtod_l+0xbf8>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	4640      	mov	r0, r8
 800af3e:	4649      	mov	r1, r9
 800af40:	f7f5 fde4 	bl	8000b0c <__aeabi_dcmplt>
 800af44:	b9d0      	cbnz	r0, 800af7c <_strtod_l+0xa8c>
 800af46:	4640      	mov	r0, r8
 800af48:	4649      	mov	r1, r9
 800af4a:	4b6b      	ldr	r3, [pc, #428]	; (800b0f8 <_strtod_l+0xc08>)
 800af4c:	2200      	movs	r2, #0
 800af4e:	f7f5 fb6b 	bl	8000628 <__aeabi_dmul>
 800af52:	4680      	mov	r8, r0
 800af54:	4689      	mov	r9, r1
 800af56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800af5a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800af5e:	931b      	str	r3, [sp, #108]	; 0x6c
 800af60:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800af64:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800af68:	e79b      	b.n	800aea2 <_strtod_l+0x9b2>
 800af6a:	f1ba 0f01 	cmp.w	sl, #1
 800af6e:	d102      	bne.n	800af76 <_strtod_l+0xa86>
 800af70:	2f00      	cmp	r7, #0
 800af72:	f43f ad7e 	beq.w	800aa72 <_strtod_l+0x582>
 800af76:	4b61      	ldr	r3, [pc, #388]	; (800b0fc <_strtod_l+0xc0c>)
 800af78:	2200      	movs	r2, #0
 800af7a:	e78c      	b.n	800ae96 <_strtod_l+0x9a6>
 800af7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b0f8 <_strtod_l+0xc08>
 800af80:	f04f 0800 	mov.w	r8, #0
 800af84:	e7e7      	b.n	800af56 <_strtod_l+0xa66>
 800af86:	4b5c      	ldr	r3, [pc, #368]	; (800b0f8 <_strtod_l+0xc08>)
 800af88:	4640      	mov	r0, r8
 800af8a:	4649      	mov	r1, r9
 800af8c:	2200      	movs	r2, #0
 800af8e:	f7f5 fb4b 	bl	8000628 <__aeabi_dmul>
 800af92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af94:	4680      	mov	r8, r0
 800af96:	4689      	mov	r9, r1
 800af98:	b933      	cbnz	r3, 800afa8 <_strtod_l+0xab8>
 800af9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af9e:	9012      	str	r0, [sp, #72]	; 0x48
 800afa0:	9313      	str	r3, [sp, #76]	; 0x4c
 800afa2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800afa6:	e7dd      	b.n	800af64 <_strtod_l+0xa74>
 800afa8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800afac:	e7f9      	b.n	800afa2 <_strtod_l+0xab2>
 800afae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800afb2:	9b04      	ldr	r3, [sp, #16]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1a8      	bne.n	800af0a <_strtod_l+0xa1a>
 800afb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800afbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800afbe:	0d1b      	lsrs	r3, r3, #20
 800afc0:	051b      	lsls	r3, r3, #20
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d1a1      	bne.n	800af0a <_strtod_l+0xa1a>
 800afc6:	4640      	mov	r0, r8
 800afc8:	4649      	mov	r1, r9
 800afca:	f7f5 fe27 	bl	8000c1c <__aeabi_d2lz>
 800afce:	f7f5 fafd 	bl	80005cc <__aeabi_l2d>
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4640      	mov	r0, r8
 800afd8:	4649      	mov	r1, r9
 800afda:	f7f5 f96d 	bl	80002b8 <__aeabi_dsub>
 800afde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afe0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afe4:	ea43 030a 	orr.w	r3, r3, sl
 800afe8:	4313      	orrs	r3, r2
 800afea:	4680      	mov	r8, r0
 800afec:	4689      	mov	r9, r1
 800afee:	d053      	beq.n	800b098 <_strtod_l+0xba8>
 800aff0:	a335      	add	r3, pc, #212	; (adr r3, 800b0c8 <_strtod_l+0xbd8>)
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	f7f5 fd89 	bl	8000b0c <__aeabi_dcmplt>
 800affa:	2800      	cmp	r0, #0
 800affc:	f47f acce 	bne.w	800a99c <_strtod_l+0x4ac>
 800b000:	a333      	add	r3, pc, #204	; (adr r3, 800b0d0 <_strtod_l+0xbe0>)
 800b002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b006:	4640      	mov	r0, r8
 800b008:	4649      	mov	r1, r9
 800b00a:	f7f5 fd9d 	bl	8000b48 <__aeabi_dcmpgt>
 800b00e:	2800      	cmp	r0, #0
 800b010:	f43f af7b 	beq.w	800af0a <_strtod_l+0xa1a>
 800b014:	e4c2      	b.n	800a99c <_strtod_l+0x4ac>
 800b016:	9b04      	ldr	r3, [sp, #16]
 800b018:	b333      	cbz	r3, 800b068 <_strtod_l+0xb78>
 800b01a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b01c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b020:	d822      	bhi.n	800b068 <_strtod_l+0xb78>
 800b022:	a32d      	add	r3, pc, #180	; (adr r3, 800b0d8 <_strtod_l+0xbe8>)
 800b024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b028:	4640      	mov	r0, r8
 800b02a:	4649      	mov	r1, r9
 800b02c:	f7f5 fd78 	bl	8000b20 <__aeabi_dcmple>
 800b030:	b1a0      	cbz	r0, 800b05c <_strtod_l+0xb6c>
 800b032:	4649      	mov	r1, r9
 800b034:	4640      	mov	r0, r8
 800b036:	f7f5 fdb9 	bl	8000bac <__aeabi_d2uiz>
 800b03a:	2801      	cmp	r0, #1
 800b03c:	bf38      	it	cc
 800b03e:	2001      	movcc	r0, #1
 800b040:	f7f5 fa78 	bl	8000534 <__aeabi_ui2d>
 800b044:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b046:	4680      	mov	r8, r0
 800b048:	4689      	mov	r9, r1
 800b04a:	bb13      	cbnz	r3, 800b092 <_strtod_l+0xba2>
 800b04c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b050:	9014      	str	r0, [sp, #80]	; 0x50
 800b052:	9315      	str	r3, [sp, #84]	; 0x54
 800b054:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b058:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b05c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b05e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b060:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b064:	1a9b      	subs	r3, r3, r2
 800b066:	930d      	str	r3, [sp, #52]	; 0x34
 800b068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b06c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b070:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b074:	f001 faa0 	bl	800c5b8 <__ulp>
 800b078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b07c:	ec53 2b10 	vmov	r2, r3, d0
 800b080:	f7f5 fad2 	bl	8000628 <__aeabi_dmul>
 800b084:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b088:	f7f5 f918 	bl	80002bc <__adddf3>
 800b08c:	4682      	mov	sl, r0
 800b08e:	468b      	mov	fp, r1
 800b090:	e78f      	b.n	800afb2 <_strtod_l+0xac2>
 800b092:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b096:	e7dd      	b.n	800b054 <_strtod_l+0xb64>
 800b098:	a311      	add	r3, pc, #68	; (adr r3, 800b0e0 <_strtod_l+0xbf0>)
 800b09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09e:	f7f5 fd35 	bl	8000b0c <__aeabi_dcmplt>
 800b0a2:	e7b4      	b.n	800b00e <_strtod_l+0xb1e>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	930e      	str	r3, [sp, #56]	; 0x38
 800b0a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b0aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0ac:	6013      	str	r3, [r2, #0]
 800b0ae:	f7ff ba65 	b.w	800a57c <_strtod_l+0x8c>
 800b0b2:	2b65      	cmp	r3, #101	; 0x65
 800b0b4:	f43f ab5d 	beq.w	800a772 <_strtod_l+0x282>
 800b0b8:	2b45      	cmp	r3, #69	; 0x45
 800b0ba:	f43f ab5a 	beq.w	800a772 <_strtod_l+0x282>
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f7ff bb92 	b.w	800a7e8 <_strtod_l+0x2f8>
 800b0c4:	f3af 8000 	nop.w
 800b0c8:	94a03595 	.word	0x94a03595
 800b0cc:	3fdfffff 	.word	0x3fdfffff
 800b0d0:	35afe535 	.word	0x35afe535
 800b0d4:	3fe00000 	.word	0x3fe00000
 800b0d8:	ffc00000 	.word	0xffc00000
 800b0dc:	41dfffff 	.word	0x41dfffff
 800b0e0:	94a03595 	.word	0x94a03595
 800b0e4:	3fcfffff 	.word	0x3fcfffff
 800b0e8:	3ff00000 	.word	0x3ff00000
 800b0ec:	7ff00000 	.word	0x7ff00000
 800b0f0:	7fe00000 	.word	0x7fe00000
 800b0f4:	7c9fffff 	.word	0x7c9fffff
 800b0f8:	3fe00000 	.word	0x3fe00000
 800b0fc:	bff00000 	.word	0xbff00000
 800b100:	7fefffff 	.word	0x7fefffff

0800b104 <strtod>:
 800b104:	460a      	mov	r2, r1
 800b106:	4601      	mov	r1, r0
 800b108:	4802      	ldr	r0, [pc, #8]	; (800b114 <strtod+0x10>)
 800b10a:	4b03      	ldr	r3, [pc, #12]	; (800b118 <strtod+0x14>)
 800b10c:	6800      	ldr	r0, [r0, #0]
 800b10e:	f7ff b9ef 	b.w	800a4f0 <_strtod_l>
 800b112:	bf00      	nop
 800b114:	20000044 	.word	0x20000044
 800b118:	200000ac 	.word	0x200000ac

0800b11c <__utoa>:
 800b11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b11e:	4c1f      	ldr	r4, [pc, #124]	; (800b19c <__utoa+0x80>)
 800b120:	b08b      	sub	sp, #44	; 0x2c
 800b122:	4605      	mov	r5, r0
 800b124:	460b      	mov	r3, r1
 800b126:	466e      	mov	r6, sp
 800b128:	f104 0c20 	add.w	ip, r4, #32
 800b12c:	6820      	ldr	r0, [r4, #0]
 800b12e:	6861      	ldr	r1, [r4, #4]
 800b130:	4637      	mov	r7, r6
 800b132:	c703      	stmia	r7!, {r0, r1}
 800b134:	3408      	adds	r4, #8
 800b136:	4564      	cmp	r4, ip
 800b138:	463e      	mov	r6, r7
 800b13a:	d1f7      	bne.n	800b12c <__utoa+0x10>
 800b13c:	7921      	ldrb	r1, [r4, #4]
 800b13e:	7139      	strb	r1, [r7, #4]
 800b140:	1e91      	subs	r1, r2, #2
 800b142:	6820      	ldr	r0, [r4, #0]
 800b144:	6038      	str	r0, [r7, #0]
 800b146:	2922      	cmp	r1, #34	; 0x22
 800b148:	f04f 0100 	mov.w	r1, #0
 800b14c:	d904      	bls.n	800b158 <__utoa+0x3c>
 800b14e:	7019      	strb	r1, [r3, #0]
 800b150:	460b      	mov	r3, r1
 800b152:	4618      	mov	r0, r3
 800b154:	b00b      	add	sp, #44	; 0x2c
 800b156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b158:	1e58      	subs	r0, r3, #1
 800b15a:	4684      	mov	ip, r0
 800b15c:	fbb5 f7f2 	udiv	r7, r5, r2
 800b160:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b164:	fb02 5617 	mls	r6, r2, r7, r5
 800b168:	4476      	add	r6, lr
 800b16a:	460c      	mov	r4, r1
 800b16c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b170:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b174:	462e      	mov	r6, r5
 800b176:	42b2      	cmp	r2, r6
 800b178:	f101 0101 	add.w	r1, r1, #1
 800b17c:	463d      	mov	r5, r7
 800b17e:	d9ed      	bls.n	800b15c <__utoa+0x40>
 800b180:	2200      	movs	r2, #0
 800b182:	545a      	strb	r2, [r3, r1]
 800b184:	1919      	adds	r1, r3, r4
 800b186:	1aa5      	subs	r5, r4, r2
 800b188:	42aa      	cmp	r2, r5
 800b18a:	dae2      	bge.n	800b152 <__utoa+0x36>
 800b18c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b190:	780e      	ldrb	r6, [r1, #0]
 800b192:	7006      	strb	r6, [r0, #0]
 800b194:	3201      	adds	r2, #1
 800b196:	f801 5901 	strb.w	r5, [r1], #-1
 800b19a:	e7f4      	b.n	800b186 <__utoa+0x6a>
 800b19c:	0800d860 	.word	0x0800d860

0800b1a0 <__swbuf_r>:
 800b1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a2:	460e      	mov	r6, r1
 800b1a4:	4614      	mov	r4, r2
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	b118      	cbz	r0, 800b1b2 <__swbuf_r+0x12>
 800b1aa:	6983      	ldr	r3, [r0, #24]
 800b1ac:	b90b      	cbnz	r3, 800b1b2 <__swbuf_r+0x12>
 800b1ae:	f000 f9f3 	bl	800b598 <__sinit>
 800b1b2:	4b21      	ldr	r3, [pc, #132]	; (800b238 <__swbuf_r+0x98>)
 800b1b4:	429c      	cmp	r4, r3
 800b1b6:	d12b      	bne.n	800b210 <__swbuf_r+0x70>
 800b1b8:	686c      	ldr	r4, [r5, #4]
 800b1ba:	69a3      	ldr	r3, [r4, #24]
 800b1bc:	60a3      	str	r3, [r4, #8]
 800b1be:	89a3      	ldrh	r3, [r4, #12]
 800b1c0:	071a      	lsls	r2, r3, #28
 800b1c2:	d52f      	bpl.n	800b224 <__swbuf_r+0x84>
 800b1c4:	6923      	ldr	r3, [r4, #16]
 800b1c6:	b36b      	cbz	r3, 800b224 <__swbuf_r+0x84>
 800b1c8:	6923      	ldr	r3, [r4, #16]
 800b1ca:	6820      	ldr	r0, [r4, #0]
 800b1cc:	1ac0      	subs	r0, r0, r3
 800b1ce:	6963      	ldr	r3, [r4, #20]
 800b1d0:	b2f6      	uxtb	r6, r6
 800b1d2:	4283      	cmp	r3, r0
 800b1d4:	4637      	mov	r7, r6
 800b1d6:	dc04      	bgt.n	800b1e2 <__swbuf_r+0x42>
 800b1d8:	4621      	mov	r1, r4
 800b1da:	4628      	mov	r0, r5
 800b1dc:	f000 f948 	bl	800b470 <_fflush_r>
 800b1e0:	bb30      	cbnz	r0, 800b230 <__swbuf_r+0x90>
 800b1e2:	68a3      	ldr	r3, [r4, #8]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	60a3      	str	r3, [r4, #8]
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	6022      	str	r2, [r4, #0]
 800b1ee:	701e      	strb	r6, [r3, #0]
 800b1f0:	6963      	ldr	r3, [r4, #20]
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	4283      	cmp	r3, r0
 800b1f6:	d004      	beq.n	800b202 <__swbuf_r+0x62>
 800b1f8:	89a3      	ldrh	r3, [r4, #12]
 800b1fa:	07db      	lsls	r3, r3, #31
 800b1fc:	d506      	bpl.n	800b20c <__swbuf_r+0x6c>
 800b1fe:	2e0a      	cmp	r6, #10
 800b200:	d104      	bne.n	800b20c <__swbuf_r+0x6c>
 800b202:	4621      	mov	r1, r4
 800b204:	4628      	mov	r0, r5
 800b206:	f000 f933 	bl	800b470 <_fflush_r>
 800b20a:	b988      	cbnz	r0, 800b230 <__swbuf_r+0x90>
 800b20c:	4638      	mov	r0, r7
 800b20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b210:	4b0a      	ldr	r3, [pc, #40]	; (800b23c <__swbuf_r+0x9c>)
 800b212:	429c      	cmp	r4, r3
 800b214:	d101      	bne.n	800b21a <__swbuf_r+0x7a>
 800b216:	68ac      	ldr	r4, [r5, #8]
 800b218:	e7cf      	b.n	800b1ba <__swbuf_r+0x1a>
 800b21a:	4b09      	ldr	r3, [pc, #36]	; (800b240 <__swbuf_r+0xa0>)
 800b21c:	429c      	cmp	r4, r3
 800b21e:	bf08      	it	eq
 800b220:	68ec      	ldreq	r4, [r5, #12]
 800b222:	e7ca      	b.n	800b1ba <__swbuf_r+0x1a>
 800b224:	4621      	mov	r1, r4
 800b226:	4628      	mov	r0, r5
 800b228:	f000 f81e 	bl	800b268 <__swsetup_r>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d0cb      	beq.n	800b1c8 <__swbuf_r+0x28>
 800b230:	f04f 37ff 	mov.w	r7, #4294967295
 800b234:	e7ea      	b.n	800b20c <__swbuf_r+0x6c>
 800b236:	bf00      	nop
 800b238:	0800d8a8 	.word	0x0800d8a8
 800b23c:	0800d8c8 	.word	0x0800d8c8
 800b240:	0800d888 	.word	0x0800d888

0800b244 <_write_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	4d07      	ldr	r5, [pc, #28]	; (800b264 <_write_r+0x20>)
 800b248:	4604      	mov	r4, r0
 800b24a:	4608      	mov	r0, r1
 800b24c:	4611      	mov	r1, r2
 800b24e:	2200      	movs	r2, #0
 800b250:	602a      	str	r2, [r5, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	f7fa f83b 	bl	80052ce <_write>
 800b258:	1c43      	adds	r3, r0, #1
 800b25a:	d102      	bne.n	800b262 <_write_r+0x1e>
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	b103      	cbz	r3, 800b262 <_write_r+0x1e>
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	bd38      	pop	{r3, r4, r5, pc}
 800b264:	20005254 	.word	0x20005254

0800b268 <__swsetup_r>:
 800b268:	4b32      	ldr	r3, [pc, #200]	; (800b334 <__swsetup_r+0xcc>)
 800b26a:	b570      	push	{r4, r5, r6, lr}
 800b26c:	681d      	ldr	r5, [r3, #0]
 800b26e:	4606      	mov	r6, r0
 800b270:	460c      	mov	r4, r1
 800b272:	b125      	cbz	r5, 800b27e <__swsetup_r+0x16>
 800b274:	69ab      	ldr	r3, [r5, #24]
 800b276:	b913      	cbnz	r3, 800b27e <__swsetup_r+0x16>
 800b278:	4628      	mov	r0, r5
 800b27a:	f000 f98d 	bl	800b598 <__sinit>
 800b27e:	4b2e      	ldr	r3, [pc, #184]	; (800b338 <__swsetup_r+0xd0>)
 800b280:	429c      	cmp	r4, r3
 800b282:	d10f      	bne.n	800b2a4 <__swsetup_r+0x3c>
 800b284:	686c      	ldr	r4, [r5, #4]
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b28c:	0719      	lsls	r1, r3, #28
 800b28e:	d42c      	bmi.n	800b2ea <__swsetup_r+0x82>
 800b290:	06dd      	lsls	r5, r3, #27
 800b292:	d411      	bmi.n	800b2b8 <__swsetup_r+0x50>
 800b294:	2309      	movs	r3, #9
 800b296:	6033      	str	r3, [r6, #0]
 800b298:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b29c:	81a3      	strh	r3, [r4, #12]
 800b29e:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a2:	e03e      	b.n	800b322 <__swsetup_r+0xba>
 800b2a4:	4b25      	ldr	r3, [pc, #148]	; (800b33c <__swsetup_r+0xd4>)
 800b2a6:	429c      	cmp	r4, r3
 800b2a8:	d101      	bne.n	800b2ae <__swsetup_r+0x46>
 800b2aa:	68ac      	ldr	r4, [r5, #8]
 800b2ac:	e7eb      	b.n	800b286 <__swsetup_r+0x1e>
 800b2ae:	4b24      	ldr	r3, [pc, #144]	; (800b340 <__swsetup_r+0xd8>)
 800b2b0:	429c      	cmp	r4, r3
 800b2b2:	bf08      	it	eq
 800b2b4:	68ec      	ldreq	r4, [r5, #12]
 800b2b6:	e7e6      	b.n	800b286 <__swsetup_r+0x1e>
 800b2b8:	0758      	lsls	r0, r3, #29
 800b2ba:	d512      	bpl.n	800b2e2 <__swsetup_r+0x7a>
 800b2bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2be:	b141      	cbz	r1, 800b2d2 <__swsetup_r+0x6a>
 800b2c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2c4:	4299      	cmp	r1, r3
 800b2c6:	d002      	beq.n	800b2ce <__swsetup_r+0x66>
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	f7fe ff39 	bl	800a140 <_free_r>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	6363      	str	r3, [r4, #52]	; 0x34
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2d8:	81a3      	strh	r3, [r4, #12]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	6063      	str	r3, [r4, #4]
 800b2de:	6923      	ldr	r3, [r4, #16]
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	f043 0308 	orr.w	r3, r3, #8
 800b2e8:	81a3      	strh	r3, [r4, #12]
 800b2ea:	6923      	ldr	r3, [r4, #16]
 800b2ec:	b94b      	cbnz	r3, 800b302 <__swsetup_r+0x9a>
 800b2ee:	89a3      	ldrh	r3, [r4, #12]
 800b2f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2f8:	d003      	beq.n	800b302 <__swsetup_r+0x9a>
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f000 fd91 	bl	800be24 <__smakebuf_r>
 800b302:	89a0      	ldrh	r0, [r4, #12]
 800b304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b308:	f010 0301 	ands.w	r3, r0, #1
 800b30c:	d00a      	beq.n	800b324 <__swsetup_r+0xbc>
 800b30e:	2300      	movs	r3, #0
 800b310:	60a3      	str	r3, [r4, #8]
 800b312:	6963      	ldr	r3, [r4, #20]
 800b314:	425b      	negs	r3, r3
 800b316:	61a3      	str	r3, [r4, #24]
 800b318:	6923      	ldr	r3, [r4, #16]
 800b31a:	b943      	cbnz	r3, 800b32e <__swsetup_r+0xc6>
 800b31c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b320:	d1ba      	bne.n	800b298 <__swsetup_r+0x30>
 800b322:	bd70      	pop	{r4, r5, r6, pc}
 800b324:	0781      	lsls	r1, r0, #30
 800b326:	bf58      	it	pl
 800b328:	6963      	ldrpl	r3, [r4, #20]
 800b32a:	60a3      	str	r3, [r4, #8]
 800b32c:	e7f4      	b.n	800b318 <__swsetup_r+0xb0>
 800b32e:	2000      	movs	r0, #0
 800b330:	e7f7      	b.n	800b322 <__swsetup_r+0xba>
 800b332:	bf00      	nop
 800b334:	20000044 	.word	0x20000044
 800b338:	0800d8a8 	.word	0x0800d8a8
 800b33c:	0800d8c8 	.word	0x0800d8c8
 800b340:	0800d888 	.word	0x0800d888

0800b344 <_close_r>:
 800b344:	b538      	push	{r3, r4, r5, lr}
 800b346:	4d06      	ldr	r5, [pc, #24]	; (800b360 <_close_r+0x1c>)
 800b348:	2300      	movs	r3, #0
 800b34a:	4604      	mov	r4, r0
 800b34c:	4608      	mov	r0, r1
 800b34e:	602b      	str	r3, [r5, #0]
 800b350:	f7f9 ffd9 	bl	8005306 <_close>
 800b354:	1c43      	adds	r3, r0, #1
 800b356:	d102      	bne.n	800b35e <_close_r+0x1a>
 800b358:	682b      	ldr	r3, [r5, #0]
 800b35a:	b103      	cbz	r3, 800b35e <_close_r+0x1a>
 800b35c:	6023      	str	r3, [r4, #0]
 800b35e:	bd38      	pop	{r3, r4, r5, pc}
 800b360:	20005254 	.word	0x20005254

0800b364 <__sflush_r>:
 800b364:	898a      	ldrh	r2, [r1, #12]
 800b366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b36a:	4605      	mov	r5, r0
 800b36c:	0710      	lsls	r0, r2, #28
 800b36e:	460c      	mov	r4, r1
 800b370:	d458      	bmi.n	800b424 <__sflush_r+0xc0>
 800b372:	684b      	ldr	r3, [r1, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	dc05      	bgt.n	800b384 <__sflush_r+0x20>
 800b378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	dc02      	bgt.n	800b384 <__sflush_r+0x20>
 800b37e:	2000      	movs	r0, #0
 800b380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b386:	2e00      	cmp	r6, #0
 800b388:	d0f9      	beq.n	800b37e <__sflush_r+0x1a>
 800b38a:	2300      	movs	r3, #0
 800b38c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b390:	682f      	ldr	r7, [r5, #0]
 800b392:	602b      	str	r3, [r5, #0]
 800b394:	d032      	beq.n	800b3fc <__sflush_r+0x98>
 800b396:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b398:	89a3      	ldrh	r3, [r4, #12]
 800b39a:	075a      	lsls	r2, r3, #29
 800b39c:	d505      	bpl.n	800b3aa <__sflush_r+0x46>
 800b39e:	6863      	ldr	r3, [r4, #4]
 800b3a0:	1ac0      	subs	r0, r0, r3
 800b3a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3a4:	b10b      	cbz	r3, 800b3aa <__sflush_r+0x46>
 800b3a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3a8:	1ac0      	subs	r0, r0, r3
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3b0:	6a21      	ldr	r1, [r4, #32]
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	47b0      	blx	r6
 800b3b6:	1c43      	adds	r3, r0, #1
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	d106      	bne.n	800b3ca <__sflush_r+0x66>
 800b3bc:	6829      	ldr	r1, [r5, #0]
 800b3be:	291d      	cmp	r1, #29
 800b3c0:	d82c      	bhi.n	800b41c <__sflush_r+0xb8>
 800b3c2:	4a2a      	ldr	r2, [pc, #168]	; (800b46c <__sflush_r+0x108>)
 800b3c4:	40ca      	lsrs	r2, r1
 800b3c6:	07d6      	lsls	r6, r2, #31
 800b3c8:	d528      	bpl.n	800b41c <__sflush_r+0xb8>
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	6062      	str	r2, [r4, #4]
 800b3ce:	04d9      	lsls	r1, r3, #19
 800b3d0:	6922      	ldr	r2, [r4, #16]
 800b3d2:	6022      	str	r2, [r4, #0]
 800b3d4:	d504      	bpl.n	800b3e0 <__sflush_r+0x7c>
 800b3d6:	1c42      	adds	r2, r0, #1
 800b3d8:	d101      	bne.n	800b3de <__sflush_r+0x7a>
 800b3da:	682b      	ldr	r3, [r5, #0]
 800b3dc:	b903      	cbnz	r3, 800b3e0 <__sflush_r+0x7c>
 800b3de:	6560      	str	r0, [r4, #84]	; 0x54
 800b3e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3e2:	602f      	str	r7, [r5, #0]
 800b3e4:	2900      	cmp	r1, #0
 800b3e6:	d0ca      	beq.n	800b37e <__sflush_r+0x1a>
 800b3e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3ec:	4299      	cmp	r1, r3
 800b3ee:	d002      	beq.n	800b3f6 <__sflush_r+0x92>
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	f7fe fea5 	bl	800a140 <_free_r>
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	6360      	str	r0, [r4, #52]	; 0x34
 800b3fa:	e7c1      	b.n	800b380 <__sflush_r+0x1c>
 800b3fc:	6a21      	ldr	r1, [r4, #32]
 800b3fe:	2301      	movs	r3, #1
 800b400:	4628      	mov	r0, r5
 800b402:	47b0      	blx	r6
 800b404:	1c41      	adds	r1, r0, #1
 800b406:	d1c7      	bne.n	800b398 <__sflush_r+0x34>
 800b408:	682b      	ldr	r3, [r5, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d0c4      	beq.n	800b398 <__sflush_r+0x34>
 800b40e:	2b1d      	cmp	r3, #29
 800b410:	d001      	beq.n	800b416 <__sflush_r+0xb2>
 800b412:	2b16      	cmp	r3, #22
 800b414:	d101      	bne.n	800b41a <__sflush_r+0xb6>
 800b416:	602f      	str	r7, [r5, #0]
 800b418:	e7b1      	b.n	800b37e <__sflush_r+0x1a>
 800b41a:	89a3      	ldrh	r3, [r4, #12]
 800b41c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b420:	81a3      	strh	r3, [r4, #12]
 800b422:	e7ad      	b.n	800b380 <__sflush_r+0x1c>
 800b424:	690f      	ldr	r7, [r1, #16]
 800b426:	2f00      	cmp	r7, #0
 800b428:	d0a9      	beq.n	800b37e <__sflush_r+0x1a>
 800b42a:	0793      	lsls	r3, r2, #30
 800b42c:	680e      	ldr	r6, [r1, #0]
 800b42e:	bf08      	it	eq
 800b430:	694b      	ldreq	r3, [r1, #20]
 800b432:	600f      	str	r7, [r1, #0]
 800b434:	bf18      	it	ne
 800b436:	2300      	movne	r3, #0
 800b438:	eba6 0807 	sub.w	r8, r6, r7
 800b43c:	608b      	str	r3, [r1, #8]
 800b43e:	f1b8 0f00 	cmp.w	r8, #0
 800b442:	dd9c      	ble.n	800b37e <__sflush_r+0x1a>
 800b444:	6a21      	ldr	r1, [r4, #32]
 800b446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b448:	4643      	mov	r3, r8
 800b44a:	463a      	mov	r2, r7
 800b44c:	4628      	mov	r0, r5
 800b44e:	47b0      	blx	r6
 800b450:	2800      	cmp	r0, #0
 800b452:	dc06      	bgt.n	800b462 <__sflush_r+0xfe>
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b45a:	81a3      	strh	r3, [r4, #12]
 800b45c:	f04f 30ff 	mov.w	r0, #4294967295
 800b460:	e78e      	b.n	800b380 <__sflush_r+0x1c>
 800b462:	4407      	add	r7, r0
 800b464:	eba8 0800 	sub.w	r8, r8, r0
 800b468:	e7e9      	b.n	800b43e <__sflush_r+0xda>
 800b46a:	bf00      	nop
 800b46c:	20400001 	.word	0x20400001

0800b470 <_fflush_r>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	690b      	ldr	r3, [r1, #16]
 800b474:	4605      	mov	r5, r0
 800b476:	460c      	mov	r4, r1
 800b478:	b913      	cbnz	r3, 800b480 <_fflush_r+0x10>
 800b47a:	2500      	movs	r5, #0
 800b47c:	4628      	mov	r0, r5
 800b47e:	bd38      	pop	{r3, r4, r5, pc}
 800b480:	b118      	cbz	r0, 800b48a <_fflush_r+0x1a>
 800b482:	6983      	ldr	r3, [r0, #24]
 800b484:	b90b      	cbnz	r3, 800b48a <_fflush_r+0x1a>
 800b486:	f000 f887 	bl	800b598 <__sinit>
 800b48a:	4b14      	ldr	r3, [pc, #80]	; (800b4dc <_fflush_r+0x6c>)
 800b48c:	429c      	cmp	r4, r3
 800b48e:	d11b      	bne.n	800b4c8 <_fflush_r+0x58>
 800b490:	686c      	ldr	r4, [r5, #4]
 800b492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d0ef      	beq.n	800b47a <_fflush_r+0xa>
 800b49a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b49c:	07d0      	lsls	r0, r2, #31
 800b49e:	d404      	bmi.n	800b4aa <_fflush_r+0x3a>
 800b4a0:	0599      	lsls	r1, r3, #22
 800b4a2:	d402      	bmi.n	800b4aa <_fflush_r+0x3a>
 800b4a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4a6:	f000 fc84 	bl	800bdb2 <__retarget_lock_acquire_recursive>
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	f7ff ff59 	bl	800b364 <__sflush_r>
 800b4b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4b4:	07da      	lsls	r2, r3, #31
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	d4e0      	bmi.n	800b47c <_fflush_r+0xc>
 800b4ba:	89a3      	ldrh	r3, [r4, #12]
 800b4bc:	059b      	lsls	r3, r3, #22
 800b4be:	d4dd      	bmi.n	800b47c <_fflush_r+0xc>
 800b4c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4c2:	f000 fc77 	bl	800bdb4 <__retarget_lock_release_recursive>
 800b4c6:	e7d9      	b.n	800b47c <_fflush_r+0xc>
 800b4c8:	4b05      	ldr	r3, [pc, #20]	; (800b4e0 <_fflush_r+0x70>)
 800b4ca:	429c      	cmp	r4, r3
 800b4cc:	d101      	bne.n	800b4d2 <_fflush_r+0x62>
 800b4ce:	68ac      	ldr	r4, [r5, #8]
 800b4d0:	e7df      	b.n	800b492 <_fflush_r+0x22>
 800b4d2:	4b04      	ldr	r3, [pc, #16]	; (800b4e4 <_fflush_r+0x74>)
 800b4d4:	429c      	cmp	r4, r3
 800b4d6:	bf08      	it	eq
 800b4d8:	68ec      	ldreq	r4, [r5, #12]
 800b4da:	e7da      	b.n	800b492 <_fflush_r+0x22>
 800b4dc:	0800d8a8 	.word	0x0800d8a8
 800b4e0:	0800d8c8 	.word	0x0800d8c8
 800b4e4:	0800d888 	.word	0x0800d888

0800b4e8 <std>:
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	b510      	push	{r4, lr}
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	e9c0 3300 	strd	r3, r3, [r0]
 800b4f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4f6:	6083      	str	r3, [r0, #8]
 800b4f8:	8181      	strh	r1, [r0, #12]
 800b4fa:	6643      	str	r3, [r0, #100]	; 0x64
 800b4fc:	81c2      	strh	r2, [r0, #14]
 800b4fe:	6183      	str	r3, [r0, #24]
 800b500:	4619      	mov	r1, r3
 800b502:	2208      	movs	r2, #8
 800b504:	305c      	adds	r0, #92	; 0x5c
 800b506:	f7fe fe13 	bl	800a130 <memset>
 800b50a:	4b05      	ldr	r3, [pc, #20]	; (800b520 <std+0x38>)
 800b50c:	6263      	str	r3, [r4, #36]	; 0x24
 800b50e:	4b05      	ldr	r3, [pc, #20]	; (800b524 <std+0x3c>)
 800b510:	62a3      	str	r3, [r4, #40]	; 0x28
 800b512:	4b05      	ldr	r3, [pc, #20]	; (800b528 <std+0x40>)
 800b514:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b516:	4b05      	ldr	r3, [pc, #20]	; (800b52c <std+0x44>)
 800b518:	6224      	str	r4, [r4, #32]
 800b51a:	6323      	str	r3, [r4, #48]	; 0x30
 800b51c:	bd10      	pop	{r4, pc}
 800b51e:	bf00      	nop
 800b520:	0800a3f1 	.word	0x0800a3f1
 800b524:	0800a413 	.word	0x0800a413
 800b528:	0800a44b 	.word	0x0800a44b
 800b52c:	0800a46f 	.word	0x0800a46f

0800b530 <_cleanup_r>:
 800b530:	4901      	ldr	r1, [pc, #4]	; (800b538 <_cleanup_r+0x8>)
 800b532:	f000 b8af 	b.w	800b694 <_fwalk_reent>
 800b536:	bf00      	nop
 800b538:	0800b471 	.word	0x0800b471

0800b53c <__sfmoreglue>:
 800b53c:	b570      	push	{r4, r5, r6, lr}
 800b53e:	1e4a      	subs	r2, r1, #1
 800b540:	2568      	movs	r5, #104	; 0x68
 800b542:	4355      	muls	r5, r2
 800b544:	460e      	mov	r6, r1
 800b546:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b54a:	f7fe fe49 	bl	800a1e0 <_malloc_r>
 800b54e:	4604      	mov	r4, r0
 800b550:	b140      	cbz	r0, 800b564 <__sfmoreglue+0x28>
 800b552:	2100      	movs	r1, #0
 800b554:	e9c0 1600 	strd	r1, r6, [r0]
 800b558:	300c      	adds	r0, #12
 800b55a:	60a0      	str	r0, [r4, #8]
 800b55c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b560:	f7fe fde6 	bl	800a130 <memset>
 800b564:	4620      	mov	r0, r4
 800b566:	bd70      	pop	{r4, r5, r6, pc}

0800b568 <__sfp_lock_acquire>:
 800b568:	4801      	ldr	r0, [pc, #4]	; (800b570 <__sfp_lock_acquire+0x8>)
 800b56a:	f000 bc22 	b.w	800bdb2 <__retarget_lock_acquire_recursive>
 800b56e:	bf00      	nop
 800b570:	20005250 	.word	0x20005250

0800b574 <__sfp_lock_release>:
 800b574:	4801      	ldr	r0, [pc, #4]	; (800b57c <__sfp_lock_release+0x8>)
 800b576:	f000 bc1d 	b.w	800bdb4 <__retarget_lock_release_recursive>
 800b57a:	bf00      	nop
 800b57c:	20005250 	.word	0x20005250

0800b580 <__sinit_lock_acquire>:
 800b580:	4801      	ldr	r0, [pc, #4]	; (800b588 <__sinit_lock_acquire+0x8>)
 800b582:	f000 bc16 	b.w	800bdb2 <__retarget_lock_acquire_recursive>
 800b586:	bf00      	nop
 800b588:	2000524b 	.word	0x2000524b

0800b58c <__sinit_lock_release>:
 800b58c:	4801      	ldr	r0, [pc, #4]	; (800b594 <__sinit_lock_release+0x8>)
 800b58e:	f000 bc11 	b.w	800bdb4 <__retarget_lock_release_recursive>
 800b592:	bf00      	nop
 800b594:	2000524b 	.word	0x2000524b

0800b598 <__sinit>:
 800b598:	b510      	push	{r4, lr}
 800b59a:	4604      	mov	r4, r0
 800b59c:	f7ff fff0 	bl	800b580 <__sinit_lock_acquire>
 800b5a0:	69a3      	ldr	r3, [r4, #24]
 800b5a2:	b11b      	cbz	r3, 800b5ac <__sinit+0x14>
 800b5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5a8:	f7ff bff0 	b.w	800b58c <__sinit_lock_release>
 800b5ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b5b0:	6523      	str	r3, [r4, #80]	; 0x50
 800b5b2:	4b13      	ldr	r3, [pc, #76]	; (800b600 <__sinit+0x68>)
 800b5b4:	4a13      	ldr	r2, [pc, #76]	; (800b604 <__sinit+0x6c>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b5ba:	42a3      	cmp	r3, r4
 800b5bc:	bf04      	itt	eq
 800b5be:	2301      	moveq	r3, #1
 800b5c0:	61a3      	streq	r3, [r4, #24]
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f000 f820 	bl	800b608 <__sfp>
 800b5c8:	6060      	str	r0, [r4, #4]
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f000 f81c 	bl	800b608 <__sfp>
 800b5d0:	60a0      	str	r0, [r4, #8]
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f000 f818 	bl	800b608 <__sfp>
 800b5d8:	2200      	movs	r2, #0
 800b5da:	60e0      	str	r0, [r4, #12]
 800b5dc:	2104      	movs	r1, #4
 800b5de:	6860      	ldr	r0, [r4, #4]
 800b5e0:	f7ff ff82 	bl	800b4e8 <std>
 800b5e4:	68a0      	ldr	r0, [r4, #8]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	2109      	movs	r1, #9
 800b5ea:	f7ff ff7d 	bl	800b4e8 <std>
 800b5ee:	68e0      	ldr	r0, [r4, #12]
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	2112      	movs	r1, #18
 800b5f4:	f7ff ff78 	bl	800b4e8 <std>
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	61a3      	str	r3, [r4, #24]
 800b5fc:	e7d2      	b.n	800b5a4 <__sinit+0xc>
 800b5fe:	bf00      	nop
 800b600:	0800d7fc 	.word	0x0800d7fc
 800b604:	0800b531 	.word	0x0800b531

0800b608 <__sfp>:
 800b608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b60a:	4607      	mov	r7, r0
 800b60c:	f7ff ffac 	bl	800b568 <__sfp_lock_acquire>
 800b610:	4b1e      	ldr	r3, [pc, #120]	; (800b68c <__sfp+0x84>)
 800b612:	681e      	ldr	r6, [r3, #0]
 800b614:	69b3      	ldr	r3, [r6, #24]
 800b616:	b913      	cbnz	r3, 800b61e <__sfp+0x16>
 800b618:	4630      	mov	r0, r6
 800b61a:	f7ff ffbd 	bl	800b598 <__sinit>
 800b61e:	3648      	adds	r6, #72	; 0x48
 800b620:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b624:	3b01      	subs	r3, #1
 800b626:	d503      	bpl.n	800b630 <__sfp+0x28>
 800b628:	6833      	ldr	r3, [r6, #0]
 800b62a:	b30b      	cbz	r3, 800b670 <__sfp+0x68>
 800b62c:	6836      	ldr	r6, [r6, #0]
 800b62e:	e7f7      	b.n	800b620 <__sfp+0x18>
 800b630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b634:	b9d5      	cbnz	r5, 800b66c <__sfp+0x64>
 800b636:	4b16      	ldr	r3, [pc, #88]	; (800b690 <__sfp+0x88>)
 800b638:	60e3      	str	r3, [r4, #12]
 800b63a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b63e:	6665      	str	r5, [r4, #100]	; 0x64
 800b640:	f000 fbb6 	bl	800bdb0 <__retarget_lock_init_recursive>
 800b644:	f7ff ff96 	bl	800b574 <__sfp_lock_release>
 800b648:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b64c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b650:	6025      	str	r5, [r4, #0]
 800b652:	61a5      	str	r5, [r4, #24]
 800b654:	2208      	movs	r2, #8
 800b656:	4629      	mov	r1, r5
 800b658:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b65c:	f7fe fd68 	bl	800a130 <memset>
 800b660:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b664:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b668:	4620      	mov	r0, r4
 800b66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b66c:	3468      	adds	r4, #104	; 0x68
 800b66e:	e7d9      	b.n	800b624 <__sfp+0x1c>
 800b670:	2104      	movs	r1, #4
 800b672:	4638      	mov	r0, r7
 800b674:	f7ff ff62 	bl	800b53c <__sfmoreglue>
 800b678:	4604      	mov	r4, r0
 800b67a:	6030      	str	r0, [r6, #0]
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d1d5      	bne.n	800b62c <__sfp+0x24>
 800b680:	f7ff ff78 	bl	800b574 <__sfp_lock_release>
 800b684:	230c      	movs	r3, #12
 800b686:	603b      	str	r3, [r7, #0]
 800b688:	e7ee      	b.n	800b668 <__sfp+0x60>
 800b68a:	bf00      	nop
 800b68c:	0800d7fc 	.word	0x0800d7fc
 800b690:	ffff0001 	.word	0xffff0001

0800b694 <_fwalk_reent>:
 800b694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b698:	4606      	mov	r6, r0
 800b69a:	4688      	mov	r8, r1
 800b69c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b6a0:	2700      	movs	r7, #0
 800b6a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6a6:	f1b9 0901 	subs.w	r9, r9, #1
 800b6aa:	d505      	bpl.n	800b6b8 <_fwalk_reent+0x24>
 800b6ac:	6824      	ldr	r4, [r4, #0]
 800b6ae:	2c00      	cmp	r4, #0
 800b6b0:	d1f7      	bne.n	800b6a2 <_fwalk_reent+0xe>
 800b6b2:	4638      	mov	r0, r7
 800b6b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6b8:	89ab      	ldrh	r3, [r5, #12]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d907      	bls.n	800b6ce <_fwalk_reent+0x3a>
 800b6be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	d003      	beq.n	800b6ce <_fwalk_reent+0x3a>
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	47c0      	blx	r8
 800b6cc:	4307      	orrs	r7, r0
 800b6ce:	3568      	adds	r5, #104	; 0x68
 800b6d0:	e7e9      	b.n	800b6a6 <_fwalk_reent+0x12>

0800b6d2 <rshift>:
 800b6d2:	6903      	ldr	r3, [r0, #16]
 800b6d4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b6d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6dc:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b6e0:	f100 0414 	add.w	r4, r0, #20
 800b6e4:	dd45      	ble.n	800b772 <rshift+0xa0>
 800b6e6:	f011 011f 	ands.w	r1, r1, #31
 800b6ea:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b6ee:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b6f2:	d10c      	bne.n	800b70e <rshift+0x3c>
 800b6f4:	f100 0710 	add.w	r7, r0, #16
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	42b1      	cmp	r1, r6
 800b6fc:	d334      	bcc.n	800b768 <rshift+0x96>
 800b6fe:	1a9b      	subs	r3, r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	1eea      	subs	r2, r5, #3
 800b704:	4296      	cmp	r6, r2
 800b706:	bf38      	it	cc
 800b708:	2300      	movcc	r3, #0
 800b70a:	4423      	add	r3, r4
 800b70c:	e015      	b.n	800b73a <rshift+0x68>
 800b70e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b712:	f1c1 0820 	rsb	r8, r1, #32
 800b716:	40cf      	lsrs	r7, r1
 800b718:	f105 0e04 	add.w	lr, r5, #4
 800b71c:	46a1      	mov	r9, r4
 800b71e:	4576      	cmp	r6, lr
 800b720:	46f4      	mov	ip, lr
 800b722:	d815      	bhi.n	800b750 <rshift+0x7e>
 800b724:	1a9b      	subs	r3, r3, r2
 800b726:	009a      	lsls	r2, r3, #2
 800b728:	3a04      	subs	r2, #4
 800b72a:	3501      	adds	r5, #1
 800b72c:	42ae      	cmp	r6, r5
 800b72e:	bf38      	it	cc
 800b730:	2200      	movcc	r2, #0
 800b732:	18a3      	adds	r3, r4, r2
 800b734:	50a7      	str	r7, [r4, r2]
 800b736:	b107      	cbz	r7, 800b73a <rshift+0x68>
 800b738:	3304      	adds	r3, #4
 800b73a:	1b1a      	subs	r2, r3, r4
 800b73c:	42a3      	cmp	r3, r4
 800b73e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b742:	bf08      	it	eq
 800b744:	2300      	moveq	r3, #0
 800b746:	6102      	str	r2, [r0, #16]
 800b748:	bf08      	it	eq
 800b74a:	6143      	streq	r3, [r0, #20]
 800b74c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b750:	f8dc c000 	ldr.w	ip, [ip]
 800b754:	fa0c fc08 	lsl.w	ip, ip, r8
 800b758:	ea4c 0707 	orr.w	r7, ip, r7
 800b75c:	f849 7b04 	str.w	r7, [r9], #4
 800b760:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b764:	40cf      	lsrs	r7, r1
 800b766:	e7da      	b.n	800b71e <rshift+0x4c>
 800b768:	f851 cb04 	ldr.w	ip, [r1], #4
 800b76c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b770:	e7c3      	b.n	800b6fa <rshift+0x28>
 800b772:	4623      	mov	r3, r4
 800b774:	e7e1      	b.n	800b73a <rshift+0x68>

0800b776 <__hexdig_fun>:
 800b776:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b77a:	2b09      	cmp	r3, #9
 800b77c:	d802      	bhi.n	800b784 <__hexdig_fun+0xe>
 800b77e:	3820      	subs	r0, #32
 800b780:	b2c0      	uxtb	r0, r0
 800b782:	4770      	bx	lr
 800b784:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b788:	2b05      	cmp	r3, #5
 800b78a:	d801      	bhi.n	800b790 <__hexdig_fun+0x1a>
 800b78c:	3847      	subs	r0, #71	; 0x47
 800b78e:	e7f7      	b.n	800b780 <__hexdig_fun+0xa>
 800b790:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b794:	2b05      	cmp	r3, #5
 800b796:	d801      	bhi.n	800b79c <__hexdig_fun+0x26>
 800b798:	3827      	subs	r0, #39	; 0x27
 800b79a:	e7f1      	b.n	800b780 <__hexdig_fun+0xa>
 800b79c:	2000      	movs	r0, #0
 800b79e:	4770      	bx	lr

0800b7a0 <__gethex>:
 800b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	ed2d 8b02 	vpush	{d8}
 800b7a8:	b089      	sub	sp, #36	; 0x24
 800b7aa:	ee08 0a10 	vmov	s16, r0
 800b7ae:	9304      	str	r3, [sp, #16]
 800b7b0:	4bbc      	ldr	r3, [pc, #752]	; (800baa4 <__gethex+0x304>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	9301      	str	r3, [sp, #4]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	468b      	mov	fp, r1
 800b7ba:	4690      	mov	r8, r2
 800b7bc:	f7f4 fd1a 	bl	80001f4 <strlen>
 800b7c0:	9b01      	ldr	r3, [sp, #4]
 800b7c2:	f8db 2000 	ldr.w	r2, [fp]
 800b7c6:	4403      	add	r3, r0
 800b7c8:	4682      	mov	sl, r0
 800b7ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b7ce:	9305      	str	r3, [sp, #20]
 800b7d0:	1c93      	adds	r3, r2, #2
 800b7d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b7d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b7da:	32fe      	adds	r2, #254	; 0xfe
 800b7dc:	18d1      	adds	r1, r2, r3
 800b7de:	461f      	mov	r7, r3
 800b7e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b7e4:	9100      	str	r1, [sp, #0]
 800b7e6:	2830      	cmp	r0, #48	; 0x30
 800b7e8:	d0f8      	beq.n	800b7dc <__gethex+0x3c>
 800b7ea:	f7ff ffc4 	bl	800b776 <__hexdig_fun>
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d13a      	bne.n	800b86a <__gethex+0xca>
 800b7f4:	9901      	ldr	r1, [sp, #4]
 800b7f6:	4652      	mov	r2, sl
 800b7f8:	4638      	mov	r0, r7
 800b7fa:	f7fe fe4b 	bl	800a494 <strncmp>
 800b7fe:	4605      	mov	r5, r0
 800b800:	2800      	cmp	r0, #0
 800b802:	d168      	bne.n	800b8d6 <__gethex+0x136>
 800b804:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b808:	eb07 060a 	add.w	r6, r7, sl
 800b80c:	f7ff ffb3 	bl	800b776 <__hexdig_fun>
 800b810:	2800      	cmp	r0, #0
 800b812:	d062      	beq.n	800b8da <__gethex+0x13a>
 800b814:	4633      	mov	r3, r6
 800b816:	7818      	ldrb	r0, [r3, #0]
 800b818:	2830      	cmp	r0, #48	; 0x30
 800b81a:	461f      	mov	r7, r3
 800b81c:	f103 0301 	add.w	r3, r3, #1
 800b820:	d0f9      	beq.n	800b816 <__gethex+0x76>
 800b822:	f7ff ffa8 	bl	800b776 <__hexdig_fun>
 800b826:	2301      	movs	r3, #1
 800b828:	fab0 f480 	clz	r4, r0
 800b82c:	0964      	lsrs	r4, r4, #5
 800b82e:	4635      	mov	r5, r6
 800b830:	9300      	str	r3, [sp, #0]
 800b832:	463a      	mov	r2, r7
 800b834:	4616      	mov	r6, r2
 800b836:	3201      	adds	r2, #1
 800b838:	7830      	ldrb	r0, [r6, #0]
 800b83a:	f7ff ff9c 	bl	800b776 <__hexdig_fun>
 800b83e:	2800      	cmp	r0, #0
 800b840:	d1f8      	bne.n	800b834 <__gethex+0x94>
 800b842:	9901      	ldr	r1, [sp, #4]
 800b844:	4652      	mov	r2, sl
 800b846:	4630      	mov	r0, r6
 800b848:	f7fe fe24 	bl	800a494 <strncmp>
 800b84c:	b980      	cbnz	r0, 800b870 <__gethex+0xd0>
 800b84e:	b94d      	cbnz	r5, 800b864 <__gethex+0xc4>
 800b850:	eb06 050a 	add.w	r5, r6, sl
 800b854:	462a      	mov	r2, r5
 800b856:	4616      	mov	r6, r2
 800b858:	3201      	adds	r2, #1
 800b85a:	7830      	ldrb	r0, [r6, #0]
 800b85c:	f7ff ff8b 	bl	800b776 <__hexdig_fun>
 800b860:	2800      	cmp	r0, #0
 800b862:	d1f8      	bne.n	800b856 <__gethex+0xb6>
 800b864:	1bad      	subs	r5, r5, r6
 800b866:	00ad      	lsls	r5, r5, #2
 800b868:	e004      	b.n	800b874 <__gethex+0xd4>
 800b86a:	2400      	movs	r4, #0
 800b86c:	4625      	mov	r5, r4
 800b86e:	e7e0      	b.n	800b832 <__gethex+0x92>
 800b870:	2d00      	cmp	r5, #0
 800b872:	d1f7      	bne.n	800b864 <__gethex+0xc4>
 800b874:	7833      	ldrb	r3, [r6, #0]
 800b876:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b87a:	2b50      	cmp	r3, #80	; 0x50
 800b87c:	d13b      	bne.n	800b8f6 <__gethex+0x156>
 800b87e:	7873      	ldrb	r3, [r6, #1]
 800b880:	2b2b      	cmp	r3, #43	; 0x2b
 800b882:	d02c      	beq.n	800b8de <__gethex+0x13e>
 800b884:	2b2d      	cmp	r3, #45	; 0x2d
 800b886:	d02e      	beq.n	800b8e6 <__gethex+0x146>
 800b888:	1c71      	adds	r1, r6, #1
 800b88a:	f04f 0900 	mov.w	r9, #0
 800b88e:	7808      	ldrb	r0, [r1, #0]
 800b890:	f7ff ff71 	bl	800b776 <__hexdig_fun>
 800b894:	1e43      	subs	r3, r0, #1
 800b896:	b2db      	uxtb	r3, r3
 800b898:	2b18      	cmp	r3, #24
 800b89a:	d82c      	bhi.n	800b8f6 <__gethex+0x156>
 800b89c:	f1a0 0210 	sub.w	r2, r0, #16
 800b8a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b8a4:	f7ff ff67 	bl	800b776 <__hexdig_fun>
 800b8a8:	1e43      	subs	r3, r0, #1
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	2b18      	cmp	r3, #24
 800b8ae:	d91d      	bls.n	800b8ec <__gethex+0x14c>
 800b8b0:	f1b9 0f00 	cmp.w	r9, #0
 800b8b4:	d000      	beq.n	800b8b8 <__gethex+0x118>
 800b8b6:	4252      	negs	r2, r2
 800b8b8:	4415      	add	r5, r2
 800b8ba:	f8cb 1000 	str.w	r1, [fp]
 800b8be:	b1e4      	cbz	r4, 800b8fa <__gethex+0x15a>
 800b8c0:	9b00      	ldr	r3, [sp, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	bf14      	ite	ne
 800b8c6:	2700      	movne	r7, #0
 800b8c8:	2706      	moveq	r7, #6
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	b009      	add	sp, #36	; 0x24
 800b8ce:	ecbd 8b02 	vpop	{d8}
 800b8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d6:	463e      	mov	r6, r7
 800b8d8:	4625      	mov	r5, r4
 800b8da:	2401      	movs	r4, #1
 800b8dc:	e7ca      	b.n	800b874 <__gethex+0xd4>
 800b8de:	f04f 0900 	mov.w	r9, #0
 800b8e2:	1cb1      	adds	r1, r6, #2
 800b8e4:	e7d3      	b.n	800b88e <__gethex+0xee>
 800b8e6:	f04f 0901 	mov.w	r9, #1
 800b8ea:	e7fa      	b.n	800b8e2 <__gethex+0x142>
 800b8ec:	230a      	movs	r3, #10
 800b8ee:	fb03 0202 	mla	r2, r3, r2, r0
 800b8f2:	3a10      	subs	r2, #16
 800b8f4:	e7d4      	b.n	800b8a0 <__gethex+0x100>
 800b8f6:	4631      	mov	r1, r6
 800b8f8:	e7df      	b.n	800b8ba <__gethex+0x11a>
 800b8fa:	1bf3      	subs	r3, r6, r7
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	4621      	mov	r1, r4
 800b900:	2b07      	cmp	r3, #7
 800b902:	dc0b      	bgt.n	800b91c <__gethex+0x17c>
 800b904:	ee18 0a10 	vmov	r0, s16
 800b908:	f000 faea 	bl	800bee0 <_Balloc>
 800b90c:	4604      	mov	r4, r0
 800b90e:	b940      	cbnz	r0, 800b922 <__gethex+0x182>
 800b910:	4b65      	ldr	r3, [pc, #404]	; (800baa8 <__gethex+0x308>)
 800b912:	4602      	mov	r2, r0
 800b914:	21de      	movs	r1, #222	; 0xde
 800b916:	4865      	ldr	r0, [pc, #404]	; (800baac <__gethex+0x30c>)
 800b918:	f001 faec 	bl	800cef4 <__assert_func>
 800b91c:	3101      	adds	r1, #1
 800b91e:	105b      	asrs	r3, r3, #1
 800b920:	e7ee      	b.n	800b900 <__gethex+0x160>
 800b922:	f100 0914 	add.w	r9, r0, #20
 800b926:	f04f 0b00 	mov.w	fp, #0
 800b92a:	f1ca 0301 	rsb	r3, sl, #1
 800b92e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b932:	f8cd b000 	str.w	fp, [sp]
 800b936:	9306      	str	r3, [sp, #24]
 800b938:	42b7      	cmp	r7, r6
 800b93a:	d340      	bcc.n	800b9be <__gethex+0x21e>
 800b93c:	9802      	ldr	r0, [sp, #8]
 800b93e:	9b00      	ldr	r3, [sp, #0]
 800b940:	f840 3b04 	str.w	r3, [r0], #4
 800b944:	eba0 0009 	sub.w	r0, r0, r9
 800b948:	1080      	asrs	r0, r0, #2
 800b94a:	0146      	lsls	r6, r0, #5
 800b94c:	6120      	str	r0, [r4, #16]
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 fbbc 	bl	800c0cc <__hi0bits>
 800b954:	1a30      	subs	r0, r6, r0
 800b956:	f8d8 6000 	ldr.w	r6, [r8]
 800b95a:	42b0      	cmp	r0, r6
 800b95c:	dd63      	ble.n	800ba26 <__gethex+0x286>
 800b95e:	1b87      	subs	r7, r0, r6
 800b960:	4639      	mov	r1, r7
 800b962:	4620      	mov	r0, r4
 800b964:	f000 ff56 	bl	800c814 <__any_on>
 800b968:	4682      	mov	sl, r0
 800b96a:	b1a8      	cbz	r0, 800b998 <__gethex+0x1f8>
 800b96c:	1e7b      	subs	r3, r7, #1
 800b96e:	1159      	asrs	r1, r3, #5
 800b970:	f003 021f 	and.w	r2, r3, #31
 800b974:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b978:	f04f 0a01 	mov.w	sl, #1
 800b97c:	fa0a f202 	lsl.w	r2, sl, r2
 800b980:	420a      	tst	r2, r1
 800b982:	d009      	beq.n	800b998 <__gethex+0x1f8>
 800b984:	4553      	cmp	r3, sl
 800b986:	dd05      	ble.n	800b994 <__gethex+0x1f4>
 800b988:	1eb9      	subs	r1, r7, #2
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 ff42 	bl	800c814 <__any_on>
 800b990:	2800      	cmp	r0, #0
 800b992:	d145      	bne.n	800ba20 <__gethex+0x280>
 800b994:	f04f 0a02 	mov.w	sl, #2
 800b998:	4639      	mov	r1, r7
 800b99a:	4620      	mov	r0, r4
 800b99c:	f7ff fe99 	bl	800b6d2 <rshift>
 800b9a0:	443d      	add	r5, r7
 800b9a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b9a6:	42ab      	cmp	r3, r5
 800b9a8:	da4c      	bge.n	800ba44 <__gethex+0x2a4>
 800b9aa:	ee18 0a10 	vmov	r0, s16
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	f000 fad6 	bl	800bf60 <_Bfree>
 800b9b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	6013      	str	r3, [r2, #0]
 800b9ba:	27a3      	movs	r7, #163	; 0xa3
 800b9bc:	e785      	b.n	800b8ca <__gethex+0x12a>
 800b9be:	1e73      	subs	r3, r6, #1
 800b9c0:	9a05      	ldr	r2, [sp, #20]
 800b9c2:	9303      	str	r3, [sp, #12]
 800b9c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d019      	beq.n	800ba00 <__gethex+0x260>
 800b9cc:	f1bb 0f20 	cmp.w	fp, #32
 800b9d0:	d107      	bne.n	800b9e2 <__gethex+0x242>
 800b9d2:	9b02      	ldr	r3, [sp, #8]
 800b9d4:	9a00      	ldr	r2, [sp, #0]
 800b9d6:	f843 2b04 	str.w	r2, [r3], #4
 800b9da:	9302      	str	r3, [sp, #8]
 800b9dc:	2300      	movs	r3, #0
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	469b      	mov	fp, r3
 800b9e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b9e6:	f7ff fec6 	bl	800b776 <__hexdig_fun>
 800b9ea:	9b00      	ldr	r3, [sp, #0]
 800b9ec:	f000 000f 	and.w	r0, r0, #15
 800b9f0:	fa00 f00b 	lsl.w	r0, r0, fp
 800b9f4:	4303      	orrs	r3, r0
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	f10b 0b04 	add.w	fp, fp, #4
 800b9fc:	9b03      	ldr	r3, [sp, #12]
 800b9fe:	e00d      	b.n	800ba1c <__gethex+0x27c>
 800ba00:	9b03      	ldr	r3, [sp, #12]
 800ba02:	9a06      	ldr	r2, [sp, #24]
 800ba04:	4413      	add	r3, r2
 800ba06:	42bb      	cmp	r3, r7
 800ba08:	d3e0      	bcc.n	800b9cc <__gethex+0x22c>
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	9901      	ldr	r1, [sp, #4]
 800ba0e:	9307      	str	r3, [sp, #28]
 800ba10:	4652      	mov	r2, sl
 800ba12:	f7fe fd3f 	bl	800a494 <strncmp>
 800ba16:	9b07      	ldr	r3, [sp, #28]
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	d1d7      	bne.n	800b9cc <__gethex+0x22c>
 800ba1c:	461e      	mov	r6, r3
 800ba1e:	e78b      	b.n	800b938 <__gethex+0x198>
 800ba20:	f04f 0a03 	mov.w	sl, #3
 800ba24:	e7b8      	b.n	800b998 <__gethex+0x1f8>
 800ba26:	da0a      	bge.n	800ba3e <__gethex+0x29e>
 800ba28:	1a37      	subs	r7, r6, r0
 800ba2a:	4621      	mov	r1, r4
 800ba2c:	ee18 0a10 	vmov	r0, s16
 800ba30:	463a      	mov	r2, r7
 800ba32:	f000 fcb1 	bl	800c398 <__lshift>
 800ba36:	1bed      	subs	r5, r5, r7
 800ba38:	4604      	mov	r4, r0
 800ba3a:	f100 0914 	add.w	r9, r0, #20
 800ba3e:	f04f 0a00 	mov.w	sl, #0
 800ba42:	e7ae      	b.n	800b9a2 <__gethex+0x202>
 800ba44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ba48:	42a8      	cmp	r0, r5
 800ba4a:	dd72      	ble.n	800bb32 <__gethex+0x392>
 800ba4c:	1b45      	subs	r5, r0, r5
 800ba4e:	42ae      	cmp	r6, r5
 800ba50:	dc36      	bgt.n	800bac0 <__gethex+0x320>
 800ba52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d02a      	beq.n	800bab0 <__gethex+0x310>
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d02c      	beq.n	800bab8 <__gethex+0x318>
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d115      	bne.n	800ba8e <__gethex+0x2ee>
 800ba62:	42ae      	cmp	r6, r5
 800ba64:	d113      	bne.n	800ba8e <__gethex+0x2ee>
 800ba66:	2e01      	cmp	r6, #1
 800ba68:	d10b      	bne.n	800ba82 <__gethex+0x2e2>
 800ba6a:	9a04      	ldr	r2, [sp, #16]
 800ba6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ba70:	6013      	str	r3, [r2, #0]
 800ba72:	2301      	movs	r3, #1
 800ba74:	6123      	str	r3, [r4, #16]
 800ba76:	f8c9 3000 	str.w	r3, [r9]
 800ba7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba7c:	2762      	movs	r7, #98	; 0x62
 800ba7e:	601c      	str	r4, [r3, #0]
 800ba80:	e723      	b.n	800b8ca <__gethex+0x12a>
 800ba82:	1e71      	subs	r1, r6, #1
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 fec5 	bl	800c814 <__any_on>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d1ed      	bne.n	800ba6a <__gethex+0x2ca>
 800ba8e:	ee18 0a10 	vmov	r0, s16
 800ba92:	4621      	mov	r1, r4
 800ba94:	f000 fa64 	bl	800bf60 <_Bfree>
 800ba98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	2750      	movs	r7, #80	; 0x50
 800baa0:	e713      	b.n	800b8ca <__gethex+0x12a>
 800baa2:	bf00      	nop
 800baa4:	0800d964 	.word	0x0800d964
 800baa8:	0800d8e8 	.word	0x0800d8e8
 800baac:	0800d8f9 	.word	0x0800d8f9
 800bab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1eb      	bne.n	800ba8e <__gethex+0x2ee>
 800bab6:	e7d8      	b.n	800ba6a <__gethex+0x2ca>
 800bab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1d5      	bne.n	800ba6a <__gethex+0x2ca>
 800babe:	e7e6      	b.n	800ba8e <__gethex+0x2ee>
 800bac0:	1e6f      	subs	r7, r5, #1
 800bac2:	f1ba 0f00 	cmp.w	sl, #0
 800bac6:	d131      	bne.n	800bb2c <__gethex+0x38c>
 800bac8:	b127      	cbz	r7, 800bad4 <__gethex+0x334>
 800baca:	4639      	mov	r1, r7
 800bacc:	4620      	mov	r0, r4
 800bace:	f000 fea1 	bl	800c814 <__any_on>
 800bad2:	4682      	mov	sl, r0
 800bad4:	117b      	asrs	r3, r7, #5
 800bad6:	2101      	movs	r1, #1
 800bad8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800badc:	f007 071f 	and.w	r7, r7, #31
 800bae0:	fa01 f707 	lsl.w	r7, r1, r7
 800bae4:	421f      	tst	r7, r3
 800bae6:	4629      	mov	r1, r5
 800bae8:	4620      	mov	r0, r4
 800baea:	bf18      	it	ne
 800baec:	f04a 0a02 	orrne.w	sl, sl, #2
 800baf0:	1b76      	subs	r6, r6, r5
 800baf2:	f7ff fdee 	bl	800b6d2 <rshift>
 800baf6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bafa:	2702      	movs	r7, #2
 800bafc:	f1ba 0f00 	cmp.w	sl, #0
 800bb00:	d048      	beq.n	800bb94 <__gethex+0x3f4>
 800bb02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d015      	beq.n	800bb36 <__gethex+0x396>
 800bb0a:	2b03      	cmp	r3, #3
 800bb0c:	d017      	beq.n	800bb3e <__gethex+0x39e>
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d109      	bne.n	800bb26 <__gethex+0x386>
 800bb12:	f01a 0f02 	tst.w	sl, #2
 800bb16:	d006      	beq.n	800bb26 <__gethex+0x386>
 800bb18:	f8d9 0000 	ldr.w	r0, [r9]
 800bb1c:	ea4a 0a00 	orr.w	sl, sl, r0
 800bb20:	f01a 0f01 	tst.w	sl, #1
 800bb24:	d10e      	bne.n	800bb44 <__gethex+0x3a4>
 800bb26:	f047 0710 	orr.w	r7, r7, #16
 800bb2a:	e033      	b.n	800bb94 <__gethex+0x3f4>
 800bb2c:	f04f 0a01 	mov.w	sl, #1
 800bb30:	e7d0      	b.n	800bad4 <__gethex+0x334>
 800bb32:	2701      	movs	r7, #1
 800bb34:	e7e2      	b.n	800bafc <__gethex+0x35c>
 800bb36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb38:	f1c3 0301 	rsb	r3, r3, #1
 800bb3c:	9315      	str	r3, [sp, #84]	; 0x54
 800bb3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d0f0      	beq.n	800bb26 <__gethex+0x386>
 800bb44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bb48:	f104 0314 	add.w	r3, r4, #20
 800bb4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bb50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bb54:	f04f 0c00 	mov.w	ip, #0
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb5e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bb62:	d01c      	beq.n	800bb9e <__gethex+0x3fe>
 800bb64:	3201      	adds	r2, #1
 800bb66:	6002      	str	r2, [r0, #0]
 800bb68:	2f02      	cmp	r7, #2
 800bb6a:	f104 0314 	add.w	r3, r4, #20
 800bb6e:	d13f      	bne.n	800bbf0 <__gethex+0x450>
 800bb70:	f8d8 2000 	ldr.w	r2, [r8]
 800bb74:	3a01      	subs	r2, #1
 800bb76:	42b2      	cmp	r2, r6
 800bb78:	d10a      	bne.n	800bb90 <__gethex+0x3f0>
 800bb7a:	1171      	asrs	r1, r6, #5
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb82:	f006 061f 	and.w	r6, r6, #31
 800bb86:	fa02 f606 	lsl.w	r6, r2, r6
 800bb8a:	421e      	tst	r6, r3
 800bb8c:	bf18      	it	ne
 800bb8e:	4617      	movne	r7, r2
 800bb90:	f047 0720 	orr.w	r7, r7, #32
 800bb94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb96:	601c      	str	r4, [r3, #0]
 800bb98:	9b04      	ldr	r3, [sp, #16]
 800bb9a:	601d      	str	r5, [r3, #0]
 800bb9c:	e695      	b.n	800b8ca <__gethex+0x12a>
 800bb9e:	4299      	cmp	r1, r3
 800bba0:	f843 cc04 	str.w	ip, [r3, #-4]
 800bba4:	d8d8      	bhi.n	800bb58 <__gethex+0x3b8>
 800bba6:	68a3      	ldr	r3, [r4, #8]
 800bba8:	459b      	cmp	fp, r3
 800bbaa:	db19      	blt.n	800bbe0 <__gethex+0x440>
 800bbac:	6861      	ldr	r1, [r4, #4]
 800bbae:	ee18 0a10 	vmov	r0, s16
 800bbb2:	3101      	adds	r1, #1
 800bbb4:	f000 f994 	bl	800bee0 <_Balloc>
 800bbb8:	4681      	mov	r9, r0
 800bbba:	b918      	cbnz	r0, 800bbc4 <__gethex+0x424>
 800bbbc:	4b1a      	ldr	r3, [pc, #104]	; (800bc28 <__gethex+0x488>)
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	2184      	movs	r1, #132	; 0x84
 800bbc2:	e6a8      	b.n	800b916 <__gethex+0x176>
 800bbc4:	6922      	ldr	r2, [r4, #16]
 800bbc6:	3202      	adds	r2, #2
 800bbc8:	f104 010c 	add.w	r1, r4, #12
 800bbcc:	0092      	lsls	r2, r2, #2
 800bbce:	300c      	adds	r0, #12
 800bbd0:	f7fe faa0 	bl	800a114 <memcpy>
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	ee18 0a10 	vmov	r0, s16
 800bbda:	f000 f9c1 	bl	800bf60 <_Bfree>
 800bbde:	464c      	mov	r4, r9
 800bbe0:	6923      	ldr	r3, [r4, #16]
 800bbe2:	1c5a      	adds	r2, r3, #1
 800bbe4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bbe8:	6122      	str	r2, [r4, #16]
 800bbea:	2201      	movs	r2, #1
 800bbec:	615a      	str	r2, [r3, #20]
 800bbee:	e7bb      	b.n	800bb68 <__gethex+0x3c8>
 800bbf0:	6922      	ldr	r2, [r4, #16]
 800bbf2:	455a      	cmp	r2, fp
 800bbf4:	dd0b      	ble.n	800bc0e <__gethex+0x46e>
 800bbf6:	2101      	movs	r1, #1
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f7ff fd6a 	bl	800b6d2 <rshift>
 800bbfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc02:	3501      	adds	r5, #1
 800bc04:	42ab      	cmp	r3, r5
 800bc06:	f6ff aed0 	blt.w	800b9aa <__gethex+0x20a>
 800bc0a:	2701      	movs	r7, #1
 800bc0c:	e7c0      	b.n	800bb90 <__gethex+0x3f0>
 800bc0e:	f016 061f 	ands.w	r6, r6, #31
 800bc12:	d0fa      	beq.n	800bc0a <__gethex+0x46a>
 800bc14:	449a      	add	sl, r3
 800bc16:	f1c6 0620 	rsb	r6, r6, #32
 800bc1a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800bc1e:	f000 fa55 	bl	800c0cc <__hi0bits>
 800bc22:	42b0      	cmp	r0, r6
 800bc24:	dbe7      	blt.n	800bbf6 <__gethex+0x456>
 800bc26:	e7f0      	b.n	800bc0a <__gethex+0x46a>
 800bc28:	0800d8e8 	.word	0x0800d8e8

0800bc2c <L_shift>:
 800bc2c:	f1c2 0208 	rsb	r2, r2, #8
 800bc30:	0092      	lsls	r2, r2, #2
 800bc32:	b570      	push	{r4, r5, r6, lr}
 800bc34:	f1c2 0620 	rsb	r6, r2, #32
 800bc38:	6843      	ldr	r3, [r0, #4]
 800bc3a:	6804      	ldr	r4, [r0, #0]
 800bc3c:	fa03 f506 	lsl.w	r5, r3, r6
 800bc40:	432c      	orrs	r4, r5
 800bc42:	40d3      	lsrs	r3, r2
 800bc44:	6004      	str	r4, [r0, #0]
 800bc46:	f840 3f04 	str.w	r3, [r0, #4]!
 800bc4a:	4288      	cmp	r0, r1
 800bc4c:	d3f4      	bcc.n	800bc38 <L_shift+0xc>
 800bc4e:	bd70      	pop	{r4, r5, r6, pc}

0800bc50 <__match>:
 800bc50:	b530      	push	{r4, r5, lr}
 800bc52:	6803      	ldr	r3, [r0, #0]
 800bc54:	3301      	adds	r3, #1
 800bc56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc5a:	b914      	cbnz	r4, 800bc62 <__match+0x12>
 800bc5c:	6003      	str	r3, [r0, #0]
 800bc5e:	2001      	movs	r0, #1
 800bc60:	bd30      	pop	{r4, r5, pc}
 800bc62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bc6a:	2d19      	cmp	r5, #25
 800bc6c:	bf98      	it	ls
 800bc6e:	3220      	addls	r2, #32
 800bc70:	42a2      	cmp	r2, r4
 800bc72:	d0f0      	beq.n	800bc56 <__match+0x6>
 800bc74:	2000      	movs	r0, #0
 800bc76:	e7f3      	b.n	800bc60 <__match+0x10>

0800bc78 <__hexnan>:
 800bc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7c:	680b      	ldr	r3, [r1, #0]
 800bc7e:	6801      	ldr	r1, [r0, #0]
 800bc80:	115e      	asrs	r6, r3, #5
 800bc82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bc86:	f013 031f 	ands.w	r3, r3, #31
 800bc8a:	b087      	sub	sp, #28
 800bc8c:	bf18      	it	ne
 800bc8e:	3604      	addne	r6, #4
 800bc90:	2500      	movs	r5, #0
 800bc92:	1f37      	subs	r7, r6, #4
 800bc94:	4682      	mov	sl, r0
 800bc96:	4690      	mov	r8, r2
 800bc98:	9301      	str	r3, [sp, #4]
 800bc9a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bc9e:	46b9      	mov	r9, r7
 800bca0:	463c      	mov	r4, r7
 800bca2:	9502      	str	r5, [sp, #8]
 800bca4:	46ab      	mov	fp, r5
 800bca6:	784a      	ldrb	r2, [r1, #1]
 800bca8:	1c4b      	adds	r3, r1, #1
 800bcaa:	9303      	str	r3, [sp, #12]
 800bcac:	b342      	cbz	r2, 800bd00 <__hexnan+0x88>
 800bcae:	4610      	mov	r0, r2
 800bcb0:	9105      	str	r1, [sp, #20]
 800bcb2:	9204      	str	r2, [sp, #16]
 800bcb4:	f7ff fd5f 	bl	800b776 <__hexdig_fun>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d14f      	bne.n	800bd5c <__hexnan+0xe4>
 800bcbc:	9a04      	ldr	r2, [sp, #16]
 800bcbe:	9905      	ldr	r1, [sp, #20]
 800bcc0:	2a20      	cmp	r2, #32
 800bcc2:	d818      	bhi.n	800bcf6 <__hexnan+0x7e>
 800bcc4:	9b02      	ldr	r3, [sp, #8]
 800bcc6:	459b      	cmp	fp, r3
 800bcc8:	dd13      	ble.n	800bcf2 <__hexnan+0x7a>
 800bcca:	454c      	cmp	r4, r9
 800bccc:	d206      	bcs.n	800bcdc <__hexnan+0x64>
 800bcce:	2d07      	cmp	r5, #7
 800bcd0:	dc04      	bgt.n	800bcdc <__hexnan+0x64>
 800bcd2:	462a      	mov	r2, r5
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f7ff ffa8 	bl	800bc2c <L_shift>
 800bcdc:	4544      	cmp	r4, r8
 800bcde:	d950      	bls.n	800bd82 <__hexnan+0x10a>
 800bce0:	2300      	movs	r3, #0
 800bce2:	f1a4 0904 	sub.w	r9, r4, #4
 800bce6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bcea:	f8cd b008 	str.w	fp, [sp, #8]
 800bcee:	464c      	mov	r4, r9
 800bcf0:	461d      	mov	r5, r3
 800bcf2:	9903      	ldr	r1, [sp, #12]
 800bcf4:	e7d7      	b.n	800bca6 <__hexnan+0x2e>
 800bcf6:	2a29      	cmp	r2, #41	; 0x29
 800bcf8:	d156      	bne.n	800bda8 <__hexnan+0x130>
 800bcfa:	3102      	adds	r1, #2
 800bcfc:	f8ca 1000 	str.w	r1, [sl]
 800bd00:	f1bb 0f00 	cmp.w	fp, #0
 800bd04:	d050      	beq.n	800bda8 <__hexnan+0x130>
 800bd06:	454c      	cmp	r4, r9
 800bd08:	d206      	bcs.n	800bd18 <__hexnan+0xa0>
 800bd0a:	2d07      	cmp	r5, #7
 800bd0c:	dc04      	bgt.n	800bd18 <__hexnan+0xa0>
 800bd0e:	462a      	mov	r2, r5
 800bd10:	4649      	mov	r1, r9
 800bd12:	4620      	mov	r0, r4
 800bd14:	f7ff ff8a 	bl	800bc2c <L_shift>
 800bd18:	4544      	cmp	r4, r8
 800bd1a:	d934      	bls.n	800bd86 <__hexnan+0x10e>
 800bd1c:	f1a8 0204 	sub.w	r2, r8, #4
 800bd20:	4623      	mov	r3, r4
 800bd22:	f853 1b04 	ldr.w	r1, [r3], #4
 800bd26:	f842 1f04 	str.w	r1, [r2, #4]!
 800bd2a:	429f      	cmp	r7, r3
 800bd2c:	d2f9      	bcs.n	800bd22 <__hexnan+0xaa>
 800bd2e:	1b3b      	subs	r3, r7, r4
 800bd30:	f023 0303 	bic.w	r3, r3, #3
 800bd34:	3304      	adds	r3, #4
 800bd36:	3401      	adds	r4, #1
 800bd38:	3e03      	subs	r6, #3
 800bd3a:	42b4      	cmp	r4, r6
 800bd3c:	bf88      	it	hi
 800bd3e:	2304      	movhi	r3, #4
 800bd40:	4443      	add	r3, r8
 800bd42:	2200      	movs	r2, #0
 800bd44:	f843 2b04 	str.w	r2, [r3], #4
 800bd48:	429f      	cmp	r7, r3
 800bd4a:	d2fb      	bcs.n	800bd44 <__hexnan+0xcc>
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	b91b      	cbnz	r3, 800bd58 <__hexnan+0xe0>
 800bd50:	4547      	cmp	r7, r8
 800bd52:	d127      	bne.n	800bda4 <__hexnan+0x12c>
 800bd54:	2301      	movs	r3, #1
 800bd56:	603b      	str	r3, [r7, #0]
 800bd58:	2005      	movs	r0, #5
 800bd5a:	e026      	b.n	800bdaa <__hexnan+0x132>
 800bd5c:	3501      	adds	r5, #1
 800bd5e:	2d08      	cmp	r5, #8
 800bd60:	f10b 0b01 	add.w	fp, fp, #1
 800bd64:	dd06      	ble.n	800bd74 <__hexnan+0xfc>
 800bd66:	4544      	cmp	r4, r8
 800bd68:	d9c3      	bls.n	800bcf2 <__hexnan+0x7a>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd70:	2501      	movs	r5, #1
 800bd72:	3c04      	subs	r4, #4
 800bd74:	6822      	ldr	r2, [r4, #0]
 800bd76:	f000 000f 	and.w	r0, r0, #15
 800bd7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bd7e:	6022      	str	r2, [r4, #0]
 800bd80:	e7b7      	b.n	800bcf2 <__hexnan+0x7a>
 800bd82:	2508      	movs	r5, #8
 800bd84:	e7b5      	b.n	800bcf2 <__hexnan+0x7a>
 800bd86:	9b01      	ldr	r3, [sp, #4]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d0df      	beq.n	800bd4c <__hexnan+0xd4>
 800bd8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd90:	f1c3 0320 	rsb	r3, r3, #32
 800bd94:	fa22 f303 	lsr.w	r3, r2, r3
 800bd98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bd9c:	401a      	ands	r2, r3
 800bd9e:	f846 2c04 	str.w	r2, [r6, #-4]
 800bda2:	e7d3      	b.n	800bd4c <__hexnan+0xd4>
 800bda4:	3f04      	subs	r7, #4
 800bda6:	e7d1      	b.n	800bd4c <__hexnan+0xd4>
 800bda8:	2004      	movs	r0, #4
 800bdaa:	b007      	add	sp, #28
 800bdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bdb0 <__retarget_lock_init_recursive>:
 800bdb0:	4770      	bx	lr

0800bdb2 <__retarget_lock_acquire_recursive>:
 800bdb2:	4770      	bx	lr

0800bdb4 <__retarget_lock_release_recursive>:
 800bdb4:	4770      	bx	lr
	...

0800bdb8 <_lseek_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	4d07      	ldr	r5, [pc, #28]	; (800bdd8 <_lseek_r+0x20>)
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	4608      	mov	r0, r1
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	602a      	str	r2, [r5, #0]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	f7f9 fac4 	bl	8005354 <_lseek>
 800bdcc:	1c43      	adds	r3, r0, #1
 800bdce:	d102      	bne.n	800bdd6 <_lseek_r+0x1e>
 800bdd0:	682b      	ldr	r3, [r5, #0]
 800bdd2:	b103      	cbz	r3, 800bdd6 <_lseek_r+0x1e>
 800bdd4:	6023      	str	r3, [r4, #0]
 800bdd6:	bd38      	pop	{r3, r4, r5, pc}
 800bdd8:	20005254 	.word	0x20005254

0800bddc <__swhatbuf_r>:
 800bddc:	b570      	push	{r4, r5, r6, lr}
 800bdde:	460e      	mov	r6, r1
 800bde0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde4:	2900      	cmp	r1, #0
 800bde6:	b096      	sub	sp, #88	; 0x58
 800bde8:	4614      	mov	r4, r2
 800bdea:	461d      	mov	r5, r3
 800bdec:	da07      	bge.n	800bdfe <__swhatbuf_r+0x22>
 800bdee:	2300      	movs	r3, #0
 800bdf0:	602b      	str	r3, [r5, #0]
 800bdf2:	89b3      	ldrh	r3, [r6, #12]
 800bdf4:	061a      	lsls	r2, r3, #24
 800bdf6:	d410      	bmi.n	800be1a <__swhatbuf_r+0x3e>
 800bdf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdfc:	e00e      	b.n	800be1c <__swhatbuf_r+0x40>
 800bdfe:	466a      	mov	r2, sp
 800be00:	f001 f8a8 	bl	800cf54 <_fstat_r>
 800be04:	2800      	cmp	r0, #0
 800be06:	dbf2      	blt.n	800bdee <__swhatbuf_r+0x12>
 800be08:	9a01      	ldr	r2, [sp, #4]
 800be0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be12:	425a      	negs	r2, r3
 800be14:	415a      	adcs	r2, r3
 800be16:	602a      	str	r2, [r5, #0]
 800be18:	e7ee      	b.n	800bdf8 <__swhatbuf_r+0x1c>
 800be1a:	2340      	movs	r3, #64	; 0x40
 800be1c:	2000      	movs	r0, #0
 800be1e:	6023      	str	r3, [r4, #0]
 800be20:	b016      	add	sp, #88	; 0x58
 800be22:	bd70      	pop	{r4, r5, r6, pc}

0800be24 <__smakebuf_r>:
 800be24:	898b      	ldrh	r3, [r1, #12]
 800be26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be28:	079d      	lsls	r5, r3, #30
 800be2a:	4606      	mov	r6, r0
 800be2c:	460c      	mov	r4, r1
 800be2e:	d507      	bpl.n	800be40 <__smakebuf_r+0x1c>
 800be30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	6123      	str	r3, [r4, #16]
 800be38:	2301      	movs	r3, #1
 800be3a:	6163      	str	r3, [r4, #20]
 800be3c:	b002      	add	sp, #8
 800be3e:	bd70      	pop	{r4, r5, r6, pc}
 800be40:	ab01      	add	r3, sp, #4
 800be42:	466a      	mov	r2, sp
 800be44:	f7ff ffca 	bl	800bddc <__swhatbuf_r>
 800be48:	9900      	ldr	r1, [sp, #0]
 800be4a:	4605      	mov	r5, r0
 800be4c:	4630      	mov	r0, r6
 800be4e:	f7fe f9c7 	bl	800a1e0 <_malloc_r>
 800be52:	b948      	cbnz	r0, 800be68 <__smakebuf_r+0x44>
 800be54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be58:	059a      	lsls	r2, r3, #22
 800be5a:	d4ef      	bmi.n	800be3c <__smakebuf_r+0x18>
 800be5c:	f023 0303 	bic.w	r3, r3, #3
 800be60:	f043 0302 	orr.w	r3, r3, #2
 800be64:	81a3      	strh	r3, [r4, #12]
 800be66:	e7e3      	b.n	800be30 <__smakebuf_r+0xc>
 800be68:	4b0d      	ldr	r3, [pc, #52]	; (800bea0 <__smakebuf_r+0x7c>)
 800be6a:	62b3      	str	r3, [r6, #40]	; 0x28
 800be6c:	89a3      	ldrh	r3, [r4, #12]
 800be6e:	6020      	str	r0, [r4, #0]
 800be70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be74:	81a3      	strh	r3, [r4, #12]
 800be76:	9b00      	ldr	r3, [sp, #0]
 800be78:	6163      	str	r3, [r4, #20]
 800be7a:	9b01      	ldr	r3, [sp, #4]
 800be7c:	6120      	str	r0, [r4, #16]
 800be7e:	b15b      	cbz	r3, 800be98 <__smakebuf_r+0x74>
 800be80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be84:	4630      	mov	r0, r6
 800be86:	f001 f877 	bl	800cf78 <_isatty_r>
 800be8a:	b128      	cbz	r0, 800be98 <__smakebuf_r+0x74>
 800be8c:	89a3      	ldrh	r3, [r4, #12]
 800be8e:	f023 0303 	bic.w	r3, r3, #3
 800be92:	f043 0301 	orr.w	r3, r3, #1
 800be96:	81a3      	strh	r3, [r4, #12]
 800be98:	89a0      	ldrh	r0, [r4, #12]
 800be9a:	4305      	orrs	r5, r0
 800be9c:	81a5      	strh	r5, [r4, #12]
 800be9e:	e7cd      	b.n	800be3c <__smakebuf_r+0x18>
 800bea0:	0800b531 	.word	0x0800b531

0800bea4 <__ascii_mbtowc>:
 800bea4:	b082      	sub	sp, #8
 800bea6:	b901      	cbnz	r1, 800beaa <__ascii_mbtowc+0x6>
 800bea8:	a901      	add	r1, sp, #4
 800beaa:	b142      	cbz	r2, 800bebe <__ascii_mbtowc+0x1a>
 800beac:	b14b      	cbz	r3, 800bec2 <__ascii_mbtowc+0x1e>
 800beae:	7813      	ldrb	r3, [r2, #0]
 800beb0:	600b      	str	r3, [r1, #0]
 800beb2:	7812      	ldrb	r2, [r2, #0]
 800beb4:	1e10      	subs	r0, r2, #0
 800beb6:	bf18      	it	ne
 800beb8:	2001      	movne	r0, #1
 800beba:	b002      	add	sp, #8
 800bebc:	4770      	bx	lr
 800bebe:	4610      	mov	r0, r2
 800bec0:	e7fb      	b.n	800beba <__ascii_mbtowc+0x16>
 800bec2:	f06f 0001 	mvn.w	r0, #1
 800bec6:	e7f8      	b.n	800beba <__ascii_mbtowc+0x16>

0800bec8 <__malloc_lock>:
 800bec8:	4801      	ldr	r0, [pc, #4]	; (800bed0 <__malloc_lock+0x8>)
 800beca:	f7ff bf72 	b.w	800bdb2 <__retarget_lock_acquire_recursive>
 800bece:	bf00      	nop
 800bed0:	2000524c 	.word	0x2000524c

0800bed4 <__malloc_unlock>:
 800bed4:	4801      	ldr	r0, [pc, #4]	; (800bedc <__malloc_unlock+0x8>)
 800bed6:	f7ff bf6d 	b.w	800bdb4 <__retarget_lock_release_recursive>
 800beda:	bf00      	nop
 800bedc:	2000524c 	.word	0x2000524c

0800bee0 <_Balloc>:
 800bee0:	b570      	push	{r4, r5, r6, lr}
 800bee2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bee4:	4604      	mov	r4, r0
 800bee6:	460d      	mov	r5, r1
 800bee8:	b976      	cbnz	r6, 800bf08 <_Balloc+0x28>
 800beea:	2010      	movs	r0, #16
 800beec:	f7fe f902 	bl	800a0f4 <malloc>
 800bef0:	4602      	mov	r2, r0
 800bef2:	6260      	str	r0, [r4, #36]	; 0x24
 800bef4:	b920      	cbnz	r0, 800bf00 <_Balloc+0x20>
 800bef6:	4b18      	ldr	r3, [pc, #96]	; (800bf58 <_Balloc+0x78>)
 800bef8:	4818      	ldr	r0, [pc, #96]	; (800bf5c <_Balloc+0x7c>)
 800befa:	2166      	movs	r1, #102	; 0x66
 800befc:	f000 fffa 	bl	800cef4 <__assert_func>
 800bf00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf04:	6006      	str	r6, [r0, #0]
 800bf06:	60c6      	str	r6, [r0, #12]
 800bf08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf0a:	68f3      	ldr	r3, [r6, #12]
 800bf0c:	b183      	cbz	r3, 800bf30 <_Balloc+0x50>
 800bf0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf16:	b9b8      	cbnz	r0, 800bf48 <_Balloc+0x68>
 800bf18:	2101      	movs	r1, #1
 800bf1a:	fa01 f605 	lsl.w	r6, r1, r5
 800bf1e:	1d72      	adds	r2, r6, #5
 800bf20:	0092      	lsls	r2, r2, #2
 800bf22:	4620      	mov	r0, r4
 800bf24:	f000 fc97 	bl	800c856 <_calloc_r>
 800bf28:	b160      	cbz	r0, 800bf44 <_Balloc+0x64>
 800bf2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf2e:	e00e      	b.n	800bf4e <_Balloc+0x6e>
 800bf30:	2221      	movs	r2, #33	; 0x21
 800bf32:	2104      	movs	r1, #4
 800bf34:	4620      	mov	r0, r4
 800bf36:	f000 fc8e 	bl	800c856 <_calloc_r>
 800bf3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf3c:	60f0      	str	r0, [r6, #12]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e4      	bne.n	800bf0e <_Balloc+0x2e>
 800bf44:	2000      	movs	r0, #0
 800bf46:	bd70      	pop	{r4, r5, r6, pc}
 800bf48:	6802      	ldr	r2, [r0, #0]
 800bf4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf54:	e7f7      	b.n	800bf46 <_Balloc+0x66>
 800bf56:	bf00      	nop
 800bf58:	0800d978 	.word	0x0800d978
 800bf5c:	0800d98f 	.word	0x0800d98f

0800bf60 <_Bfree>:
 800bf60:	b570      	push	{r4, r5, r6, lr}
 800bf62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf64:	4605      	mov	r5, r0
 800bf66:	460c      	mov	r4, r1
 800bf68:	b976      	cbnz	r6, 800bf88 <_Bfree+0x28>
 800bf6a:	2010      	movs	r0, #16
 800bf6c:	f7fe f8c2 	bl	800a0f4 <malloc>
 800bf70:	4602      	mov	r2, r0
 800bf72:	6268      	str	r0, [r5, #36]	; 0x24
 800bf74:	b920      	cbnz	r0, 800bf80 <_Bfree+0x20>
 800bf76:	4b09      	ldr	r3, [pc, #36]	; (800bf9c <_Bfree+0x3c>)
 800bf78:	4809      	ldr	r0, [pc, #36]	; (800bfa0 <_Bfree+0x40>)
 800bf7a:	218a      	movs	r1, #138	; 0x8a
 800bf7c:	f000 ffba 	bl	800cef4 <__assert_func>
 800bf80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf84:	6006      	str	r6, [r0, #0]
 800bf86:	60c6      	str	r6, [r0, #12]
 800bf88:	b13c      	cbz	r4, 800bf9a <_Bfree+0x3a>
 800bf8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf8c:	6862      	ldr	r2, [r4, #4]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf94:	6021      	str	r1, [r4, #0]
 800bf96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf9a:	bd70      	pop	{r4, r5, r6, pc}
 800bf9c:	0800d978 	.word	0x0800d978
 800bfa0:	0800d98f 	.word	0x0800d98f

0800bfa4 <__multadd>:
 800bfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa8:	690e      	ldr	r6, [r1, #16]
 800bfaa:	4607      	mov	r7, r0
 800bfac:	4698      	mov	r8, r3
 800bfae:	460c      	mov	r4, r1
 800bfb0:	f101 0014 	add.w	r0, r1, #20
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	6805      	ldr	r5, [r0, #0]
 800bfb8:	b2a9      	uxth	r1, r5
 800bfba:	fb02 8101 	mla	r1, r2, r1, r8
 800bfbe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bfc2:	0c2d      	lsrs	r5, r5, #16
 800bfc4:	fb02 c505 	mla	r5, r2, r5, ip
 800bfc8:	b289      	uxth	r1, r1
 800bfca:	3301      	adds	r3, #1
 800bfcc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bfd0:	429e      	cmp	r6, r3
 800bfd2:	f840 1b04 	str.w	r1, [r0], #4
 800bfd6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bfda:	dcec      	bgt.n	800bfb6 <__multadd+0x12>
 800bfdc:	f1b8 0f00 	cmp.w	r8, #0
 800bfe0:	d022      	beq.n	800c028 <__multadd+0x84>
 800bfe2:	68a3      	ldr	r3, [r4, #8]
 800bfe4:	42b3      	cmp	r3, r6
 800bfe6:	dc19      	bgt.n	800c01c <__multadd+0x78>
 800bfe8:	6861      	ldr	r1, [r4, #4]
 800bfea:	4638      	mov	r0, r7
 800bfec:	3101      	adds	r1, #1
 800bfee:	f7ff ff77 	bl	800bee0 <_Balloc>
 800bff2:	4605      	mov	r5, r0
 800bff4:	b928      	cbnz	r0, 800c002 <__multadd+0x5e>
 800bff6:	4602      	mov	r2, r0
 800bff8:	4b0d      	ldr	r3, [pc, #52]	; (800c030 <__multadd+0x8c>)
 800bffa:	480e      	ldr	r0, [pc, #56]	; (800c034 <__multadd+0x90>)
 800bffc:	21b5      	movs	r1, #181	; 0xb5
 800bffe:	f000 ff79 	bl	800cef4 <__assert_func>
 800c002:	6922      	ldr	r2, [r4, #16]
 800c004:	3202      	adds	r2, #2
 800c006:	f104 010c 	add.w	r1, r4, #12
 800c00a:	0092      	lsls	r2, r2, #2
 800c00c:	300c      	adds	r0, #12
 800c00e:	f7fe f881 	bl	800a114 <memcpy>
 800c012:	4621      	mov	r1, r4
 800c014:	4638      	mov	r0, r7
 800c016:	f7ff ffa3 	bl	800bf60 <_Bfree>
 800c01a:	462c      	mov	r4, r5
 800c01c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c020:	3601      	adds	r6, #1
 800c022:	f8c3 8014 	str.w	r8, [r3, #20]
 800c026:	6126      	str	r6, [r4, #16]
 800c028:	4620      	mov	r0, r4
 800c02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c02e:	bf00      	nop
 800c030:	0800d8e8 	.word	0x0800d8e8
 800c034:	0800d98f 	.word	0x0800d98f

0800c038 <__s2b>:
 800c038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c03c:	460c      	mov	r4, r1
 800c03e:	4615      	mov	r5, r2
 800c040:	461f      	mov	r7, r3
 800c042:	2209      	movs	r2, #9
 800c044:	3308      	adds	r3, #8
 800c046:	4606      	mov	r6, r0
 800c048:	fb93 f3f2 	sdiv	r3, r3, r2
 800c04c:	2100      	movs	r1, #0
 800c04e:	2201      	movs	r2, #1
 800c050:	429a      	cmp	r2, r3
 800c052:	db09      	blt.n	800c068 <__s2b+0x30>
 800c054:	4630      	mov	r0, r6
 800c056:	f7ff ff43 	bl	800bee0 <_Balloc>
 800c05a:	b940      	cbnz	r0, 800c06e <__s2b+0x36>
 800c05c:	4602      	mov	r2, r0
 800c05e:	4b19      	ldr	r3, [pc, #100]	; (800c0c4 <__s2b+0x8c>)
 800c060:	4819      	ldr	r0, [pc, #100]	; (800c0c8 <__s2b+0x90>)
 800c062:	21ce      	movs	r1, #206	; 0xce
 800c064:	f000 ff46 	bl	800cef4 <__assert_func>
 800c068:	0052      	lsls	r2, r2, #1
 800c06a:	3101      	adds	r1, #1
 800c06c:	e7f0      	b.n	800c050 <__s2b+0x18>
 800c06e:	9b08      	ldr	r3, [sp, #32]
 800c070:	6143      	str	r3, [r0, #20]
 800c072:	2d09      	cmp	r5, #9
 800c074:	f04f 0301 	mov.w	r3, #1
 800c078:	6103      	str	r3, [r0, #16]
 800c07a:	dd16      	ble.n	800c0aa <__s2b+0x72>
 800c07c:	f104 0909 	add.w	r9, r4, #9
 800c080:	46c8      	mov	r8, r9
 800c082:	442c      	add	r4, r5
 800c084:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c088:	4601      	mov	r1, r0
 800c08a:	3b30      	subs	r3, #48	; 0x30
 800c08c:	220a      	movs	r2, #10
 800c08e:	4630      	mov	r0, r6
 800c090:	f7ff ff88 	bl	800bfa4 <__multadd>
 800c094:	45a0      	cmp	r8, r4
 800c096:	d1f5      	bne.n	800c084 <__s2b+0x4c>
 800c098:	f1a5 0408 	sub.w	r4, r5, #8
 800c09c:	444c      	add	r4, r9
 800c09e:	1b2d      	subs	r5, r5, r4
 800c0a0:	1963      	adds	r3, r4, r5
 800c0a2:	42bb      	cmp	r3, r7
 800c0a4:	db04      	blt.n	800c0b0 <__s2b+0x78>
 800c0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0aa:	340a      	adds	r4, #10
 800c0ac:	2509      	movs	r5, #9
 800c0ae:	e7f6      	b.n	800c09e <__s2b+0x66>
 800c0b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0b4:	4601      	mov	r1, r0
 800c0b6:	3b30      	subs	r3, #48	; 0x30
 800c0b8:	220a      	movs	r2, #10
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	f7ff ff72 	bl	800bfa4 <__multadd>
 800c0c0:	e7ee      	b.n	800c0a0 <__s2b+0x68>
 800c0c2:	bf00      	nop
 800c0c4:	0800d8e8 	.word	0x0800d8e8
 800c0c8:	0800d98f 	.word	0x0800d98f

0800c0cc <__hi0bits>:
 800c0cc:	0c03      	lsrs	r3, r0, #16
 800c0ce:	041b      	lsls	r3, r3, #16
 800c0d0:	b9d3      	cbnz	r3, 800c108 <__hi0bits+0x3c>
 800c0d2:	0400      	lsls	r0, r0, #16
 800c0d4:	2310      	movs	r3, #16
 800c0d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c0da:	bf04      	itt	eq
 800c0dc:	0200      	lsleq	r0, r0, #8
 800c0de:	3308      	addeq	r3, #8
 800c0e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c0e4:	bf04      	itt	eq
 800c0e6:	0100      	lsleq	r0, r0, #4
 800c0e8:	3304      	addeq	r3, #4
 800c0ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c0ee:	bf04      	itt	eq
 800c0f0:	0080      	lsleq	r0, r0, #2
 800c0f2:	3302      	addeq	r3, #2
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	db05      	blt.n	800c104 <__hi0bits+0x38>
 800c0f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c0fc:	f103 0301 	add.w	r3, r3, #1
 800c100:	bf08      	it	eq
 800c102:	2320      	moveq	r3, #32
 800c104:	4618      	mov	r0, r3
 800c106:	4770      	bx	lr
 800c108:	2300      	movs	r3, #0
 800c10a:	e7e4      	b.n	800c0d6 <__hi0bits+0xa>

0800c10c <__lo0bits>:
 800c10c:	6803      	ldr	r3, [r0, #0]
 800c10e:	f013 0207 	ands.w	r2, r3, #7
 800c112:	4601      	mov	r1, r0
 800c114:	d00b      	beq.n	800c12e <__lo0bits+0x22>
 800c116:	07da      	lsls	r2, r3, #31
 800c118:	d424      	bmi.n	800c164 <__lo0bits+0x58>
 800c11a:	0798      	lsls	r0, r3, #30
 800c11c:	bf49      	itett	mi
 800c11e:	085b      	lsrmi	r3, r3, #1
 800c120:	089b      	lsrpl	r3, r3, #2
 800c122:	2001      	movmi	r0, #1
 800c124:	600b      	strmi	r3, [r1, #0]
 800c126:	bf5c      	itt	pl
 800c128:	600b      	strpl	r3, [r1, #0]
 800c12a:	2002      	movpl	r0, #2
 800c12c:	4770      	bx	lr
 800c12e:	b298      	uxth	r0, r3
 800c130:	b9b0      	cbnz	r0, 800c160 <__lo0bits+0x54>
 800c132:	0c1b      	lsrs	r3, r3, #16
 800c134:	2010      	movs	r0, #16
 800c136:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c13a:	bf04      	itt	eq
 800c13c:	0a1b      	lsreq	r3, r3, #8
 800c13e:	3008      	addeq	r0, #8
 800c140:	071a      	lsls	r2, r3, #28
 800c142:	bf04      	itt	eq
 800c144:	091b      	lsreq	r3, r3, #4
 800c146:	3004      	addeq	r0, #4
 800c148:	079a      	lsls	r2, r3, #30
 800c14a:	bf04      	itt	eq
 800c14c:	089b      	lsreq	r3, r3, #2
 800c14e:	3002      	addeq	r0, #2
 800c150:	07da      	lsls	r2, r3, #31
 800c152:	d403      	bmi.n	800c15c <__lo0bits+0x50>
 800c154:	085b      	lsrs	r3, r3, #1
 800c156:	f100 0001 	add.w	r0, r0, #1
 800c15a:	d005      	beq.n	800c168 <__lo0bits+0x5c>
 800c15c:	600b      	str	r3, [r1, #0]
 800c15e:	4770      	bx	lr
 800c160:	4610      	mov	r0, r2
 800c162:	e7e8      	b.n	800c136 <__lo0bits+0x2a>
 800c164:	2000      	movs	r0, #0
 800c166:	4770      	bx	lr
 800c168:	2020      	movs	r0, #32
 800c16a:	4770      	bx	lr

0800c16c <__i2b>:
 800c16c:	b510      	push	{r4, lr}
 800c16e:	460c      	mov	r4, r1
 800c170:	2101      	movs	r1, #1
 800c172:	f7ff feb5 	bl	800bee0 <_Balloc>
 800c176:	4602      	mov	r2, r0
 800c178:	b928      	cbnz	r0, 800c186 <__i2b+0x1a>
 800c17a:	4b05      	ldr	r3, [pc, #20]	; (800c190 <__i2b+0x24>)
 800c17c:	4805      	ldr	r0, [pc, #20]	; (800c194 <__i2b+0x28>)
 800c17e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c182:	f000 feb7 	bl	800cef4 <__assert_func>
 800c186:	2301      	movs	r3, #1
 800c188:	6144      	str	r4, [r0, #20]
 800c18a:	6103      	str	r3, [r0, #16]
 800c18c:	bd10      	pop	{r4, pc}
 800c18e:	bf00      	nop
 800c190:	0800d8e8 	.word	0x0800d8e8
 800c194:	0800d98f 	.word	0x0800d98f

0800c198 <__multiply>:
 800c198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19c:	4614      	mov	r4, r2
 800c19e:	690a      	ldr	r2, [r1, #16]
 800c1a0:	6923      	ldr	r3, [r4, #16]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	bfb8      	it	lt
 800c1a6:	460b      	movlt	r3, r1
 800c1a8:	460d      	mov	r5, r1
 800c1aa:	bfbc      	itt	lt
 800c1ac:	4625      	movlt	r5, r4
 800c1ae:	461c      	movlt	r4, r3
 800c1b0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c1b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c1b8:	68ab      	ldr	r3, [r5, #8]
 800c1ba:	6869      	ldr	r1, [r5, #4]
 800c1bc:	eb0a 0709 	add.w	r7, sl, r9
 800c1c0:	42bb      	cmp	r3, r7
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	bfb8      	it	lt
 800c1c6:	3101      	addlt	r1, #1
 800c1c8:	f7ff fe8a 	bl	800bee0 <_Balloc>
 800c1cc:	b930      	cbnz	r0, 800c1dc <__multiply+0x44>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	4b42      	ldr	r3, [pc, #264]	; (800c2dc <__multiply+0x144>)
 800c1d2:	4843      	ldr	r0, [pc, #268]	; (800c2e0 <__multiply+0x148>)
 800c1d4:	f240 115d 	movw	r1, #349	; 0x15d
 800c1d8:	f000 fe8c 	bl	800cef4 <__assert_func>
 800c1dc:	f100 0614 	add.w	r6, r0, #20
 800c1e0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c1e4:	4633      	mov	r3, r6
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	4543      	cmp	r3, r8
 800c1ea:	d31e      	bcc.n	800c22a <__multiply+0x92>
 800c1ec:	f105 0c14 	add.w	ip, r5, #20
 800c1f0:	f104 0314 	add.w	r3, r4, #20
 800c1f4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c1f8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c1fc:	9202      	str	r2, [sp, #8]
 800c1fe:	ebac 0205 	sub.w	r2, ip, r5
 800c202:	3a15      	subs	r2, #21
 800c204:	f022 0203 	bic.w	r2, r2, #3
 800c208:	3204      	adds	r2, #4
 800c20a:	f105 0115 	add.w	r1, r5, #21
 800c20e:	458c      	cmp	ip, r1
 800c210:	bf38      	it	cc
 800c212:	2204      	movcc	r2, #4
 800c214:	9201      	str	r2, [sp, #4]
 800c216:	9a02      	ldr	r2, [sp, #8]
 800c218:	9303      	str	r3, [sp, #12]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d808      	bhi.n	800c230 <__multiply+0x98>
 800c21e:	2f00      	cmp	r7, #0
 800c220:	dc55      	bgt.n	800c2ce <__multiply+0x136>
 800c222:	6107      	str	r7, [r0, #16]
 800c224:	b005      	add	sp, #20
 800c226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c22a:	f843 2b04 	str.w	r2, [r3], #4
 800c22e:	e7db      	b.n	800c1e8 <__multiply+0x50>
 800c230:	f8b3 a000 	ldrh.w	sl, [r3]
 800c234:	f1ba 0f00 	cmp.w	sl, #0
 800c238:	d020      	beq.n	800c27c <__multiply+0xe4>
 800c23a:	f105 0e14 	add.w	lr, r5, #20
 800c23e:	46b1      	mov	r9, r6
 800c240:	2200      	movs	r2, #0
 800c242:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c246:	f8d9 b000 	ldr.w	fp, [r9]
 800c24a:	b2a1      	uxth	r1, r4
 800c24c:	fa1f fb8b 	uxth.w	fp, fp
 800c250:	fb0a b101 	mla	r1, sl, r1, fp
 800c254:	4411      	add	r1, r2
 800c256:	f8d9 2000 	ldr.w	r2, [r9]
 800c25a:	0c24      	lsrs	r4, r4, #16
 800c25c:	0c12      	lsrs	r2, r2, #16
 800c25e:	fb0a 2404 	mla	r4, sl, r4, r2
 800c262:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c266:	b289      	uxth	r1, r1
 800c268:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c26c:	45f4      	cmp	ip, lr
 800c26e:	f849 1b04 	str.w	r1, [r9], #4
 800c272:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c276:	d8e4      	bhi.n	800c242 <__multiply+0xaa>
 800c278:	9901      	ldr	r1, [sp, #4]
 800c27a:	5072      	str	r2, [r6, r1]
 800c27c:	9a03      	ldr	r2, [sp, #12]
 800c27e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c282:	3304      	adds	r3, #4
 800c284:	f1b9 0f00 	cmp.w	r9, #0
 800c288:	d01f      	beq.n	800c2ca <__multiply+0x132>
 800c28a:	6834      	ldr	r4, [r6, #0]
 800c28c:	f105 0114 	add.w	r1, r5, #20
 800c290:	46b6      	mov	lr, r6
 800c292:	f04f 0a00 	mov.w	sl, #0
 800c296:	880a      	ldrh	r2, [r1, #0]
 800c298:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c29c:	fb09 b202 	mla	r2, r9, r2, fp
 800c2a0:	4492      	add	sl, r2
 800c2a2:	b2a4      	uxth	r4, r4
 800c2a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c2a8:	f84e 4b04 	str.w	r4, [lr], #4
 800c2ac:	f851 4b04 	ldr.w	r4, [r1], #4
 800c2b0:	f8be 2000 	ldrh.w	r2, [lr]
 800c2b4:	0c24      	lsrs	r4, r4, #16
 800c2b6:	fb09 2404 	mla	r4, r9, r4, r2
 800c2ba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c2be:	458c      	cmp	ip, r1
 800c2c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c2c4:	d8e7      	bhi.n	800c296 <__multiply+0xfe>
 800c2c6:	9a01      	ldr	r2, [sp, #4]
 800c2c8:	50b4      	str	r4, [r6, r2]
 800c2ca:	3604      	adds	r6, #4
 800c2cc:	e7a3      	b.n	800c216 <__multiply+0x7e>
 800c2ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1a5      	bne.n	800c222 <__multiply+0x8a>
 800c2d6:	3f01      	subs	r7, #1
 800c2d8:	e7a1      	b.n	800c21e <__multiply+0x86>
 800c2da:	bf00      	nop
 800c2dc:	0800d8e8 	.word	0x0800d8e8
 800c2e0:	0800d98f 	.word	0x0800d98f

0800c2e4 <__pow5mult>:
 800c2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2e8:	4615      	mov	r5, r2
 800c2ea:	f012 0203 	ands.w	r2, r2, #3
 800c2ee:	4606      	mov	r6, r0
 800c2f0:	460f      	mov	r7, r1
 800c2f2:	d007      	beq.n	800c304 <__pow5mult+0x20>
 800c2f4:	4c25      	ldr	r4, [pc, #148]	; (800c38c <__pow5mult+0xa8>)
 800c2f6:	3a01      	subs	r2, #1
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2fe:	f7ff fe51 	bl	800bfa4 <__multadd>
 800c302:	4607      	mov	r7, r0
 800c304:	10ad      	asrs	r5, r5, #2
 800c306:	d03d      	beq.n	800c384 <__pow5mult+0xa0>
 800c308:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c30a:	b97c      	cbnz	r4, 800c32c <__pow5mult+0x48>
 800c30c:	2010      	movs	r0, #16
 800c30e:	f7fd fef1 	bl	800a0f4 <malloc>
 800c312:	4602      	mov	r2, r0
 800c314:	6270      	str	r0, [r6, #36]	; 0x24
 800c316:	b928      	cbnz	r0, 800c324 <__pow5mult+0x40>
 800c318:	4b1d      	ldr	r3, [pc, #116]	; (800c390 <__pow5mult+0xac>)
 800c31a:	481e      	ldr	r0, [pc, #120]	; (800c394 <__pow5mult+0xb0>)
 800c31c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c320:	f000 fde8 	bl	800cef4 <__assert_func>
 800c324:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c328:	6004      	str	r4, [r0, #0]
 800c32a:	60c4      	str	r4, [r0, #12]
 800c32c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c330:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c334:	b94c      	cbnz	r4, 800c34a <__pow5mult+0x66>
 800c336:	f240 2171 	movw	r1, #625	; 0x271
 800c33a:	4630      	mov	r0, r6
 800c33c:	f7ff ff16 	bl	800c16c <__i2b>
 800c340:	2300      	movs	r3, #0
 800c342:	f8c8 0008 	str.w	r0, [r8, #8]
 800c346:	4604      	mov	r4, r0
 800c348:	6003      	str	r3, [r0, #0]
 800c34a:	f04f 0900 	mov.w	r9, #0
 800c34e:	07eb      	lsls	r3, r5, #31
 800c350:	d50a      	bpl.n	800c368 <__pow5mult+0x84>
 800c352:	4639      	mov	r1, r7
 800c354:	4622      	mov	r2, r4
 800c356:	4630      	mov	r0, r6
 800c358:	f7ff ff1e 	bl	800c198 <__multiply>
 800c35c:	4639      	mov	r1, r7
 800c35e:	4680      	mov	r8, r0
 800c360:	4630      	mov	r0, r6
 800c362:	f7ff fdfd 	bl	800bf60 <_Bfree>
 800c366:	4647      	mov	r7, r8
 800c368:	106d      	asrs	r5, r5, #1
 800c36a:	d00b      	beq.n	800c384 <__pow5mult+0xa0>
 800c36c:	6820      	ldr	r0, [r4, #0]
 800c36e:	b938      	cbnz	r0, 800c380 <__pow5mult+0x9c>
 800c370:	4622      	mov	r2, r4
 800c372:	4621      	mov	r1, r4
 800c374:	4630      	mov	r0, r6
 800c376:	f7ff ff0f 	bl	800c198 <__multiply>
 800c37a:	6020      	str	r0, [r4, #0]
 800c37c:	f8c0 9000 	str.w	r9, [r0]
 800c380:	4604      	mov	r4, r0
 800c382:	e7e4      	b.n	800c34e <__pow5mult+0x6a>
 800c384:	4638      	mov	r0, r7
 800c386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c38a:	bf00      	nop
 800c38c:	0800dae0 	.word	0x0800dae0
 800c390:	0800d978 	.word	0x0800d978
 800c394:	0800d98f 	.word	0x0800d98f

0800c398 <__lshift>:
 800c398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c39c:	460c      	mov	r4, r1
 800c39e:	6849      	ldr	r1, [r1, #4]
 800c3a0:	6923      	ldr	r3, [r4, #16]
 800c3a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3a6:	68a3      	ldr	r3, [r4, #8]
 800c3a8:	4607      	mov	r7, r0
 800c3aa:	4691      	mov	r9, r2
 800c3ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3b0:	f108 0601 	add.w	r6, r8, #1
 800c3b4:	42b3      	cmp	r3, r6
 800c3b6:	db0b      	blt.n	800c3d0 <__lshift+0x38>
 800c3b8:	4638      	mov	r0, r7
 800c3ba:	f7ff fd91 	bl	800bee0 <_Balloc>
 800c3be:	4605      	mov	r5, r0
 800c3c0:	b948      	cbnz	r0, 800c3d6 <__lshift+0x3e>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	4b28      	ldr	r3, [pc, #160]	; (800c468 <__lshift+0xd0>)
 800c3c6:	4829      	ldr	r0, [pc, #164]	; (800c46c <__lshift+0xd4>)
 800c3c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c3cc:	f000 fd92 	bl	800cef4 <__assert_func>
 800c3d0:	3101      	adds	r1, #1
 800c3d2:	005b      	lsls	r3, r3, #1
 800c3d4:	e7ee      	b.n	800c3b4 <__lshift+0x1c>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	f100 0114 	add.w	r1, r0, #20
 800c3dc:	f100 0210 	add.w	r2, r0, #16
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	4553      	cmp	r3, sl
 800c3e4:	db33      	blt.n	800c44e <__lshift+0xb6>
 800c3e6:	6920      	ldr	r0, [r4, #16]
 800c3e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3ec:	f104 0314 	add.w	r3, r4, #20
 800c3f0:	f019 091f 	ands.w	r9, r9, #31
 800c3f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3fc:	d02b      	beq.n	800c456 <__lshift+0xbe>
 800c3fe:	f1c9 0e20 	rsb	lr, r9, #32
 800c402:	468a      	mov	sl, r1
 800c404:	2200      	movs	r2, #0
 800c406:	6818      	ldr	r0, [r3, #0]
 800c408:	fa00 f009 	lsl.w	r0, r0, r9
 800c40c:	4302      	orrs	r2, r0
 800c40e:	f84a 2b04 	str.w	r2, [sl], #4
 800c412:	f853 2b04 	ldr.w	r2, [r3], #4
 800c416:	459c      	cmp	ip, r3
 800c418:	fa22 f20e 	lsr.w	r2, r2, lr
 800c41c:	d8f3      	bhi.n	800c406 <__lshift+0x6e>
 800c41e:	ebac 0304 	sub.w	r3, ip, r4
 800c422:	3b15      	subs	r3, #21
 800c424:	f023 0303 	bic.w	r3, r3, #3
 800c428:	3304      	adds	r3, #4
 800c42a:	f104 0015 	add.w	r0, r4, #21
 800c42e:	4584      	cmp	ip, r0
 800c430:	bf38      	it	cc
 800c432:	2304      	movcc	r3, #4
 800c434:	50ca      	str	r2, [r1, r3]
 800c436:	b10a      	cbz	r2, 800c43c <__lshift+0xa4>
 800c438:	f108 0602 	add.w	r6, r8, #2
 800c43c:	3e01      	subs	r6, #1
 800c43e:	4638      	mov	r0, r7
 800c440:	612e      	str	r6, [r5, #16]
 800c442:	4621      	mov	r1, r4
 800c444:	f7ff fd8c 	bl	800bf60 <_Bfree>
 800c448:	4628      	mov	r0, r5
 800c44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c44e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c452:	3301      	adds	r3, #1
 800c454:	e7c5      	b.n	800c3e2 <__lshift+0x4a>
 800c456:	3904      	subs	r1, #4
 800c458:	f853 2b04 	ldr.w	r2, [r3], #4
 800c45c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c460:	459c      	cmp	ip, r3
 800c462:	d8f9      	bhi.n	800c458 <__lshift+0xc0>
 800c464:	e7ea      	b.n	800c43c <__lshift+0xa4>
 800c466:	bf00      	nop
 800c468:	0800d8e8 	.word	0x0800d8e8
 800c46c:	0800d98f 	.word	0x0800d98f

0800c470 <__mcmp>:
 800c470:	b530      	push	{r4, r5, lr}
 800c472:	6902      	ldr	r2, [r0, #16]
 800c474:	690c      	ldr	r4, [r1, #16]
 800c476:	1b12      	subs	r2, r2, r4
 800c478:	d10e      	bne.n	800c498 <__mcmp+0x28>
 800c47a:	f100 0314 	add.w	r3, r0, #20
 800c47e:	3114      	adds	r1, #20
 800c480:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c484:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c488:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c48c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c490:	42a5      	cmp	r5, r4
 800c492:	d003      	beq.n	800c49c <__mcmp+0x2c>
 800c494:	d305      	bcc.n	800c4a2 <__mcmp+0x32>
 800c496:	2201      	movs	r2, #1
 800c498:	4610      	mov	r0, r2
 800c49a:	bd30      	pop	{r4, r5, pc}
 800c49c:	4283      	cmp	r3, r0
 800c49e:	d3f3      	bcc.n	800c488 <__mcmp+0x18>
 800c4a0:	e7fa      	b.n	800c498 <__mcmp+0x28>
 800c4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4a6:	e7f7      	b.n	800c498 <__mcmp+0x28>

0800c4a8 <__mdiff>:
 800c4a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	460c      	mov	r4, r1
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	4617      	mov	r7, r2
 800c4b6:	f7ff ffdb 	bl	800c470 <__mcmp>
 800c4ba:	1e05      	subs	r5, r0, #0
 800c4bc:	d110      	bne.n	800c4e0 <__mdiff+0x38>
 800c4be:	4629      	mov	r1, r5
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	f7ff fd0d 	bl	800bee0 <_Balloc>
 800c4c6:	b930      	cbnz	r0, 800c4d6 <__mdiff+0x2e>
 800c4c8:	4b39      	ldr	r3, [pc, #228]	; (800c5b0 <__mdiff+0x108>)
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	f240 2132 	movw	r1, #562	; 0x232
 800c4d0:	4838      	ldr	r0, [pc, #224]	; (800c5b4 <__mdiff+0x10c>)
 800c4d2:	f000 fd0f 	bl	800cef4 <__assert_func>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e0:	bfa4      	itt	ge
 800c4e2:	463b      	movge	r3, r7
 800c4e4:	4627      	movge	r7, r4
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	6879      	ldr	r1, [r7, #4]
 800c4ea:	bfa6      	itte	ge
 800c4ec:	461c      	movge	r4, r3
 800c4ee:	2500      	movge	r5, #0
 800c4f0:	2501      	movlt	r5, #1
 800c4f2:	f7ff fcf5 	bl	800bee0 <_Balloc>
 800c4f6:	b920      	cbnz	r0, 800c502 <__mdiff+0x5a>
 800c4f8:	4b2d      	ldr	r3, [pc, #180]	; (800c5b0 <__mdiff+0x108>)
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c500:	e7e6      	b.n	800c4d0 <__mdiff+0x28>
 800c502:	693e      	ldr	r6, [r7, #16]
 800c504:	60c5      	str	r5, [r0, #12]
 800c506:	6925      	ldr	r5, [r4, #16]
 800c508:	f107 0114 	add.w	r1, r7, #20
 800c50c:	f104 0914 	add.w	r9, r4, #20
 800c510:	f100 0e14 	add.w	lr, r0, #20
 800c514:	f107 0210 	add.w	r2, r7, #16
 800c518:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c51c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c520:	46f2      	mov	sl, lr
 800c522:	2700      	movs	r7, #0
 800c524:	f859 3b04 	ldr.w	r3, [r9], #4
 800c528:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c52c:	fa1f f883 	uxth.w	r8, r3
 800c530:	fa17 f78b 	uxtah	r7, r7, fp
 800c534:	0c1b      	lsrs	r3, r3, #16
 800c536:	eba7 0808 	sub.w	r8, r7, r8
 800c53a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c53e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c542:	fa1f f888 	uxth.w	r8, r8
 800c546:	141f      	asrs	r7, r3, #16
 800c548:	454d      	cmp	r5, r9
 800c54a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c54e:	f84a 3b04 	str.w	r3, [sl], #4
 800c552:	d8e7      	bhi.n	800c524 <__mdiff+0x7c>
 800c554:	1b2b      	subs	r3, r5, r4
 800c556:	3b15      	subs	r3, #21
 800c558:	f023 0303 	bic.w	r3, r3, #3
 800c55c:	3304      	adds	r3, #4
 800c55e:	3415      	adds	r4, #21
 800c560:	42a5      	cmp	r5, r4
 800c562:	bf38      	it	cc
 800c564:	2304      	movcc	r3, #4
 800c566:	4419      	add	r1, r3
 800c568:	4473      	add	r3, lr
 800c56a:	469e      	mov	lr, r3
 800c56c:	460d      	mov	r5, r1
 800c56e:	4565      	cmp	r5, ip
 800c570:	d30e      	bcc.n	800c590 <__mdiff+0xe8>
 800c572:	f10c 0203 	add.w	r2, ip, #3
 800c576:	1a52      	subs	r2, r2, r1
 800c578:	f022 0203 	bic.w	r2, r2, #3
 800c57c:	3903      	subs	r1, #3
 800c57e:	458c      	cmp	ip, r1
 800c580:	bf38      	it	cc
 800c582:	2200      	movcc	r2, #0
 800c584:	441a      	add	r2, r3
 800c586:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c58a:	b17b      	cbz	r3, 800c5ac <__mdiff+0x104>
 800c58c:	6106      	str	r6, [r0, #16]
 800c58e:	e7a5      	b.n	800c4dc <__mdiff+0x34>
 800c590:	f855 8b04 	ldr.w	r8, [r5], #4
 800c594:	fa17 f488 	uxtah	r4, r7, r8
 800c598:	1422      	asrs	r2, r4, #16
 800c59a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c59e:	b2a4      	uxth	r4, r4
 800c5a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c5a4:	f84e 4b04 	str.w	r4, [lr], #4
 800c5a8:	1417      	asrs	r7, r2, #16
 800c5aa:	e7e0      	b.n	800c56e <__mdiff+0xc6>
 800c5ac:	3e01      	subs	r6, #1
 800c5ae:	e7ea      	b.n	800c586 <__mdiff+0xde>
 800c5b0:	0800d8e8 	.word	0x0800d8e8
 800c5b4:	0800d98f 	.word	0x0800d98f

0800c5b8 <__ulp>:
 800c5b8:	b082      	sub	sp, #8
 800c5ba:	ed8d 0b00 	vstr	d0, [sp]
 800c5be:	9b01      	ldr	r3, [sp, #4]
 800c5c0:	4912      	ldr	r1, [pc, #72]	; (800c60c <__ulp+0x54>)
 800c5c2:	4019      	ands	r1, r3
 800c5c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c5c8:	2900      	cmp	r1, #0
 800c5ca:	dd05      	ble.n	800c5d8 <__ulp+0x20>
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	ec43 2b10 	vmov	d0, r2, r3
 800c5d4:	b002      	add	sp, #8
 800c5d6:	4770      	bx	lr
 800c5d8:	4249      	negs	r1, r1
 800c5da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c5de:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c5e2:	f04f 0200 	mov.w	r2, #0
 800c5e6:	f04f 0300 	mov.w	r3, #0
 800c5ea:	da04      	bge.n	800c5f6 <__ulp+0x3e>
 800c5ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c5f0:	fa41 f300 	asr.w	r3, r1, r0
 800c5f4:	e7ec      	b.n	800c5d0 <__ulp+0x18>
 800c5f6:	f1a0 0114 	sub.w	r1, r0, #20
 800c5fa:	291e      	cmp	r1, #30
 800c5fc:	bfda      	itte	le
 800c5fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c602:	fa20 f101 	lsrle.w	r1, r0, r1
 800c606:	2101      	movgt	r1, #1
 800c608:	460a      	mov	r2, r1
 800c60a:	e7e1      	b.n	800c5d0 <__ulp+0x18>
 800c60c:	7ff00000 	.word	0x7ff00000

0800c610 <__b2d>:
 800c610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c612:	6905      	ldr	r5, [r0, #16]
 800c614:	f100 0714 	add.w	r7, r0, #20
 800c618:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c61c:	1f2e      	subs	r6, r5, #4
 800c61e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c622:	4620      	mov	r0, r4
 800c624:	f7ff fd52 	bl	800c0cc <__hi0bits>
 800c628:	f1c0 0320 	rsb	r3, r0, #32
 800c62c:	280a      	cmp	r0, #10
 800c62e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c6ac <__b2d+0x9c>
 800c632:	600b      	str	r3, [r1, #0]
 800c634:	dc14      	bgt.n	800c660 <__b2d+0x50>
 800c636:	f1c0 0e0b 	rsb	lr, r0, #11
 800c63a:	fa24 f10e 	lsr.w	r1, r4, lr
 800c63e:	42b7      	cmp	r7, r6
 800c640:	ea41 030c 	orr.w	r3, r1, ip
 800c644:	bf34      	ite	cc
 800c646:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c64a:	2100      	movcs	r1, #0
 800c64c:	3015      	adds	r0, #21
 800c64e:	fa04 f000 	lsl.w	r0, r4, r0
 800c652:	fa21 f10e 	lsr.w	r1, r1, lr
 800c656:	ea40 0201 	orr.w	r2, r0, r1
 800c65a:	ec43 2b10 	vmov	d0, r2, r3
 800c65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c660:	42b7      	cmp	r7, r6
 800c662:	bf3a      	itte	cc
 800c664:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c668:	f1a5 0608 	subcc.w	r6, r5, #8
 800c66c:	2100      	movcs	r1, #0
 800c66e:	380b      	subs	r0, #11
 800c670:	d017      	beq.n	800c6a2 <__b2d+0x92>
 800c672:	f1c0 0c20 	rsb	ip, r0, #32
 800c676:	fa04 f500 	lsl.w	r5, r4, r0
 800c67a:	42be      	cmp	r6, r7
 800c67c:	fa21 f40c 	lsr.w	r4, r1, ip
 800c680:	ea45 0504 	orr.w	r5, r5, r4
 800c684:	bf8c      	ite	hi
 800c686:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c68a:	2400      	movls	r4, #0
 800c68c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c690:	fa01 f000 	lsl.w	r0, r1, r0
 800c694:	fa24 f40c 	lsr.w	r4, r4, ip
 800c698:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c69c:	ea40 0204 	orr.w	r2, r0, r4
 800c6a0:	e7db      	b.n	800c65a <__b2d+0x4a>
 800c6a2:	ea44 030c 	orr.w	r3, r4, ip
 800c6a6:	460a      	mov	r2, r1
 800c6a8:	e7d7      	b.n	800c65a <__b2d+0x4a>
 800c6aa:	bf00      	nop
 800c6ac:	3ff00000 	.word	0x3ff00000

0800c6b0 <__d2b>:
 800c6b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6b4:	4689      	mov	r9, r1
 800c6b6:	2101      	movs	r1, #1
 800c6b8:	ec57 6b10 	vmov	r6, r7, d0
 800c6bc:	4690      	mov	r8, r2
 800c6be:	f7ff fc0f 	bl	800bee0 <_Balloc>
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	b930      	cbnz	r0, 800c6d4 <__d2b+0x24>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	4b25      	ldr	r3, [pc, #148]	; (800c760 <__d2b+0xb0>)
 800c6ca:	4826      	ldr	r0, [pc, #152]	; (800c764 <__d2b+0xb4>)
 800c6cc:	f240 310a 	movw	r1, #778	; 0x30a
 800c6d0:	f000 fc10 	bl	800cef4 <__assert_func>
 800c6d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c6d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6dc:	bb35      	cbnz	r5, 800c72c <__d2b+0x7c>
 800c6de:	2e00      	cmp	r6, #0
 800c6e0:	9301      	str	r3, [sp, #4]
 800c6e2:	d028      	beq.n	800c736 <__d2b+0x86>
 800c6e4:	4668      	mov	r0, sp
 800c6e6:	9600      	str	r6, [sp, #0]
 800c6e8:	f7ff fd10 	bl	800c10c <__lo0bits>
 800c6ec:	9900      	ldr	r1, [sp, #0]
 800c6ee:	b300      	cbz	r0, 800c732 <__d2b+0x82>
 800c6f0:	9a01      	ldr	r2, [sp, #4]
 800c6f2:	f1c0 0320 	rsb	r3, r0, #32
 800c6f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c6fa:	430b      	orrs	r3, r1
 800c6fc:	40c2      	lsrs	r2, r0
 800c6fe:	6163      	str	r3, [r4, #20]
 800c700:	9201      	str	r2, [sp, #4]
 800c702:	9b01      	ldr	r3, [sp, #4]
 800c704:	61a3      	str	r3, [r4, #24]
 800c706:	2b00      	cmp	r3, #0
 800c708:	bf14      	ite	ne
 800c70a:	2202      	movne	r2, #2
 800c70c:	2201      	moveq	r2, #1
 800c70e:	6122      	str	r2, [r4, #16]
 800c710:	b1d5      	cbz	r5, 800c748 <__d2b+0x98>
 800c712:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c716:	4405      	add	r5, r0
 800c718:	f8c9 5000 	str.w	r5, [r9]
 800c71c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c720:	f8c8 0000 	str.w	r0, [r8]
 800c724:	4620      	mov	r0, r4
 800c726:	b003      	add	sp, #12
 800c728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c72c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c730:	e7d5      	b.n	800c6de <__d2b+0x2e>
 800c732:	6161      	str	r1, [r4, #20]
 800c734:	e7e5      	b.n	800c702 <__d2b+0x52>
 800c736:	a801      	add	r0, sp, #4
 800c738:	f7ff fce8 	bl	800c10c <__lo0bits>
 800c73c:	9b01      	ldr	r3, [sp, #4]
 800c73e:	6163      	str	r3, [r4, #20]
 800c740:	2201      	movs	r2, #1
 800c742:	6122      	str	r2, [r4, #16]
 800c744:	3020      	adds	r0, #32
 800c746:	e7e3      	b.n	800c710 <__d2b+0x60>
 800c748:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c74c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c750:	f8c9 0000 	str.w	r0, [r9]
 800c754:	6918      	ldr	r0, [r3, #16]
 800c756:	f7ff fcb9 	bl	800c0cc <__hi0bits>
 800c75a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c75e:	e7df      	b.n	800c720 <__d2b+0x70>
 800c760:	0800d8e8 	.word	0x0800d8e8
 800c764:	0800d98f 	.word	0x0800d98f

0800c768 <__ratio>:
 800c768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c76c:	4688      	mov	r8, r1
 800c76e:	4669      	mov	r1, sp
 800c770:	4681      	mov	r9, r0
 800c772:	f7ff ff4d 	bl	800c610 <__b2d>
 800c776:	a901      	add	r1, sp, #4
 800c778:	4640      	mov	r0, r8
 800c77a:	ec55 4b10 	vmov	r4, r5, d0
 800c77e:	f7ff ff47 	bl	800c610 <__b2d>
 800c782:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c786:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c78a:	eba3 0c02 	sub.w	ip, r3, r2
 800c78e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c792:	1a9b      	subs	r3, r3, r2
 800c794:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c798:	ec51 0b10 	vmov	r0, r1, d0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	bfd6      	itet	le
 800c7a0:	460a      	movle	r2, r1
 800c7a2:	462a      	movgt	r2, r5
 800c7a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c7a8:	468b      	mov	fp, r1
 800c7aa:	462f      	mov	r7, r5
 800c7ac:	bfd4      	ite	le
 800c7ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c7b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	ee10 2a10 	vmov	r2, s0
 800c7bc:	465b      	mov	r3, fp
 800c7be:	4639      	mov	r1, r7
 800c7c0:	f7f4 f85c 	bl	800087c <__aeabi_ddiv>
 800c7c4:	ec41 0b10 	vmov	d0, r0, r1
 800c7c8:	b003      	add	sp, #12
 800c7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7ce <__copybits>:
 800c7ce:	3901      	subs	r1, #1
 800c7d0:	b570      	push	{r4, r5, r6, lr}
 800c7d2:	1149      	asrs	r1, r1, #5
 800c7d4:	6914      	ldr	r4, [r2, #16]
 800c7d6:	3101      	adds	r1, #1
 800c7d8:	f102 0314 	add.w	r3, r2, #20
 800c7dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c7e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c7e4:	1f05      	subs	r5, r0, #4
 800c7e6:	42a3      	cmp	r3, r4
 800c7e8:	d30c      	bcc.n	800c804 <__copybits+0x36>
 800c7ea:	1aa3      	subs	r3, r4, r2
 800c7ec:	3b11      	subs	r3, #17
 800c7ee:	f023 0303 	bic.w	r3, r3, #3
 800c7f2:	3211      	adds	r2, #17
 800c7f4:	42a2      	cmp	r2, r4
 800c7f6:	bf88      	it	hi
 800c7f8:	2300      	movhi	r3, #0
 800c7fa:	4418      	add	r0, r3
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	4288      	cmp	r0, r1
 800c800:	d305      	bcc.n	800c80e <__copybits+0x40>
 800c802:	bd70      	pop	{r4, r5, r6, pc}
 800c804:	f853 6b04 	ldr.w	r6, [r3], #4
 800c808:	f845 6f04 	str.w	r6, [r5, #4]!
 800c80c:	e7eb      	b.n	800c7e6 <__copybits+0x18>
 800c80e:	f840 3b04 	str.w	r3, [r0], #4
 800c812:	e7f4      	b.n	800c7fe <__copybits+0x30>

0800c814 <__any_on>:
 800c814:	f100 0214 	add.w	r2, r0, #20
 800c818:	6900      	ldr	r0, [r0, #16]
 800c81a:	114b      	asrs	r3, r1, #5
 800c81c:	4298      	cmp	r0, r3
 800c81e:	b510      	push	{r4, lr}
 800c820:	db11      	blt.n	800c846 <__any_on+0x32>
 800c822:	dd0a      	ble.n	800c83a <__any_on+0x26>
 800c824:	f011 011f 	ands.w	r1, r1, #31
 800c828:	d007      	beq.n	800c83a <__any_on+0x26>
 800c82a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c82e:	fa24 f001 	lsr.w	r0, r4, r1
 800c832:	fa00 f101 	lsl.w	r1, r0, r1
 800c836:	428c      	cmp	r4, r1
 800c838:	d10b      	bne.n	800c852 <__any_on+0x3e>
 800c83a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c83e:	4293      	cmp	r3, r2
 800c840:	d803      	bhi.n	800c84a <__any_on+0x36>
 800c842:	2000      	movs	r0, #0
 800c844:	bd10      	pop	{r4, pc}
 800c846:	4603      	mov	r3, r0
 800c848:	e7f7      	b.n	800c83a <__any_on+0x26>
 800c84a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c84e:	2900      	cmp	r1, #0
 800c850:	d0f5      	beq.n	800c83e <__any_on+0x2a>
 800c852:	2001      	movs	r0, #1
 800c854:	e7f6      	b.n	800c844 <__any_on+0x30>

0800c856 <_calloc_r>:
 800c856:	b513      	push	{r0, r1, r4, lr}
 800c858:	434a      	muls	r2, r1
 800c85a:	4611      	mov	r1, r2
 800c85c:	9201      	str	r2, [sp, #4]
 800c85e:	f7fd fcbf 	bl	800a1e0 <_malloc_r>
 800c862:	4604      	mov	r4, r0
 800c864:	b118      	cbz	r0, 800c86e <_calloc_r+0x18>
 800c866:	9a01      	ldr	r2, [sp, #4]
 800c868:	2100      	movs	r1, #0
 800c86a:	f7fd fc61 	bl	800a130 <memset>
 800c86e:	4620      	mov	r0, r4
 800c870:	b002      	add	sp, #8
 800c872:	bd10      	pop	{r4, pc}

0800c874 <_realloc_r>:
 800c874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c876:	4607      	mov	r7, r0
 800c878:	4614      	mov	r4, r2
 800c87a:	460e      	mov	r6, r1
 800c87c:	b921      	cbnz	r1, 800c888 <_realloc_r+0x14>
 800c87e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c882:	4611      	mov	r1, r2
 800c884:	f7fd bcac 	b.w	800a1e0 <_malloc_r>
 800c888:	b922      	cbnz	r2, 800c894 <_realloc_r+0x20>
 800c88a:	f7fd fc59 	bl	800a140 <_free_r>
 800c88e:	4625      	mov	r5, r4
 800c890:	4628      	mov	r0, r5
 800c892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c894:	f000 fb9a 	bl	800cfcc <_malloc_usable_size_r>
 800c898:	42a0      	cmp	r0, r4
 800c89a:	d20f      	bcs.n	800c8bc <_realloc_r+0x48>
 800c89c:	4621      	mov	r1, r4
 800c89e:	4638      	mov	r0, r7
 800c8a0:	f7fd fc9e 	bl	800a1e0 <_malloc_r>
 800c8a4:	4605      	mov	r5, r0
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d0f2      	beq.n	800c890 <_realloc_r+0x1c>
 800c8aa:	4631      	mov	r1, r6
 800c8ac:	4622      	mov	r2, r4
 800c8ae:	f7fd fc31 	bl	800a114 <memcpy>
 800c8b2:	4631      	mov	r1, r6
 800c8b4:	4638      	mov	r0, r7
 800c8b6:	f7fd fc43 	bl	800a140 <_free_r>
 800c8ba:	e7e9      	b.n	800c890 <_realloc_r+0x1c>
 800c8bc:	4635      	mov	r5, r6
 800c8be:	e7e7      	b.n	800c890 <_realloc_r+0x1c>

0800c8c0 <__ssputs_r>:
 800c8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8c4:	688e      	ldr	r6, [r1, #8]
 800c8c6:	429e      	cmp	r6, r3
 800c8c8:	4682      	mov	sl, r0
 800c8ca:	460c      	mov	r4, r1
 800c8cc:	4690      	mov	r8, r2
 800c8ce:	461f      	mov	r7, r3
 800c8d0:	d838      	bhi.n	800c944 <__ssputs_r+0x84>
 800c8d2:	898a      	ldrh	r2, [r1, #12]
 800c8d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8d8:	d032      	beq.n	800c940 <__ssputs_r+0x80>
 800c8da:	6825      	ldr	r5, [r4, #0]
 800c8dc:	6909      	ldr	r1, [r1, #16]
 800c8de:	eba5 0901 	sub.w	r9, r5, r1
 800c8e2:	6965      	ldr	r5, [r4, #20]
 800c8e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	444b      	add	r3, r9
 800c8f0:	106d      	asrs	r5, r5, #1
 800c8f2:	429d      	cmp	r5, r3
 800c8f4:	bf38      	it	cc
 800c8f6:	461d      	movcc	r5, r3
 800c8f8:	0553      	lsls	r3, r2, #21
 800c8fa:	d531      	bpl.n	800c960 <__ssputs_r+0xa0>
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	f7fd fc6f 	bl	800a1e0 <_malloc_r>
 800c902:	4606      	mov	r6, r0
 800c904:	b950      	cbnz	r0, 800c91c <__ssputs_r+0x5c>
 800c906:	230c      	movs	r3, #12
 800c908:	f8ca 3000 	str.w	r3, [sl]
 800c90c:	89a3      	ldrh	r3, [r4, #12]
 800c90e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c912:	81a3      	strh	r3, [r4, #12]
 800c914:	f04f 30ff 	mov.w	r0, #4294967295
 800c918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c91c:	6921      	ldr	r1, [r4, #16]
 800c91e:	464a      	mov	r2, r9
 800c920:	f7fd fbf8 	bl	800a114 <memcpy>
 800c924:	89a3      	ldrh	r3, [r4, #12]
 800c926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c92a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c92e:	81a3      	strh	r3, [r4, #12]
 800c930:	6126      	str	r6, [r4, #16]
 800c932:	6165      	str	r5, [r4, #20]
 800c934:	444e      	add	r6, r9
 800c936:	eba5 0509 	sub.w	r5, r5, r9
 800c93a:	6026      	str	r6, [r4, #0]
 800c93c:	60a5      	str	r5, [r4, #8]
 800c93e:	463e      	mov	r6, r7
 800c940:	42be      	cmp	r6, r7
 800c942:	d900      	bls.n	800c946 <__ssputs_r+0x86>
 800c944:	463e      	mov	r6, r7
 800c946:	4632      	mov	r2, r6
 800c948:	6820      	ldr	r0, [r4, #0]
 800c94a:	4641      	mov	r1, r8
 800c94c:	f000 fb24 	bl	800cf98 <memmove>
 800c950:	68a3      	ldr	r3, [r4, #8]
 800c952:	6822      	ldr	r2, [r4, #0]
 800c954:	1b9b      	subs	r3, r3, r6
 800c956:	4432      	add	r2, r6
 800c958:	60a3      	str	r3, [r4, #8]
 800c95a:	6022      	str	r2, [r4, #0]
 800c95c:	2000      	movs	r0, #0
 800c95e:	e7db      	b.n	800c918 <__ssputs_r+0x58>
 800c960:	462a      	mov	r2, r5
 800c962:	f7ff ff87 	bl	800c874 <_realloc_r>
 800c966:	4606      	mov	r6, r0
 800c968:	2800      	cmp	r0, #0
 800c96a:	d1e1      	bne.n	800c930 <__ssputs_r+0x70>
 800c96c:	6921      	ldr	r1, [r4, #16]
 800c96e:	4650      	mov	r0, sl
 800c970:	f7fd fbe6 	bl	800a140 <_free_r>
 800c974:	e7c7      	b.n	800c906 <__ssputs_r+0x46>
	...

0800c978 <_svfiprintf_r>:
 800c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	4698      	mov	r8, r3
 800c97e:	898b      	ldrh	r3, [r1, #12]
 800c980:	061b      	lsls	r3, r3, #24
 800c982:	b09d      	sub	sp, #116	; 0x74
 800c984:	4607      	mov	r7, r0
 800c986:	460d      	mov	r5, r1
 800c988:	4614      	mov	r4, r2
 800c98a:	d50e      	bpl.n	800c9aa <_svfiprintf_r+0x32>
 800c98c:	690b      	ldr	r3, [r1, #16]
 800c98e:	b963      	cbnz	r3, 800c9aa <_svfiprintf_r+0x32>
 800c990:	2140      	movs	r1, #64	; 0x40
 800c992:	f7fd fc25 	bl	800a1e0 <_malloc_r>
 800c996:	6028      	str	r0, [r5, #0]
 800c998:	6128      	str	r0, [r5, #16]
 800c99a:	b920      	cbnz	r0, 800c9a6 <_svfiprintf_r+0x2e>
 800c99c:	230c      	movs	r3, #12
 800c99e:	603b      	str	r3, [r7, #0]
 800c9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a4:	e0d1      	b.n	800cb4a <_svfiprintf_r+0x1d2>
 800c9a6:	2340      	movs	r3, #64	; 0x40
 800c9a8:	616b      	str	r3, [r5, #20]
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c9ae:	2320      	movs	r3, #32
 800c9b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9b8:	2330      	movs	r3, #48	; 0x30
 800c9ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cb64 <_svfiprintf_r+0x1ec>
 800c9be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9c2:	f04f 0901 	mov.w	r9, #1
 800c9c6:	4623      	mov	r3, r4
 800c9c8:	469a      	mov	sl, r3
 800c9ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9ce:	b10a      	cbz	r2, 800c9d4 <_svfiprintf_r+0x5c>
 800c9d0:	2a25      	cmp	r2, #37	; 0x25
 800c9d2:	d1f9      	bne.n	800c9c8 <_svfiprintf_r+0x50>
 800c9d4:	ebba 0b04 	subs.w	fp, sl, r4
 800c9d8:	d00b      	beq.n	800c9f2 <_svfiprintf_r+0x7a>
 800c9da:	465b      	mov	r3, fp
 800c9dc:	4622      	mov	r2, r4
 800c9de:	4629      	mov	r1, r5
 800c9e0:	4638      	mov	r0, r7
 800c9e2:	f7ff ff6d 	bl	800c8c0 <__ssputs_r>
 800c9e6:	3001      	adds	r0, #1
 800c9e8:	f000 80aa 	beq.w	800cb40 <_svfiprintf_r+0x1c8>
 800c9ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9ee:	445a      	add	r2, fp
 800c9f0:	9209      	str	r2, [sp, #36]	; 0x24
 800c9f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f000 80a2 	beq.w	800cb40 <_svfiprintf_r+0x1c8>
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800ca02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca06:	f10a 0a01 	add.w	sl, sl, #1
 800ca0a:	9304      	str	r3, [sp, #16]
 800ca0c:	9307      	str	r3, [sp, #28]
 800ca0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca12:	931a      	str	r3, [sp, #104]	; 0x68
 800ca14:	4654      	mov	r4, sl
 800ca16:	2205      	movs	r2, #5
 800ca18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca1c:	4851      	ldr	r0, [pc, #324]	; (800cb64 <_svfiprintf_r+0x1ec>)
 800ca1e:	f7f3 fbf7 	bl	8000210 <memchr>
 800ca22:	9a04      	ldr	r2, [sp, #16]
 800ca24:	b9d8      	cbnz	r0, 800ca5e <_svfiprintf_r+0xe6>
 800ca26:	06d0      	lsls	r0, r2, #27
 800ca28:	bf44      	itt	mi
 800ca2a:	2320      	movmi	r3, #32
 800ca2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca30:	0711      	lsls	r1, r2, #28
 800ca32:	bf44      	itt	mi
 800ca34:	232b      	movmi	r3, #43	; 0x2b
 800ca36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca40:	d015      	beq.n	800ca6e <_svfiprintf_r+0xf6>
 800ca42:	9a07      	ldr	r2, [sp, #28]
 800ca44:	4654      	mov	r4, sl
 800ca46:	2000      	movs	r0, #0
 800ca48:	f04f 0c0a 	mov.w	ip, #10
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca52:	3b30      	subs	r3, #48	; 0x30
 800ca54:	2b09      	cmp	r3, #9
 800ca56:	d94e      	bls.n	800caf6 <_svfiprintf_r+0x17e>
 800ca58:	b1b0      	cbz	r0, 800ca88 <_svfiprintf_r+0x110>
 800ca5a:	9207      	str	r2, [sp, #28]
 800ca5c:	e014      	b.n	800ca88 <_svfiprintf_r+0x110>
 800ca5e:	eba0 0308 	sub.w	r3, r0, r8
 800ca62:	fa09 f303 	lsl.w	r3, r9, r3
 800ca66:	4313      	orrs	r3, r2
 800ca68:	9304      	str	r3, [sp, #16]
 800ca6a:	46a2      	mov	sl, r4
 800ca6c:	e7d2      	b.n	800ca14 <_svfiprintf_r+0x9c>
 800ca6e:	9b03      	ldr	r3, [sp, #12]
 800ca70:	1d19      	adds	r1, r3, #4
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	9103      	str	r1, [sp, #12]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	bfbb      	ittet	lt
 800ca7a:	425b      	neglt	r3, r3
 800ca7c:	f042 0202 	orrlt.w	r2, r2, #2
 800ca80:	9307      	strge	r3, [sp, #28]
 800ca82:	9307      	strlt	r3, [sp, #28]
 800ca84:	bfb8      	it	lt
 800ca86:	9204      	strlt	r2, [sp, #16]
 800ca88:	7823      	ldrb	r3, [r4, #0]
 800ca8a:	2b2e      	cmp	r3, #46	; 0x2e
 800ca8c:	d10c      	bne.n	800caa8 <_svfiprintf_r+0x130>
 800ca8e:	7863      	ldrb	r3, [r4, #1]
 800ca90:	2b2a      	cmp	r3, #42	; 0x2a
 800ca92:	d135      	bne.n	800cb00 <_svfiprintf_r+0x188>
 800ca94:	9b03      	ldr	r3, [sp, #12]
 800ca96:	1d1a      	adds	r2, r3, #4
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	9203      	str	r2, [sp, #12]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	bfb8      	it	lt
 800caa0:	f04f 33ff 	movlt.w	r3, #4294967295
 800caa4:	3402      	adds	r4, #2
 800caa6:	9305      	str	r3, [sp, #20]
 800caa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cb74 <_svfiprintf_r+0x1fc>
 800caac:	7821      	ldrb	r1, [r4, #0]
 800caae:	2203      	movs	r2, #3
 800cab0:	4650      	mov	r0, sl
 800cab2:	f7f3 fbad 	bl	8000210 <memchr>
 800cab6:	b140      	cbz	r0, 800caca <_svfiprintf_r+0x152>
 800cab8:	2340      	movs	r3, #64	; 0x40
 800caba:	eba0 000a 	sub.w	r0, r0, sl
 800cabe:	fa03 f000 	lsl.w	r0, r3, r0
 800cac2:	9b04      	ldr	r3, [sp, #16]
 800cac4:	4303      	orrs	r3, r0
 800cac6:	3401      	adds	r4, #1
 800cac8:	9304      	str	r3, [sp, #16]
 800caca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cace:	4826      	ldr	r0, [pc, #152]	; (800cb68 <_svfiprintf_r+0x1f0>)
 800cad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cad4:	2206      	movs	r2, #6
 800cad6:	f7f3 fb9b 	bl	8000210 <memchr>
 800cada:	2800      	cmp	r0, #0
 800cadc:	d038      	beq.n	800cb50 <_svfiprintf_r+0x1d8>
 800cade:	4b23      	ldr	r3, [pc, #140]	; (800cb6c <_svfiprintf_r+0x1f4>)
 800cae0:	bb1b      	cbnz	r3, 800cb2a <_svfiprintf_r+0x1b2>
 800cae2:	9b03      	ldr	r3, [sp, #12]
 800cae4:	3307      	adds	r3, #7
 800cae6:	f023 0307 	bic.w	r3, r3, #7
 800caea:	3308      	adds	r3, #8
 800caec:	9303      	str	r3, [sp, #12]
 800caee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caf0:	4433      	add	r3, r6
 800caf2:	9309      	str	r3, [sp, #36]	; 0x24
 800caf4:	e767      	b.n	800c9c6 <_svfiprintf_r+0x4e>
 800caf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cafa:	460c      	mov	r4, r1
 800cafc:	2001      	movs	r0, #1
 800cafe:	e7a5      	b.n	800ca4c <_svfiprintf_r+0xd4>
 800cb00:	2300      	movs	r3, #0
 800cb02:	3401      	adds	r4, #1
 800cb04:	9305      	str	r3, [sp, #20]
 800cb06:	4619      	mov	r1, r3
 800cb08:	f04f 0c0a 	mov.w	ip, #10
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb12:	3a30      	subs	r2, #48	; 0x30
 800cb14:	2a09      	cmp	r2, #9
 800cb16:	d903      	bls.n	800cb20 <_svfiprintf_r+0x1a8>
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d0c5      	beq.n	800caa8 <_svfiprintf_r+0x130>
 800cb1c:	9105      	str	r1, [sp, #20]
 800cb1e:	e7c3      	b.n	800caa8 <_svfiprintf_r+0x130>
 800cb20:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb24:	4604      	mov	r4, r0
 800cb26:	2301      	movs	r3, #1
 800cb28:	e7f0      	b.n	800cb0c <_svfiprintf_r+0x194>
 800cb2a:	ab03      	add	r3, sp, #12
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	462a      	mov	r2, r5
 800cb30:	4b0f      	ldr	r3, [pc, #60]	; (800cb70 <_svfiprintf_r+0x1f8>)
 800cb32:	a904      	add	r1, sp, #16
 800cb34:	4638      	mov	r0, r7
 800cb36:	f3af 8000 	nop.w
 800cb3a:	1c42      	adds	r2, r0, #1
 800cb3c:	4606      	mov	r6, r0
 800cb3e:	d1d6      	bne.n	800caee <_svfiprintf_r+0x176>
 800cb40:	89ab      	ldrh	r3, [r5, #12]
 800cb42:	065b      	lsls	r3, r3, #25
 800cb44:	f53f af2c 	bmi.w	800c9a0 <_svfiprintf_r+0x28>
 800cb48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb4a:	b01d      	add	sp, #116	; 0x74
 800cb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb50:	ab03      	add	r3, sp, #12
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	462a      	mov	r2, r5
 800cb56:	4b06      	ldr	r3, [pc, #24]	; (800cb70 <_svfiprintf_r+0x1f8>)
 800cb58:	a904      	add	r1, sp, #16
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	f000 f87a 	bl	800cc54 <_printf_i>
 800cb60:	e7eb      	b.n	800cb3a <_svfiprintf_r+0x1c2>
 800cb62:	bf00      	nop
 800cb64:	0800daec 	.word	0x0800daec
 800cb68:	0800daf6 	.word	0x0800daf6
 800cb6c:	00000000 	.word	0x00000000
 800cb70:	0800c8c1 	.word	0x0800c8c1
 800cb74:	0800daf2 	.word	0x0800daf2

0800cb78 <_printf_common>:
 800cb78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb7c:	4616      	mov	r6, r2
 800cb7e:	4699      	mov	r9, r3
 800cb80:	688a      	ldr	r2, [r1, #8]
 800cb82:	690b      	ldr	r3, [r1, #16]
 800cb84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	bfb8      	it	lt
 800cb8c:	4613      	movlt	r3, r2
 800cb8e:	6033      	str	r3, [r6, #0]
 800cb90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb94:	4607      	mov	r7, r0
 800cb96:	460c      	mov	r4, r1
 800cb98:	b10a      	cbz	r2, 800cb9e <_printf_common+0x26>
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	6033      	str	r3, [r6, #0]
 800cb9e:	6823      	ldr	r3, [r4, #0]
 800cba0:	0699      	lsls	r1, r3, #26
 800cba2:	bf42      	ittt	mi
 800cba4:	6833      	ldrmi	r3, [r6, #0]
 800cba6:	3302      	addmi	r3, #2
 800cba8:	6033      	strmi	r3, [r6, #0]
 800cbaa:	6825      	ldr	r5, [r4, #0]
 800cbac:	f015 0506 	ands.w	r5, r5, #6
 800cbb0:	d106      	bne.n	800cbc0 <_printf_common+0x48>
 800cbb2:	f104 0a19 	add.w	sl, r4, #25
 800cbb6:	68e3      	ldr	r3, [r4, #12]
 800cbb8:	6832      	ldr	r2, [r6, #0]
 800cbba:	1a9b      	subs	r3, r3, r2
 800cbbc:	42ab      	cmp	r3, r5
 800cbbe:	dc26      	bgt.n	800cc0e <_printf_common+0x96>
 800cbc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cbc4:	1e13      	subs	r3, r2, #0
 800cbc6:	6822      	ldr	r2, [r4, #0]
 800cbc8:	bf18      	it	ne
 800cbca:	2301      	movne	r3, #1
 800cbcc:	0692      	lsls	r2, r2, #26
 800cbce:	d42b      	bmi.n	800cc28 <_printf_common+0xb0>
 800cbd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbd4:	4649      	mov	r1, r9
 800cbd6:	4638      	mov	r0, r7
 800cbd8:	47c0      	blx	r8
 800cbda:	3001      	adds	r0, #1
 800cbdc:	d01e      	beq.n	800cc1c <_printf_common+0xa4>
 800cbde:	6823      	ldr	r3, [r4, #0]
 800cbe0:	68e5      	ldr	r5, [r4, #12]
 800cbe2:	6832      	ldr	r2, [r6, #0]
 800cbe4:	f003 0306 	and.w	r3, r3, #6
 800cbe8:	2b04      	cmp	r3, #4
 800cbea:	bf08      	it	eq
 800cbec:	1aad      	subeq	r5, r5, r2
 800cbee:	68a3      	ldr	r3, [r4, #8]
 800cbf0:	6922      	ldr	r2, [r4, #16]
 800cbf2:	bf0c      	ite	eq
 800cbf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbf8:	2500      	movne	r5, #0
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	bfc4      	itt	gt
 800cbfe:	1a9b      	subgt	r3, r3, r2
 800cc00:	18ed      	addgt	r5, r5, r3
 800cc02:	2600      	movs	r6, #0
 800cc04:	341a      	adds	r4, #26
 800cc06:	42b5      	cmp	r5, r6
 800cc08:	d11a      	bne.n	800cc40 <_printf_common+0xc8>
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	e008      	b.n	800cc20 <_printf_common+0xa8>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	4652      	mov	r2, sl
 800cc12:	4649      	mov	r1, r9
 800cc14:	4638      	mov	r0, r7
 800cc16:	47c0      	blx	r8
 800cc18:	3001      	adds	r0, #1
 800cc1a:	d103      	bne.n	800cc24 <_printf_common+0xac>
 800cc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc24:	3501      	adds	r5, #1
 800cc26:	e7c6      	b.n	800cbb6 <_printf_common+0x3e>
 800cc28:	18e1      	adds	r1, r4, r3
 800cc2a:	1c5a      	adds	r2, r3, #1
 800cc2c:	2030      	movs	r0, #48	; 0x30
 800cc2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc32:	4422      	add	r2, r4
 800cc34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc3c:	3302      	adds	r3, #2
 800cc3e:	e7c7      	b.n	800cbd0 <_printf_common+0x58>
 800cc40:	2301      	movs	r3, #1
 800cc42:	4622      	mov	r2, r4
 800cc44:	4649      	mov	r1, r9
 800cc46:	4638      	mov	r0, r7
 800cc48:	47c0      	blx	r8
 800cc4a:	3001      	adds	r0, #1
 800cc4c:	d0e6      	beq.n	800cc1c <_printf_common+0xa4>
 800cc4e:	3601      	adds	r6, #1
 800cc50:	e7d9      	b.n	800cc06 <_printf_common+0x8e>
	...

0800cc54 <_printf_i>:
 800cc54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc58:	460c      	mov	r4, r1
 800cc5a:	4691      	mov	r9, r2
 800cc5c:	7e27      	ldrb	r7, [r4, #24]
 800cc5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cc60:	2f78      	cmp	r7, #120	; 0x78
 800cc62:	4680      	mov	r8, r0
 800cc64:	469a      	mov	sl, r3
 800cc66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc6a:	d807      	bhi.n	800cc7c <_printf_i+0x28>
 800cc6c:	2f62      	cmp	r7, #98	; 0x62
 800cc6e:	d80a      	bhi.n	800cc86 <_printf_i+0x32>
 800cc70:	2f00      	cmp	r7, #0
 800cc72:	f000 80d8 	beq.w	800ce26 <_printf_i+0x1d2>
 800cc76:	2f58      	cmp	r7, #88	; 0x58
 800cc78:	f000 80a3 	beq.w	800cdc2 <_printf_i+0x16e>
 800cc7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cc80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc84:	e03a      	b.n	800ccfc <_printf_i+0xa8>
 800cc86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc8a:	2b15      	cmp	r3, #21
 800cc8c:	d8f6      	bhi.n	800cc7c <_printf_i+0x28>
 800cc8e:	a001      	add	r0, pc, #4	; (adr r0, 800cc94 <_printf_i+0x40>)
 800cc90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cc94:	0800cced 	.word	0x0800cced
 800cc98:	0800cd01 	.word	0x0800cd01
 800cc9c:	0800cc7d 	.word	0x0800cc7d
 800cca0:	0800cc7d 	.word	0x0800cc7d
 800cca4:	0800cc7d 	.word	0x0800cc7d
 800cca8:	0800cc7d 	.word	0x0800cc7d
 800ccac:	0800cd01 	.word	0x0800cd01
 800ccb0:	0800cc7d 	.word	0x0800cc7d
 800ccb4:	0800cc7d 	.word	0x0800cc7d
 800ccb8:	0800cc7d 	.word	0x0800cc7d
 800ccbc:	0800cc7d 	.word	0x0800cc7d
 800ccc0:	0800ce0d 	.word	0x0800ce0d
 800ccc4:	0800cd31 	.word	0x0800cd31
 800ccc8:	0800cdef 	.word	0x0800cdef
 800cccc:	0800cc7d 	.word	0x0800cc7d
 800ccd0:	0800cc7d 	.word	0x0800cc7d
 800ccd4:	0800ce2f 	.word	0x0800ce2f
 800ccd8:	0800cc7d 	.word	0x0800cc7d
 800ccdc:	0800cd31 	.word	0x0800cd31
 800cce0:	0800cc7d 	.word	0x0800cc7d
 800cce4:	0800cc7d 	.word	0x0800cc7d
 800cce8:	0800cdf7 	.word	0x0800cdf7
 800ccec:	680b      	ldr	r3, [r1, #0]
 800ccee:	1d1a      	adds	r2, r3, #4
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	600a      	str	r2, [r1, #0]
 800ccf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ccf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e0a3      	b.n	800ce48 <_printf_i+0x1f4>
 800cd00:	6825      	ldr	r5, [r4, #0]
 800cd02:	6808      	ldr	r0, [r1, #0]
 800cd04:	062e      	lsls	r6, r5, #24
 800cd06:	f100 0304 	add.w	r3, r0, #4
 800cd0a:	d50a      	bpl.n	800cd22 <_printf_i+0xce>
 800cd0c:	6805      	ldr	r5, [r0, #0]
 800cd0e:	600b      	str	r3, [r1, #0]
 800cd10:	2d00      	cmp	r5, #0
 800cd12:	da03      	bge.n	800cd1c <_printf_i+0xc8>
 800cd14:	232d      	movs	r3, #45	; 0x2d
 800cd16:	426d      	negs	r5, r5
 800cd18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd1c:	485e      	ldr	r0, [pc, #376]	; (800ce98 <_printf_i+0x244>)
 800cd1e:	230a      	movs	r3, #10
 800cd20:	e019      	b.n	800cd56 <_printf_i+0x102>
 800cd22:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cd26:	6805      	ldr	r5, [r0, #0]
 800cd28:	600b      	str	r3, [r1, #0]
 800cd2a:	bf18      	it	ne
 800cd2c:	b22d      	sxthne	r5, r5
 800cd2e:	e7ef      	b.n	800cd10 <_printf_i+0xbc>
 800cd30:	680b      	ldr	r3, [r1, #0]
 800cd32:	6825      	ldr	r5, [r4, #0]
 800cd34:	1d18      	adds	r0, r3, #4
 800cd36:	6008      	str	r0, [r1, #0]
 800cd38:	0628      	lsls	r0, r5, #24
 800cd3a:	d501      	bpl.n	800cd40 <_printf_i+0xec>
 800cd3c:	681d      	ldr	r5, [r3, #0]
 800cd3e:	e002      	b.n	800cd46 <_printf_i+0xf2>
 800cd40:	0669      	lsls	r1, r5, #25
 800cd42:	d5fb      	bpl.n	800cd3c <_printf_i+0xe8>
 800cd44:	881d      	ldrh	r5, [r3, #0]
 800cd46:	4854      	ldr	r0, [pc, #336]	; (800ce98 <_printf_i+0x244>)
 800cd48:	2f6f      	cmp	r7, #111	; 0x6f
 800cd4a:	bf0c      	ite	eq
 800cd4c:	2308      	moveq	r3, #8
 800cd4e:	230a      	movne	r3, #10
 800cd50:	2100      	movs	r1, #0
 800cd52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd56:	6866      	ldr	r6, [r4, #4]
 800cd58:	60a6      	str	r6, [r4, #8]
 800cd5a:	2e00      	cmp	r6, #0
 800cd5c:	bfa2      	ittt	ge
 800cd5e:	6821      	ldrge	r1, [r4, #0]
 800cd60:	f021 0104 	bicge.w	r1, r1, #4
 800cd64:	6021      	strge	r1, [r4, #0]
 800cd66:	b90d      	cbnz	r5, 800cd6c <_printf_i+0x118>
 800cd68:	2e00      	cmp	r6, #0
 800cd6a:	d04d      	beq.n	800ce08 <_printf_i+0x1b4>
 800cd6c:	4616      	mov	r6, r2
 800cd6e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd72:	fb03 5711 	mls	r7, r3, r1, r5
 800cd76:	5dc7      	ldrb	r7, [r0, r7]
 800cd78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd7c:	462f      	mov	r7, r5
 800cd7e:	42bb      	cmp	r3, r7
 800cd80:	460d      	mov	r5, r1
 800cd82:	d9f4      	bls.n	800cd6e <_printf_i+0x11a>
 800cd84:	2b08      	cmp	r3, #8
 800cd86:	d10b      	bne.n	800cda0 <_printf_i+0x14c>
 800cd88:	6823      	ldr	r3, [r4, #0]
 800cd8a:	07df      	lsls	r7, r3, #31
 800cd8c:	d508      	bpl.n	800cda0 <_printf_i+0x14c>
 800cd8e:	6923      	ldr	r3, [r4, #16]
 800cd90:	6861      	ldr	r1, [r4, #4]
 800cd92:	4299      	cmp	r1, r3
 800cd94:	bfde      	ittt	le
 800cd96:	2330      	movle	r3, #48	; 0x30
 800cd98:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cda0:	1b92      	subs	r2, r2, r6
 800cda2:	6122      	str	r2, [r4, #16]
 800cda4:	f8cd a000 	str.w	sl, [sp]
 800cda8:	464b      	mov	r3, r9
 800cdaa:	aa03      	add	r2, sp, #12
 800cdac:	4621      	mov	r1, r4
 800cdae:	4640      	mov	r0, r8
 800cdb0:	f7ff fee2 	bl	800cb78 <_printf_common>
 800cdb4:	3001      	adds	r0, #1
 800cdb6:	d14c      	bne.n	800ce52 <_printf_i+0x1fe>
 800cdb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdbc:	b004      	add	sp, #16
 800cdbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc2:	4835      	ldr	r0, [pc, #212]	; (800ce98 <_printf_i+0x244>)
 800cdc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cdc8:	6823      	ldr	r3, [r4, #0]
 800cdca:	680e      	ldr	r6, [r1, #0]
 800cdcc:	061f      	lsls	r7, r3, #24
 800cdce:	f856 5b04 	ldr.w	r5, [r6], #4
 800cdd2:	600e      	str	r6, [r1, #0]
 800cdd4:	d514      	bpl.n	800ce00 <_printf_i+0x1ac>
 800cdd6:	07d9      	lsls	r1, r3, #31
 800cdd8:	bf44      	itt	mi
 800cdda:	f043 0320 	orrmi.w	r3, r3, #32
 800cdde:	6023      	strmi	r3, [r4, #0]
 800cde0:	b91d      	cbnz	r5, 800cdea <_printf_i+0x196>
 800cde2:	6823      	ldr	r3, [r4, #0]
 800cde4:	f023 0320 	bic.w	r3, r3, #32
 800cde8:	6023      	str	r3, [r4, #0]
 800cdea:	2310      	movs	r3, #16
 800cdec:	e7b0      	b.n	800cd50 <_printf_i+0xfc>
 800cdee:	6823      	ldr	r3, [r4, #0]
 800cdf0:	f043 0320 	orr.w	r3, r3, #32
 800cdf4:	6023      	str	r3, [r4, #0]
 800cdf6:	2378      	movs	r3, #120	; 0x78
 800cdf8:	4828      	ldr	r0, [pc, #160]	; (800ce9c <_printf_i+0x248>)
 800cdfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cdfe:	e7e3      	b.n	800cdc8 <_printf_i+0x174>
 800ce00:	065e      	lsls	r6, r3, #25
 800ce02:	bf48      	it	mi
 800ce04:	b2ad      	uxthmi	r5, r5
 800ce06:	e7e6      	b.n	800cdd6 <_printf_i+0x182>
 800ce08:	4616      	mov	r6, r2
 800ce0a:	e7bb      	b.n	800cd84 <_printf_i+0x130>
 800ce0c:	680b      	ldr	r3, [r1, #0]
 800ce0e:	6826      	ldr	r6, [r4, #0]
 800ce10:	6960      	ldr	r0, [r4, #20]
 800ce12:	1d1d      	adds	r5, r3, #4
 800ce14:	600d      	str	r5, [r1, #0]
 800ce16:	0635      	lsls	r5, r6, #24
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	d501      	bpl.n	800ce20 <_printf_i+0x1cc>
 800ce1c:	6018      	str	r0, [r3, #0]
 800ce1e:	e002      	b.n	800ce26 <_printf_i+0x1d2>
 800ce20:	0671      	lsls	r1, r6, #25
 800ce22:	d5fb      	bpl.n	800ce1c <_printf_i+0x1c8>
 800ce24:	8018      	strh	r0, [r3, #0]
 800ce26:	2300      	movs	r3, #0
 800ce28:	6123      	str	r3, [r4, #16]
 800ce2a:	4616      	mov	r6, r2
 800ce2c:	e7ba      	b.n	800cda4 <_printf_i+0x150>
 800ce2e:	680b      	ldr	r3, [r1, #0]
 800ce30:	1d1a      	adds	r2, r3, #4
 800ce32:	600a      	str	r2, [r1, #0]
 800ce34:	681e      	ldr	r6, [r3, #0]
 800ce36:	6862      	ldr	r2, [r4, #4]
 800ce38:	2100      	movs	r1, #0
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	f7f3 f9e8 	bl	8000210 <memchr>
 800ce40:	b108      	cbz	r0, 800ce46 <_printf_i+0x1f2>
 800ce42:	1b80      	subs	r0, r0, r6
 800ce44:	6060      	str	r0, [r4, #4]
 800ce46:	6863      	ldr	r3, [r4, #4]
 800ce48:	6123      	str	r3, [r4, #16]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce50:	e7a8      	b.n	800cda4 <_printf_i+0x150>
 800ce52:	6923      	ldr	r3, [r4, #16]
 800ce54:	4632      	mov	r2, r6
 800ce56:	4649      	mov	r1, r9
 800ce58:	4640      	mov	r0, r8
 800ce5a:	47d0      	blx	sl
 800ce5c:	3001      	adds	r0, #1
 800ce5e:	d0ab      	beq.n	800cdb8 <_printf_i+0x164>
 800ce60:	6823      	ldr	r3, [r4, #0]
 800ce62:	079b      	lsls	r3, r3, #30
 800ce64:	d413      	bmi.n	800ce8e <_printf_i+0x23a>
 800ce66:	68e0      	ldr	r0, [r4, #12]
 800ce68:	9b03      	ldr	r3, [sp, #12]
 800ce6a:	4298      	cmp	r0, r3
 800ce6c:	bfb8      	it	lt
 800ce6e:	4618      	movlt	r0, r3
 800ce70:	e7a4      	b.n	800cdbc <_printf_i+0x168>
 800ce72:	2301      	movs	r3, #1
 800ce74:	4632      	mov	r2, r6
 800ce76:	4649      	mov	r1, r9
 800ce78:	4640      	mov	r0, r8
 800ce7a:	47d0      	blx	sl
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	d09b      	beq.n	800cdb8 <_printf_i+0x164>
 800ce80:	3501      	adds	r5, #1
 800ce82:	68e3      	ldr	r3, [r4, #12]
 800ce84:	9903      	ldr	r1, [sp, #12]
 800ce86:	1a5b      	subs	r3, r3, r1
 800ce88:	42ab      	cmp	r3, r5
 800ce8a:	dcf2      	bgt.n	800ce72 <_printf_i+0x21e>
 800ce8c:	e7eb      	b.n	800ce66 <_printf_i+0x212>
 800ce8e:	2500      	movs	r5, #0
 800ce90:	f104 0619 	add.w	r6, r4, #25
 800ce94:	e7f5      	b.n	800ce82 <_printf_i+0x22e>
 800ce96:	bf00      	nop
 800ce98:	0800dafd 	.word	0x0800dafd
 800ce9c:	0800db0e 	.word	0x0800db0e

0800cea0 <_read_r>:
 800cea0:	b538      	push	{r3, r4, r5, lr}
 800cea2:	4d07      	ldr	r5, [pc, #28]	; (800cec0 <_read_r+0x20>)
 800cea4:	4604      	mov	r4, r0
 800cea6:	4608      	mov	r0, r1
 800cea8:	4611      	mov	r1, r2
 800ceaa:	2200      	movs	r2, #0
 800ceac:	602a      	str	r2, [r5, #0]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	f7f8 f9f0 	bl	8005294 <_read>
 800ceb4:	1c43      	adds	r3, r0, #1
 800ceb6:	d102      	bne.n	800cebe <_read_r+0x1e>
 800ceb8:	682b      	ldr	r3, [r5, #0]
 800ceba:	b103      	cbz	r3, 800cebe <_read_r+0x1e>
 800cebc:	6023      	str	r3, [r4, #0]
 800cebe:	bd38      	pop	{r3, r4, r5, pc}
 800cec0:	20005254 	.word	0x20005254
 800cec4:	00000000 	.word	0x00000000

0800cec8 <nan>:
 800cec8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ced0 <nan+0x8>
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	00000000 	.word	0x00000000
 800ced4:	7ff80000 	.word	0x7ff80000

0800ced8 <__ascii_wctomb>:
 800ced8:	b149      	cbz	r1, 800ceee <__ascii_wctomb+0x16>
 800ceda:	2aff      	cmp	r2, #255	; 0xff
 800cedc:	bf85      	ittet	hi
 800cede:	238a      	movhi	r3, #138	; 0x8a
 800cee0:	6003      	strhi	r3, [r0, #0]
 800cee2:	700a      	strbls	r2, [r1, #0]
 800cee4:	f04f 30ff 	movhi.w	r0, #4294967295
 800cee8:	bf98      	it	ls
 800ceea:	2001      	movls	r0, #1
 800ceec:	4770      	bx	lr
 800ceee:	4608      	mov	r0, r1
 800cef0:	4770      	bx	lr
	...

0800cef4 <__assert_func>:
 800cef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cef6:	4614      	mov	r4, r2
 800cef8:	461a      	mov	r2, r3
 800cefa:	4b09      	ldr	r3, [pc, #36]	; (800cf20 <__assert_func+0x2c>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4605      	mov	r5, r0
 800cf00:	68d8      	ldr	r0, [r3, #12]
 800cf02:	b14c      	cbz	r4, 800cf18 <__assert_func+0x24>
 800cf04:	4b07      	ldr	r3, [pc, #28]	; (800cf24 <__assert_func+0x30>)
 800cf06:	9100      	str	r1, [sp, #0]
 800cf08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf0c:	4906      	ldr	r1, [pc, #24]	; (800cf28 <__assert_func+0x34>)
 800cf0e:	462b      	mov	r3, r5
 800cf10:	f000 f80e 	bl	800cf30 <fiprintf>
 800cf14:	f000 f9bc 	bl	800d290 <abort>
 800cf18:	4b04      	ldr	r3, [pc, #16]	; (800cf2c <__assert_func+0x38>)
 800cf1a:	461c      	mov	r4, r3
 800cf1c:	e7f3      	b.n	800cf06 <__assert_func+0x12>
 800cf1e:	bf00      	nop
 800cf20:	20000044 	.word	0x20000044
 800cf24:	0800db1f 	.word	0x0800db1f
 800cf28:	0800db2c 	.word	0x0800db2c
 800cf2c:	0800db5a 	.word	0x0800db5a

0800cf30 <fiprintf>:
 800cf30:	b40e      	push	{r1, r2, r3}
 800cf32:	b503      	push	{r0, r1, lr}
 800cf34:	4601      	mov	r1, r0
 800cf36:	ab03      	add	r3, sp, #12
 800cf38:	4805      	ldr	r0, [pc, #20]	; (800cf50 <fiprintf+0x20>)
 800cf3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf3e:	6800      	ldr	r0, [r0, #0]
 800cf40:	9301      	str	r3, [sp, #4]
 800cf42:	f000 f875 	bl	800d030 <_vfiprintf_r>
 800cf46:	b002      	add	sp, #8
 800cf48:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf4c:	b003      	add	sp, #12
 800cf4e:	4770      	bx	lr
 800cf50:	20000044 	.word	0x20000044

0800cf54 <_fstat_r>:
 800cf54:	b538      	push	{r3, r4, r5, lr}
 800cf56:	4d07      	ldr	r5, [pc, #28]	; (800cf74 <_fstat_r+0x20>)
 800cf58:	2300      	movs	r3, #0
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	4608      	mov	r0, r1
 800cf5e:	4611      	mov	r1, r2
 800cf60:	602b      	str	r3, [r5, #0]
 800cf62:	f7f8 f9dc 	bl	800531e <_fstat>
 800cf66:	1c43      	adds	r3, r0, #1
 800cf68:	d102      	bne.n	800cf70 <_fstat_r+0x1c>
 800cf6a:	682b      	ldr	r3, [r5, #0]
 800cf6c:	b103      	cbz	r3, 800cf70 <_fstat_r+0x1c>
 800cf6e:	6023      	str	r3, [r4, #0]
 800cf70:	bd38      	pop	{r3, r4, r5, pc}
 800cf72:	bf00      	nop
 800cf74:	20005254 	.word	0x20005254

0800cf78 <_isatty_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4d06      	ldr	r5, [pc, #24]	; (800cf94 <_isatty_r+0x1c>)
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4604      	mov	r4, r0
 800cf80:	4608      	mov	r0, r1
 800cf82:	602b      	str	r3, [r5, #0]
 800cf84:	f7f8 f9db 	bl	800533e <_isatty>
 800cf88:	1c43      	adds	r3, r0, #1
 800cf8a:	d102      	bne.n	800cf92 <_isatty_r+0x1a>
 800cf8c:	682b      	ldr	r3, [r5, #0]
 800cf8e:	b103      	cbz	r3, 800cf92 <_isatty_r+0x1a>
 800cf90:	6023      	str	r3, [r4, #0]
 800cf92:	bd38      	pop	{r3, r4, r5, pc}
 800cf94:	20005254 	.word	0x20005254

0800cf98 <memmove>:
 800cf98:	4288      	cmp	r0, r1
 800cf9a:	b510      	push	{r4, lr}
 800cf9c:	eb01 0402 	add.w	r4, r1, r2
 800cfa0:	d902      	bls.n	800cfa8 <memmove+0x10>
 800cfa2:	4284      	cmp	r4, r0
 800cfa4:	4623      	mov	r3, r4
 800cfa6:	d807      	bhi.n	800cfb8 <memmove+0x20>
 800cfa8:	1e43      	subs	r3, r0, #1
 800cfaa:	42a1      	cmp	r1, r4
 800cfac:	d008      	beq.n	800cfc0 <memmove+0x28>
 800cfae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfb6:	e7f8      	b.n	800cfaa <memmove+0x12>
 800cfb8:	4402      	add	r2, r0
 800cfba:	4601      	mov	r1, r0
 800cfbc:	428a      	cmp	r2, r1
 800cfbe:	d100      	bne.n	800cfc2 <memmove+0x2a>
 800cfc0:	bd10      	pop	{r4, pc}
 800cfc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfca:	e7f7      	b.n	800cfbc <memmove+0x24>

0800cfcc <_malloc_usable_size_r>:
 800cfcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfd0:	1f18      	subs	r0, r3, #4
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	bfbc      	itt	lt
 800cfd6:	580b      	ldrlt	r3, [r1, r0]
 800cfd8:	18c0      	addlt	r0, r0, r3
 800cfda:	4770      	bx	lr

0800cfdc <__sfputc_r>:
 800cfdc:	6893      	ldr	r3, [r2, #8]
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	b410      	push	{r4}
 800cfe4:	6093      	str	r3, [r2, #8]
 800cfe6:	da08      	bge.n	800cffa <__sfputc_r+0x1e>
 800cfe8:	6994      	ldr	r4, [r2, #24]
 800cfea:	42a3      	cmp	r3, r4
 800cfec:	db01      	blt.n	800cff2 <__sfputc_r+0x16>
 800cfee:	290a      	cmp	r1, #10
 800cff0:	d103      	bne.n	800cffa <__sfputc_r+0x1e>
 800cff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cff6:	f7fe b8d3 	b.w	800b1a0 <__swbuf_r>
 800cffa:	6813      	ldr	r3, [r2, #0]
 800cffc:	1c58      	adds	r0, r3, #1
 800cffe:	6010      	str	r0, [r2, #0]
 800d000:	7019      	strb	r1, [r3, #0]
 800d002:	4608      	mov	r0, r1
 800d004:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <__sfputs_r>:
 800d00a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00c:	4606      	mov	r6, r0
 800d00e:	460f      	mov	r7, r1
 800d010:	4614      	mov	r4, r2
 800d012:	18d5      	adds	r5, r2, r3
 800d014:	42ac      	cmp	r4, r5
 800d016:	d101      	bne.n	800d01c <__sfputs_r+0x12>
 800d018:	2000      	movs	r0, #0
 800d01a:	e007      	b.n	800d02c <__sfputs_r+0x22>
 800d01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d020:	463a      	mov	r2, r7
 800d022:	4630      	mov	r0, r6
 800d024:	f7ff ffda 	bl	800cfdc <__sfputc_r>
 800d028:	1c43      	adds	r3, r0, #1
 800d02a:	d1f3      	bne.n	800d014 <__sfputs_r+0xa>
 800d02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d030 <_vfiprintf_r>:
 800d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d034:	460d      	mov	r5, r1
 800d036:	b09d      	sub	sp, #116	; 0x74
 800d038:	4614      	mov	r4, r2
 800d03a:	4698      	mov	r8, r3
 800d03c:	4606      	mov	r6, r0
 800d03e:	b118      	cbz	r0, 800d048 <_vfiprintf_r+0x18>
 800d040:	6983      	ldr	r3, [r0, #24]
 800d042:	b90b      	cbnz	r3, 800d048 <_vfiprintf_r+0x18>
 800d044:	f7fe faa8 	bl	800b598 <__sinit>
 800d048:	4b89      	ldr	r3, [pc, #548]	; (800d270 <_vfiprintf_r+0x240>)
 800d04a:	429d      	cmp	r5, r3
 800d04c:	d11b      	bne.n	800d086 <_vfiprintf_r+0x56>
 800d04e:	6875      	ldr	r5, [r6, #4]
 800d050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d052:	07d9      	lsls	r1, r3, #31
 800d054:	d405      	bmi.n	800d062 <_vfiprintf_r+0x32>
 800d056:	89ab      	ldrh	r3, [r5, #12]
 800d058:	059a      	lsls	r2, r3, #22
 800d05a:	d402      	bmi.n	800d062 <_vfiprintf_r+0x32>
 800d05c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d05e:	f7fe fea8 	bl	800bdb2 <__retarget_lock_acquire_recursive>
 800d062:	89ab      	ldrh	r3, [r5, #12]
 800d064:	071b      	lsls	r3, r3, #28
 800d066:	d501      	bpl.n	800d06c <_vfiprintf_r+0x3c>
 800d068:	692b      	ldr	r3, [r5, #16]
 800d06a:	b9eb      	cbnz	r3, 800d0a8 <_vfiprintf_r+0x78>
 800d06c:	4629      	mov	r1, r5
 800d06e:	4630      	mov	r0, r6
 800d070:	f7fe f8fa 	bl	800b268 <__swsetup_r>
 800d074:	b1c0      	cbz	r0, 800d0a8 <_vfiprintf_r+0x78>
 800d076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d078:	07dc      	lsls	r4, r3, #31
 800d07a:	d50e      	bpl.n	800d09a <_vfiprintf_r+0x6a>
 800d07c:	f04f 30ff 	mov.w	r0, #4294967295
 800d080:	b01d      	add	sp, #116	; 0x74
 800d082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d086:	4b7b      	ldr	r3, [pc, #492]	; (800d274 <_vfiprintf_r+0x244>)
 800d088:	429d      	cmp	r5, r3
 800d08a:	d101      	bne.n	800d090 <_vfiprintf_r+0x60>
 800d08c:	68b5      	ldr	r5, [r6, #8]
 800d08e:	e7df      	b.n	800d050 <_vfiprintf_r+0x20>
 800d090:	4b79      	ldr	r3, [pc, #484]	; (800d278 <_vfiprintf_r+0x248>)
 800d092:	429d      	cmp	r5, r3
 800d094:	bf08      	it	eq
 800d096:	68f5      	ldreq	r5, [r6, #12]
 800d098:	e7da      	b.n	800d050 <_vfiprintf_r+0x20>
 800d09a:	89ab      	ldrh	r3, [r5, #12]
 800d09c:	0598      	lsls	r0, r3, #22
 800d09e:	d4ed      	bmi.n	800d07c <_vfiprintf_r+0x4c>
 800d0a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0a2:	f7fe fe87 	bl	800bdb4 <__retarget_lock_release_recursive>
 800d0a6:	e7e9      	b.n	800d07c <_vfiprintf_r+0x4c>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ac:	2320      	movs	r3, #32
 800d0ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0b6:	2330      	movs	r3, #48	; 0x30
 800d0b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d27c <_vfiprintf_r+0x24c>
 800d0bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0c0:	f04f 0901 	mov.w	r9, #1
 800d0c4:	4623      	mov	r3, r4
 800d0c6:	469a      	mov	sl, r3
 800d0c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0cc:	b10a      	cbz	r2, 800d0d2 <_vfiprintf_r+0xa2>
 800d0ce:	2a25      	cmp	r2, #37	; 0x25
 800d0d0:	d1f9      	bne.n	800d0c6 <_vfiprintf_r+0x96>
 800d0d2:	ebba 0b04 	subs.w	fp, sl, r4
 800d0d6:	d00b      	beq.n	800d0f0 <_vfiprintf_r+0xc0>
 800d0d8:	465b      	mov	r3, fp
 800d0da:	4622      	mov	r2, r4
 800d0dc:	4629      	mov	r1, r5
 800d0de:	4630      	mov	r0, r6
 800d0e0:	f7ff ff93 	bl	800d00a <__sfputs_r>
 800d0e4:	3001      	adds	r0, #1
 800d0e6:	f000 80aa 	beq.w	800d23e <_vfiprintf_r+0x20e>
 800d0ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0ec:	445a      	add	r2, fp
 800d0ee:	9209      	str	r2, [sp, #36]	; 0x24
 800d0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f000 80a2 	beq.w	800d23e <_vfiprintf_r+0x20e>
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d104:	f10a 0a01 	add.w	sl, sl, #1
 800d108:	9304      	str	r3, [sp, #16]
 800d10a:	9307      	str	r3, [sp, #28]
 800d10c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d110:	931a      	str	r3, [sp, #104]	; 0x68
 800d112:	4654      	mov	r4, sl
 800d114:	2205      	movs	r2, #5
 800d116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d11a:	4858      	ldr	r0, [pc, #352]	; (800d27c <_vfiprintf_r+0x24c>)
 800d11c:	f7f3 f878 	bl	8000210 <memchr>
 800d120:	9a04      	ldr	r2, [sp, #16]
 800d122:	b9d8      	cbnz	r0, 800d15c <_vfiprintf_r+0x12c>
 800d124:	06d1      	lsls	r1, r2, #27
 800d126:	bf44      	itt	mi
 800d128:	2320      	movmi	r3, #32
 800d12a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d12e:	0713      	lsls	r3, r2, #28
 800d130:	bf44      	itt	mi
 800d132:	232b      	movmi	r3, #43	; 0x2b
 800d134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d138:	f89a 3000 	ldrb.w	r3, [sl]
 800d13c:	2b2a      	cmp	r3, #42	; 0x2a
 800d13e:	d015      	beq.n	800d16c <_vfiprintf_r+0x13c>
 800d140:	9a07      	ldr	r2, [sp, #28]
 800d142:	4654      	mov	r4, sl
 800d144:	2000      	movs	r0, #0
 800d146:	f04f 0c0a 	mov.w	ip, #10
 800d14a:	4621      	mov	r1, r4
 800d14c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d150:	3b30      	subs	r3, #48	; 0x30
 800d152:	2b09      	cmp	r3, #9
 800d154:	d94e      	bls.n	800d1f4 <_vfiprintf_r+0x1c4>
 800d156:	b1b0      	cbz	r0, 800d186 <_vfiprintf_r+0x156>
 800d158:	9207      	str	r2, [sp, #28]
 800d15a:	e014      	b.n	800d186 <_vfiprintf_r+0x156>
 800d15c:	eba0 0308 	sub.w	r3, r0, r8
 800d160:	fa09 f303 	lsl.w	r3, r9, r3
 800d164:	4313      	orrs	r3, r2
 800d166:	9304      	str	r3, [sp, #16]
 800d168:	46a2      	mov	sl, r4
 800d16a:	e7d2      	b.n	800d112 <_vfiprintf_r+0xe2>
 800d16c:	9b03      	ldr	r3, [sp, #12]
 800d16e:	1d19      	adds	r1, r3, #4
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	9103      	str	r1, [sp, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	bfbb      	ittet	lt
 800d178:	425b      	neglt	r3, r3
 800d17a:	f042 0202 	orrlt.w	r2, r2, #2
 800d17e:	9307      	strge	r3, [sp, #28]
 800d180:	9307      	strlt	r3, [sp, #28]
 800d182:	bfb8      	it	lt
 800d184:	9204      	strlt	r2, [sp, #16]
 800d186:	7823      	ldrb	r3, [r4, #0]
 800d188:	2b2e      	cmp	r3, #46	; 0x2e
 800d18a:	d10c      	bne.n	800d1a6 <_vfiprintf_r+0x176>
 800d18c:	7863      	ldrb	r3, [r4, #1]
 800d18e:	2b2a      	cmp	r3, #42	; 0x2a
 800d190:	d135      	bne.n	800d1fe <_vfiprintf_r+0x1ce>
 800d192:	9b03      	ldr	r3, [sp, #12]
 800d194:	1d1a      	adds	r2, r3, #4
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	9203      	str	r2, [sp, #12]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	bfb8      	it	lt
 800d19e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1a2:	3402      	adds	r4, #2
 800d1a4:	9305      	str	r3, [sp, #20]
 800d1a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d28c <_vfiprintf_r+0x25c>
 800d1aa:	7821      	ldrb	r1, [r4, #0]
 800d1ac:	2203      	movs	r2, #3
 800d1ae:	4650      	mov	r0, sl
 800d1b0:	f7f3 f82e 	bl	8000210 <memchr>
 800d1b4:	b140      	cbz	r0, 800d1c8 <_vfiprintf_r+0x198>
 800d1b6:	2340      	movs	r3, #64	; 0x40
 800d1b8:	eba0 000a 	sub.w	r0, r0, sl
 800d1bc:	fa03 f000 	lsl.w	r0, r3, r0
 800d1c0:	9b04      	ldr	r3, [sp, #16]
 800d1c2:	4303      	orrs	r3, r0
 800d1c4:	3401      	adds	r4, #1
 800d1c6:	9304      	str	r3, [sp, #16]
 800d1c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1cc:	482c      	ldr	r0, [pc, #176]	; (800d280 <_vfiprintf_r+0x250>)
 800d1ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1d2:	2206      	movs	r2, #6
 800d1d4:	f7f3 f81c 	bl	8000210 <memchr>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	d03f      	beq.n	800d25c <_vfiprintf_r+0x22c>
 800d1dc:	4b29      	ldr	r3, [pc, #164]	; (800d284 <_vfiprintf_r+0x254>)
 800d1de:	bb1b      	cbnz	r3, 800d228 <_vfiprintf_r+0x1f8>
 800d1e0:	9b03      	ldr	r3, [sp, #12]
 800d1e2:	3307      	adds	r3, #7
 800d1e4:	f023 0307 	bic.w	r3, r3, #7
 800d1e8:	3308      	adds	r3, #8
 800d1ea:	9303      	str	r3, [sp, #12]
 800d1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ee:	443b      	add	r3, r7
 800d1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800d1f2:	e767      	b.n	800d0c4 <_vfiprintf_r+0x94>
 800d1f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1f8:	460c      	mov	r4, r1
 800d1fa:	2001      	movs	r0, #1
 800d1fc:	e7a5      	b.n	800d14a <_vfiprintf_r+0x11a>
 800d1fe:	2300      	movs	r3, #0
 800d200:	3401      	adds	r4, #1
 800d202:	9305      	str	r3, [sp, #20]
 800d204:	4619      	mov	r1, r3
 800d206:	f04f 0c0a 	mov.w	ip, #10
 800d20a:	4620      	mov	r0, r4
 800d20c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d210:	3a30      	subs	r2, #48	; 0x30
 800d212:	2a09      	cmp	r2, #9
 800d214:	d903      	bls.n	800d21e <_vfiprintf_r+0x1ee>
 800d216:	2b00      	cmp	r3, #0
 800d218:	d0c5      	beq.n	800d1a6 <_vfiprintf_r+0x176>
 800d21a:	9105      	str	r1, [sp, #20]
 800d21c:	e7c3      	b.n	800d1a6 <_vfiprintf_r+0x176>
 800d21e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d222:	4604      	mov	r4, r0
 800d224:	2301      	movs	r3, #1
 800d226:	e7f0      	b.n	800d20a <_vfiprintf_r+0x1da>
 800d228:	ab03      	add	r3, sp, #12
 800d22a:	9300      	str	r3, [sp, #0]
 800d22c:	462a      	mov	r2, r5
 800d22e:	4b16      	ldr	r3, [pc, #88]	; (800d288 <_vfiprintf_r+0x258>)
 800d230:	a904      	add	r1, sp, #16
 800d232:	4630      	mov	r0, r6
 800d234:	f3af 8000 	nop.w
 800d238:	4607      	mov	r7, r0
 800d23a:	1c78      	adds	r0, r7, #1
 800d23c:	d1d6      	bne.n	800d1ec <_vfiprintf_r+0x1bc>
 800d23e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d240:	07d9      	lsls	r1, r3, #31
 800d242:	d405      	bmi.n	800d250 <_vfiprintf_r+0x220>
 800d244:	89ab      	ldrh	r3, [r5, #12]
 800d246:	059a      	lsls	r2, r3, #22
 800d248:	d402      	bmi.n	800d250 <_vfiprintf_r+0x220>
 800d24a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d24c:	f7fe fdb2 	bl	800bdb4 <__retarget_lock_release_recursive>
 800d250:	89ab      	ldrh	r3, [r5, #12]
 800d252:	065b      	lsls	r3, r3, #25
 800d254:	f53f af12 	bmi.w	800d07c <_vfiprintf_r+0x4c>
 800d258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d25a:	e711      	b.n	800d080 <_vfiprintf_r+0x50>
 800d25c:	ab03      	add	r3, sp, #12
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	462a      	mov	r2, r5
 800d262:	4b09      	ldr	r3, [pc, #36]	; (800d288 <_vfiprintf_r+0x258>)
 800d264:	a904      	add	r1, sp, #16
 800d266:	4630      	mov	r0, r6
 800d268:	f7ff fcf4 	bl	800cc54 <_printf_i>
 800d26c:	e7e4      	b.n	800d238 <_vfiprintf_r+0x208>
 800d26e:	bf00      	nop
 800d270:	0800d8a8 	.word	0x0800d8a8
 800d274:	0800d8c8 	.word	0x0800d8c8
 800d278:	0800d888 	.word	0x0800d888
 800d27c:	0800daec 	.word	0x0800daec
 800d280:	0800daf6 	.word	0x0800daf6
 800d284:	00000000 	.word	0x00000000
 800d288:	0800d00b 	.word	0x0800d00b
 800d28c:	0800daf2 	.word	0x0800daf2

0800d290 <abort>:
 800d290:	b508      	push	{r3, lr}
 800d292:	2006      	movs	r0, #6
 800d294:	f000 f82c 	bl	800d2f0 <raise>
 800d298:	2001      	movs	r0, #1
 800d29a:	f7f7 fff1 	bl	8005280 <_exit>

0800d29e <_raise_r>:
 800d29e:	291f      	cmp	r1, #31
 800d2a0:	b538      	push	{r3, r4, r5, lr}
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	460d      	mov	r5, r1
 800d2a6:	d904      	bls.n	800d2b2 <_raise_r+0x14>
 800d2a8:	2316      	movs	r3, #22
 800d2aa:	6003      	str	r3, [r0, #0]
 800d2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b0:	bd38      	pop	{r3, r4, r5, pc}
 800d2b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d2b4:	b112      	cbz	r2, 800d2bc <_raise_r+0x1e>
 800d2b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2ba:	b94b      	cbnz	r3, 800d2d0 <_raise_r+0x32>
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f000 f831 	bl	800d324 <_getpid_r>
 800d2c2:	462a      	mov	r2, r5
 800d2c4:	4601      	mov	r1, r0
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2cc:	f000 b818 	b.w	800d300 <_kill_r>
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d00a      	beq.n	800d2ea <_raise_r+0x4c>
 800d2d4:	1c59      	adds	r1, r3, #1
 800d2d6:	d103      	bne.n	800d2e0 <_raise_r+0x42>
 800d2d8:	2316      	movs	r3, #22
 800d2da:	6003      	str	r3, [r0, #0]
 800d2dc:	2001      	movs	r0, #1
 800d2de:	e7e7      	b.n	800d2b0 <_raise_r+0x12>
 800d2e0:	2400      	movs	r4, #0
 800d2e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	4798      	blx	r3
 800d2ea:	2000      	movs	r0, #0
 800d2ec:	e7e0      	b.n	800d2b0 <_raise_r+0x12>
	...

0800d2f0 <raise>:
 800d2f0:	4b02      	ldr	r3, [pc, #8]	; (800d2fc <raise+0xc>)
 800d2f2:	4601      	mov	r1, r0
 800d2f4:	6818      	ldr	r0, [r3, #0]
 800d2f6:	f7ff bfd2 	b.w	800d29e <_raise_r>
 800d2fa:	bf00      	nop
 800d2fc:	20000044 	.word	0x20000044

0800d300 <_kill_r>:
 800d300:	b538      	push	{r3, r4, r5, lr}
 800d302:	4d07      	ldr	r5, [pc, #28]	; (800d320 <_kill_r+0x20>)
 800d304:	2300      	movs	r3, #0
 800d306:	4604      	mov	r4, r0
 800d308:	4608      	mov	r0, r1
 800d30a:	4611      	mov	r1, r2
 800d30c:	602b      	str	r3, [r5, #0]
 800d30e:	f7f7 ffa7 	bl	8005260 <_kill>
 800d312:	1c43      	adds	r3, r0, #1
 800d314:	d102      	bne.n	800d31c <_kill_r+0x1c>
 800d316:	682b      	ldr	r3, [r5, #0]
 800d318:	b103      	cbz	r3, 800d31c <_kill_r+0x1c>
 800d31a:	6023      	str	r3, [r4, #0]
 800d31c:	bd38      	pop	{r3, r4, r5, pc}
 800d31e:	bf00      	nop
 800d320:	20005254 	.word	0x20005254

0800d324 <_getpid_r>:
 800d324:	f7f7 bf94 	b.w	8005250 <_getpid>

0800d328 <_init>:
 800d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32a:	bf00      	nop
 800d32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d32e:	bc08      	pop	{r3}
 800d330:	469e      	mov	lr, r3
 800d332:	4770      	bx	lr

0800d334 <_fini>:
 800d334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d336:	bf00      	nop
 800d338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d33a:	bc08      	pop	{r3}
 800d33c:	469e      	mov	lr, r3
 800d33e:	4770      	bx	lr
