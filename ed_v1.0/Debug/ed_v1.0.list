
ed_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005560  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005884  08005884  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005884  08005884  00015884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800588c  0800588c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000000c  080058a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  080058a0  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001334c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002770  00000000  00000000  00033388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00035af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00036ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001836c  00000000  00000000  00037dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001544d  00000000  00000000  00050144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0203  00000000  00000000  00065591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00105794  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c78  00000000  00000000  001057e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080056dc 	.word	0x080056dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080056dc 	.word	0x080056dc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	f023 030f 	bic.w	r3, r3, #15
 80004dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	f043 030c 	orr.w	r3, r3, #12
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	f043 0308 	orr.w	r3, r3, #8
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004f8:	7bbb      	ldrb	r3, [r7, #14]
 80004fa:	f043 030c 	orr.w	r3, r3, #12
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000502:	7bbb      	ldrb	r3, [r7, #14]
 8000504:	f043 0308 	orr.w	r3, r3, #8
 8000508:	b2db      	uxtb	r3, r3
 800050a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800050c:	f107 0208 	add.w	r2, r7, #8
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2304      	movs	r3, #4
 8000516:	214e      	movs	r1, #78	; 0x4e
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <lcd_send_cmd+0x5c>)
 800051a:	f003 f9b5 	bl	8003888 <HAL_I2C_Master_Transmit>
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000068 	.word	0x20000068

0800052c <lcd_send_data>:

void lcd_send_data (char data)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af02      	add	r7, sp, #8
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	f023 030f 	bic.w	r3, r3, #15
 800053c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	f043 030d 	orr.w	r3, r3, #13
 800054a:	b2db      	uxtb	r3, r3
 800054c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	f043 0309 	orr.w	r3, r3, #9
 8000554:	b2db      	uxtb	r3, r3
 8000556:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	f043 030d 	orr.w	r3, r3, #13
 800055e:	b2db      	uxtb	r3, r3
 8000560:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	f043 0309 	orr.w	r3, r3, #9
 8000568:	b2db      	uxtb	r3, r3
 800056a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800056c:	f107 0208 	add.w	r2, r7, #8
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2304      	movs	r3, #4
 8000576:	214e      	movs	r1, #78	; 0x4e
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <lcd_send_data+0x5c>)
 800057a:	f003 f985 	bl	8003888 <HAL_I2C_Master_Transmit>
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000068 	.word	0x20000068

0800058c <lcd_clear>:

void lcd_clear (void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000592:	2080      	movs	r0, #128	; 0x80
 8000594:	f7ff ff9a 	bl	80004cc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	e005      	b.n	80005aa <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800059e:	2020      	movs	r0, #32
 80005a0:	f7ff ffc4 	bl	800052c <lcd_send_data>
	for (int i=0; i<70; i++)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b45      	cmp	r3, #69	; 0x45
 80005ae:	ddf6      	ble.n	800059e <lcd_clear+0x12>
	}
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
    switch (row)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d003      	beq.n	80005d2 <lcd_put_cur+0x18>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d005      	beq.n	80005dc <lcd_put_cur+0x22>
 80005d0:	e009      	b.n	80005e6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	603b      	str	r3, [r7, #0]
            break;
 80005da:	e004      	b.n	80005e6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005e2:	603b      	str	r3, [r7, #0]
            break;
 80005e4:	bf00      	nop
    };
    lcd_send_cmd (col);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff6e 	bl	80004cc <lcd_send_cmd>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <lcd_init>:


void lcd_init (void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	delay_us(60000);  // wait for >40ms
 80005fc:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000600:	f000 fc02 	bl	8000e08 <delay_us>
	lcd_send_cmd (0x30);
 8000604:	2030      	movs	r0, #48	; 0x30
 8000606:	f7ff ff61 	bl	80004cc <lcd_send_cmd>
	delay_us(6000);  // wait for >4.1ms
 800060a:	f241 7070 	movw	r0, #6000	; 0x1770
 800060e:	f000 fbfb 	bl	8000e08 <delay_us>
	lcd_send_cmd (0x30);
 8000612:	2030      	movs	r0, #48	; 0x30
 8000614:	f7ff ff5a 	bl	80004cc <lcd_send_cmd>
	delay_us(2000);  // wait for >100us
 8000618:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800061c:	f000 fbf4 	bl	8000e08 <delay_us>
	lcd_send_cmd (0x30);
 8000620:	2030      	movs	r0, #48	; 0x30
 8000622:	f7ff ff53 	bl	80004cc <lcd_send_cmd>
	delay_us(200);
 8000626:	20c8      	movs	r0, #200	; 0xc8
 8000628:	f000 fbee 	bl	8000e08 <delay_us>
	lcd_send_cmd (0x20);  // 4bit mode
 800062c:	2020      	movs	r0, #32
 800062e:	f7ff ff4d 	bl	80004cc <lcd_send_cmd>
	delay_us(2000);
 8000632:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000636:	f000 fbe7 	bl	8000e08 <delay_us>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800063a:	2028      	movs	r0, #40	; 0x28
 800063c:	f7ff ff46 	bl	80004cc <lcd_send_cmd>
	delay_us(2000);
 8000640:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000644:	f000 fbe0 	bl	8000e08 <delay_us>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000648:	2008      	movs	r0, #8
 800064a:	f7ff ff3f 	bl	80004cc <lcd_send_cmd>
	delay_us(2000);
 800064e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000652:	f000 fbd9 	bl	8000e08 <delay_us>
	lcd_send_cmd (0x01);  // clear display
 8000656:	2001      	movs	r0, #1
 8000658:	f7ff ff38 	bl	80004cc <lcd_send_cmd>
	delay_us(4000);
 800065c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000660:	f000 fbd2 	bl	8000e08 <delay_us>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000664:	2006      	movs	r0, #6
 8000666:	f7ff ff31 	bl	80004cc <lcd_send_cmd>
	delay_us(2000);
 800066a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800066e:	f000 fbcb 	bl	8000e08 <delay_us>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000672:	200c      	movs	r0, #12
 8000674:	f7ff ff2a 	bl	80004cc <lcd_send_cmd>
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}

0800067c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000684:	e006      	b.n	8000694 <lcd_send_string+0x18>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff4c 	bl	800052c <lcd_send_data>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1f4      	bne.n	8000686 <lcd_send_string+0xa>
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f001 fb85 	bl	8001dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f899 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 faef 	bl	8000c98 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ba:	f000 facd 	bl	8000c58 <MX_DMA_Init>
  MX_ADC1_Init();
 80006be:	f000 f919 	bl	80008f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80006c2:	f000 f9bd 	bl	8000a40 <MX_I2C1_Init>
  MX_RTC_Init();
 80006c6:	f000 f9e9 	bl	8000a9c <MX_RTC_Init>
  MX_TIM1_Init();
 80006ca:	f000 fa75 	bl	8000bb8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Initializes line average array


  for(int x = 0; x < 4; x ++){
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	e007      	b.n	80006e4 <main+0x3c>
		  adc_line_avg[x] = 0;
 80006d4:	4a34      	ldr	r2, [pc, #208]	; (80007a8 <main+0x100>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2100      	movs	r1, #0
 80006da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int x = 0; x < 4; x ++){
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3301      	adds	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	ddf4      	ble.n	80006d4 <main+0x2c>
			}

  HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, -511);
 80006ea:	f46f 73ff 	mvn.w	r3, #510	; 0x1fe
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	482e      	ldr	r0, [pc, #184]	; (80007ac <main+0x104>)
 80006f4:	f004 fc71 	bl	8004fda <HAL_RTCEx_SetSmoothCalib>
  HAL_TIM_Base_Start(&htim1);
 80006f8:	482d      	ldr	r0, [pc, #180]	; (80007b0 <main+0x108>)
 80006fa:	f004 fd19 	bl	8005130 <HAL_TIM_Base_Start>
  lcd_initial_message();
 80006fe:	f000 fd13 	bl	8001128 <lcd_initial_message>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  DHT11_Start();
 8000702:	f000 fc7b 	bl	8000ffc <DHT11_Start>
	  	Presence = DHT11_Check_Response();
 8000706:	f000 fc99 	bl	800103c <DHT11_Check_Response>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <main+0x10c>)
 8000710:	701a      	strb	r2, [r3, #0]
	  	Rh_byte1 = DHT11_Read ();
 8000712:	f000 fcc1 	bl	8001098 <DHT11_Read>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <main+0x110>)
 800071c:	701a      	strb	r2, [r3, #0]
	  	Rh_byte2 = DHT11_Read ();
 800071e:	f000 fcbb 	bl	8001098 <DHT11_Read>
 8000722:	4603      	mov	r3, r0
 8000724:	461a      	mov	r2, r3
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <main+0x114>)
 8000728:	701a      	strb	r2, [r3, #0]
	  	Temp_byte1 = DHT11_Read ();
 800072a:	f000 fcb5 	bl	8001098 <DHT11_Read>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <main+0x118>)
 8000734:	701a      	strb	r2, [r3, #0]
	  	Temp_byte2 = DHT11_Read ();
 8000736:	f000 fcaf 	bl	8001098 <DHT11_Read>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <main+0x11c>)
 8000740:	701a      	strb	r2, [r3, #0]
	  	SUM = DHT11_Read();
 8000742:	f000 fca9 	bl	8001098 <DHT11_Read>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <main+0x120>)
 800074c:	801a      	strh	r2, [r3, #0]
	  	TEMP = Temp_byte1;
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <main+0x118>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <main+0x124>)
 8000756:	801a      	strh	r2, [r3, #0]
	  	RH = Rh_byte1;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <main+0x110>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b29a      	uxth	r2, r3
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <main+0x128>)
 8000760:	801a      	strh	r2, [r3, #0]

	  	Temperature = (float) TEMP;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <main+0x124>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	ee07 3a90 	vmov	s15, r3
 800076a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <main+0x12c>)
 8000770:	edc3 7a00 	vstr	s15, [r3]
	  	Humidity = (float) RH;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <main+0x128>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	ee07 3a90 	vmov	s15, r3
 800077c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <main+0x130>)
 8000782:	edc3 7a00 	vstr	s15, [r3]

	  //DHT11_get_value();
	  //get_time();

	  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_dma, adc_channel_lenght);
 8000786:	2307      	movs	r3, #7
 8000788:	461a      	mov	r2, r3
 800078a:	4914      	ldr	r1, [pc, #80]	; (80007dc <main+0x134>)
 800078c:	4814      	ldr	r0, [pc, #80]	; (80007e0 <main+0x138>)
 800078e:	f001 fd2f 	bl	80021f0 <HAL_ADC_Start_DMA>
	  //mode_planner(0,1);
	  //mode_manual(mode_manual_start);
	  menu_func(menu_lcd_refresh, 0);
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <main+0x13c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fcf7 	bl	800118c <menu_func>
	  delay_us(100);
 800079e:	2064      	movs	r0, #100	; 0x64
 80007a0:	f000 fb32 	bl	8000e08 <delay_us>
	  	  DHT11_Start();
 80007a4:	e7ad      	b.n	8000702 <main+0x5a>
 80007a6:	bf00      	nop
 80007a8:	20000048 	.word	0x20000048
 80007ac:	2000018c 	.word	0x2000018c
 80007b0:	200001cc 	.word	0x200001cc
 80007b4:	20000044 	.word	0x20000044
 80007b8:	200000bc 	.word	0x200000bc
 80007bc:	200001c8 	.word	0x200001c8
 80007c0:	2000010c 	.word	0x2000010c
 80007c4:	20000240 	.word	0x20000240
 80007c8:	20000238 	.word	0x20000238
 80007cc:	200000c0 	.word	0x200000c0
 80007d0:	200000be 	.word	0x200000be
 80007d4:	2000003c 	.word	0x2000003c
 80007d8:	20000040 	.word	0x20000040
 80007dc:	20000058 	.word	0x20000058
 80007e0:	200000c4 	.word	0x200000c4
 80007e4:	20000028 	.word	0x20000028

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b098      	sub	sp, #96	; 0x60
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 ff68 	bl	80056cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	4b32      	ldr	r3, [pc, #200]	; (80008ec <SystemClock_Config+0x104>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	4a31      	ldr	r2, [pc, #196]	; (80008ec <SystemClock_Config+0x104>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	; 0x40
 800082c:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <SystemClock_Config+0x104>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <SystemClock_Config+0x108>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000844:	4a2a      	ldr	r2, [pc, #168]	; (80008f0 <SystemClock_Config+0x108>)
 8000846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <SystemClock_Config+0x108>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000858:	230a      	movs	r3, #10
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2310      	movs	r3, #16
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000864:	2301      	movs	r3, #1
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000868:	2302      	movs	r3, #2
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000870:	2308      	movs	r3, #8
 8000872:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000874:	2354      	movs	r3, #84	; 0x54
 8000876:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000884:	4618      	mov	r0, r3
 8000886:	f003 fb07 	bl	8003e98 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000890:	f001 f8d4 	bl	8001a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2102      	movs	r1, #2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 fd69 	bl	8004388 <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80008bc:	f001 f8be 	bl	8001a3c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_RTC;
 80008c0:	230a      	movs	r3, #10
 80008c2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80008ca:	2301      	movs	r3, #1
 80008cc:	763b      	strb	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 ff14 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80008de:	f001 f8ad 	bl	8001a3c <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3760      	adds	r7, #96	; 0x60
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000906:	4b4b      	ldr	r3, [pc, #300]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000908:	4a4b      	ldr	r2, [pc, #300]	; (8000a38 <MX_ADC1_Init+0x144>)
 800090a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800090c:	4b49      	ldr	r3, [pc, #292]	; (8000a34 <MX_ADC1_Init+0x140>)
 800090e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000912:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000914:	4b47      	ldr	r3, [pc, #284]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800091a:	4b46      	ldr	r3, [pc, #280]	; (8000a34 <MX_ADC1_Init+0x140>)
 800091c:	2201      	movs	r2, #1
 800091e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000920:	4b44      	ldr	r3, [pc, #272]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000922:	2200      	movs	r2, #0
 8000924:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000926:	4b43      	ldr	r3, [pc, #268]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092e:	4b41      	ldr	r3, [pc, #260]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000930:	2200      	movs	r2, #0
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000934:	4b3f      	ldr	r3, [pc, #252]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000936:	4a41      	ldr	r2, [pc, #260]	; (8000a3c <MX_ADC1_Init+0x148>)
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800093a:	4b3e      	ldr	r3, [pc, #248]	; (8000a34 <MX_ADC1_Init+0x140>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000940:	4b3c      	ldr	r3, [pc, #240]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000942:	2207      	movs	r2, #7
 8000944:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000948:	2201      	movs	r2, #1
 800094a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094e:	4b39      	ldr	r3, [pc, #228]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000950:	2201      	movs	r2, #1
 8000952:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000954:	4837      	ldr	r0, [pc, #220]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000956:	f001 fac7 	bl	8001ee8 <HAL_ADC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000960:	f001 f86c 	bl	8001a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000964:	2300      	movs	r3, #0
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800096c:	2302      	movs	r3, #2
 800096e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	4619      	mov	r1, r3
 8000974:	482f      	ldr	r0, [pc, #188]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000976:	f001 fd49 	bl	800240c <HAL_ADC_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000980:	f001 f85c 	bl	8001a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000984:	2301      	movs	r3, #1
 8000986:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	4828      	ldr	r0, [pc, #160]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000992:	f001 fd3b 	bl	800240c <HAL_ADC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800099c:	f001 f84e 	bl	8001a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009a4:	2303      	movs	r3, #3
 80009a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	4821      	ldr	r0, [pc, #132]	; (8000a34 <MX_ADC1_Init+0x140>)
 80009ae:	f001 fd2d 	bl	800240c <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80009b8:	f001 f840 	bl	8001a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009bc:	2303      	movs	r3, #3
 80009be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	481a      	ldr	r0, [pc, #104]	; (8000a34 <MX_ADC1_Init+0x140>)
 80009ca:	f001 fd1f 	bl	800240c <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80009d4:	f001 f832 	bl	8001a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009d8:	2304      	movs	r3, #4
 80009da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80009dc:	2305      	movs	r3, #5
 80009de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e0:	463b      	mov	r3, r7
 80009e2:	4619      	mov	r1, r3
 80009e4:	4813      	ldr	r0, [pc, #76]	; (8000a34 <MX_ADC1_Init+0x140>)
 80009e6:	f001 fd11 	bl	800240c <HAL_ADC_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80009f0:	f001 f824 	bl	8001a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009f4:	2305      	movs	r3, #5
 80009f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80009f8:	2306      	movs	r3, #6
 80009fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000a02:	f001 fd03 	bl	800240c <HAL_ADC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000a0c:	f001 f816 	bl	8001a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a10:	2306      	movs	r3, #6
 8000a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000a14:	2307      	movs	r3, #7
 8000a16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_ADC1_Init+0x140>)
 8000a1e:	f001 fcf5 	bl	800240c <HAL_ADC_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000a28:	f001 f808 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200000c4 	.word	0x200000c4
 8000a38:	40012000 	.word	0x40012000
 8000a3c:	0f000001 	.word	0x0f000001

08000a40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_I2C1_Init+0x50>)
 8000a46:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <MX_I2C1_Init+0x54>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_I2C1_Init+0x50>)
 8000a4c:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <MX_I2C1_Init+0x58>)
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_I2C1_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_I2C1_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_I2C1_Init+0x50>)
 8000a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <MX_I2C1_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_I2C1_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <MX_I2C1_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_I2C1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_I2C1_Init+0x50>)
 8000a7e:	f002 fdbf 	bl	8003600 <HAL_I2C_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a88:	f000 ffd8 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000068 	.word	0x20000068
 8000a94:	40005400 	.word	0x40005400
 8000a98:	00061a80 	.word	0x00061a80

08000a9c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b090      	sub	sp, #64	; 0x40
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2228      	movs	r2, #40	; 0x28
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f004 fe05 	bl	80056cc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	; (8000bb0 <MX_RTC_Init+0x114>)
 8000ac4:	4a3b      	ldr	r2, [pc, #236]	; (8000bb4 <MX_RTC_Init+0x118>)
 8000ac6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ac8:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <MX_RTC_Init+0x114>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ace:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <MX_RTC_Init+0x114>)
 8000ad0:	227f      	movs	r2, #127	; 0x7f
 8000ad2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 280;
 8000ad4:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <MX_RTC_Init+0x114>)
 8000ad6:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000ada:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000adc:	4b34      	ldr	r3, [pc, #208]	; (8000bb0 <MX_RTC_Init+0x114>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ae2:	4b33      	ldr	r3, [pc, #204]	; (8000bb0 <MX_RTC_Init+0x114>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ae8:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <MX_RTC_Init+0x114>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aee:	4830      	ldr	r0, [pc, #192]	; (8000bb0 <MX_RTC_Init+0x114>)
 8000af0:	f003 fef4 	bl	80048dc <HAL_RTC_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000afa:	f000 ff9f 	bl	8001a3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4823      	ldr	r0, [pc, #140]	; (8000bb0 <MX_RTC_Init+0x114>)
 8000b22:	f003 ff6c 	bl	80049fe <HAL_RTC_SetTime>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000b2c:	f000 ff86 	bl	8001a3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b30:	2301      	movs	r3, #1
 8000b32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_MARCH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x4;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <MX_RTC_Init+0x114>)
 8000b52:	f004 f811 	bl	8004b78 <HAL_RTC_SetDate>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000b5c:	f000 ff6e 	bl	8001a3c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x3;
 8000b60:	2303      	movs	r3, #3
 8000b62:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x45;
 8000b64:	2345      	movs	r3, #69	; 0x45
 8000b66:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x4;
 8000b84:	2304      	movs	r3, #4
 8000b86:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b90:	463b      	mov	r3, r7
 8000b92:	2201      	movs	r2, #1
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <MX_RTC_Init+0x114>)
 8000b98:	f004 f895 	bl	8004cc6 <HAL_RTC_SetAlarm>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000ba2:	f000 ff4b 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	3740      	adds	r7, #64	; 0x40
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000018c 	.word	0x2000018c
 8000bb4:	40002800 	.word	0x40002800

08000bb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_TIM1_Init+0x98>)
 8000bd6:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <MX_TIM1_Init+0x9c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000bda:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_TIM1_Init+0x98>)
 8000bdc:	2253      	movs	r2, #83	; 0x53
 8000bde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <MX_TIM1_Init+0x98>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_TIM1_Init+0x98>)
 8000be8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000bec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_TIM1_Init+0x98>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_TIM1_Init+0x98>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_TIM1_Init+0x98>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c00:	4813      	ldr	r0, [pc, #76]	; (8000c50 <MX_TIM1_Init+0x98>)
 8000c02:	f004 fa45 	bl	8005090 <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c0c:	f000 ff16 	bl	8001a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <MX_TIM1_Init+0x98>)
 8000c1e:	f004 fae1 	bl	80051e4 <HAL_TIM_ConfigClockSource>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c28:	f000 ff08 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_TIM1_Init+0x98>)
 8000c3a:	f004 fcb5 	bl	80055a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c44:	f000 fefa 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200001cc 	.word	0x200001cc
 8000c54:	40010000 	.word	0x40010000

08000c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_DMA_Init+0x3c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <MX_DMA_Init+0x3c>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_DMA_Init+0x3c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2038      	movs	r0, #56	; 0x38
 8000c80:	f001 ff49 	bl	8002b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c84:	2038      	movs	r0, #56	; 0x38
 8000c86:	f001 ff62 	bl	8002b4e <HAL_NVIC_EnableIRQ>

}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b51      	ldr	r3, [pc, #324]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a50      	ldr	r2, [pc, #320]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b4e      	ldr	r3, [pc, #312]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b4a      	ldr	r3, [pc, #296]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a49      	ldr	r2, [pc, #292]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b47      	ldr	r3, [pc, #284]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a42      	ldr	r2, [pc, #264]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b3c      	ldr	r3, [pc, #240]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin|line1_relay_Pin|line0_relay_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d24:	4835      	ldr	r0, [pc, #212]	; (8000dfc <MX_GPIO_Init+0x164>)
 8000d26:	f002 fc39 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(wellmotor_relay_GPIO_Port, wellmotor_relay_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	4834      	ldr	r0, [pc, #208]	; (8000e00 <MX_GPIO_Init+0x168>)
 8000d30:	f002 fc34 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : tankmotor_relay_Pin line1_relay_Pin line0_relay_Pin */
  GPIO_InitStruct.Pin = tankmotor_relay_Pin|line1_relay_Pin|line0_relay_Pin;
 8000d34:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	482b      	ldr	r0, [pc, #172]	; (8000dfc <MX_GPIO_Init+0x164>)
 8000d4e:	f002 fa89 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : light_exti_sens_Pin button_press_Pin */
  GPIO_InitStruct.Pin = light_exti_sens_Pin|button_press_Pin;
 8000d52:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4826      	ldr	r0, [pc, #152]	; (8000e04 <MX_GPIO_Init+0x16c>)
 8000d6a:	f002 fa7b 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : button_up_Pin button_down_Pin ac_source_Pin */
  GPIO_InitStruct.Pin = button_up_Pin|button_down_Pin|ac_source_Pin;
 8000d6e:	f240 4303 	movw	r3, #1027	; 0x403
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	481e      	ldr	r0, [pc, #120]	; (8000e00 <MX_GPIO_Init+0x168>)
 8000d86:	f002 fa6d 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : wellmotor_relay_Pin */
  GPIO_InitStruct.Pin = wellmotor_relay_Pin;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(wellmotor_relay_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4817      	ldr	r0, [pc, #92]	; (8000e00 <MX_GPIO_Init+0x168>)
 8000da2:	f002 fa5f 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : dht_in_Pin */
  GPIO_InitStruct.Pin = dht_in_Pin;
 8000da6:	2320      	movs	r3, #32
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(dht_in_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <MX_GPIO_Init+0x168>)
 8000dba:	f002 fa53 	bl	8003264 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2006      	movs	r0, #6
 8000dc4:	f001 fea7 	bl	8002b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dc8:	2006      	movs	r0, #6
 8000dca:	f001 fec0 	bl	8002b4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2007      	movs	r0, #7
 8000dd4:	f001 fe9f 	bl	8002b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000dd8:	2007      	movs	r0, #7
 8000dda:	f001 feb8 	bl	8002b4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2028      	movs	r0, #40	; 0x28
 8000de4:	f001 fe97 	bl	8002b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000de8:	2028      	movs	r0, #40	; 0x28
 8000dea:	f001 feb0 	bl	8002b4e <HAL_NVIC_EnableIRQ>

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020400 	.word	0x40020400
 8000e04:	40020000 	.word	0x40020000

08000e08 <delay_us>:

/* USER CODE BEGIN 4 */

void delay_us (uint16_t us)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <delay_us+0x30>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000e1a:	bf00      	nop
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <delay_us+0x30>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d3f9      	bcc.n	8000e1c <delay_us+0x14>
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200001cc 	.word	0x200001cc

08000e3c <HAL_ADC_ConvCpltCallback>:


/*-----------------INTERRUPTS BEGIN-----------------------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a33      	ldr	r2, [pc, #204]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d15d      	bne.n	8000f08 <HAL_ADC_ConvCpltCallback+0xcc>

		for(int x =0; x<adc_channel_lenght; x++){
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e056      	b.n	8000f00 <HAL_ADC_ConvCpltCallback+0xc4>
			//adc_result_dma[x] = (adc_result_dma[x]> 2730) ? 2730:adc_result_dma[x];
			//adc_result_dma[x] = (adc_result_dma[x]< 1260) ? 1260:adc_result_dma[x];
			adc_result_percentage[x] = 100-((adc_result_dma[x]-1260)*100/1470);
 8000e52:	4a31      	ldr	r2, [pc, #196]	; (8000f18 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8000e60:	2264      	movs	r2, #100	; 0x64
 8000e62:	fb02 f303 	mul.w	r3, r2, r3
 8000e66:	4a2d      	ldr	r2, [pc, #180]	; (8000f1c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000e68:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6c:	11d2      	asrs	r2, r2, #7
 8000e6e:	17db      	asrs	r3, r3, #31
 8000e70:	1a9b      	subs	r3, r3, r2
 8000e72:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000e76:	492a      	ldr	r1, [pc, #168]	; (8000f20 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			//Produces Line average : adc_line_avg
			int y =0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
			int per_line_offset = moist_per_line[0];
 8000e82:	2302      	movs	r3, #2
 8000e84:	60fb      	str	r3, [r7, #12]
			for(int x = 0; x < adc_line_number; x++){
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	e032      	b.n	8000ef2 <HAL_ADC_ConvCpltCallback+0xb6>
				adc_line_avg[x] = 0;
 8000e8c:	4a25      	ldr	r2, [pc, #148]	; (8000f24 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	2100      	movs	r1, #0
 8000e92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(; y < per_line_offset; y++){
 8000e96:	e00f      	b.n	8000eb8 <HAL_ADC_ConvCpltCallback+0x7c>
					adc_line_avg[x] += adc_result_percentage[y];
 8000e98:	4a22      	ldr	r2, [pc, #136]	; (8000f24 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ea0:	491f      	ldr	r1, [pc, #124]	; (8000f20 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ea8:	441a      	add	r2, r3
 8000eaa:	491e      	ldr	r1, [pc, #120]	; (8000f24 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(; y < per_line_offset; y++){
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbeb      	blt.n	8000e98 <HAL_ADC_ConvCpltCallback+0x5c>
				}
				adc_line_avg[x] /= moist_per_line[x];
 8000ec0:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ec8:	4917      	ldr	r1, [pc, #92]	; (8000f28 <HAL_ADC_ConvCpltCallback+0xec>)
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ed0:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ed4:	4913      	ldr	r1, [pc, #76]	; (8000f24 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			   per_line_offset += moist_per_line[x+1];
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a11      	ldr	r2, [pc, #68]	; (8000f28 <HAL_ADC_ConvCpltCallback+0xec>)
 8000ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4413      	add	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
			for(int x = 0; x < adc_line_number; x++){
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	dbc8      	blt.n	8000e8c <HAL_ADC_ConvCpltCallback+0x50>
		for(int x =0; x<adc_channel_lenght; x++){
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	2207      	movs	r2, #7
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	4293      	cmp	r3, r2
 8000f06:	dba4      	blt.n	8000e52 <HAL_ADC_ConvCpltCallback+0x16>
			}
		}
	}
}
 8000f08:	bf00      	nop
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	200000c4 	.word	0x200000c4
 8000f18:	20000058 	.word	0x20000058
 8000f1c:	164a893b 	.word	0x164a893b
 8000f20:	20000110 	.word	0x20000110
 8000f24:	20000048 	.word	0x20000048
 8000f28:	0800585c 	.word	0x0800585c

08000f2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
	menu_lcd_refresh = 1;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
    if(GPIO_Pin == button_up_Pin){
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d103      	bne.n	8000f4a <HAL_GPIO_EXTI_Callback+0x1e>
    	menu_up = 1;
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
    }else if(GPIO_Pin == button_down_Pin){
    	menu_down = 1;
    }else if(GPIO_Pin == button_press_Pin){
    	menu_click = 1;
    }
}
 8000f48:	e00d      	b.n	8000f66 <HAL_GPIO_EXTI_Callback+0x3a>
    }else if(GPIO_Pin == button_down_Pin){
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d103      	bne.n	8000f58 <HAL_GPIO_EXTI_Callback+0x2c>
    	menu_down = 1;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_GPIO_EXTI_Callback+0x50>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
}
 8000f56:	e006      	b.n	8000f66 <HAL_GPIO_EXTI_Callback+0x3a>
    }else if(GPIO_Pin == button_press_Pin){
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f5e:	d102      	bne.n	8000f66 <HAL_GPIO_EXTI_Callback+0x3a>
    	menu_click = 1;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_GPIO_EXTI_Callback+0x54>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000028 	.word	0x20000028
 8000f78:	20000030 	.word	0x20000030
 8000f7c:	20000034 	.word	0x20000034
 8000f80:	2000002c 	.word	0x2000002c

08000f84 <Set_Pin_Output>:
/*-----------------INTERRUPTS END-----------------------*/


/*-----------------DHT11 BEGIN--------------------------*/
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f002 f956 	bl	8003264 <HAL_GPIO_Init>
}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f002 f938 	bl	8003264 <HAL_GPIO_Init>
}
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <DHT11_Start>:

void DHT11_Start (void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001000:	2120      	movs	r1, #32
 8001002:	480d      	ldr	r0, [pc, #52]	; (8001038 <DHT11_Start+0x3c>)
 8001004:	f7ff ffbe 	bl	8000f84 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001008:	2200      	movs	r2, #0
 800100a:	2120      	movs	r1, #32
 800100c:	480a      	ldr	r0, [pc, #40]	; (8001038 <DHT11_Start+0x3c>)
 800100e:	f002 fac5 	bl	800359c <HAL_GPIO_WritePin>
	delay_us (18000);   // wait for 18ms
 8001012:	f244 6050 	movw	r0, #18000	; 0x4650
 8001016:	f7ff fef7 	bl	8000e08 <delay_us>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800101a:	2201      	movs	r2, #1
 800101c:	2120      	movs	r1, #32
 800101e:	4806      	ldr	r0, [pc, #24]	; (8001038 <DHT11_Start+0x3c>)
 8001020:	f002 fabc 	bl	800359c <HAL_GPIO_WritePin>
    delay_us (20);   // wait for 20us
 8001024:	2014      	movs	r0, #20
 8001026:	f7ff feef 	bl	8000e08 <delay_us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 800102a:	2120      	movs	r1, #32
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <DHT11_Start+0x3c>)
 800102e:	f7ff ffc7 	bl	8000fc0 <Set_Pin_Input>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40020400 	.word	0x40020400

0800103c <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	71fb      	strb	r3, [r7, #7]
	delay_us (40);
 8001046:	2028      	movs	r0, #40	; 0x28
 8001048:	f7ff fede 	bl	8000e08 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800104c:	2120      	movs	r1, #32
 800104e:	4811      	ldr	r0, [pc, #68]	; (8001094 <DHT11_Check_Response+0x58>)
 8001050:	f002 fa8c 	bl	800356c <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10e      	bne.n	8001078 <DHT11_Check_Response+0x3c>
	{
		delay_us (80);
 800105a:	2050      	movs	r0, #80	; 0x50
 800105c:	f7ff fed4 	bl	8000e08 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001060:	2120      	movs	r1, #32
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <DHT11_Check_Response+0x58>)
 8001064:	f002 fa82 	bl	800356c <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <DHT11_Check_Response+0x38>
 800106e:	2301      	movs	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	e001      	b.n	8001078 <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 8001074:	23ff      	movs	r3, #255	; 0xff
 8001076:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8001078:	bf00      	nop
 800107a:	2120      	movs	r1, #32
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <DHT11_Check_Response+0x58>)
 800107e:	f002 fa75 	bl	800356c <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f8      	bne.n	800107a <DHT11_Check_Response+0x3e>

	return Response;
 8001088:	79fb      	ldrb	r3, [r7, #7]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020400 	.word	0x40020400

08001098 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800109e:	2300      	movs	r3, #0
 80010a0:	71bb      	strb	r3, [r7, #6]
 80010a2:	e037      	b.n	8001114 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80010a4:	bf00      	nop
 80010a6:	2120      	movs	r1, #32
 80010a8:	481e      	ldr	r0, [pc, #120]	; (8001124 <DHT11_Read+0x8c>)
 80010aa:	f002 fa5f 	bl	800356c <HAL_GPIO_ReadPin>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f8      	beq.n	80010a6 <DHT11_Read+0xe>
		delay_us (40);   // wait for 40 us
 80010b4:	2028      	movs	r0, #40	; 0x28
 80010b6:	f7ff fea7 	bl	8000e08 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80010ba:	2120      	movs	r1, #32
 80010bc:	4819      	ldr	r0, [pc, #100]	; (8001124 <DHT11_Read+0x8c>)
 80010be:	f002 fa55 	bl	800356c <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10e      	bne.n	80010e6 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2201      	movs	r2, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	b25a      	sxtb	r2, r3
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	4013      	ands	r3, r2
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	e00b      	b.n	80010fe <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	f1c3 0307 	rsb	r3, r3, #7
 80010ec:	2201      	movs	r2, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	b25a      	sxtb	r2, r3
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80010fe:	bf00      	nop
 8001100:	2120      	movs	r1, #32
 8001102:	4808      	ldr	r0, [pc, #32]	; (8001124 <DHT11_Read+0x8c>)
 8001104:	f002 fa32 	bl	800356c <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f8      	bne.n	8001100 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 800110e:	79bb      	ldrb	r3, [r7, #6]
 8001110:	3301      	adds	r3, #1
 8001112:	71bb      	strb	r3, [r7, #6]
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	2b07      	cmp	r3, #7
 8001118:	d9c4      	bls.n	80010a4 <DHT11_Read+0xc>
	}
	return i;
 800111a:	79fb      	ldrb	r3, [r7, #7]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40020400 	.word	0x40020400

08001128 <lcd_initial_message>:
	sprintf(timeBuff,"%d,%d.%d", currTime.Hours, currTime.Minutes, currTime.Seconds);
	sprintf(dateBuff,"%02d-%02d-%2d",currDate.Date, currDate.Month, 2000 + currDate.Year);
}

/*-----------------MENU BEGIN-------------------------*/
void lcd_initial_message(){
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	lcd_init ();
 800112c:	f7ff fa64 	bl	80005f8 <lcd_init>
	lcd_send_string ("ECODROP");
 8001130:	4812      	ldr	r0, [pc, #72]	; (800117c <lcd_initial_message+0x54>)
 8001132:	f7ff faa3 	bl	800067c <lcd_send_string>
	HAL_Delay(500);
 8001136:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800113a:	f000 feb1 	bl	8001ea0 <HAL_Delay>
	lcd_put_cur(1, 0);
 800113e:	2100      	movs	r1, #0
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff fa3a 	bl	80005ba <lcd_put_cur>
	lcd_send_string("Irrigation");
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <lcd_initial_message+0x58>)
 8001148:	f7ff fa98 	bl	800067c <lcd_send_string>
	HAL_Delay(1000);
 800114c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001150:	f000 fea6 	bl	8001ea0 <HAL_Delay>
	lcd_send_cmd (0x01);
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff f9b9 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(100);
 800115a:	2064      	movs	r0, #100	; 0x64
 800115c:	f000 fea0 	bl	8001ea0 <HAL_Delay>
	lcd_init ();
 8001160:	f7ff fa4a 	bl	80005f8 <lcd_init>
	lcd_send_string ("> Manual Mode");
 8001164:	4807      	ldr	r0, [pc, #28]	; (8001184 <lcd_initial_message+0x5c>)
 8001166:	f7ff fa89 	bl	800067c <lcd_send_string>
	lcd_put_cur(1, 0);
 800116a:	2100      	movs	r1, #0
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fa24 	bl	80005ba <lcd_put_cur>
	lcd_send_string("  Planner Mode  ");
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <lcd_initial_message+0x60>)
 8001174:	f7ff fa82 	bl	800067c <lcd_send_string>

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	08005710 	.word	0x08005710
 8001180:	08005718 	.word	0x08005718
 8001184:	08005724 	.word	0x08005724
 8001188:	08005734 	.word	0x08005734

0800118c <menu_func>:

void menu_func(int refresh, int reset){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
	if(refresh){
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 842f 	beq.w	80019fc <menu_func+0x870>
		current_page = (reset) ? 0:current_page;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <menu_func+0x1e>
 80011a4:	4baa      	ldr	r3, [pc, #680]	; (8001450 <menu_func+0x2c4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	e000      	b.n	80011ac <menu_func+0x20>
 80011aa:	2300      	movs	r3, #0
 80011ac:	4aa8      	ldr	r2, [pc, #672]	; (8001450 <menu_func+0x2c4>)
 80011ae:	6013      	str	r3, [r2, #0]
		lcd_clear();
 80011b0:	f7ff f9ec 	bl	800058c <lcd_clear>
		switch(current_page){
 80011b4:	4ba6      	ldr	r3, [pc, #664]	; (8001450 <menu_func+0x2c4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b11      	cmp	r3, #17
 80011ba:	f200 8413 	bhi.w	80019e4 <menu_func+0x858>
 80011be:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <menu_func+0x38>)
 80011c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c4:	0800120d 	.word	0x0800120d
 80011c8:	08001281 	.word	0x08001281
 80011cc:	080012f5 	.word	0x080012f5
 80011d0:	08001369 	.word	0x08001369
 80011d4:	080013dd 	.word	0x080013dd
 80011d8:	08001489 	.word	0x08001489
 80011dc:	080014fd 	.word	0x080014fd
 80011e0:	08001547 	.word	0x08001547
 80011e4:	080015bb 	.word	0x080015bb
 80011e8:	0800162f 	.word	0x0800162f
 80011ec:	080016a3 	.word	0x080016a3
 80011f0:	080016e1 	.word	0x080016e1
 80011f4:	0800171f 	.word	0x0800171f
 80011f8:	080017d7 	.word	0x080017d7
 80011fc:	0800184b 	.word	0x0800184b
 8001200:	08001889 	.word	0x08001889
 8001204:	080018fd 	.word	0x080018fd
 8001208:	08001971 	.word	0x08001971
			case 0:
				if(menu_click){
 800120c:	4b91      	ldr	r3, [pc, #580]	; (8001454 <menu_func+0x2c8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00a      	beq.n	800122a <menu_func+0x9e>
					current_page = 4;
 8001214:	4b8e      	ldr	r3, [pc, #568]	; (8001450 <menu_func+0x2c4>)
 8001216:	2204      	movs	r2, #4
 8001218:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800121a:	4b8e      	ldr	r3, [pc, #568]	; (8001454 <menu_func+0x2c8>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001220:	2100      	movs	r1, #0
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff ffb2 	bl	800118c <menu_func>
					break;
 8001228:	e3dc      	b.n	80019e4 <menu_func+0x858>
				  }else if(menu_down){
 800122a:	4b8b      	ldr	r3, [pc, #556]	; (8001458 <menu_func+0x2cc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00a      	beq.n	8001248 <menu_func+0xbc>
					 current_page = 1;
 8001232:	4b87      	ldr	r3, [pc, #540]	; (8001450 <menu_func+0x2c4>)
 8001234:	2201      	movs	r2, #1
 8001236:	601a      	str	r2, [r3, #0]
					 menu_down=0;
 8001238:	4b87      	ldr	r3, [pc, #540]	; (8001458 <menu_func+0x2cc>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
					 menu_func(1, 0);
 800123e:	2100      	movs	r1, #0
 8001240:	2001      	movs	r0, #1
 8001242:	f7ff ffa3 	bl	800118c <menu_func>
					 break;
 8001246:	e3cd      	b.n	80019e4 <menu_func+0x858>
				  }else if(menu_up){
 8001248:	4b84      	ldr	r3, [pc, #528]	; (800145c <menu_func+0x2d0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00a      	beq.n	8001266 <menu_func+0xda>
					 current_page = 3;
 8001250:	4b7f      	ldr	r3, [pc, #508]	; (8001450 <menu_func+0x2c4>)
 8001252:	2203      	movs	r2, #3
 8001254:	601a      	str	r2, [r3, #0]
					 menu_up =0;
 8001256:	4b81      	ldr	r3, [pc, #516]	; (800145c <menu_func+0x2d0>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
					 menu_func(1, 0);
 800125c:	2100      	movs	r1, #0
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff ff94 	bl	800118c <menu_func>
					 break;
 8001264:	e3be      	b.n	80019e4 <menu_func+0x858>
				  }
				lcd_init ();
 8001266:	f7ff f9c7 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Manual Mode");
 800126a:	487d      	ldr	r0, [pc, #500]	; (8001460 <menu_func+0x2d4>)
 800126c:	f7ff fa06 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 8001270:	2100      	movs	r1, #0
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff f9a1 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Planner Mode  ");
 8001278:	487a      	ldr	r0, [pc, #488]	; (8001464 <menu_func+0x2d8>)
 800127a:	f7ff f9ff 	bl	800067c <lcd_send_string>
				break;
 800127e:	e3b1      	b.n	80019e4 <menu_func+0x858>

			case 1:
				if(menu_click){
 8001280:	4b74      	ldr	r3, [pc, #464]	; (8001454 <menu_func+0x2c8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00a      	beq.n	800129e <menu_func+0x112>
					current_page = 7;
 8001288:	4b71      	ldr	r3, [pc, #452]	; (8001450 <menu_func+0x2c4>)
 800128a:	2207      	movs	r2, #7
 800128c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800128e:	4b71      	ldr	r3, [pc, #452]	; (8001454 <menu_func+0x2c8>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001294:	2100      	movs	r1, #0
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff ff78 	bl	800118c <menu_func>
					break;
 800129c:	e3a2      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_down){
 800129e:	4b6e      	ldr	r3, [pc, #440]	; (8001458 <menu_func+0x2cc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00a      	beq.n	80012bc <menu_func+0x130>
					current_page = 2;
 80012a6:	4b6a      	ldr	r3, [pc, #424]	; (8001450 <menu_func+0x2c4>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	601a      	str	r2, [r3, #0]
					menu_down =0;
 80012ac:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <menu_func+0x2cc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80012b2:	2100      	movs	r1, #0
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff ff69 	bl	800118c <menu_func>
					break;
 80012ba:	e393      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_up){
 80012bc:	4b67      	ldr	r3, [pc, #412]	; (800145c <menu_func+0x2d0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00a      	beq.n	80012da <menu_func+0x14e>
					current_page = 0;
 80012c4:	4b62      	ldr	r3, [pc, #392]	; (8001450 <menu_func+0x2c4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
					menu_up =0;
 80012ca:	4b64      	ldr	r3, [pc, #400]	; (800145c <menu_func+0x2d0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80012d0:	2100      	movs	r1, #0
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff ff5a 	bl	800118c <menu_func>
					break;
 80012d8:	e384      	b.n	80019e4 <menu_func+0x858>
				}
				lcd_init ();
 80012da:	f7ff f98d 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Planner Mode  ");
 80012de:	4862      	ldr	r0, [pc, #392]	; (8001468 <menu_func+0x2dc>)
 80012e0:	f7ff f9cc 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 80012e4:	2100      	movs	r1, #0
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff f967 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Auto Mode");
 80012ec:	485f      	ldr	r0, [pc, #380]	; (800146c <menu_func+0x2e0>)
 80012ee:	f7ff f9c5 	bl	800067c <lcd_send_string>
				break;
 80012f2:	e377      	b.n	80019e4 <menu_func+0x858>

			case 2:
				if(menu_click){
 80012f4:	4b57      	ldr	r3, [pc, #348]	; (8001454 <menu_func+0x2c8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00a      	beq.n	8001312 <menu_func+0x186>
					current_page = 14;
 80012fc:	4b54      	ldr	r3, [pc, #336]	; (8001450 <menu_func+0x2c4>)
 80012fe:	220e      	movs	r2, #14
 8001300:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001302:	4b54      	ldr	r3, [pc, #336]	; (8001454 <menu_func+0x2c8>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001308:	2100      	movs	r1, #0
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff ff3e 	bl	800118c <menu_func>
					break;
 8001310:	e368      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_down){
 8001312:	4b51      	ldr	r3, [pc, #324]	; (8001458 <menu_func+0x2cc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00a      	beq.n	8001330 <menu_func+0x1a4>
					current_page = 3;
 800131a:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <menu_func+0x2c4>)
 800131c:	2203      	movs	r2, #3
 800131e:	601a      	str	r2, [r3, #0]
					menu_down =0;
 8001320:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <menu_func+0x2cc>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001326:	2100      	movs	r1, #0
 8001328:	2001      	movs	r0, #1
 800132a:	f7ff ff2f 	bl	800118c <menu_func>
					break;
 800132e:	e359      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_up){
 8001330:	4b4a      	ldr	r3, [pc, #296]	; (800145c <menu_func+0x2d0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00a      	beq.n	800134e <menu_func+0x1c2>
					current_page = 1;
 8001338:	4b45      	ldr	r3, [pc, #276]	; (8001450 <menu_func+0x2c4>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
					menu_up =0;
 800133e:	4b47      	ldr	r3, [pc, #284]	; (800145c <menu_func+0x2d0>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001344:	2100      	movs	r1, #0
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff ff20 	bl	800118c <menu_func>
					break;
 800134c:	e34a      	b.n	80019e4 <menu_func+0x858>
				}
				lcd_init ();
 800134e:	f7ff f953 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Auto Mode");
 8001352:	4847      	ldr	r0, [pc, #284]	; (8001470 <menu_func+0x2e4>)
 8001354:	f7ff f992 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 8001358:	2100      	movs	r1, #0
 800135a:	2001      	movs	r0, #1
 800135c:	f7ff f92d 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Settings");
 8001360:	4844      	ldr	r0, [pc, #272]	; (8001474 <menu_func+0x2e8>)
 8001362:	f7ff f98b 	bl	800067c <lcd_send_string>
				break;
 8001366:	e33d      	b.n	80019e4 <menu_func+0x858>

			case 3:
				if(menu_click){
 8001368:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <menu_func+0x2c8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00a      	beq.n	8001386 <menu_func+0x1fa>
					//Manual Sub Menu
					current_page = 15;
 8001370:	4b37      	ldr	r3, [pc, #220]	; (8001450 <menu_func+0x2c4>)
 8001372:	220f      	movs	r2, #15
 8001374:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001376:	4b37      	ldr	r3, [pc, #220]	; (8001454 <menu_func+0x2c8>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800137c:	2100      	movs	r1, #0
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff ff04 	bl	800118c <menu_func>
					break;
 8001384:	e32e      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_down){
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <menu_func+0x2cc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00a      	beq.n	80013a4 <menu_func+0x218>
					current_page = 0;
 800138e:	4b30      	ldr	r3, [pc, #192]	; (8001450 <menu_func+0x2c4>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <menu_func+0x2cc>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800139a:	2100      	movs	r1, #0
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff fef5 	bl	800118c <menu_func>
					break;
 80013a2:	e31f      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_up){
 80013a4:	4b2d      	ldr	r3, [pc, #180]	; (800145c <menu_func+0x2d0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00a      	beq.n	80013c2 <menu_func+0x236>
					current_page = 2;
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <menu_func+0x2c4>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <menu_func+0x2d0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80013b8:	2100      	movs	r1, #0
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff fee6 	bl	800118c <menu_func>
					break;
 80013c0:	e310      	b.n	80019e4 <menu_func+0x858>
				}
				lcd_init ();
 80013c2:	f7ff f919 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Settings");
 80013c6:	482c      	ldr	r0, [pc, #176]	; (8001478 <menu_func+0x2ec>)
 80013c8:	f7ff f958 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 80013cc:	2100      	movs	r1, #0
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff f8f3 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  ");
 80013d4:	4829      	ldr	r0, [pc, #164]	; (800147c <menu_func+0x2f0>)
 80013d6:	f7ff f951 	bl	800067c <lcd_send_string>
				break;
 80013da:	e303      	b.n	80019e4 <menu_func+0x858>

			case 4:
				if(menu_click){
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <menu_func+0x2c8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00a      	beq.n	80013fa <menu_func+0x26e>
					current_page = 6;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <menu_func+0x2c4>)
 80013e6:	2206      	movs	r2, #6
 80013e8:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <menu_func+0x2c8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80013f0:	2100      	movs	r1, #0
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff feca 	bl	800118c <menu_func>
					break;
 80013f8:	e2f4      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_down){
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <menu_func+0x2cc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00a      	beq.n	8001418 <menu_func+0x28c>
					current_page = 5;
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <menu_func+0x2c4>)
 8001404:	2205      	movs	r2, #5
 8001406:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <menu_func+0x2cc>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800140e:	2100      	movs	r1, #0
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff febb 	bl	800118c <menu_func>
					break;
 8001416:	e2e5      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_up){
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <menu_func+0x2d0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00a      	beq.n	8001436 <menu_func+0x2aa>
					current_page = 5;
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <menu_func+0x2c4>)
 8001422:	2205      	movs	r2, #5
 8001424:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <menu_func+0x2d0>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800142c:	2100      	movs	r1, #0
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff feac 	bl	800118c <menu_func>
					break;
 8001434:	e2d6      	b.n	80019e4 <menu_func+0x858>
				}
				lcd_init ();
 8001436:	f7ff f8df 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Press Start");
 800143a:	4811      	ldr	r0, [pc, #68]	; (8001480 <menu_func+0x2f4>)
 800143c:	f7ff f91e 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 8001440:	2100      	movs	r1, #0
 8001442:	2001      	movs	r0, #1
 8001444:	f7ff f8b9 	bl	80005ba <lcd_put_cur>
				lcd_send_string(" Back");
 8001448:	480e      	ldr	r0, [pc, #56]	; (8001484 <menu_func+0x2f8>)
 800144a:	f7ff f917 	bl	800067c <lcd_send_string>
				break;
 800144e:	e2c9      	b.n	80019e4 <menu_func+0x858>
 8001450:	20000038 	.word	0x20000038
 8001454:	2000002c 	.word	0x2000002c
 8001458:	20000034 	.word	0x20000034
 800145c:	20000030 	.word	0x20000030
 8001460:	08005724 	.word	0x08005724
 8001464:	08005734 	.word	0x08005734
 8001468:	08005748 	.word	0x08005748
 800146c:	0800575c 	.word	0x0800575c
 8001470:	08005768 	.word	0x08005768
 8001474:	08005774 	.word	0x08005774
 8001478:	08005780 	.word	0x08005780
 800147c:	0800578c 	.word	0x0800578c
 8001480:	08005790 	.word	0x08005790
 8001484:	080057a0 	.word	0x080057a0

			case 5:
				if(menu_click){
 8001488:	4bac      	ldr	r3, [pc, #688]	; (800173c <menu_func+0x5b0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00a      	beq.n	80014a6 <menu_func+0x31a>
					current_page = 0;
 8001490:	4bab      	ldr	r3, [pc, #684]	; (8001740 <menu_func+0x5b4>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001496:	4ba9      	ldr	r3, [pc, #676]	; (800173c <menu_func+0x5b0>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800149c:	2100      	movs	r1, #0
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff fe74 	bl	800118c <menu_func>
					break;
 80014a4:	e29e      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_down){
 80014a6:	4ba7      	ldr	r3, [pc, #668]	; (8001744 <menu_func+0x5b8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00a      	beq.n	80014c4 <menu_func+0x338>
					current_page = 4;
 80014ae:	4ba4      	ldr	r3, [pc, #656]	; (8001740 <menu_func+0x5b4>)
 80014b0:	2204      	movs	r2, #4
 80014b2:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80014b4:	4ba3      	ldr	r3, [pc, #652]	; (8001744 <menu_func+0x5b8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80014ba:	2100      	movs	r1, #0
 80014bc:	2001      	movs	r0, #1
 80014be:	f7ff fe65 	bl	800118c <menu_func>
					break;
 80014c2:	e28f      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_up){
 80014c4:	4ba0      	ldr	r3, [pc, #640]	; (8001748 <menu_func+0x5bc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00a      	beq.n	80014e2 <menu_func+0x356>
					current_page = 4;
 80014cc:	4b9c      	ldr	r3, [pc, #624]	; (8001740 <menu_func+0x5b4>)
 80014ce:	2204      	movs	r2, #4
 80014d0:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80014d2:	4b9d      	ldr	r3, [pc, #628]	; (8001748 <menu_func+0x5bc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80014d8:	2100      	movs	r1, #0
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fe56 	bl	800118c <menu_func>
					break;
 80014e0:	e280      	b.n	80019e4 <menu_func+0x858>
				}
				lcd_init ();
 80014e2:	f7ff f889 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Back");
 80014e6:	4899      	ldr	r0, [pc, #612]	; (800174c <menu_func+0x5c0>)
 80014e8:	f7ff f8c8 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 80014ec:	2100      	movs	r1, #0
 80014ee:	2001      	movs	r0, #1
 80014f0:	f7ff f863 	bl	80005ba <lcd_put_cur>
				lcd_send_string("");
 80014f4:	4896      	ldr	r0, [pc, #600]	; (8001750 <menu_func+0x5c4>)
 80014f6:	f7ff f8c1 	bl	800067c <lcd_send_string>
				break;
 80014fa:	e273      	b.n	80019e4 <menu_func+0x858>

			case 6:
				if(menu_click){
 80014fc:	4b8f      	ldr	r3, [pc, #572]	; (800173c <menu_func+0x5b0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00a      	beq.n	800151a <menu_func+0x38e>
					current_page = 4;
 8001504:	4b8e      	ldr	r3, [pc, #568]	; (8001740 <menu_func+0x5b4>)
 8001506:	2204      	movs	r2, #4
 8001508:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800150a:	4b8c      	ldr	r3, [pc, #560]	; (800173c <menu_func+0x5b0>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001510:	2100      	movs	r1, #0
 8001512:	2001      	movs	r0, #1
 8001514:	f7ff fe3a 	bl	800118c <menu_func>
					lcd_init ();
					lcd_send_string ("Watering");
					lcd_put_cur(1, 0);
					lcd_send_string("Now");
				}
				break;
 8001518:	e264      	b.n	80019e4 <menu_func+0x858>
					current_page = 6;
 800151a:	4b89      	ldr	r3, [pc, #548]	; (8001740 <menu_func+0x5b4>)
 800151c:	2206      	movs	r2, #6
 800151e:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001520:	4b89      	ldr	r3, [pc, #548]	; (8001748 <menu_func+0x5bc>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001526:	4b87      	ldr	r3, [pc, #540]	; (8001744 <menu_func+0x5b8>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
					lcd_init ();
 800152c:	f7ff f864 	bl	80005f8 <lcd_init>
					lcd_send_string ("Watering");
 8001530:	4888      	ldr	r0, [pc, #544]	; (8001754 <menu_func+0x5c8>)
 8001532:	f7ff f8a3 	bl	800067c <lcd_send_string>
					lcd_put_cur(1, 0);
 8001536:	2100      	movs	r1, #0
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff f83e 	bl	80005ba <lcd_put_cur>
					lcd_send_string("Now");
 800153e:	4886      	ldr	r0, [pc, #536]	; (8001758 <menu_func+0x5cc>)
 8001540:	f7ff f89c 	bl	800067c <lcd_send_string>
				break;
 8001544:	e24e      	b.n	80019e4 <menu_func+0x858>

			case 7:
				if(menu_click){
 8001546:	4b7d      	ldr	r3, [pc, #500]	; (800173c <menu_func+0x5b0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00a      	beq.n	8001564 <menu_func+0x3d8>
					current_page = 10;
 800154e:	4b7c      	ldr	r3, [pc, #496]	; (8001740 <menu_func+0x5b4>)
 8001550:	220a      	movs	r2, #10
 8001552:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001554:	4b79      	ldr	r3, [pc, #484]	; (800173c <menu_func+0x5b0>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800155a:	2100      	movs	r1, #0
 800155c:	2001      	movs	r0, #1
 800155e:	f7ff fe15 	bl	800118c <menu_func>
					break;
 8001562:	e23f      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_down){
 8001564:	4b77      	ldr	r3, [pc, #476]	; (8001744 <menu_func+0x5b8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00a      	beq.n	8001582 <menu_func+0x3f6>
					current_page = 8;
 800156c:	4b74      	ldr	r3, [pc, #464]	; (8001740 <menu_func+0x5b4>)
 800156e:	2208      	movs	r2, #8
 8001570:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001572:	4b74      	ldr	r3, [pc, #464]	; (8001744 <menu_func+0x5b8>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001578:	2100      	movs	r1, #0
 800157a:	2001      	movs	r0, #1
 800157c:	f7ff fe06 	bl	800118c <menu_func>
					break;
 8001580:	e230      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_up){
 8001582:	4b71      	ldr	r3, [pc, #452]	; (8001748 <menu_func+0x5bc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00a      	beq.n	80015a0 <menu_func+0x414>
					current_page = 13;
 800158a:	4b6d      	ldr	r3, [pc, #436]	; (8001740 <menu_func+0x5b4>)
 800158c:	220d      	movs	r2, #13
 800158e:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001590:	4b6d      	ldr	r3, [pc, #436]	; (8001748 <menu_func+0x5bc>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001596:	2100      	movs	r1, #0
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff fdf7 	bl	800118c <menu_func>
					break;
 800159e:	e221      	b.n	80019e4 <menu_func+0x858>
				}
				lcd_init ();
 80015a0:	f7ff f82a 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Line 1");
 80015a4:	486d      	ldr	r0, [pc, #436]	; (800175c <menu_func+0x5d0>)
 80015a6:	f7ff f869 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 80015aa:	2100      	movs	r1, #0
 80015ac:	2001      	movs	r0, #1
 80015ae:	f7ff f804 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Line 2");
 80015b2:	486b      	ldr	r0, [pc, #428]	; (8001760 <menu_func+0x5d4>)
 80015b4:	f7ff f862 	bl	800067c <lcd_send_string>
				break;
 80015b8:	e214      	b.n	80019e4 <menu_func+0x858>

			case 8:
				if(menu_click){
 80015ba:	4b60      	ldr	r3, [pc, #384]	; (800173c <menu_func+0x5b0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00a      	beq.n	80015d8 <menu_func+0x44c>
					current_page = 10;
 80015c2:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <menu_func+0x5b4>)
 80015c4:	220a      	movs	r2, #10
 80015c6:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80015c8:	4b5c      	ldr	r3, [pc, #368]	; (800173c <menu_func+0x5b0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80015ce:	2100      	movs	r1, #0
 80015d0:	2001      	movs	r0, #1
 80015d2:	f7ff fddb 	bl	800118c <menu_func>
					break;
 80015d6:	e205      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_down){
 80015d8:	4b5a      	ldr	r3, [pc, #360]	; (8001744 <menu_func+0x5b8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00a      	beq.n	80015f6 <menu_func+0x46a>
					current_page = 9;
 80015e0:	4b57      	ldr	r3, [pc, #348]	; (8001740 <menu_func+0x5b4>)
 80015e2:	2209      	movs	r2, #9
 80015e4:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80015e6:	4b57      	ldr	r3, [pc, #348]	; (8001744 <menu_func+0x5b8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80015ec:	2100      	movs	r1, #0
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff fdcc 	bl	800118c <menu_func>
					break;
 80015f4:	e1f6      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_up){
 80015f6:	4b54      	ldr	r3, [pc, #336]	; (8001748 <menu_func+0x5bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00a      	beq.n	8001614 <menu_func+0x488>
					current_page = 7;
 80015fe:	4b50      	ldr	r3, [pc, #320]	; (8001740 <menu_func+0x5b4>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <menu_func+0x5bc>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800160a:	2100      	movs	r1, #0
 800160c:	2001      	movs	r0, #1
 800160e:	f7ff fdbd 	bl	800118c <menu_func>
					break;
 8001612:	e1e7      	b.n	80019e4 <menu_func+0x858>
				}
				lcd_init ();
 8001614:	f7fe fff0 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Line 2");
 8001618:	4852      	ldr	r0, [pc, #328]	; (8001764 <menu_func+0x5d8>)
 800161a:	f7ff f82f 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 800161e:	2100      	movs	r1, #0
 8001620:	2001      	movs	r0, #1
 8001622:	f7fe ffca 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Time");
 8001626:	4850      	ldr	r0, [pc, #320]	; (8001768 <menu_func+0x5dc>)
 8001628:	f7ff f828 	bl	800067c <lcd_send_string>
				break;
 800162c:	e1da      	b.n	80019e4 <menu_func+0x858>

			case 9:
				if(menu_click){
 800162e:	4b43      	ldr	r3, [pc, #268]	; (800173c <menu_func+0x5b0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00a      	beq.n	800164c <menu_func+0x4c0>
					current_page = 11;
 8001636:	4b42      	ldr	r3, [pc, #264]	; (8001740 <menu_func+0x5b4>)
 8001638:	220b      	movs	r2, #11
 800163a:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800163c:	4b3f      	ldr	r3, [pc, #252]	; (800173c <menu_func+0x5b0>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001642:	2100      	movs	r1, #0
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff fda1 	bl	800118c <menu_func>
					break;
 800164a:	e1cb      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_down){
 800164c:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <menu_func+0x5b8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00a      	beq.n	800166a <menu_func+0x4de>
					current_page = 12;
 8001654:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <menu_func+0x5b4>)
 8001656:	220c      	movs	r2, #12
 8001658:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800165a:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <menu_func+0x5b8>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001660:	2100      	movs	r1, #0
 8001662:	2001      	movs	r0, #1
 8001664:	f7ff fd92 	bl	800118c <menu_func>
					break;
 8001668:	e1bc      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_up){
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <menu_func+0x5bc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00a      	beq.n	8001688 <menu_func+0x4fc>
					current_page = 8;
 8001672:	4b33      	ldr	r3, [pc, #204]	; (8001740 <menu_func+0x5b4>)
 8001674:	2208      	movs	r2, #8
 8001676:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001678:	4b33      	ldr	r3, [pc, #204]	; (8001748 <menu_func+0x5bc>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800167e:	2100      	movs	r1, #0
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff fd83 	bl	800118c <menu_func>
					break;
 8001686:	e1ad      	b.n	80019e4 <menu_func+0x858>
				}
				lcd_init ();
 8001688:	f7fe ffb6 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Time");
 800168c:	4837      	ldr	r0, [pc, #220]	; (800176c <menu_func+0x5e0>)
 800168e:	f7fe fff5 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 8001692:	2100      	movs	r1, #0
 8001694:	2001      	movs	r0, #1
 8001696:	f7fe ff90 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Start");
 800169a:	4835      	ldr	r0, [pc, #212]	; (8001770 <menu_func+0x5e4>)
 800169c:	f7fe ffee 	bl	800067c <lcd_send_string>
				break;
 80016a0:	e1a0      	b.n	80019e4 <menu_func+0x858>

			case 10:
				if(menu_click){
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <menu_func+0x5b0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00a      	beq.n	80016c0 <menu_func+0x534>
					current_page = 7;
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <menu_func+0x5b4>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <menu_func+0x5b0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80016b6:	2100      	movs	r1, #0
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff fd67 	bl	800118c <menu_func>
					break;
 80016be:	e191      	b.n	80019e4 <menu_func+0x858>
				}else{
					current_page = 10;
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <menu_func+0x5b4>)
 80016c2:	220a      	movs	r2, #10
 80016c4:	601a      	str	r2, [r3, #0]
					lcd_init ();
 80016c6:	f7fe ff97 	bl	80005f8 <lcd_init>
					lcd_send_string ("> 20");
 80016ca:	482a      	ldr	r0, [pc, #168]	; (8001774 <menu_func+0x5e8>)
 80016cc:	f7fe ffd6 	bl	800067c <lcd_send_string>
					lcd_put_cur(1, 0);
 80016d0:	2100      	movs	r1, #0
 80016d2:	2001      	movs	r0, #1
 80016d4:	f7fe ff71 	bl	80005ba <lcd_put_cur>
					lcd_send_string("  ");
 80016d8:	4827      	ldr	r0, [pc, #156]	; (8001778 <menu_func+0x5ec>)
 80016da:	f7fe ffcf 	bl	800067c <lcd_send_string>
				}
				break;
 80016de:	e181      	b.n	80019e4 <menu_func+0x858>

			case 11:
				if(menu_click){
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <menu_func+0x5b0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00a      	beq.n	80016fe <menu_func+0x572>
					current_page = 9;
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <menu_func+0x5b4>)
 80016ea:	2209      	movs	r2, #9
 80016ec:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <menu_func+0x5b0>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80016f4:	2100      	movs	r1, #0
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff fd48 	bl	800118c <menu_func>
					break;
 80016fc:	e172      	b.n	80019e4 <menu_func+0x858>
				}else{
					current_page = 11;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <menu_func+0x5b4>)
 8001700:	220b      	movs	r2, #11
 8001702:	601a      	str	r2, [r3, #0]
					lcd_init ();
 8001704:	f7fe ff78 	bl	80005f8 <lcd_init>
					lcd_send_string ("> Saat Loopu");
 8001708:	481c      	ldr	r0, [pc, #112]	; (800177c <menu_func+0x5f0>)
 800170a:	f7fe ffb7 	bl	800067c <lcd_send_string>
					lcd_put_cur(1, 0);
 800170e:	2100      	movs	r1, #0
 8001710:	2001      	movs	r0, #1
 8001712:	f7fe ff52 	bl	80005ba <lcd_put_cur>
					lcd_send_string("  ");
 8001716:	4818      	ldr	r0, [pc, #96]	; (8001778 <menu_func+0x5ec>)
 8001718:	f7fe ffb0 	bl	800067c <lcd_send_string>
				}
				break;
 800171c:	e162      	b.n	80019e4 <menu_func+0x858>

			case 12:
				if(menu_click){
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <menu_func+0x5b0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d02c      	beq.n	8001780 <menu_func+0x5f4>
					current_page = 1;
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <menu_func+0x5b4>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <menu_func+0x5b0>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001732:	2100      	movs	r1, #0
 8001734:	2001      	movs	r0, #1
 8001736:	f7ff fd29 	bl	800118c <menu_func>
					break;
 800173a:	e153      	b.n	80019e4 <menu_func+0x858>
 800173c:	2000002c 	.word	0x2000002c
 8001740:	20000038 	.word	0x20000038
 8001744:	20000034 	.word	0x20000034
 8001748:	20000030 	.word	0x20000030
 800174c:	080057a8 	.word	0x080057a8
 8001750:	080057b0 	.word	0x080057b0
 8001754:	080057b4 	.word	0x080057b4
 8001758:	080057c0 	.word	0x080057c0
 800175c:	080057c4 	.word	0x080057c4
 8001760:	080057d0 	.word	0x080057d0
 8001764:	080057dc 	.word	0x080057dc
 8001768:	080057e8 	.word	0x080057e8
 800176c:	080057f0 	.word	0x080057f0
 8001770:	080057f8 	.word	0x080057f8
 8001774:	08005800 	.word	0x08005800
 8001778:	0800578c 	.word	0x0800578c
 800177c:	08005808 	.word	0x08005808
				}else if(menu_down){
 8001780:	4ba0      	ldr	r3, [pc, #640]	; (8001a04 <menu_func+0x878>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00a      	beq.n	800179e <menu_func+0x612>
					current_page = 13;
 8001788:	4b9f      	ldr	r3, [pc, #636]	; (8001a08 <menu_func+0x87c>)
 800178a:	220d      	movs	r2, #13
 800178c:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800178e:	4b9d      	ldr	r3, [pc, #628]	; (8001a04 <menu_func+0x878>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001794:	2100      	movs	r1, #0
 8001796:	2001      	movs	r0, #1
 8001798:	f7ff fcf8 	bl	800118c <menu_func>
					break;
 800179c:	e122      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_up){
 800179e:	4b9b      	ldr	r3, [pc, #620]	; (8001a0c <menu_func+0x880>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00a      	beq.n	80017bc <menu_func+0x630>
					current_page = 9;
 80017a6:	4b98      	ldr	r3, [pc, #608]	; (8001a08 <menu_func+0x87c>)
 80017a8:	2209      	movs	r2, #9
 80017aa:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80017ac:	4b97      	ldr	r3, [pc, #604]	; (8001a0c <menu_func+0x880>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80017b2:	2100      	movs	r1, #0
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7ff fce9 	bl	800118c <menu_func>
					break;
 80017ba:	e113      	b.n	80019e4 <menu_func+0x858>
				}
				lcd_init ();
 80017bc:	f7fe ff1c 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Start");
 80017c0:	4893      	ldr	r0, [pc, #588]	; (8001a10 <menu_func+0x884>)
 80017c2:	f7fe ff5b 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 80017c6:	2100      	movs	r1, #0
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7fe fef6 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Back");
 80017ce:	4891      	ldr	r0, [pc, #580]	; (8001a14 <menu_func+0x888>)
 80017d0:	f7fe ff54 	bl	800067c <lcd_send_string>
				break;
 80017d4:	e106      	b.n	80019e4 <menu_func+0x858>

			case 13:
				if(menu_click){
 80017d6:	4b90      	ldr	r3, [pc, #576]	; (8001a18 <menu_func+0x88c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00a      	beq.n	80017f4 <menu_func+0x668>
					current_page = 1;
 80017de:	4b8a      	ldr	r3, [pc, #552]	; (8001a08 <menu_func+0x87c>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80017e4:	4b8c      	ldr	r3, [pc, #560]	; (8001a18 <menu_func+0x88c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80017ea:	2100      	movs	r1, #0
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff fccd 	bl	800118c <menu_func>
					break;
 80017f2:	e0f7      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_down){
 80017f4:	4b83      	ldr	r3, [pc, #524]	; (8001a04 <menu_func+0x878>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00a      	beq.n	8001812 <menu_func+0x686>
					current_page = 7;
 80017fc:	4b82      	ldr	r3, [pc, #520]	; (8001a08 <menu_func+0x87c>)
 80017fe:	2207      	movs	r2, #7
 8001800:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001802:	4b80      	ldr	r3, [pc, #512]	; (8001a04 <menu_func+0x878>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001808:	2100      	movs	r1, #0
 800180a:	2001      	movs	r0, #1
 800180c:	f7ff fcbe 	bl	800118c <menu_func>
					break;
 8001810:	e0e8      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_up){
 8001812:	4b7e      	ldr	r3, [pc, #504]	; (8001a0c <menu_func+0x880>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00a      	beq.n	8001830 <menu_func+0x6a4>
					current_page = 12;
 800181a:	4b7b      	ldr	r3, [pc, #492]	; (8001a08 <menu_func+0x87c>)
 800181c:	220c      	movs	r2, #12
 800181e:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001820:	4b7a      	ldr	r3, [pc, #488]	; (8001a0c <menu_func+0x880>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001826:	2100      	movs	r1, #0
 8001828:	2001      	movs	r0, #1
 800182a:	f7ff fcaf 	bl	800118c <menu_func>
					break;
 800182e:	e0d9      	b.n	80019e4 <menu_func+0x858>
				}
				lcd_init ();
 8001830:	f7fe fee2 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Back");
 8001834:	4879      	ldr	r0, [pc, #484]	; (8001a1c <menu_func+0x890>)
 8001836:	f7fe ff21 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 800183a:	2100      	movs	r1, #0
 800183c:	2001      	movs	r0, #1
 800183e:	f7fe febc 	bl	80005ba <lcd_put_cur>
				lcd_send_string(" ");
 8001842:	4877      	ldr	r0, [pc, #476]	; (8001a20 <menu_func+0x894>)
 8001844:	f7fe ff1a 	bl	800067c <lcd_send_string>
				break;
 8001848:	e0cc      	b.n	80019e4 <menu_func+0x858>

			case 14:
				if(menu_click){
 800184a:	4b73      	ldr	r3, [pc, #460]	; (8001a18 <menu_func+0x88c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00a      	beq.n	8001868 <menu_func+0x6dc>
					current_page = 2;
 8001852:	4b6d      	ldr	r3, [pc, #436]	; (8001a08 <menu_func+0x87c>)
 8001854:	2202      	movs	r2, #2
 8001856:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001858:	4b6f      	ldr	r3, [pc, #444]	; (8001a18 <menu_func+0x88c>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800185e:	2100      	movs	r1, #0
 8001860:	2001      	movs	r0, #1
 8001862:	f7ff fc93 	bl	800118c <menu_func>
					break;
 8001866:	e0bd      	b.n	80019e4 <menu_func+0x858>
				}else{
					current_page = 14;
 8001868:	4b67      	ldr	r3, [pc, #412]	; (8001a08 <menu_func+0x87c>)
 800186a:	220e      	movs	r2, #14
 800186c:	601a      	str	r2, [r3, #0]
					lcd_init ();
 800186e:	f7fe fec3 	bl	80005f8 <lcd_init>
					lcd_send_string ("> INFO DISP");
 8001872:	486c      	ldr	r0, [pc, #432]	; (8001a24 <menu_func+0x898>)
 8001874:	f7fe ff02 	bl	800067c <lcd_send_string>
					lcd_put_cur(1, 0);
 8001878:	2100      	movs	r1, #0
 800187a:	2001      	movs	r0, #1
 800187c:	f7fe fe9d 	bl	80005ba <lcd_put_cur>
					lcd_send_string("  ");
 8001880:	4869      	ldr	r0, [pc, #420]	; (8001a28 <menu_func+0x89c>)
 8001882:	f7fe fefb 	bl	800067c <lcd_send_string>
				}
				break;
 8001886:	e0ad      	b.n	80019e4 <menu_func+0x858>

			case 15:
				if(menu_click){
 8001888:	4b63      	ldr	r3, [pc, #396]	; (8001a18 <menu_func+0x88c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00a      	beq.n	80018a6 <menu_func+0x71a>
					current_page = 11;
 8001890:	4b5d      	ldr	r3, [pc, #372]	; (8001a08 <menu_func+0x87c>)
 8001892:	220b      	movs	r2, #11
 8001894:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001896:	4b60      	ldr	r3, [pc, #384]	; (8001a18 <menu_func+0x88c>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800189c:	2100      	movs	r1, #0
 800189e:	2001      	movs	r0, #1
 80018a0:	f7ff fc74 	bl	800118c <menu_func>
					break;
 80018a4:	e09e      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_down){
 80018a6:	4b57      	ldr	r3, [pc, #348]	; (8001a04 <menu_func+0x878>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00a      	beq.n	80018c4 <menu_func+0x738>
					current_page = 16;
 80018ae:	4b56      	ldr	r3, [pc, #344]	; (8001a08 <menu_func+0x87c>)
 80018b0:	2210      	movs	r2, #16
 80018b2:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <menu_func+0x878>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80018ba:	2100      	movs	r1, #0
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff fc65 	bl	800118c <menu_func>
					break;
 80018c2:	e08f      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_up){
 80018c4:	4b51      	ldr	r3, [pc, #324]	; (8001a0c <menu_func+0x880>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00a      	beq.n	80018e2 <menu_func+0x756>
					current_page = 17;
 80018cc:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <menu_func+0x87c>)
 80018ce:	2211      	movs	r2, #17
 80018d0:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80018d2:	4b4e      	ldr	r3, [pc, #312]	; (8001a0c <menu_func+0x880>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80018d8:	2100      	movs	r1, #0
 80018da:	2001      	movs	r0, #1
 80018dc:	f7ff fc56 	bl	800118c <menu_func>
					break;
 80018e0:	e080      	b.n	80019e4 <menu_func+0x858>
				}
				lcd_init ();
 80018e2:	f7fe fe89 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Time S.");
 80018e6:	4851      	ldr	r0, [pc, #324]	; (8001a2c <menu_func+0x8a0>)
 80018e8:	f7fe fec8 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 80018ec:	2100      	movs	r1, #0
 80018ee:	2001      	movs	r0, #1
 80018f0:	f7fe fe63 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Bluetooth");
 80018f4:	484e      	ldr	r0, [pc, #312]	; (8001a30 <menu_func+0x8a4>)
 80018f6:	f7fe fec1 	bl	800067c <lcd_send_string>
				break;
 80018fa:	e073      	b.n	80019e4 <menu_func+0x858>

			case 16:
				if(menu_click){
 80018fc:	4b46      	ldr	r3, [pc, #280]	; (8001a18 <menu_func+0x88c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00a      	beq.n	800191a <menu_func+0x78e>
					current_page = 11;
 8001904:	4b40      	ldr	r3, [pc, #256]	; (8001a08 <menu_func+0x87c>)
 8001906:	220b      	movs	r2, #11
 8001908:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800190a:	4b43      	ldr	r3, [pc, #268]	; (8001a18 <menu_func+0x88c>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001910:	2100      	movs	r1, #0
 8001912:	2001      	movs	r0, #1
 8001914:	f7ff fc3a 	bl	800118c <menu_func>
					break;
 8001918:	e064      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_down){
 800191a:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <menu_func+0x878>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00a      	beq.n	8001938 <menu_func+0x7ac>
					current_page = 17;
 8001922:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <menu_func+0x87c>)
 8001924:	2211      	movs	r2, #17
 8001926:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <menu_func+0x878>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800192e:	2100      	movs	r1, #0
 8001930:	2001      	movs	r0, #1
 8001932:	f7ff fc2b 	bl	800118c <menu_func>
					break;
 8001936:	e055      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_up){
 8001938:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <menu_func+0x880>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00a      	beq.n	8001956 <menu_func+0x7ca>
					current_page = 15;
 8001940:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <menu_func+0x87c>)
 8001942:	220f      	movs	r2, #15
 8001944:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001946:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <menu_func+0x880>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800194c:	2100      	movs	r1, #0
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff fc1c 	bl	800118c <menu_func>
					break;
 8001954:	e046      	b.n	80019e4 <menu_func+0x858>
				}
				lcd_init ();
 8001956:	f7fe fe4f 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Bluetooth");
 800195a:	4836      	ldr	r0, [pc, #216]	; (8001a34 <menu_func+0x8a8>)
 800195c:	f7fe fe8e 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 8001960:	2100      	movs	r1, #0
 8001962:	2001      	movs	r0, #1
 8001964:	f7fe fe29 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Back");
 8001968:	482a      	ldr	r0, [pc, #168]	; (8001a14 <menu_func+0x888>)
 800196a:	f7fe fe87 	bl	800067c <lcd_send_string>
				break;
 800196e:	e039      	b.n	80019e4 <menu_func+0x858>
			case 17:
				if(menu_click){
 8001970:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <menu_func+0x88c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00a      	beq.n	800198e <menu_func+0x802>
					current_page = 3;
 8001978:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <menu_func+0x87c>)
 800197a:	2203      	movs	r2, #3
 800197c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <menu_func+0x88c>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001984:	2100      	movs	r1, #0
 8001986:	2001      	movs	r0, #1
 8001988:	f7ff fc00 	bl	800118c <menu_func>
					break;
 800198c:	e02a      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_down){
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <menu_func+0x878>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00a      	beq.n	80019ac <menu_func+0x820>
					current_page = 15;
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <menu_func+0x87c>)
 8001998:	220f      	movs	r2, #15
 800199a:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <menu_func+0x878>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80019a2:	2100      	movs	r1, #0
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff fbf1 	bl	800118c <menu_func>
					break;
 80019aa:	e01b      	b.n	80019e4 <menu_func+0x858>
				}else if(menu_up){
 80019ac:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <menu_func+0x880>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00a      	beq.n	80019ca <menu_func+0x83e>
					current_page = 16;
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <menu_func+0x87c>)
 80019b6:	2210      	movs	r2, #16
 80019b8:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <menu_func+0x880>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80019c0:	2100      	movs	r1, #0
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7ff fbe2 	bl	800118c <menu_func>
					break;
 80019c8:	e00c      	b.n	80019e4 <menu_func+0x858>
				}
				lcd_init ();
 80019ca:	f7fe fe15 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Back");
 80019ce:	4813      	ldr	r0, [pc, #76]	; (8001a1c <menu_func+0x890>)
 80019d0:	f7fe fe54 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 80019d4:	2100      	movs	r1, #0
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7fe fdef 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  ");
 80019dc:	4812      	ldr	r0, [pc, #72]	; (8001a28 <menu_func+0x89c>)
 80019de:	f7fe fe4d 	bl	800067c <lcd_send_string>
				break;
 80019e2:	bf00      	nop
		}
		menu_lcd_refresh = 0;
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <menu_func+0x8ac>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
		menu_click= 0;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <menu_func+0x88c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
		menu_up = 0;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <menu_func+0x880>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
		menu_down = 0;
 80019f6:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <menu_func+0x878>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
	}
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000034 	.word	0x20000034
 8001a08:	20000038 	.word	0x20000038
 8001a0c:	20000030 	.word	0x20000030
 8001a10:	08005818 	.word	0x08005818
 8001a14:	08005820 	.word	0x08005820
 8001a18:	2000002c 	.word	0x2000002c
 8001a1c:	080057a8 	.word	0x080057a8
 8001a20:	08005828 	.word	0x08005828
 8001a24:	0800582c 	.word	0x0800582c
 8001a28:	0800578c 	.word	0x0800578c
 8001a2c:	08005838 	.word	0x08005838
 8001a30:	08005844 	.word	0x08005844
 8001a34:	08005850 	.word	0x08005850
 8001a38:	20000028 	.word	0x20000028

08001a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <Error_Handler+0x8>
	...

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a0f      	ldr	r2, [pc, #60]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a32      	ldr	r2, [pc, #200]	; (8001b80 <HAL_ADC_MspInit+0xe8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d15e      	bne.n	8001b78 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_ADC_MspInit+0xec>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <HAL_ADC_MspInit+0xec>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <HAL_ADC_MspInit+0xec>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_ADC_MspInit+0xec>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a29      	ldr	r2, [pc, #164]	; (8001b84 <HAL_ADC_MspInit+0xec>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_ADC_MspInit+0xec>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = moisture_adc_sens0_Pin|moisture_adc_sens1_Pin|moisture_adc_sens2_Pin|moisture_adc_sens3_Pin
 8001af2:	237f      	movs	r3, #127	; 0x7f
 8001af4:	617b      	str	r3, [r7, #20]
                          |rain_adc_sens_Pin|waterlevel_adc_sens_Pin|waterflow_adc_sens_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af6:	2303      	movs	r3, #3
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4820      	ldr	r0, [pc, #128]	; (8001b88 <HAL_ADC_MspInit+0xf0>)
 8001b06:	f001 fbad 	bl	8003264 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_ADC_MspInit+0xf4>)
 8001b0c:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <HAL_ADC_MspInit+0xf8>)
 8001b0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b10:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <HAL_ADC_MspInit+0xf4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b16:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <HAL_ADC_MspInit+0xf4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_ADC_MspInit+0xf4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_ADC_MspInit+0xf4>)
 8001b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_ADC_MspInit+0xf4>)
 8001b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_ADC_MspInit+0xf4>)
 8001b34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_ADC_MspInit+0xf4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_ADC_MspInit+0xf4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_ADC_MspInit+0xf4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b4c:	480f      	ldr	r0, [pc, #60]	; (8001b8c <HAL_ADC_MspInit+0xf4>)
 8001b4e:	f001 f819 	bl	8002b84 <HAL_DMA_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001b58:	f7ff ff70 	bl	8001a3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <HAL_ADC_MspInit+0xf4>)
 8001b60:	639a      	str	r2, [r3, #56]	; 0x38
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_ADC_MspInit+0xf4>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2012      	movs	r0, #18
 8001b6e:	f000 ffd2 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b72:	2012      	movs	r0, #18
 8001b74:	f000 ffeb 	bl	8002b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b78:	bf00      	nop
 8001b7a:	3728      	adds	r7, #40	; 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40012000 	.word	0x40012000
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	2000012c 	.word	0x2000012c
 8001b90:	40026410 	.word	0x40026410

08001b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_I2C_MspInit+0x84>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12b      	bne.n	8001c0e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_LCD_Pin|I2C1_SDA_LCD_Pin;
 8001bd2:	23c0      	movs	r3, #192	; 0xc0
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd6:	2312      	movs	r3, #18
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be2:	2304      	movs	r3, #4
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <HAL_I2C_MspInit+0x8c>)
 8001bee:	f001 fb39 	bl	8003264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	; 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40005400 	.word	0x40005400
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020400 	.word	0x40020400

08001c24 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <HAL_RTC_MspInit+0x24>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d102      	bne.n	8001c3c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_RTC_MspInit+0x28>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40002800 	.word	0x40002800
 8001c4c:	42470e3c 	.word	0x42470e3c

08001c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <HAL_TIM_Base_MspInit+0x3c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d10d      	bne.n	8001c7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_TIM_Base_MspInit+0x40>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <HAL_TIM_Base_MspInit+0x40>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <HAL_TIM_Base_MspInit+0x40>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40010000 	.word	0x40010000
 8001c90:	40023800 	.word	0x40023800

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <NMI_Handler+0x4>

08001c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <HardFault_Handler+0x4>

08001ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <MemManage_Handler+0x4>

08001ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce0:	f000 f8be 	bl	8001e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f001 fc6f 	bl	80035d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f001 fc68 	bl	80035d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <ADC_IRQHandler+0x10>)
 8001d0a:	f000 f930 	bl	8001f6e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200000c4 	.word	0x200000c4

08001d18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001d1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d20:	f001 fc56 	bl	80035d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001d24:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d28:	f001 fc52 	bl	80035d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <DMA2_Stream0_IRQHandler+0x10>)
 8001d36:	f001 f82b 	bl	8002d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000012c 	.word	0x2000012c

08001d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <SystemInit+0x20>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <SystemInit+0x20>)
 8001d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d6c:	480d      	ldr	r0, [pc, #52]	; (8001da4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d6e:	490e      	ldr	r1, [pc, #56]	; (8001da8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d70:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d84:	4c0b      	ldr	r4, [pc, #44]	; (8001db4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d92:	f7ff ffd7 	bl	8001d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d96:	f003 fc75 	bl	8005684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9a:	f7fe fc85 	bl	80006a8 <main>
  bx  lr    
 8001d9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001da0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001dac:	08005894 	.word	0x08005894
  ldr r2, =_sbss
 8001db0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001db4:	20000248 	.word	0x20000248

08001db8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <DMA1_Stream0_IRQHandler>
	...

08001dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_Init+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	; (8001dfc <HAL_Init+0x40>)
 8001dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_Init+0x40>)
 8001dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a07      	ldr	r2, [pc, #28]	; (8001dfc <HAL_Init+0x40>)
 8001dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de4:	2003      	movs	r0, #3
 8001de6:	f000 fe8b 	bl	8002b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f000 f808 	bl	8001e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df0:	f7ff fe2a 	bl	8001a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023c00 	.word	0x40023c00

08001e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_InitTick+0x54>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_InitTick+0x58>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fea3 	bl	8002b6a <HAL_SYSTICK_Config>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00e      	b.n	8001e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b0f      	cmp	r3, #15
 8001e32:	d80a      	bhi.n	8001e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e34:	2200      	movs	r2, #0
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f000 fe6b 	bl	8002b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e40:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <HAL_InitTick+0x5c>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e000      	b.n	8001e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_IncTick+0x20>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x24>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_IncTick+0x24>)
 8001e72:	6013      	str	r3, [r2, #0]
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000008 	.word	0x20000008
 8001e84:	20000244 	.word	0x20000244

08001e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_GetTick+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000244 	.word	0x20000244

08001ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff ffee 	bl	8001e88 <HAL_GetTick>
 8001eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d005      	beq.n	8001ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_Delay+0x44>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ec6:	bf00      	nop
 8001ec8:	f7ff ffde 	bl	8001e88 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d8f7      	bhi.n	8001ec8 <HAL_Delay+0x28>
  {
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000008 	.word	0x20000008

08001ee8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e033      	b.n	8001f66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fdc6 	bl	8001a98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f2e:	f023 0302 	bic.w	r3, r3, #2
 8001f32:	f043 0202 	orr.w	r2, r3, #2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fb88 	bl	8002650 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
 8001f56:	e001      	b.n	8001f5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b084      	sub	sp, #16
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	bf0c      	ite	eq
 8001fa2:	2301      	moveq	r3, #1
 8001fa4:	2300      	movne	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d049      	beq.n	8002044 <HAL_ADC_IRQHandler+0xd6>
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d046      	beq.n	8002044 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d12b      	bne.n	8002034 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d127      	bne.n	8002034 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d119      	bne.n	8002034 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0220 	bic.w	r2, r2, #32
 800200e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7fe ff01 	bl	8000e3c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f06f 0212 	mvn.w	r2, #18
 8002042:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b04      	cmp	r3, #4
 8002050:	bf0c      	ite	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	2300      	movne	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002064:	2b80      	cmp	r3, #128	; 0x80
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d057      	beq.n	8002126 <HAL_ADC_IRQHandler+0x1b8>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d054      	beq.n	8002126 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d139      	bne.n	8002116 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d12b      	bne.n	8002116 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d124      	bne.n	8002116 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d11d      	bne.n	8002116 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d119      	bne.n	8002116 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d105      	bne.n	8002116 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fc18 	bl	800294c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 020c 	mvn.w	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002146:	2b40      	cmp	r3, #64	; 0x40
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d017      	beq.n	8002188 <HAL_ADC_IRQHandler+0x21a>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d014      	beq.n	8002188 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d10d      	bne.n	8002188 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f933 	bl	80023e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f06f 0201 	mvn.w	r2, #1
 8002186:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b20      	cmp	r3, #32
 8002194:	bf0c      	ite	eq
 8002196:	2301      	moveq	r3, #1
 8002198:	2300      	movne	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021ac:	bf0c      	ite	eq
 80021ae:	2301      	moveq	r3, #1
 80021b0:	2300      	movne	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d015      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x27a>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f043 0202 	orr.w	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f06f 0220 	mvn.w	r2, #32
 80021d6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f90d 	bl	80023f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f06f 0220 	mvn.w	r2, #32
 80021e6:	601a      	str	r2, [r3, #0]
  }
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_ADC_Start_DMA+0x1e>
 800220a:	2302      	movs	r3, #2
 800220c:	e0ce      	b.n	80023ac <HAL_ADC_Start_DMA+0x1bc>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b01      	cmp	r3, #1
 8002222:	d018      	beq.n	8002256 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002234:	4b5f      	ldr	r3, [pc, #380]	; (80023b4 <HAL_ADC_Start_DMA+0x1c4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a5f      	ldr	r2, [pc, #380]	; (80023b8 <HAL_ADC_Start_DMA+0x1c8>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0c9a      	lsrs	r2, r3, #18
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002248:	e002      	b.n	8002250 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	3b01      	subs	r3, #1
 800224e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f9      	bne.n	800224a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002264:	d107      	bne.n	8002276 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002274:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	f040 8086 	bne.w	8002392 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c4:	d106      	bne.n	80022d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f023 0206 	bic.w	r2, r3, #6
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
 80022d2:	e002      	b.n	80022da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e2:	4b36      	ldr	r3, [pc, #216]	; (80023bc <HAL_ADC_Start_DMA+0x1cc>)
 80022e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	4a35      	ldr	r2, [pc, #212]	; (80023c0 <HAL_ADC_Start_DMA+0x1d0>)
 80022ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	4a34      	ldr	r2, [pc, #208]	; (80023c4 <HAL_ADC_Start_DMA+0x1d4>)
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	4a33      	ldr	r2, [pc, #204]	; (80023c8 <HAL_ADC_Start_DMA+0x1d8>)
 80022fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002306:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002316:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002326:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	334c      	adds	r3, #76	; 0x4c
 8002332:	4619      	mov	r1, r3
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f000 fcd2 	bl	8002ce0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10f      	bne.n	8002368 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d129      	bne.n	80023aa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	e020      	b.n	80023aa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_ADC_Start_DMA+0x1dc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d11b      	bne.n	80023aa <HAL_ADC_Start_DMA+0x1ba>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d114      	bne.n	80023aa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	e00b      	b.n	80023aa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f043 0210 	orr.w	r2, r3, #16
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f043 0201 	orr.w	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000000 	.word	0x20000000
 80023b8:	431bde83 	.word	0x431bde83
 80023bc:	40012300 	.word	0x40012300
 80023c0:	08002849 	.word	0x08002849
 80023c4:	08002903 	.word	0x08002903
 80023c8:	0800291f 	.word	0x0800291f
 80023cc:	40012000 	.word	0x40012000

080023d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x1c>
 8002424:	2302      	movs	r3, #2
 8002426:	e105      	b.n	8002634 <HAL_ADC_ConfigChannel+0x228>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b09      	cmp	r3, #9
 8002436:	d925      	bls.n	8002484 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68d9      	ldr	r1, [r3, #12]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	3b1e      	subs	r3, #30
 800244e:	2207      	movs	r2, #7
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43da      	mvns	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	400a      	ands	r2, r1
 800245c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68d9      	ldr	r1, [r3, #12]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	4618      	mov	r0, r3
 8002470:	4603      	mov	r3, r0
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4403      	add	r3, r0
 8002476:	3b1e      	subs	r3, #30
 8002478:	409a      	lsls	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	e022      	b.n	80024ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6919      	ldr	r1, [r3, #16]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	2207      	movs	r2, #7
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	400a      	ands	r2, r1
 80024a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6919      	ldr	r1, [r3, #16]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	4618      	mov	r0, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4403      	add	r3, r0
 80024c0:	409a      	lsls	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d824      	bhi.n	800251c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	3b05      	subs	r3, #5
 80024e4:	221f      	movs	r2, #31
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	400a      	ands	r2, r1
 80024f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	4618      	mov	r0, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3b05      	subs	r3, #5
 800250e:	fa00 f203 	lsl.w	r2, r0, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	635a      	str	r2, [r3, #52]	; 0x34
 800251a:	e04c      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b0c      	cmp	r3, #12
 8002522:	d824      	bhi.n	800256e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	3b23      	subs	r3, #35	; 0x23
 8002536:	221f      	movs	r2, #31
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43da      	mvns	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	400a      	ands	r2, r1
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	4618      	mov	r0, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	3b23      	subs	r3, #35	; 0x23
 8002560:	fa00 f203 	lsl.w	r2, r0, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
 800256c:	e023      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3b41      	subs	r3, #65	; 0x41
 8002580:	221f      	movs	r2, #31
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	400a      	ands	r2, r1
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	4618      	mov	r0, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	3b41      	subs	r3, #65	; 0x41
 80025aa:	fa00 f203 	lsl.w	r2, r0, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <HAL_ADC_ConfigChannel+0x234>)
 80025b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a21      	ldr	r2, [pc, #132]	; (8002644 <HAL_ADC_ConfigChannel+0x238>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d109      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1cc>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b12      	cmp	r3, #18
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_ADC_ConfigChannel+0x238>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d123      	bne.n	800262a <HAL_ADC_ConfigChannel+0x21e>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d003      	beq.n	80025f2 <HAL_ADC_ConfigChannel+0x1e6>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b11      	cmp	r3, #17
 80025f0:	d11b      	bne.n	800262a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b10      	cmp	r3, #16
 8002604:	d111      	bne.n	800262a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_ADC_ConfigChannel+0x23c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a10      	ldr	r2, [pc, #64]	; (800264c <HAL_ADC_ConfigChannel+0x240>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	0c9a      	lsrs	r2, r3, #18
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800261c:	e002      	b.n	8002624 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	3b01      	subs	r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f9      	bne.n	800261e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40012300 	.word	0x40012300
 8002644:	40012000 	.word	0x40012000
 8002648:	20000000 	.word	0x20000000
 800264c:	431bde83 	.word	0x431bde83

08002650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002658:	4b79      	ldr	r3, [pc, #484]	; (8002840 <ADC_Init+0x1f0>)
 800265a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	431a      	orrs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	021a      	lsls	r2, r3, #8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	4a58      	ldr	r2, [pc, #352]	; (8002844 <ADC_Init+0x1f4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d022      	beq.n	800272e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6899      	ldr	r1, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6899      	ldr	r1, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	e00f      	b.n	800274e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800273c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800274c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0202 	bic.w	r2, r2, #2
 800275c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6899      	ldr	r1, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	7e1b      	ldrb	r3, [r3, #24]
 8002768:	005a      	lsls	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01b      	beq.n	80027b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800278a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800279a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	3b01      	subs	r3, #1
 80027a8:	035a      	lsls	r2, r3, #13
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	e007      	b.n	80027c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	3b01      	subs	r3, #1
 80027e0:	051a      	lsls	r2, r3, #20
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002806:	025a      	lsls	r2, r3, #9
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800281e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6899      	ldr	r1, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	029a      	lsls	r2, r3, #10
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	609a      	str	r2, [r3, #8]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	40012300 	.word	0x40012300
 8002844:	0f000001 	.word	0x0f000001

08002848 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800285e:	2b00      	cmp	r3, #0
 8002860:	d13c      	bne.n	80028dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d12b      	bne.n	80028d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002880:	2b00      	cmp	r3, #0
 8002882:	d127      	bne.n	80028d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800289c:	2b00      	cmp	r3, #0
 800289e:	d119      	bne.n	80028d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0220 	bic.w	r2, r2, #32
 80028ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	f043 0201 	orr.w	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7fe fab1 	bl	8000e3c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028da:	e00e      	b.n	80028fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f7ff fd85 	bl	80023f8 <HAL_ADC_ErrorCallback>
}
 80028ee:	e004      	b.n	80028fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff fd5d 	bl	80023d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2240      	movs	r2, #64	; 0x40
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	f043 0204 	orr.w	r2, r3, #4
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7ff fd5a 	bl	80023f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800297c:	4013      	ands	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800298c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002992:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	60d3      	str	r3, [r2, #12]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	f003 0307 	and.w	r3, r3, #7
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	db0b      	blt.n	80029ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	f003 021f 	and.w	r2, r3, #31
 80029dc:	4907      	ldr	r1, [pc, #28]	; (80029fc <__NVIC_EnableIRQ+0x38>)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2001      	movs	r0, #1
 80029e6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000e100 	.word	0xe000e100

08002a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	6039      	str	r1, [r7, #0]
 8002a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	db0a      	blt.n	8002a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	490c      	ldr	r1, [pc, #48]	; (8002a4c <__NVIC_SetPriority+0x4c>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	0112      	lsls	r2, r2, #4
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	440b      	add	r3, r1
 8002a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a28:	e00a      	b.n	8002a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	4908      	ldr	r1, [pc, #32]	; (8002a50 <__NVIC_SetPriority+0x50>)
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	3b04      	subs	r3, #4
 8002a38:	0112      	lsls	r2, r2, #4
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	761a      	strb	r2, [r3, #24]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000e100 	.word	0xe000e100
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b089      	sub	sp, #36	; 0x24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f1c3 0307 	rsb	r3, r3, #7
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	bf28      	it	cs
 8002a72:	2304      	movcs	r3, #4
 8002a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2b06      	cmp	r3, #6
 8002a7c:	d902      	bls.n	8002a84 <NVIC_EncodePriority+0x30>
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3b03      	subs	r3, #3
 8002a82:	e000      	b.n	8002a86 <NVIC_EncodePriority+0x32>
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	f04f 32ff 	mov.w	r2, #4294967295
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43da      	mvns	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	401a      	ands	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	43d9      	mvns	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	4313      	orrs	r3, r2
         );
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3724      	adds	r7, #36	; 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002acc:	d301      	bcc.n	8002ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00f      	b.n	8002af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <SysTick_Config+0x40>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ada:	210f      	movs	r1, #15
 8002adc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae0:	f7ff ff8e 	bl	8002a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <SysTick_Config+0x40>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aea:	4b04      	ldr	r3, [pc, #16]	; (8002afc <SysTick_Config+0x40>)
 8002aec:	2207      	movs	r2, #7
 8002aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	e000e010 	.word	0xe000e010

08002b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ff29 	bl	8002960 <__NVIC_SetPriorityGrouping>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b28:	f7ff ff3e 	bl	80029a8 <__NVIC_GetPriorityGrouping>
 8002b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	6978      	ldr	r0, [r7, #20]
 8002b34:	f7ff ff8e 	bl	8002a54 <NVIC_EncodePriority>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff5d 	bl	8002a00 <__NVIC_SetPriority>
}
 8002b46:	bf00      	nop
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	4603      	mov	r3, r0
 8002b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff31 	bl	80029c4 <__NVIC_EnableIRQ>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ffa2 	bl	8002abc <SysTick_Config>
 8002b78:	4603      	mov	r3, r0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff f97a 	bl	8001e88 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e099      	b.n	8002cd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc0:	e00f      	b.n	8002be2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bc2:	f7ff f961 	bl	8001e88 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d908      	bls.n	8002be2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e078      	b.n	8002cd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e8      	bne.n	8002bc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <HAL_DMA_Init+0x158>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d107      	bne.n	8002c4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	4313      	orrs	r3, r2
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f023 0307 	bic.w	r3, r3, #7
 8002c62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d117      	bne.n	8002ca6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00e      	beq.n	8002ca6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fa6f 	bl	800316c <DMA_CheckFifoParam>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2240      	movs	r2, #64	; 0x40
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e016      	b.n	8002cd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa26 	bl	8003100 <DMA_CalcBaseAndBitshift>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	223f      	movs	r2, #63	; 0x3f
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	f010803f 	.word	0xf010803f

08002ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_DMA_Start_IT+0x26>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e040      	b.n	8002d88 <HAL_DMA_Start_IT+0xa8>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d12f      	bne.n	8002d7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f9b8 	bl	80030a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	223f      	movs	r2, #63	; 0x3f
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0216 	orr.w	r2, r2, #22
 8002d4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0208 	orr.w	r2, r2, #8
 8002d66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	e005      	b.n	8002d86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d82:	2302      	movs	r3, #2
 8002d84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d9c:	4b92      	ldr	r3, [pc, #584]	; (8002fe8 <HAL_DMA_IRQHandler+0x258>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a92      	ldr	r2, [pc, #584]	; (8002fec <HAL_DMA_IRQHandler+0x25c>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0a9b      	lsrs	r3, r3, #10
 8002da8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	2208      	movs	r2, #8
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01a      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d013      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0204 	bic.w	r2, r2, #4
 8002de2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	2208      	movs	r2, #8
 8002dea:	409a      	lsls	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	2201      	movs	r2, #1
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d012      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	2201      	movs	r2, #1
 8002e20:	409a      	lsls	r2, r3
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2a:	f043 0202 	orr.w	r2, r3, #2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	2204      	movs	r2, #4
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d012      	beq.n	8002e68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00b      	beq.n	8002e68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	2204      	movs	r2, #4
 8002e56:	409a      	lsls	r2, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e60:	f043 0204 	orr.w	r2, r3, #4
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d043      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d03c      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d018      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d108      	bne.n	8002ec0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d024      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
 8002ebe:	e01f      	b.n	8002f00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01b      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
 8002ed0:	e016      	b.n	8002f00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d107      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0208 	bic.w	r2, r2, #8
 8002eee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f04:	2220      	movs	r2, #32
 8002f06:	409a      	lsls	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 808e 	beq.w	800302e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8086 	beq.w	800302e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	2220      	movs	r2, #32
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	d136      	bne.n	8002fa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0216 	bic.w	r2, r2, #22
 8002f48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <HAL_DMA_IRQHandler+0x1da>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0208 	bic.w	r2, r2, #8
 8002f78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	223f      	movs	r2, #63	; 0x3f
 8002f80:	409a      	lsls	r2, r3
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d07d      	beq.n	800309a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
        }
        return;
 8002fa6:	e078      	b.n	800309a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01c      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d108      	bne.n	8002fd6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d030      	beq.n	800302e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
 8002fd4:	e02b      	b.n	800302e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d027      	beq.n	800302e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
 8002fe6:	e022      	b.n	800302e <HAL_DMA_IRQHandler+0x29e>
 8002fe8:	20000000 	.word	0x20000000
 8002fec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10f      	bne.n	800301e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0210 	bic.w	r2, r2, #16
 800300c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	2b00      	cmp	r3, #0
 8003034:	d032      	beq.n	800309c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d022      	beq.n	8003088 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2205      	movs	r2, #5
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	3301      	adds	r3, #1
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	429a      	cmp	r2, r3
 8003064:	d307      	bcc.n	8003076 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f2      	bne.n	800305a <HAL_DMA_IRQHandler+0x2ca>
 8003074:	e000      	b.n	8003078 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003076:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
 8003098:	e000      	b.n	800309c <HAL_DMA_IRQHandler+0x30c>
        return;
 800309a:	bf00      	nop
    }
  }
}
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop

080030a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	d108      	bne.n	80030e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030e2:	e007      	b.n	80030f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	60da      	str	r2, [r3, #12]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	3b10      	subs	r3, #16
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <DMA_CalcBaseAndBitshift+0x64>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800311a:	4a13      	ldr	r2, [pc, #76]	; (8003168 <DMA_CalcBaseAndBitshift+0x68>)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b03      	cmp	r3, #3
 800312c:	d909      	bls.n	8003142 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003136:	f023 0303 	bic.w	r3, r3, #3
 800313a:	1d1a      	adds	r2, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	659a      	str	r2, [r3, #88]	; 0x58
 8003140:	e007      	b.n	8003152 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800314a:	f023 0303 	bic.w	r3, r3, #3
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	aaaaaaab 	.word	0xaaaaaaab
 8003168:	0800587c 	.word	0x0800587c

0800316c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d11f      	bne.n	80031c6 <DMA_CheckFifoParam+0x5a>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d856      	bhi.n	800323a <DMA_CheckFifoParam+0xce>
 800318c:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <DMA_CheckFifoParam+0x28>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	080031a5 	.word	0x080031a5
 8003198:	080031b7 	.word	0x080031b7
 800319c:	080031a5 	.word	0x080031a5
 80031a0:	0800323b 	.word	0x0800323b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d046      	beq.n	800323e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b4:	e043      	b.n	800323e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031be:	d140      	bne.n	8003242 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c4:	e03d      	b.n	8003242 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ce:	d121      	bne.n	8003214 <DMA_CheckFifoParam+0xa8>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d837      	bhi.n	8003246 <DMA_CheckFifoParam+0xda>
 80031d6:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <DMA_CheckFifoParam+0x70>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	080031ed 	.word	0x080031ed
 80031e0:	080031f3 	.word	0x080031f3
 80031e4:	080031ed 	.word	0x080031ed
 80031e8:	08003205 	.word	0x08003205
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
      break;
 80031f0:	e030      	b.n	8003254 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d025      	beq.n	800324a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003202:	e022      	b.n	800324a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800320c:	d11f      	bne.n	800324e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003212:	e01c      	b.n	800324e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d903      	bls.n	8003222 <DMA_CheckFifoParam+0xb6>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d003      	beq.n	8003228 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003220:	e018      	b.n	8003254 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
      break;
 8003226:	e015      	b.n	8003254 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00e      	beq.n	8003252 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
      break;
 8003238:	e00b      	b.n	8003252 <DMA_CheckFifoParam+0xe6>
      break;
 800323a:	bf00      	nop
 800323c:	e00a      	b.n	8003254 <DMA_CheckFifoParam+0xe8>
      break;
 800323e:	bf00      	nop
 8003240:	e008      	b.n	8003254 <DMA_CheckFifoParam+0xe8>
      break;
 8003242:	bf00      	nop
 8003244:	e006      	b.n	8003254 <DMA_CheckFifoParam+0xe8>
      break;
 8003246:	bf00      	nop
 8003248:	e004      	b.n	8003254 <DMA_CheckFifoParam+0xe8>
      break;
 800324a:	bf00      	nop
 800324c:	e002      	b.n	8003254 <DMA_CheckFifoParam+0xe8>
      break;   
 800324e:	bf00      	nop
 8003250:	e000      	b.n	8003254 <DMA_CheckFifoParam+0xe8>
      break;
 8003252:	bf00      	nop
    }
  } 
  
  return status; 
 8003254:	7bfb      	ldrb	r3, [r7, #15]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop

08003264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	; 0x24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	e159      	b.n	8003534 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003280:	2201      	movs	r2, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	429a      	cmp	r2, r3
 800329a:	f040 8148 	bne.w	800352e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d005      	beq.n	80032b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d130      	bne.n	8003318 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	2203      	movs	r2, #3
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ec:	2201      	movs	r2, #1
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 0201 	and.w	r2, r3, #1
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b03      	cmp	r3, #3
 8003322:	d017      	beq.n	8003354 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d123      	bne.n	80033a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	08da      	lsrs	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3208      	adds	r2, #8
 8003368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	220f      	movs	r2, #15
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	08da      	lsrs	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3208      	adds	r2, #8
 80033a2:	69b9      	ldr	r1, [r7, #24]
 80033a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	2203      	movs	r2, #3
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0203 	and.w	r2, r3, #3
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80a2 	beq.w	800352e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	4b57      	ldr	r3, [pc, #348]	; (800354c <HAL_GPIO_Init+0x2e8>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	4a56      	ldr	r2, [pc, #344]	; (800354c <HAL_GPIO_Init+0x2e8>)
 80033f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f8:	6453      	str	r3, [r2, #68]	; 0x44
 80033fa:	4b54      	ldr	r3, [pc, #336]	; (800354c <HAL_GPIO_Init+0x2e8>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003406:	4a52      	ldr	r2, [pc, #328]	; (8003550 <HAL_GPIO_Init+0x2ec>)
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	3302      	adds	r3, #2
 800340e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	220f      	movs	r2, #15
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a49      	ldr	r2, [pc, #292]	; (8003554 <HAL_GPIO_Init+0x2f0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d019      	beq.n	8003466 <HAL_GPIO_Init+0x202>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a48      	ldr	r2, [pc, #288]	; (8003558 <HAL_GPIO_Init+0x2f4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_GPIO_Init+0x1fe>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a47      	ldr	r2, [pc, #284]	; (800355c <HAL_GPIO_Init+0x2f8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00d      	beq.n	800345e <HAL_GPIO_Init+0x1fa>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a46      	ldr	r2, [pc, #280]	; (8003560 <HAL_GPIO_Init+0x2fc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <HAL_GPIO_Init+0x1f6>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a45      	ldr	r2, [pc, #276]	; (8003564 <HAL_GPIO_Init+0x300>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d101      	bne.n	8003456 <HAL_GPIO_Init+0x1f2>
 8003452:	2304      	movs	r3, #4
 8003454:	e008      	b.n	8003468 <HAL_GPIO_Init+0x204>
 8003456:	2307      	movs	r3, #7
 8003458:	e006      	b.n	8003468 <HAL_GPIO_Init+0x204>
 800345a:	2303      	movs	r3, #3
 800345c:	e004      	b.n	8003468 <HAL_GPIO_Init+0x204>
 800345e:	2302      	movs	r3, #2
 8003460:	e002      	b.n	8003468 <HAL_GPIO_Init+0x204>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_GPIO_Init+0x204>
 8003466:	2300      	movs	r3, #0
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	f002 0203 	and.w	r2, r2, #3
 800346e:	0092      	lsls	r2, r2, #2
 8003470:	4093      	lsls	r3, r2
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003478:	4935      	ldr	r1, [pc, #212]	; (8003550 <HAL_GPIO_Init+0x2ec>)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	3302      	adds	r3, #2
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003486:	4b38      	ldr	r3, [pc, #224]	; (8003568 <HAL_GPIO_Init+0x304>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034aa:	4a2f      	ldr	r2, [pc, #188]	; (8003568 <HAL_GPIO_Init+0x304>)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034b0:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_GPIO_Init+0x304>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034d4:	4a24      	ldr	r2, [pc, #144]	; (8003568 <HAL_GPIO_Init+0x304>)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034da:	4b23      	ldr	r3, [pc, #140]	; (8003568 <HAL_GPIO_Init+0x304>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034fe:	4a1a      	ldr	r2, [pc, #104]	; (8003568 <HAL_GPIO_Init+0x304>)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <HAL_GPIO_Init+0x304>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003528:	4a0f      	ldr	r2, [pc, #60]	; (8003568 <HAL_GPIO_Init+0x304>)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3301      	adds	r3, #1
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b0f      	cmp	r3, #15
 8003538:	f67f aea2 	bls.w	8003280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	3724      	adds	r7, #36	; 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800
 8003550:	40013800 	.word	0x40013800
 8003554:	40020000 	.word	0x40020000
 8003558:	40020400 	.word	0x40020400
 800355c:	40020800 	.word	0x40020800
 8003560:	40020c00 	.word	0x40020c00
 8003564:	40021000 	.word	0x40021000
 8003568:	40013c00 	.word	0x40013c00

0800356c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	887b      	ldrh	r3, [r7, #2]
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
 8003588:	e001      	b.n	800358e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800358a:	2300      	movs	r3, #0
 800358c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
 80035a8:	4613      	mov	r3, r2
 80035aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035ac:	787b      	ldrb	r3, [r7, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035b8:	e003      	b.n	80035c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ba:	887b      	ldrh	r3, [r7, #2]
 80035bc:	041a      	lsls	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	619a      	str	r2, [r3, #24]
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035da:	4b08      	ldr	r3, [pc, #32]	; (80035fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d006      	beq.n	80035f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035e6:	4a05      	ldr	r2, [pc, #20]	; (80035fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd fc9c 	bl	8000f2c <HAL_GPIO_EXTI_Callback>
  }
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40013c00 	.word	0x40013c00

08003600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e12b      	b.n	800386a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fe fab4 	bl	8001b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2224      	movs	r2, #36	; 0x24
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003652:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003664:	f001 f838 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 8003668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4a81      	ldr	r2, [pc, #516]	; (8003874 <HAL_I2C_Init+0x274>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d807      	bhi.n	8003684 <HAL_I2C_Init+0x84>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a80      	ldr	r2, [pc, #512]	; (8003878 <HAL_I2C_Init+0x278>)
 8003678:	4293      	cmp	r3, r2
 800367a:	bf94      	ite	ls
 800367c:	2301      	movls	r3, #1
 800367e:	2300      	movhi	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e006      	b.n	8003692 <HAL_I2C_Init+0x92>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a7d      	ldr	r2, [pc, #500]	; (800387c <HAL_I2C_Init+0x27c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	bf94      	ite	ls
 800368c:	2301      	movls	r3, #1
 800368e:	2300      	movhi	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e0e7      	b.n	800386a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a78      	ldr	r2, [pc, #480]	; (8003880 <HAL_I2C_Init+0x280>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	0c9b      	lsrs	r3, r3, #18
 80036a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4a6a      	ldr	r2, [pc, #424]	; (8003874 <HAL_I2C_Init+0x274>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d802      	bhi.n	80036d4 <HAL_I2C_Init+0xd4>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	3301      	adds	r3, #1
 80036d2:	e009      	b.n	80036e8 <HAL_I2C_Init+0xe8>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	4a69      	ldr	r2, [pc, #420]	; (8003884 <HAL_I2C_Init+0x284>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	099b      	lsrs	r3, r3, #6
 80036e6:	3301      	adds	r3, #1
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	495c      	ldr	r1, [pc, #368]	; (8003874 <HAL_I2C_Init+0x274>)
 8003704:	428b      	cmp	r3, r1
 8003706:	d819      	bhi.n	800373c <HAL_I2C_Init+0x13c>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1e59      	subs	r1, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	fbb1 f3f3 	udiv	r3, r1, r3
 8003716:	1c59      	adds	r1, r3, #1
 8003718:	f640 73fc 	movw	r3, #4092	; 0xffc
 800371c:	400b      	ands	r3, r1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_I2C_Init+0x138>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1e59      	subs	r1, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003730:	3301      	adds	r3, #1
 8003732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003736:	e051      	b.n	80037dc <HAL_I2C_Init+0x1dc>
 8003738:	2304      	movs	r3, #4
 800373a:	e04f      	b.n	80037dc <HAL_I2C_Init+0x1dc>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d111      	bne.n	8003768 <HAL_I2C_Init+0x168>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1e58      	subs	r0, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	440b      	add	r3, r1
 8003752:	fbb0 f3f3 	udiv	r3, r0, r3
 8003756:	3301      	adds	r3, #1
 8003758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	e012      	b.n	800378e <HAL_I2C_Init+0x18e>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1e58      	subs	r0, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	0099      	lsls	r1, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	fbb0 f3f3 	udiv	r3, r0, r3
 800377e:	3301      	adds	r3, #1
 8003780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Init+0x196>
 8003792:	2301      	movs	r3, #1
 8003794:	e022      	b.n	80037dc <HAL_I2C_Init+0x1dc>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10e      	bne.n	80037bc <HAL_I2C_Init+0x1bc>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1e58      	subs	r0, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6859      	ldr	r1, [r3, #4]
 80037a6:	460b      	mov	r3, r1
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	440b      	add	r3, r1
 80037ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ba:	e00f      	b.n	80037dc <HAL_I2C_Init+0x1dc>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1e58      	subs	r0, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	0099      	lsls	r1, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d2:	3301      	adds	r3, #1
 80037d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	6809      	ldr	r1, [r1, #0]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800380a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6911      	ldr	r1, [r2, #16]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68d2      	ldr	r2, [r2, #12]
 8003816:	4311      	orrs	r1, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	430b      	orrs	r3, r1
 800381e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	000186a0 	.word	0x000186a0
 8003878:	001e847f 	.word	0x001e847f
 800387c:	003d08ff 	.word	0x003d08ff
 8003880:	431bde83 	.word	0x431bde83
 8003884:	10624dd3 	.word	0x10624dd3

08003888 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af02      	add	r7, sp, #8
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	461a      	mov	r2, r3
 8003894:	460b      	mov	r3, r1
 8003896:	817b      	strh	r3, [r7, #10]
 8003898:	4613      	mov	r3, r2
 800389a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800389c:	f7fe faf4 	bl	8001e88 <HAL_GetTick>
 80038a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	f040 80e0 	bne.w	8003a70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	2319      	movs	r3, #25
 80038b6:	2201      	movs	r2, #1
 80038b8:	4970      	ldr	r1, [pc, #448]	; (8003a7c <HAL_I2C_Master_Transmit+0x1f4>)
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f964 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
 80038c8:	e0d3      	b.n	8003a72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_I2C_Master_Transmit+0x50>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e0cc      	b.n	8003a72 <HAL_I2C_Master_Transmit+0x1ea>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d007      	beq.n	80038fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800390c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2221      	movs	r2, #33	; 0x21
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2210      	movs	r2, #16
 800391a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	893a      	ldrh	r2, [r7, #8]
 800392e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4a50      	ldr	r2, [pc, #320]	; (8003a80 <HAL_I2C_Master_Transmit+0x1f8>)
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003940:	8979      	ldrh	r1, [r7, #10]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	6a3a      	ldr	r2, [r7, #32]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f89c 	bl	8003a84 <I2C_MasterRequestWrite>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e08d      	b.n	8003a72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800396c:	e066      	b.n	8003a3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	6a39      	ldr	r1, [r7, #32]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f9de 	bl	8003d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00d      	beq.n	800399a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b04      	cmp	r3, #4
 8003984:	d107      	bne.n	8003996 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003994:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e06b      	b.n	8003a72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	781a      	ldrb	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d11b      	bne.n	8003a10 <HAL_I2C_Master_Transmit+0x188>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d017      	beq.n	8003a10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	6a39      	ldr	r1, [r7, #32]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f9ce 	bl	8003db6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00d      	beq.n	8003a3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d107      	bne.n	8003a38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e01a      	b.n	8003a72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d194      	bne.n	800396e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e000      	b.n	8003a72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	00100002 	.word	0x00100002
 8003a80:	ffff0000 	.word	0xffff0000

08003a84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	460b      	mov	r3, r1
 8003a92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d006      	beq.n	8003aae <I2C_MasterRequestWrite+0x2a>
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d003      	beq.n	8003aae <I2C_MasterRequestWrite+0x2a>
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aac:	d108      	bne.n	8003ac0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e00b      	b.n	8003ad8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	2b12      	cmp	r3, #18
 8003ac6:	d107      	bne.n	8003ad8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f84f 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00d      	beq.n	8003b0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003afe:	d103      	bne.n	8003b08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e035      	b.n	8003b78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b14:	d108      	bne.n	8003b28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b16:	897b      	ldrh	r3, [r7, #10]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b24:	611a      	str	r2, [r3, #16]
 8003b26:	e01b      	b.n	8003b60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b28:	897b      	ldrh	r3, [r7, #10]
 8003b2a:	11db      	asrs	r3, r3, #7
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f003 0306 	and.w	r3, r3, #6
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f063 030f 	orn	r3, r3, #15
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	490e      	ldr	r1, [pc, #56]	; (8003b80 <I2C_MasterRequestWrite+0xfc>)
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f875 	bl	8003c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e010      	b.n	8003b78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b56:	897b      	ldrh	r3, [r7, #10]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	4907      	ldr	r1, [pc, #28]	; (8003b84 <I2C_MasterRequestWrite+0x100>)
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f865 	bl	8003c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	00010008 	.word	0x00010008
 8003b84:	00010002 	.word	0x00010002

08003b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b98:	e025      	b.n	8003be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d021      	beq.n	8003be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	f7fe f971 	bl	8001e88 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d116      	bne.n	8003be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e023      	b.n	8003c2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10d      	bne.n	8003c0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	e00c      	b.n	8003c26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	43da      	mvns	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4013      	ands	r3, r2
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf0c      	ite	eq
 8003c1e:	2301      	moveq	r3, #1
 8003c20:	2300      	movne	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d0b6      	beq.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c44:	e051      	b.n	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c54:	d123      	bne.n	8003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f043 0204 	orr.w	r2, r3, #4
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e046      	b.n	8003d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d021      	beq.n	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca6:	f7fe f8ef 	bl	8001e88 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d116      	bne.n	8003cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f043 0220 	orr.w	r2, r3, #32
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e020      	b.n	8003d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d10c      	bne.n	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf14      	ite	ne
 8003d06:	2301      	movne	r3, #1
 8003d08:	2300      	moveq	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	e00b      	b.n	8003d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	43da      	mvns	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d18d      	bne.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d40:	e02d      	b.n	8003d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f878 	bl	8003e38 <I2C_IsAcknowledgeFailed>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e02d      	b.n	8003dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d021      	beq.n	8003d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fe f895 	bl	8001e88 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d116      	bne.n	8003d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f043 0220 	orr.w	r2, r3, #32
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e007      	b.n	8003dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da8:	2b80      	cmp	r3, #128	; 0x80
 8003daa:	d1ca      	bne.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc2:	e02d      	b.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f837 	bl	8003e38 <I2C_IsAcknowledgeFailed>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e02d      	b.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d021      	beq.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ddc:	f7fe f854 	bl	8001e88 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d302      	bcc.n	8003df2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d116      	bne.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e007      	b.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d1ca      	bne.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4e:	d11b      	bne.n	8003e88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f043 0204 	orr.w	r2, r3, #4
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e264      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d075      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eb6:	4ba3      	ldr	r3, [pc, #652]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d00c      	beq.n	8003edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec2:	4ba0      	ldr	r3, [pc, #640]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d112      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ece:	4b9d      	ldr	r3, [pc, #628]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eda:	d10b      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	4b99      	ldr	r3, [pc, #612]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d05b      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x108>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d157      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e23f      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efc:	d106      	bne.n	8003f0c <HAL_RCC_OscConfig+0x74>
 8003efe:	4b91      	ldr	r3, [pc, #580]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a90      	ldr	r2, [pc, #576]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e01d      	b.n	8003f48 <HAL_RCC_OscConfig+0xb0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x98>
 8003f16:	4b8b      	ldr	r3, [pc, #556]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a8a      	ldr	r2, [pc, #552]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	4b88      	ldr	r3, [pc, #544]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a87      	ldr	r2, [pc, #540]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCC_OscConfig+0xb0>
 8003f30:	4b84      	ldr	r3, [pc, #528]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a83      	ldr	r2, [pc, #524]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	4b81      	ldr	r3, [pc, #516]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a80      	ldr	r2, [pc, #512]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d013      	beq.n	8003f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f50:	f7fd ff9a 	bl	8001e88 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f58:	f7fd ff96 	bl	8001e88 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e204      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6a:	4b76      	ldr	r3, [pc, #472]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0xc0>
 8003f76:	e014      	b.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fd ff86 	bl	8001e88 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f80:	f7fd ff82 	bl	8001e88 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e1f0      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f92:	4b6c      	ldr	r3, [pc, #432]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0xe8>
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d063      	beq.n	8004076 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fae:	4b65      	ldr	r3, [pc, #404]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fba:	4b62      	ldr	r3, [pc, #392]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d11c      	bne.n	8004000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc6:	4b5f      	ldr	r3, [pc, #380]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d116      	bne.n	8004000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd2:	4b5c      	ldr	r3, [pc, #368]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <HAL_RCC_OscConfig+0x152>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d001      	beq.n	8003fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e1c4      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fea:	4b56      	ldr	r3, [pc, #344]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4952      	ldr	r1, [pc, #328]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffe:	e03a      	b.n	8004076 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d020      	beq.n	800404a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004008:	4b4f      	ldr	r3, [pc, #316]	; (8004148 <HAL_RCC_OscConfig+0x2b0>)
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fd ff3b 	bl	8001e88 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004016:	f7fd ff37 	bl	8001e88 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e1a5      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004028:	4b46      	ldr	r3, [pc, #280]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004034:	4b43      	ldr	r3, [pc, #268]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4940      	ldr	r1, [pc, #256]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	4313      	orrs	r3, r2
 8004046:	600b      	str	r3, [r1, #0]
 8004048:	e015      	b.n	8004076 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404a:	4b3f      	ldr	r3, [pc, #252]	; (8004148 <HAL_RCC_OscConfig+0x2b0>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fd ff1a 	bl	8001e88 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004058:	f7fd ff16 	bl	8001e88 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e184      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406a:	4b36      	ldr	r3, [pc, #216]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d030      	beq.n	80040e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800408a:	4b30      	ldr	r3, [pc, #192]	; (800414c <HAL_RCC_OscConfig+0x2b4>)
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fd fefa 	bl	8001e88 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004098:	f7fd fef6 	bl	8001e88 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e164      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040aa:	4b26      	ldr	r3, [pc, #152]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x200>
 80040b6:	e015      	b.n	80040e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b8:	4b24      	ldr	r3, [pc, #144]	; (800414c <HAL_RCC_OscConfig+0x2b4>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040be:	f7fd fee3 	bl	8001e88 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c6:	f7fd fedf 	bl	8001e88 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e14d      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 80040da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1f0      	bne.n	80040c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80a0 	beq.w	8004232 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f6:	4b13      	ldr	r3, [pc, #76]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10f      	bne.n	8004122 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004110:	6413      	str	r3, [r2, #64]	; 0x40
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCC_OscConfig+0x2b8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d121      	bne.n	8004172 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412e:	4b08      	ldr	r3, [pc, #32]	; (8004150 <HAL_RCC_OscConfig+0x2b8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a07      	ldr	r2, [pc, #28]	; (8004150 <HAL_RCC_OscConfig+0x2b8>)
 8004134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413a:	f7fd fea5 	bl	8001e88 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004140:	e011      	b.n	8004166 <HAL_RCC_OscConfig+0x2ce>
 8004142:	bf00      	nop
 8004144:	40023800 	.word	0x40023800
 8004148:	42470000 	.word	0x42470000
 800414c:	42470e80 	.word	0x42470e80
 8004150:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004154:	f7fd fe98 	bl	8001e88 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e106      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004166:	4b85      	ldr	r3, [pc, #532]	; (800437c <HAL_RCC_OscConfig+0x4e4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d106      	bne.n	8004188 <HAL_RCC_OscConfig+0x2f0>
 800417a:	4b81      	ldr	r3, [pc, #516]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	4a80      	ldr	r2, [pc, #512]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	6713      	str	r3, [r2, #112]	; 0x70
 8004186:	e01c      	b.n	80041c2 <HAL_RCC_OscConfig+0x32a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b05      	cmp	r3, #5
 800418e:	d10c      	bne.n	80041aa <HAL_RCC_OscConfig+0x312>
 8004190:	4b7b      	ldr	r3, [pc, #492]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 8004192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004194:	4a7a      	ldr	r2, [pc, #488]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 8004196:	f043 0304 	orr.w	r3, r3, #4
 800419a:	6713      	str	r3, [r2, #112]	; 0x70
 800419c:	4b78      	ldr	r3, [pc, #480]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a0:	4a77      	ldr	r2, [pc, #476]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	6713      	str	r3, [r2, #112]	; 0x70
 80041a8:	e00b      	b.n	80041c2 <HAL_RCC_OscConfig+0x32a>
 80041aa:	4b75      	ldr	r3, [pc, #468]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	4a74      	ldr	r2, [pc, #464]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	6713      	str	r3, [r2, #112]	; 0x70
 80041b6:	4b72      	ldr	r3, [pc, #456]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	4a71      	ldr	r2, [pc, #452]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 80041bc:	f023 0304 	bic.w	r3, r3, #4
 80041c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d015      	beq.n	80041f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ca:	f7fd fe5d 	bl	8001e88 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d0:	e00a      	b.n	80041e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d2:	f7fd fe59 	bl	8001e88 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e0c5      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e8:	4b65      	ldr	r3, [pc, #404]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0ee      	beq.n	80041d2 <HAL_RCC_OscConfig+0x33a>
 80041f4:	e014      	b.n	8004220 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f6:	f7fd fe47 	bl	8001e88 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fc:	e00a      	b.n	8004214 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041fe:	f7fd fe43 	bl	8001e88 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f241 3288 	movw	r2, #5000	; 0x1388
 800420c:	4293      	cmp	r3, r2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e0af      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004214:	4b5a      	ldr	r3, [pc, #360]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1ee      	bne.n	80041fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004220:	7dfb      	ldrb	r3, [r7, #23]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d105      	bne.n	8004232 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004226:	4b56      	ldr	r3, [pc, #344]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	4a55      	ldr	r2, [pc, #340]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 800422c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004230:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 809b 	beq.w	8004372 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800423c:	4b50      	ldr	r3, [pc, #320]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 030c 	and.w	r3, r3, #12
 8004244:	2b08      	cmp	r3, #8
 8004246:	d05c      	beq.n	8004302 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d141      	bne.n	80042d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004250:	4b4c      	ldr	r3, [pc, #304]	; (8004384 <HAL_RCC_OscConfig+0x4ec>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004256:	f7fd fe17 	bl	8001e88 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800425e:	f7fd fe13 	bl	8001e88 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e081      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004270:	4b43      	ldr	r3, [pc, #268]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f0      	bne.n	800425e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	019b      	lsls	r3, r3, #6
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	3b01      	subs	r3, #1
 8004296:	041b      	lsls	r3, r3, #16
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	061b      	lsls	r3, r3, #24
 80042a0:	4937      	ldr	r1, [pc, #220]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a6:	4b37      	ldr	r3, [pc, #220]	; (8004384 <HAL_RCC_OscConfig+0x4ec>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fd fdec 	bl	8001e88 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b4:	f7fd fde8 	bl	8001e88 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e056      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c6:	4b2e      	ldr	r3, [pc, #184]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0x41c>
 80042d2:	e04e      	b.n	8004372 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d4:	4b2b      	ldr	r3, [pc, #172]	; (8004384 <HAL_RCC_OscConfig+0x4ec>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042da:	f7fd fdd5 	bl	8001e88 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e2:	f7fd fdd1 	bl	8001e88 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e03f      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f4:	4b22      	ldr	r3, [pc, #136]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f0      	bne.n	80042e2 <HAL_RCC_OscConfig+0x44a>
 8004300:	e037      	b.n	8004372 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e032      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800430e:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <HAL_RCC_OscConfig+0x4e8>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d028      	beq.n	800436e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d121      	bne.n	800436e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d11a      	bne.n	800436e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800433e:	4013      	ands	r3, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004344:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004346:	4293      	cmp	r3, r2
 8004348:	d111      	bne.n	800436e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	3b01      	subs	r3, #1
 8004358:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d107      	bne.n	800436e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d001      	beq.n	8004372 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40007000 	.word	0x40007000
 8004380:	40023800 	.word	0x40023800
 8004384:	42470060 	.word	0x42470060

08004388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0cc      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800439c:	4b68      	ldr	r3, [pc, #416]	; (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d90c      	bls.n	80043c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b65      	ldr	r3, [pc, #404]	; (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b63      	ldr	r3, [pc, #396]	; (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0b8      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d020      	beq.n	8004412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043dc:	4b59      	ldr	r3, [pc, #356]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4a58      	ldr	r2, [pc, #352]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043f4:	4b53      	ldr	r3, [pc, #332]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	4a52      	ldr	r2, [pc, #328]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004400:	4b50      	ldr	r3, [pc, #320]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	494d      	ldr	r1, [pc, #308]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d044      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d107      	bne.n	8004436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004426:	4b47      	ldr	r3, [pc, #284]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d119      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e07f      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d003      	beq.n	8004446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004442:	2b03      	cmp	r3, #3
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	4b3f      	ldr	r3, [pc, #252]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e06f      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004456:	4b3b      	ldr	r3, [pc, #236]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e067      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004466:	4b37      	ldr	r3, [pc, #220]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f023 0203 	bic.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4934      	ldr	r1, [pc, #208]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004478:	f7fd fd06 	bl	8001e88 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	e00a      	b.n	8004496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004480:	f7fd fd02 	bl	8001e88 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	; 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e04f      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	4b2b      	ldr	r3, [pc, #172]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 020c 	and.w	r2, r3, #12
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d1eb      	bne.n	8004480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a8:	4b25      	ldr	r3, [pc, #148]	; (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d20c      	bcs.n	80044d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b22      	ldr	r3, [pc, #136]	; (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044be:	4b20      	ldr	r3, [pc, #128]	; (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d001      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e032      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044dc:	4b19      	ldr	r3, [pc, #100]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4916      	ldr	r1, [pc, #88]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	490e      	ldr	r1, [pc, #56]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800450e:	f000 f821 	bl	8004554 <HAL_RCC_GetSysClockFreq>
 8004512:	4602      	mov	r2, r0
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	091b      	lsrs	r3, r3, #4
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	490a      	ldr	r1, [pc, #40]	; (8004548 <HAL_RCC_ClockConfig+0x1c0>)
 8004520:	5ccb      	ldrb	r3, [r1, r3]
 8004522:	fa22 f303 	lsr.w	r3, r2, r3
 8004526:	4a09      	ldr	r2, [pc, #36]	; (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800452a:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_RCC_ClockConfig+0x1c8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fd fc66 	bl	8001e00 <HAL_InitTick>

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40023c00 	.word	0x40023c00
 8004544:	40023800 	.word	0x40023800
 8004548:	08005864 	.word	0x08005864
 800454c:	20000000 	.word	0x20000000
 8004550:	20000004 	.word	0x20000004

08004554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004554:	b5b0      	push	{r4, r5, r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800455a:	2100      	movs	r1, #0
 800455c:	6079      	str	r1, [r7, #4]
 800455e:	2100      	movs	r1, #0
 8004560:	60f9      	str	r1, [r7, #12]
 8004562:	2100      	movs	r1, #0
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004566:	2100      	movs	r1, #0
 8004568:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800456a:	4952      	ldr	r1, [pc, #328]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800456c:	6889      	ldr	r1, [r1, #8]
 800456e:	f001 010c 	and.w	r1, r1, #12
 8004572:	2908      	cmp	r1, #8
 8004574:	d00d      	beq.n	8004592 <HAL_RCC_GetSysClockFreq+0x3e>
 8004576:	2908      	cmp	r1, #8
 8004578:	f200 8094 	bhi.w	80046a4 <HAL_RCC_GetSysClockFreq+0x150>
 800457c:	2900      	cmp	r1, #0
 800457e:	d002      	beq.n	8004586 <HAL_RCC_GetSysClockFreq+0x32>
 8004580:	2904      	cmp	r1, #4
 8004582:	d003      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0x38>
 8004584:	e08e      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004586:	4b4c      	ldr	r3, [pc, #304]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8004588:	60bb      	str	r3, [r7, #8]
       break;
 800458a:	e08e      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800458c:	4b4b      	ldr	r3, [pc, #300]	; (80046bc <HAL_RCC_GetSysClockFreq+0x168>)
 800458e:	60bb      	str	r3, [r7, #8]
      break;
 8004590:	e08b      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004592:	4948      	ldr	r1, [pc, #288]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004594:	6849      	ldr	r1, [r1, #4]
 8004596:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800459a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800459c:	4945      	ldr	r1, [pc, #276]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800459e:	6849      	ldr	r1, [r1, #4]
 80045a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80045a4:	2900      	cmp	r1, #0
 80045a6:	d024      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a8:	4942      	ldr	r1, [pc, #264]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80045aa:	6849      	ldr	r1, [r1, #4]
 80045ac:	0989      	lsrs	r1, r1, #6
 80045ae:	4608      	mov	r0, r1
 80045b0:	f04f 0100 	mov.w	r1, #0
 80045b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80045b8:	f04f 0500 	mov.w	r5, #0
 80045bc:	ea00 0204 	and.w	r2, r0, r4
 80045c0:	ea01 0305 	and.w	r3, r1, r5
 80045c4:	493d      	ldr	r1, [pc, #244]	; (80046bc <HAL_RCC_GetSysClockFreq+0x168>)
 80045c6:	fb01 f003 	mul.w	r0, r1, r3
 80045ca:	2100      	movs	r1, #0
 80045cc:	fb01 f102 	mul.w	r1, r1, r2
 80045d0:	1844      	adds	r4, r0, r1
 80045d2:	493a      	ldr	r1, [pc, #232]	; (80046bc <HAL_RCC_GetSysClockFreq+0x168>)
 80045d4:	fba2 0101 	umull	r0, r1, r2, r1
 80045d8:	1863      	adds	r3, r4, r1
 80045da:	4619      	mov	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	461a      	mov	r2, r3
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	f7fb fdf6 	bl	80001d4 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4613      	mov	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e04a      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f2:	4b30      	ldr	r3, [pc, #192]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	099b      	lsrs	r3, r3, #6
 80045f8:	461a      	mov	r2, r3
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004602:	f04f 0100 	mov.w	r1, #0
 8004606:	ea02 0400 	and.w	r4, r2, r0
 800460a:	ea03 0501 	and.w	r5, r3, r1
 800460e:	4620      	mov	r0, r4
 8004610:	4629      	mov	r1, r5
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	014b      	lsls	r3, r1, #5
 800461c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004620:	0142      	lsls	r2, r0, #5
 8004622:	4610      	mov	r0, r2
 8004624:	4619      	mov	r1, r3
 8004626:	1b00      	subs	r0, r0, r4
 8004628:	eb61 0105 	sbc.w	r1, r1, r5
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	018b      	lsls	r3, r1, #6
 8004636:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800463a:	0182      	lsls	r2, r0, #6
 800463c:	1a12      	subs	r2, r2, r0
 800463e:	eb63 0301 	sbc.w	r3, r3, r1
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f04f 0100 	mov.w	r1, #0
 800464a:	00d9      	lsls	r1, r3, #3
 800464c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004650:	00d0      	lsls	r0, r2, #3
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	1912      	adds	r2, r2, r4
 8004658:	eb45 0303 	adc.w	r3, r5, r3
 800465c:	f04f 0000 	mov.w	r0, #0
 8004660:	f04f 0100 	mov.w	r1, #0
 8004664:	0299      	lsls	r1, r3, #10
 8004666:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800466a:	0290      	lsls	r0, r2, #10
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4610      	mov	r0, r2
 8004672:	4619      	mov	r1, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	461a      	mov	r2, r3
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	f7fb fdaa 	bl	80001d4 <__aeabi_uldivmod>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4613      	mov	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	3301      	adds	r3, #1
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	60bb      	str	r3, [r7, #8]
      break;
 80046a2:	e002      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x164>)
 80046a6:	60bb      	str	r3, [r7, #8]
      break;
 80046a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046aa:	68bb      	ldr	r3, [r7, #8]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bdb0      	pop	{r4, r5, r7, pc}
 80046b4:	40023800 	.word	0x40023800
 80046b8:	00f42400 	.word	0x00f42400
 80046bc:	017d7840 	.word	0x017d7840

080046c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000000 	.word	0x20000000

080046d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046dc:	f7ff fff0 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	0a9b      	lsrs	r3, r3, #10
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4903      	ldr	r1, [pc, #12]	; (80046fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	08005874 	.word	0x08005874

08004700 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d105      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004724:	2b00      	cmp	r3, #0
 8004726:	d035      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004728:	4b67      	ldr	r3, [pc, #412]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800472e:	f7fd fbab 	bl	8001e88 <HAL_GetTick>
 8004732:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004736:	f7fd fba7 	bl	8001e88 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0ba      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004748:	4b60      	ldr	r3, [pc, #384]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f0      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	019a      	lsls	r2, r3, #6
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	071b      	lsls	r3, r3, #28
 8004760:	495a      	ldr	r1, [pc, #360]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004768:	4b57      	ldr	r3, [pc, #348]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800476e:	f7fd fb8b 	bl	8001e88 <HAL_GetTick>
 8004772:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004776:	f7fd fb87 	bl	8001e88 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e09a      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004788:	4b50      	ldr	r3, [pc, #320]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8083 	beq.w	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	4b49      	ldr	r3, [pc, #292]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	4a48      	ldr	r2, [pc, #288]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6413      	str	r3, [r2, #64]	; 0x40
 80047b2:	4b46      	ldr	r3, [pc, #280]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047be:	4b44      	ldr	r3, [pc, #272]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a43      	ldr	r2, [pc, #268]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047ca:	f7fd fb5d 	bl	8001e88 <HAL_GetTick>
 80047ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047d2:	f7fd fb59 	bl	8001e88 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e06c      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047e4:	4b3a      	ldr	r3, [pc, #232]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f0      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047f0:	4b36      	ldr	r3, [pc, #216]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d02f      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	429a      	cmp	r2, r3
 800480c:	d028      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800480e:	4b2f      	ldr	r3, [pc, #188]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004816:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004818:	4b2e      	ldr	r3, [pc, #184]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800481e:	4b2d      	ldr	r3, [pc, #180]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004824:	4a29      	ldr	r2, [pc, #164]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800482a:	4b28      	ldr	r3, [pc, #160]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b01      	cmp	r3, #1
 8004834:	d114      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004836:	f7fd fb27 	bl	8001e88 <HAL_GetTick>
 800483a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483c:	e00a      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f7fd fb23 	bl	8001e88 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	; 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d901      	bls.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e034      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ee      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800486c:	d10d      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800486e:	4b17      	ldr	r3, [pc, #92]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800487e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004882:	4912      	ldr	r1, [pc, #72]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]
 8004888:	e005      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800488a:	4b10      	ldr	r3, [pc, #64]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	4a0f      	ldr	r2, [pc, #60]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004890:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004894:	6093      	str	r3, [r2, #8]
 8004896:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004898:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a2:	490a      	ldr	r1, [pc, #40]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	7c1a      	ldrb	r2, [r3, #16]
 80048b8:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048ba:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	42470068 	.word	0x42470068
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40007000 	.word	0x40007000
 80048d4:	42470e40 	.word	0x42470e40
 80048d8:	424711e0 	.word	0x424711e0

080048dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e083      	b.n	80049f6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	7f5b      	ldrb	r3, [r3, #29]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fd f990 	bl	8001c24 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	22ca      	movs	r2, #202	; 0xca
 8004910:	625a      	str	r2, [r3, #36]	; 0x24
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2253      	movs	r2, #83	; 0x53
 8004918:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fb13 	bl	8004f46 <RTC_EnterInitMode>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	22ff      	movs	r2, #255	; 0xff
 800492c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2204      	movs	r2, #4
 8004932:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e05e      	b.n	80049f6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800494a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6899      	ldr	r1, [r3, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68d2      	ldr	r2, [r2, #12]
 8004972:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6919      	ldr	r1, [r3, #16]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	041a      	lsls	r2, r3, #16
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004996:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10e      	bne.n	80049c4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 faa5 	bl	8004ef6 <HAL_RTC_WaitForSynchro>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	22ff      	movs	r2, #255	; 0xff
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2204      	movs	r2, #4
 80049be:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e018      	b.n	80049f6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	22ff      	movs	r2, #255	; 0xff
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80049f4:	2300      	movs	r3, #0
  }
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049fe:	b590      	push	{r4, r7, lr}
 8004a00:	b087      	sub	sp, #28
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	7f1b      	ldrb	r3, [r3, #28]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_RTC_SetTime+0x1c>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e0aa      	b.n	8004b70 <HAL_RTC_SetTime+0x172>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2202      	movs	r2, #2
 8004a24:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d126      	bne.n	8004a7a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 faaa 	bl	8004f9e <RTC_ByteToBcd2>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	785b      	ldrb	r3, [r3, #1]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 faa3 	bl	8004f9e <RTC_ByteToBcd2>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a5c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	789b      	ldrb	r3, [r3, #2]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fa9b 	bl	8004f9e <RTC_ByteToBcd2>
 8004a68:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004a6a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	78db      	ldrb	r3, [r3, #3]
 8004a72:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e018      	b.n	8004aac <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a9a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004aa0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	78db      	ldrb	r3, [r3, #3]
 8004aa6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	22ca      	movs	r2, #202	; 0xca
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2253      	movs	r2, #83	; 0x53
 8004aba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fa42 	bl	8004f46 <RTC_EnterInitMode>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00b      	beq.n	8004ae0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	22ff      	movs	r2, #255	; 0xff
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e047      	b.n	8004b70 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004aea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004aee:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004afe:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6899      	ldr	r1, [r3, #8]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b26:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d111      	bne.n	8004b5a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f9dd 	bl	8004ef6 <HAL_RTC_WaitForSynchro>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	22ff      	movs	r2, #255	; 0xff
 8004b48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e00a      	b.n	8004b70 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	22ff      	movs	r2, #255	; 0xff
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
  }
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	371c      	adds	r7, #28
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd90      	pop	{r4, r7, pc}

08004b78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	7f1b      	ldrb	r3, [r3, #28]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_RTC_SetDate+0x1c>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e094      	b.n	8004cbe <HAL_RTC_SetDate+0x146>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10e      	bne.n	8004bc4 <HAL_RTC_SetDate+0x4c>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d008      	beq.n	8004bc4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	785b      	ldrb	r3, [r3, #1]
 8004bb6:	f023 0310 	bic.w	r3, r3, #16
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	330a      	adds	r3, #10
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d11c      	bne.n	8004c04 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	78db      	ldrb	r3, [r3, #3]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f9e5 	bl	8004f9e <RTC_ByteToBcd2>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f9de 	bl	8004f9e <RTC_ByteToBcd2>
 8004be2:	4603      	mov	r3, r0
 8004be4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004be6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	789b      	ldrb	r3, [r3, #2]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 f9d6 	bl	8004f9e <RTC_ByteToBcd2>
 8004bf2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004bf4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	e00e      	b.n	8004c22 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	78db      	ldrb	r3, [r3, #3]
 8004c08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004c10:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004c16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	22ca      	movs	r2, #202	; 0xca
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2253      	movs	r2, #83	; 0x53
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f987 	bl	8004f46 <RTC_EnterInitMode>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	22ff      	movs	r2, #255	; 0xff
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e033      	b.n	8004cbe <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c64:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c74:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d111      	bne.n	8004ca8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f936 	bl	8004ef6 <HAL_RTC_WaitForSynchro>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00b      	beq.n	8004ca8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	22ff      	movs	r2, #255	; 0xff
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e00a      	b.n	8004cbe <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	22ff      	movs	r2, #255	; 0xff
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
  }
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd90      	pop	{r4, r7, pc}

08004cc6 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004cc6:	b590      	push	{r4, r7, lr}
 8004cc8:	b089      	sub	sp, #36	; 0x24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	7f1b      	ldrb	r3, [r3, #28]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_RTC_SetAlarm+0x24>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e101      	b.n	8004eee <HAL_RTC_SetAlarm+0x228>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d137      	bne.n	8004d6c <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d102      	bne.n	8004d10 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 f942 	bl	8004f9e <RTC_ByteToBcd2>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	785b      	ldrb	r3, [r3, #1]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f93b 	bl	8004f9e <RTC_ByteToBcd2>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d2c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	789b      	ldrb	r3, [r3, #2]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f933 	bl	8004f9e <RTC_ByteToBcd2>
 8004d38:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004d3a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	78db      	ldrb	r3, [r3, #3]
 8004d42:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004d44:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 f925 	bl	8004f9e <RTC_ByteToBcd2>
 8004d54:	4603      	mov	r3, r0
 8004d56:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004d58:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004d60:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d66:	4313      	orrs	r3, r2
 8004d68:	61fb      	str	r3, [r7, #28]
 8004d6a:	e023      	b.n	8004db4 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	785b      	ldrb	r3, [r3, #1]
 8004d8a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d8c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004d92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	78db      	ldrb	r3, [r3, #3]
 8004d98:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004d9a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004da2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004da4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004daa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	22ca      	movs	r2, #202	; 0xca
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2253      	movs	r2, #83	; 0x53
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd8:	d13f      	bne.n	8004e5a <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de8:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004df8:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dfa:	f7fd f845 	bl	8001e88 <HAL_GetTick>
 8004dfe:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004e00:	e013      	b.n	8004e2a <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e02:	f7fd f841 	bl	8001e88 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e10:	d90b      	bls.n	8004e2a <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	22ff      	movs	r2, #255	; 0xff
 8004e18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e061      	b.n	8004eee <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0e4      	beq.n	8004e02 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e56:	609a      	str	r2, [r3, #8]
 8004e58:	e03e      	b.n	8004ed8 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e68:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e78:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e7a:	f7fd f805 	bl	8001e88 <HAL_GetTick>
 8004e7e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004e80:	e013      	b.n	8004eaa <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e82:	f7fd f801 	bl	8001e88 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e90:	d90b      	bls.n	8004eaa <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	22ff      	movs	r2, #255	; 0xff
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2203      	movs	r2, #3
 8004e9e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e021      	b.n	8004eee <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0e4      	beq.n	8004e82 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69fa      	ldr	r2, [r7, #28]
 8004ebe:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed6:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	22ff      	movs	r2, #255	; 0xff
 8004ede:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3724      	adds	r7, #36	; 0x24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd90      	pop	{r4, r7, pc}

08004ef6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f10:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f12:	f7fc ffb9 	bl	8001e88 <HAL_GetTick>
 8004f16:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004f18:	e009      	b.n	8004f2e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f1a:	f7fc ffb5 	bl	8001e88 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f28:	d901      	bls.n	8004f2e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e007      	b.n	8004f3e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0ee      	beq.n	8004f1a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d119      	bne.n	8004f94 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f04f 32ff 	mov.w	r2, #4294967295
 8004f68:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f6a:	f7fc ff8d 	bl	8001e88 <HAL_GetTick>
 8004f6e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f70:	e009      	b.n	8004f86 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f72:	f7fc ff89 	bl	8001e88 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f80:	d901      	bls.n	8004f86 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e007      	b.n	8004f96 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ee      	beq.n	8004f72 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004fac:	e005      	b.n	8004fba <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	3b0a      	subs	r3, #10
 8004fb8:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	2b09      	cmp	r3, #9
 8004fbe:	d8f6      	bhi.n	8004fae <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	b2db      	uxtb	r3, r3
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmouthCalibMinusPulsesValue must be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmouthCalibMinusPulsesValue)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b086      	sub	sp, #24
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmouthCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	7f1b      	ldrb	r3, [r3, #28]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RTCEx_SetSmoothCalib+0x1e>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e047      	b.n	8005088 <HAL_RTCEx_SetSmoothCalib+0xae>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2202      	movs	r2, #2
 8005002:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	22ca      	movs	r2, #202	; 0xca
 800500a:	625a      	str	r2, [r3, #36]	; 0x24
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2253      	movs	r2, #83	; 0x53
 8005012:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01e      	beq.n	8005060 <HAL_RTCEx_SetSmoothCalib+0x86>
  {
  /* Get tick */
  tickstart = HAL_GetTick();
 8005022:	f7fc ff31 	bl	8001e88 <HAL_GetTick>
 8005026:	6178      	str	r0, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8005028:	e013      	b.n	8005052 <HAL_RTCEx_SetSmoothCalib+0x78>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800502a:	f7fc ff2d 	bl	8001e88 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005038:	d90b      	bls.n	8005052 <HAL_RTCEx_SetSmoothCalib+0x78>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	22ff      	movs	r2, #255	; 0xff
 8005040:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2203      	movs	r2, #3
 8005046:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e01a      	b.n	8005088 <HAL_RTCEx_SetSmoothCalib+0xae>
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e4      	bne.n	800502a <HAL_RTCEx_SetSmoothCalib+0x50>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmouthCalibMinusPulsesValue);
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	ea42 0103 	orr.w	r1, r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	22ff      	movs	r2, #255	; 0xff
 8005078:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e041      	b.n	8005126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fc fdca 	bl	8001c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f000 f950 	bl	8005374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d001      	beq.n	8005148 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e03c      	b.n	80051c2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <HAL_TIM_Base_Start+0xa0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d018      	beq.n	800518c <HAL_TIM_Base_Start+0x5c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005162:	d013      	beq.n	800518c <HAL_TIM_Base_Start+0x5c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1a      	ldr	r2, [pc, #104]	; (80051d4 <HAL_TIM_Base_Start+0xa4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00e      	beq.n	800518c <HAL_TIM_Base_Start+0x5c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a19      	ldr	r2, [pc, #100]	; (80051d8 <HAL_TIM_Base_Start+0xa8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_TIM_Base_Start+0x5c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a17      	ldr	r2, [pc, #92]	; (80051dc <HAL_TIM_Base_Start+0xac>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_TIM_Base_Start+0x5c>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a16      	ldr	r2, [pc, #88]	; (80051e0 <HAL_TIM_Base_Start+0xb0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d111      	bne.n	80051b0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b06      	cmp	r3, #6
 800519c:	d010      	beq.n	80051c0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ae:	e007      	b.n	80051c0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40014000 	.word	0x40014000

080051e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIM_ConfigClockSource+0x1c>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e0b4      	b.n	800536a <HAL_TIM_ConfigClockSource+0x186>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800521e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005226:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005238:	d03e      	beq.n	80052b8 <HAL_TIM_ConfigClockSource+0xd4>
 800523a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523e:	f200 8087 	bhi.w	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005246:	f000 8086 	beq.w	8005356 <HAL_TIM_ConfigClockSource+0x172>
 800524a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524e:	d87f      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005250:	2b70      	cmp	r3, #112	; 0x70
 8005252:	d01a      	beq.n	800528a <HAL_TIM_ConfigClockSource+0xa6>
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d87b      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005258:	2b60      	cmp	r3, #96	; 0x60
 800525a:	d050      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x11a>
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d877      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005260:	2b50      	cmp	r3, #80	; 0x50
 8005262:	d03c      	beq.n	80052de <HAL_TIM_ConfigClockSource+0xfa>
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d873      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d058      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x13a>
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d86f      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005270:	2b30      	cmp	r3, #48	; 0x30
 8005272:	d064      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x15a>
 8005274:	2b30      	cmp	r3, #48	; 0x30
 8005276:	d86b      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d060      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x15a>
 800527c:	2b20      	cmp	r3, #32
 800527e:	d867      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d05c      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x15a>
 8005284:	2b10      	cmp	r3, #16
 8005286:	d05a      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x15a>
 8005288:	e062      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6899      	ldr	r1, [r3, #8]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f000 f965 	bl	8005568 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	609a      	str	r2, [r3, #8]
      break;
 80052b6:	e04f      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	6899      	ldr	r1, [r3, #8]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f000 f94e 	bl	8005568 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052da:	609a      	str	r2, [r3, #8]
      break;
 80052dc:	e03c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6859      	ldr	r1, [r3, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f000 f8c2 	bl	8005474 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2150      	movs	r1, #80	; 0x50
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f91b 	bl	8005532 <TIM_ITRx_SetConfig>
      break;
 80052fc:	e02c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6859      	ldr	r1, [r3, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	461a      	mov	r2, r3
 800530c:	f000 f8e1 	bl	80054d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2160      	movs	r1, #96	; 0x60
 8005316:	4618      	mov	r0, r3
 8005318:	f000 f90b 	bl	8005532 <TIM_ITRx_SetConfig>
      break;
 800531c:	e01c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6859      	ldr	r1, [r3, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	461a      	mov	r2, r3
 800532c:	f000 f8a2 	bl	8005474 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2140      	movs	r1, #64	; 0x40
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f8fb 	bl	8005532 <TIM_ITRx_SetConfig>
      break;
 800533c:	e00c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4619      	mov	r1, r3
 8005348:	4610      	mov	r0, r2
 800534a:	f000 f8f2 	bl	8005532 <TIM_ITRx_SetConfig>
      break;
 800534e:	e003      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
      break;
 8005354:	e000      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a34      	ldr	r2, [pc, #208]	; (8005458 <TIM_Base_SetConfig+0xe4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00f      	beq.n	80053ac <TIM_Base_SetConfig+0x38>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005392:	d00b      	beq.n	80053ac <TIM_Base_SetConfig+0x38>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a31      	ldr	r2, [pc, #196]	; (800545c <TIM_Base_SetConfig+0xe8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_Base_SetConfig+0x38>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a30      	ldr	r2, [pc, #192]	; (8005460 <TIM_Base_SetConfig+0xec>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0x38>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a2f      	ldr	r2, [pc, #188]	; (8005464 <TIM_Base_SetConfig+0xf0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d108      	bne.n	80053be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a25      	ldr	r2, [pc, #148]	; (8005458 <TIM_Base_SetConfig+0xe4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01b      	beq.n	80053fe <TIM_Base_SetConfig+0x8a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d017      	beq.n	80053fe <TIM_Base_SetConfig+0x8a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a22      	ldr	r2, [pc, #136]	; (800545c <TIM_Base_SetConfig+0xe8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <TIM_Base_SetConfig+0x8a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a21      	ldr	r2, [pc, #132]	; (8005460 <TIM_Base_SetConfig+0xec>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00f      	beq.n	80053fe <TIM_Base_SetConfig+0x8a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a20      	ldr	r2, [pc, #128]	; (8005464 <TIM_Base_SetConfig+0xf0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00b      	beq.n	80053fe <TIM_Base_SetConfig+0x8a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a1f      	ldr	r2, [pc, #124]	; (8005468 <TIM_Base_SetConfig+0xf4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d007      	beq.n	80053fe <TIM_Base_SetConfig+0x8a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1e      	ldr	r2, [pc, #120]	; (800546c <TIM_Base_SetConfig+0xf8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_Base_SetConfig+0x8a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <TIM_Base_SetConfig+0xfc>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d108      	bne.n	8005410 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a08      	ldr	r2, [pc, #32]	; (8005458 <TIM_Base_SetConfig+0xe4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d103      	bne.n	8005444 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	615a      	str	r2, [r3, #20]
}
 800544a:	bf00      	nop
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40010000 	.word	0x40010000
 800545c:	40000400 	.word	0x40000400
 8005460:	40000800 	.word	0x40000800
 8005464:	40000c00 	.word	0x40000c00
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800

08005474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f023 0201 	bic.w	r2, r3, #1
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800549e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f023 030a 	bic.w	r3, r3, #10
 80054b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b087      	sub	sp, #28
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f023 0210 	bic.w	r2, r3, #16
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	031b      	lsls	r3, r3, #12
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800550e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	621a      	str	r2, [r3, #32]
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005532:	b480      	push	{r7}
 8005534:	b085      	sub	sp, #20
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005548:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	f043 0307 	orr.w	r3, r3, #7
 8005554:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	609a      	str	r2, [r3, #8]
}
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005582:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	021a      	lsls	r2, r3, #8
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	431a      	orrs	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4313      	orrs	r3, r2
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	609a      	str	r2, [r3, #8]
}
 800559c:	bf00      	nop
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055bc:	2302      	movs	r3, #2
 80055be:	e050      	b.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1c      	ldr	r2, [pc, #112]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d018      	beq.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560c:	d013      	beq.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a18      	ldr	r2, [pc, #96]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00e      	beq.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a16      	ldr	r2, [pc, #88]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d009      	beq.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a15      	ldr	r2, [pc, #84]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a13      	ldr	r2, [pc, #76]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d10c      	bne.n	8005650 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800563c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	4313      	orrs	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40010000 	.word	0x40010000
 8005674:	40000400 	.word	0x40000400
 8005678:	40000800 	.word	0x40000800
 800567c:	40000c00 	.word	0x40000c00
 8005680:	40014000 	.word	0x40014000

08005684 <__libc_init_array>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	4d0d      	ldr	r5, [pc, #52]	; (80056bc <__libc_init_array+0x38>)
 8005688:	4c0d      	ldr	r4, [pc, #52]	; (80056c0 <__libc_init_array+0x3c>)
 800568a:	1b64      	subs	r4, r4, r5
 800568c:	10a4      	asrs	r4, r4, #2
 800568e:	2600      	movs	r6, #0
 8005690:	42a6      	cmp	r6, r4
 8005692:	d109      	bne.n	80056a8 <__libc_init_array+0x24>
 8005694:	4d0b      	ldr	r5, [pc, #44]	; (80056c4 <__libc_init_array+0x40>)
 8005696:	4c0c      	ldr	r4, [pc, #48]	; (80056c8 <__libc_init_array+0x44>)
 8005698:	f000 f820 	bl	80056dc <_init>
 800569c:	1b64      	subs	r4, r4, r5
 800569e:	10a4      	asrs	r4, r4, #2
 80056a0:	2600      	movs	r6, #0
 80056a2:	42a6      	cmp	r6, r4
 80056a4:	d105      	bne.n	80056b2 <__libc_init_array+0x2e>
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ac:	4798      	blx	r3
 80056ae:	3601      	adds	r6, #1
 80056b0:	e7ee      	b.n	8005690 <__libc_init_array+0xc>
 80056b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b6:	4798      	blx	r3
 80056b8:	3601      	adds	r6, #1
 80056ba:	e7f2      	b.n	80056a2 <__libc_init_array+0x1e>
 80056bc:	0800588c 	.word	0x0800588c
 80056c0:	0800588c 	.word	0x0800588c
 80056c4:	0800588c 	.word	0x0800588c
 80056c8:	08005890 	.word	0x08005890

080056cc <memset>:
 80056cc:	4402      	add	r2, r0
 80056ce:	4603      	mov	r3, r0
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d100      	bne.n	80056d6 <memset+0xa>
 80056d4:	4770      	bx	lr
 80056d6:	f803 1b01 	strb.w	r1, [r3], #1
 80056da:	e7f9      	b.n	80056d0 <memset+0x4>

080056dc <_init>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	bf00      	nop
 80056e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	469e      	mov	lr, r3
 80056e6:	4770      	bx	lr

080056e8 <_fini>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr
