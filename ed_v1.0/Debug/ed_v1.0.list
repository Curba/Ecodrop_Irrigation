
ed_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006144  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080062e4  080062e4  000162e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a8  080064a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064b0  080064b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080064b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000070  08006528  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08006528  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ea4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270b  00000000  00000000  00032f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00035650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00036730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018488  00000000  00000000  00037710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014553  00000000  00000000  0004fb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a021f  00000000  00000000  000640eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010430a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b5c  00000000  00000000  00104360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080062cc 	.word	0x080062cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080062cc 	.word	0x080062cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f023 030f 	bic.w	r3, r3, #15
 8000588:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	f043 030c 	orr.w	r3, r3, #12
 8000596:	b2db      	uxtb	r3, r3
 8000598:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005a4:	7bbb      	ldrb	r3, [r7, #14]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005ae:	7bbb      	ldrb	r3, [r7, #14]
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005b8:	f107 0208 	add.w	r2, r7, #8
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2304      	movs	r3, #4
 80005c2:	214e      	movs	r1, #78	; 0x4e
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <lcd_send_cmd+0x5c>)
 80005c6:	f003 fab3 	bl	8003b30 <HAL_I2C_Master_Transmit>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000f4 	.word	0x200000f4

080005d8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af02      	add	r7, sp, #8
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f023 030f 	bic.w	r3, r3, #15
 80005e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	f043 030d 	orr.w	r3, r3, #13
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	f043 0309 	orr.w	r3, r3, #9
 8000600:	b2db      	uxtb	r3, r3
 8000602:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000604:	7bbb      	ldrb	r3, [r7, #14]
 8000606:	f043 030d 	orr.w	r3, r3, #13
 800060a:	b2db      	uxtb	r3, r3
 800060c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	f043 0309 	orr.w	r3, r3, #9
 8000614:	b2db      	uxtb	r3, r3
 8000616:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000618:	f107 0208 	add.w	r2, r7, #8
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2304      	movs	r3, #4
 8000622:	214e      	movs	r1, #78	; 0x4e
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <lcd_send_data+0x5c>)
 8000626:	f003 fa83 	bl	8003b30 <HAL_I2C_Master_Transmit>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000f4 	.word	0x200000f4

08000638 <lcd_clear>:

void lcd_clear (void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	f7ff ff9a 	bl	8000578 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	e005      	b.n	8000656 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800064a:	2020      	movs	r0, #32
 800064c:	f7ff ffc4 	bl	80005d8 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3301      	adds	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b45      	cmp	r3, #69	; 0x45
 800065a:	ddf6      	ble.n	800064a <lcd_clear+0x12>
	}
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <lcd_put_cur+0x18>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d005      	beq.n	8000688 <lcd_put_cur+0x22>
 800067c:	e009      	b.n	8000692 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	603b      	str	r3, [r7, #0]
            break;
 8000686:	e004      	b.n	8000692 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800068e:	603b      	str	r3, [r7, #0]
            break;
 8000690:	bf00      	nop
    };
    lcd_send_cmd (col);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff6e 	bl	8000578 <lcd_send_cmd>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <lcd_init>:


void lcd_init (void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	delay_us(60000);  // wait for >40ms
 80006a8:	f64e 2060 	movw	r0, #60000	; 0xea60
 80006ac:	f000 fba8 	bl	8000e00 <delay_us>
	lcd_send_cmd (0x30);
 80006b0:	2030      	movs	r0, #48	; 0x30
 80006b2:	f7ff ff61 	bl	8000578 <lcd_send_cmd>
	delay_us(6000);  // wait for >4.1ms
 80006b6:	f241 7070 	movw	r0, #6000	; 0x1770
 80006ba:	f000 fba1 	bl	8000e00 <delay_us>
	lcd_send_cmd (0x30);
 80006be:	2030      	movs	r0, #48	; 0x30
 80006c0:	f7ff ff5a 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);  // wait for >100us
 80006c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c8:	f000 fb9a 	bl	8000e00 <delay_us>
	lcd_send_cmd (0x30);
 80006cc:	2030      	movs	r0, #48	; 0x30
 80006ce:	f7ff ff53 	bl	8000578 <lcd_send_cmd>
	delay_us(200);
 80006d2:	20c8      	movs	r0, #200	; 0xc8
 80006d4:	f000 fb94 	bl	8000e00 <delay_us>
	lcd_send_cmd (0x20);  // 4bit mode
 80006d8:	2020      	movs	r0, #32
 80006da:	f7ff ff4d 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);
 80006de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006e2:	f000 fb8d 	bl	8000e00 <delay_us>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006e6:	2028      	movs	r0, #40	; 0x28
 80006e8:	f7ff ff46 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);
 80006ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f0:	f000 fb86 	bl	8000e00 <delay_us>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006f4:	2008      	movs	r0, #8
 80006f6:	f7ff ff3f 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);
 80006fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006fe:	f000 fb7f 	bl	8000e00 <delay_us>
	lcd_send_cmd (0x01);  // clear display
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff ff38 	bl	8000578 <lcd_send_cmd>
	delay_us(4000);
 8000708:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800070c:	f000 fb78 	bl	8000e00 <delay_us>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000710:	2006      	movs	r0, #6
 8000712:	f7ff ff31 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);
 8000716:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800071a:	f000 fb71 	bl	8000e00 <delay_us>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800071e:	200c      	movs	r0, #12
 8000720:	f7ff ff2a 	bl	8000578 <lcd_send_cmd>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000730:	e006      	b.n	8000740 <lcd_send_string+0x18>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff4c 	bl	80005d8 <lcd_send_data>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f4      	bne.n	8000732 <lcd_send_string+0xa>
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f001 fc83 	bl	8002064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f83f 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 fa95 	bl	8000c90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000766:	f000 fa73 	bl	8000c50 <MX_DMA_Init>
  MX_ADC1_Init();
 800076a:	f000 f8bf 	bl	80008ec <MX_ADC1_Init>
  MX_I2C1_Init();
 800076e:	f000 f963 	bl	8000a38 <MX_I2C1_Init>
  MX_RTC_Init();
 8000772:	f000 f98f 	bl	8000a94 <MX_RTC_Init>
  MX_TIM1_Init();
 8000776:	f000 fa1b 	bl	8000bb0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Initializes line average array


  for(int x = 0; x < 4; x ++){
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	e007      	b.n	8000790 <main+0x3c>
		  adc_line_avg[x] = 0;
 8000780:	4a12      	ldr	r2, [pc, #72]	; (80007cc <main+0x78>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2100      	movs	r1, #0
 8000786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int x = 0; x < 4; x ++){
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3301      	adds	r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b03      	cmp	r3, #3
 8000794:	ddf4      	ble.n	8000780 <main+0x2c>
			}

  //HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, -511);
  HAL_TIM_Base_Start(&htim1);
 8000796:	480e      	ldr	r0, [pc, #56]	; (80007d0 <main+0x7c>)
 8000798:	f004 fe8e 	bl	80054b8 <HAL_TIM_Base_Start>
  lcd_initial_message();
 800079c:	f000 fdda 	bl	8001354 <lcd_initial_message>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  DHT11_get_value();
 80007a0:	f000 fcfe 	bl	80011a0 <DHT11_get_value>
	  get_time();
 80007a4:	f000 fd9a 	bl	80012dc <get_time>

	  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_dma, adc_channel_lenght);
 80007a8:	2307      	movs	r3, #7
 80007aa:	461a      	mov	r2, r3
 80007ac:	4909      	ldr	r1, [pc, #36]	; (80007d4 <main+0x80>)
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <main+0x84>)
 80007b0:	f001 fe72 	bl	8002498 <HAL_ADC_Start_DMA>
	  //mode_planner(0,1);
	  //mode_manual(mode_manual_start);
	  menu_func(menu_lcd_refresh, 0);
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <main+0x88>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fdfc 	bl	80013b8 <menu_func>
	  HAL_Delay(1000);
 80007c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c4:	f001 fcc0 	bl	8002148 <HAL_Delay>
	  DHT11_get_value();
 80007c8:	e7ea      	b.n	80007a0 <main+0x4c>
 80007ca:	bf00      	nop
 80007cc:	200000d4 	.word	0x200000d4
 80007d0:	20000258 	.word	0x20000258
 80007d4:	200000e4 	.word	0x200000e4
 80007d8:	20000150 	.word	0x20000150
 80007dc:	20000090 	.word	0x20000090

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b098      	sub	sp, #96	; 0x60
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ea:	2230      	movs	r2, #48	; 0x30
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 f936 	bl	8005a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <SystemClock_Config+0x104>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a31      	ldr	r2, [pc, #196]	; (80008e4 <SystemClock_Config+0x104>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <SystemClock_Config+0x104>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000830:	2300      	movs	r3, #0
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <SystemClock_Config+0x108>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800083c:	4a2a      	ldr	r2, [pc, #168]	; (80008e8 <SystemClock_Config+0x108>)
 800083e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <SystemClock_Config+0x108>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000850:	230a      	movs	r3, #10
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2310      	movs	r3, #16
 800085a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000860:	2302      	movs	r3, #2
 8000862:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000864:	2300      	movs	r3, #0
 8000866:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000868:	2308      	movs	r3, #8
 800086a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 84;
 800086c:	2354      	movs	r3, #84	; 0x54
 800086e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000874:	2304      	movs	r3, #4
 8000876:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fc5f 	bl	8004140 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000888:	f001 f9f6 	bl	8001c78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2102      	movs	r1, #2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 fec1 	bl	8004630 <HAL_RCC_ClockConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80008b4:	f001 f9e0 	bl	8001c78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_RTC;
 80008b8:	230a      	movs	r3, #10
 80008ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80008c2:	2301      	movs	r3, #1
 80008c4:	763b      	strb	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 f86c 	bl	80049a8 <HAL_RCCEx_PeriphCLKConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80008d6:	f001 f9cf 	bl	8001c78 <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3760      	adds	r7, #96	; 0x60
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008fe:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <MX_ADC1_Init+0x140>)
 8000900:	4a4b      	ldr	r2, [pc, #300]	; (8000a30 <MX_ADC1_Init+0x144>)
 8000902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000904:	4b49      	ldr	r3, [pc, #292]	; (8000a2c <MX_ADC1_Init+0x140>)
 8000906:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800090a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800090c:	4b47      	ldr	r3, [pc, #284]	; (8000a2c <MX_ADC1_Init+0x140>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000912:	4b46      	ldr	r3, [pc, #280]	; (8000a2c <MX_ADC1_Init+0x140>)
 8000914:	2201      	movs	r2, #1
 8000916:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000918:	4b44      	ldr	r3, [pc, #272]	; (8000a2c <MX_ADC1_Init+0x140>)
 800091a:	2200      	movs	r2, #0
 800091c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800091e:	4b43      	ldr	r3, [pc, #268]	; (8000a2c <MX_ADC1_Init+0x140>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000926:	4b41      	ldr	r3, [pc, #260]	; (8000a2c <MX_ADC1_Init+0x140>)
 8000928:	2200      	movs	r2, #0
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800092c:	4b3f      	ldr	r3, [pc, #252]	; (8000a2c <MX_ADC1_Init+0x140>)
 800092e:	4a41      	ldr	r2, [pc, #260]	; (8000a34 <MX_ADC1_Init+0x148>)
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000932:	4b3e      	ldr	r3, [pc, #248]	; (8000a2c <MX_ADC1_Init+0x140>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <MX_ADC1_Init+0x140>)
 800093a:	2207      	movs	r2, #7
 800093c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800093e:	4b3b      	ldr	r3, [pc, #236]	; (8000a2c <MX_ADC1_Init+0x140>)
 8000940:	2201      	movs	r2, #1
 8000942:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000946:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <MX_ADC1_Init+0x140>)
 8000948:	2201      	movs	r2, #1
 800094a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800094c:	4837      	ldr	r0, [pc, #220]	; (8000a2c <MX_ADC1_Init+0x140>)
 800094e:	f001 fc1f 	bl	8002190 <HAL_ADC_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000958:	f001 f98e 	bl	8001c78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800095c:	2300      	movs	r3, #0
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000960:	2301      	movs	r3, #1
 8000962:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000964:	2302      	movs	r3, #2
 8000966:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	482f      	ldr	r0, [pc, #188]	; (8000a2c <MX_ADC1_Init+0x140>)
 800096e:	f001 fea1 	bl	80026b4 <HAL_ADC_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000978:	f001 f97e 	bl	8001c78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800097c:	2301      	movs	r3, #1
 800097e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	4828      	ldr	r0, [pc, #160]	; (8000a2c <MX_ADC1_Init+0x140>)
 800098a:	f001 fe93 	bl	80026b4 <HAL_ADC_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000994:	f001 f970 	bl	8001c78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000998:	2302      	movs	r3, #2
 800099a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800099c:	2303      	movs	r3, #3
 800099e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	4619      	mov	r1, r3
 80009a4:	4821      	ldr	r0, [pc, #132]	; (8000a2c <MX_ADC1_Init+0x140>)
 80009a6:	f001 fe85 	bl	80026b4 <HAL_ADC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80009b0:	f001 f962 	bl	8001c78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009b4:	2303      	movs	r3, #3
 80009b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80009b8:	2304      	movs	r3, #4
 80009ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	4619      	mov	r1, r3
 80009c0:	481a      	ldr	r0, [pc, #104]	; (8000a2c <MX_ADC1_Init+0x140>)
 80009c2:	f001 fe77 	bl	80026b4 <HAL_ADC_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80009cc:	f001 f954 	bl	8001c78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009d0:	2304      	movs	r3, #4
 80009d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80009d4:	2305      	movs	r3, #5
 80009d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4813      	ldr	r0, [pc, #76]	; (8000a2c <MX_ADC1_Init+0x140>)
 80009de:	f001 fe69 	bl	80026b4 <HAL_ADC_ConfigChannel>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80009e8:	f001 f946 	bl	8001c78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009ec:	2305      	movs	r3, #5
 80009ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80009f0:	2306      	movs	r3, #6
 80009f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_ADC1_Init+0x140>)
 80009fa:	f001 fe5b 	bl	80026b4 <HAL_ADC_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000a04:	f001 f938 	bl	8001c78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a08:	2306      	movs	r3, #6
 8000a0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_ADC1_Init+0x140>)
 8000a16:	f001 fe4d 	bl	80026b4 <HAL_ADC_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000a20:	f001 f92a 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000150 	.word	0x20000150
 8000a30:	40012000 	.word	0x40012000
 8000a34:	0f000001 	.word	0x0f000001

08000a38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_I2C1_Init+0x50>)
 8000a3e:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <MX_I2C1_Init+0x54>)
 8000a40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_I2C1_Init+0x50>)
 8000a44:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <MX_I2C1_Init+0x58>)
 8000a46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_I2C1_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_I2C1_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_I2C1_Init+0x50>)
 8000a56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_I2C1_Init+0x50>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_I2C1_Init+0x50>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MX_I2C1_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_I2C1_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_I2C1_Init+0x50>)
 8000a76:	f002 ff17 	bl	80038a8 <HAL_I2C_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a80:	f001 f8fa 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200000f4 	.word	0x200000f4
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	00061a80 	.word	0x00061a80

08000a94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b090      	sub	sp, #64	; 0x40
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000aae:	463b      	mov	r3, r7
 8000ab0:	2228      	movs	r2, #40	; 0x28
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f004 ffd3 	bl	8005a60 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000aba:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <MX_RTC_Init+0x114>)
 8000abc:	4a3b      	ldr	r2, [pc, #236]	; (8000bac <MX_RTC_Init+0x118>)
 8000abe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ac0:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <MX_RTC_Init+0x114>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ac6:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <MX_RTC_Init+0x114>)
 8000ac8:	227f      	movs	r2, #127	; 0x7f
 8000aca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 280;
 8000acc:	4b36      	ldr	r3, [pc, #216]	; (8000ba8 <MX_RTC_Init+0x114>)
 8000ace:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000ad2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ad4:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <MX_RTC_Init+0x114>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ada:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <MX_RTC_Init+0x114>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ae0:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <MX_RTC_Init+0x114>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ae6:	4830      	ldr	r0, [pc, #192]	; (8000ba8 <MX_RTC_Init+0x114>)
 8000ae8:	f004 f84c 	bl	8004b84 <HAL_RTC_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000af2:	f001 f8c1 	bl	8001c78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b14:	2201      	movs	r2, #1
 8000b16:	4619      	mov	r1, r3
 8000b18:	4823      	ldr	r0, [pc, #140]	; (8000ba8 <MX_RTC_Init+0x114>)
 8000b1a:	f004 f8c4 	bl	8004ca6 <HAL_RTC_SetTime>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000b24:	f001 f8a8 	bl	8001c78 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_MARCH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b44:	2201      	movs	r2, #1
 8000b46:	4619      	mov	r1, r3
 8000b48:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <MX_RTC_Init+0x114>)
 8000b4a:	f004 f9c7 	bl	8004edc <HAL_RTC_SetDate>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000b54:	f001 f890 	bl	8001c78 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x3;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x45;
 8000b5c:	2345      	movs	r3, #69	; 0x45
 8000b5e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x4;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <MX_RTC_Init+0x114>)
 8000b90:	f004 fa9a 	bl	80050c8 <HAL_RTC_SetAlarm>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000b9a:	f001 f86d 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	3740      	adds	r7, #64	; 0x40
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000218 	.word	0x20000218
 8000bac:	40002800 	.word	0x40002800

08000bb0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_TIM1_Init+0x98>)
 8000bce:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <MX_TIM1_Init+0x9c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_TIM1_Init+0x98>)
 8000bd4:	2253      	movs	r2, #83	; 0x53
 8000bd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_TIM1_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_TIM1_Init+0x98>)
 8000be0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000be4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_TIM1_Init+0x98>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_TIM1_Init+0x98>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <MX_TIM1_Init+0x98>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf8:	4813      	ldr	r0, [pc, #76]	; (8000c48 <MX_TIM1_Init+0x98>)
 8000bfa:	f004 fc0d 	bl	8005418 <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c04:	f001 f838 	bl	8001c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_TIM1_Init+0x98>)
 8000c16:	f004 fca9 	bl	800556c <HAL_TIM_ConfigClockSource>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c20:	f001 f82a 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_TIM1_Init+0x98>)
 8000c32:	f004 fe7d 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c3c:	f001 f81c 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000258 	.word	0x20000258
 8000c4c:	40010000 	.word	0x40010000

08000c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_DMA_Init+0x3c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <MX_DMA_Init+0x3c>)
 8000c60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_DMA_Init+0x3c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2038      	movs	r0, #56	; 0x38
 8000c78:	f002 f8a1 	bl	8002dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c7c:	2038      	movs	r0, #56	; 0x38
 8000c7e:	f002 f8ba 	bl	8002df6 <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b51      	ldr	r3, [pc, #324]	; (8000df0 <MX_GPIO_Init+0x160>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a50      	ldr	r2, [pc, #320]	; (8000df0 <MX_GPIO_Init+0x160>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b4e      	ldr	r3, [pc, #312]	; (8000df0 <MX_GPIO_Init+0x160>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b4a      	ldr	r3, [pc, #296]	; (8000df0 <MX_GPIO_Init+0x160>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a49      	ldr	r2, [pc, #292]	; (8000df0 <MX_GPIO_Init+0x160>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b47      	ldr	r3, [pc, #284]	; (8000df0 <MX_GPIO_Init+0x160>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <MX_GPIO_Init+0x160>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a42      	ldr	r2, [pc, #264]	; (8000df0 <MX_GPIO_Init+0x160>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b40      	ldr	r3, [pc, #256]	; (8000df0 <MX_GPIO_Init+0x160>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <MX_GPIO_Init+0x160>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a3b      	ldr	r2, [pc, #236]	; (8000df0 <MX_GPIO_Init+0x160>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b39      	ldr	r3, [pc, #228]	; (8000df0 <MX_GPIO_Init+0x160>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin|line1_relay_Pin|line0_relay_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d1c:	4835      	ldr	r0, [pc, #212]	; (8000df4 <MX_GPIO_Init+0x164>)
 8000d1e:	f002 fd91 	bl	8003844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(wellmotor_relay_GPIO_Port, wellmotor_relay_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2104      	movs	r1, #4
 8000d26:	4834      	ldr	r0, [pc, #208]	; (8000df8 <MX_GPIO_Init+0x168>)
 8000d28:	f002 fd8c 	bl	8003844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : tankmotor_relay_Pin line1_relay_Pin line0_relay_Pin */
  GPIO_InitStruct.Pin = tankmotor_relay_Pin|line1_relay_Pin|line0_relay_Pin;
 8000d2c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	482b      	ldr	r0, [pc, #172]	; (8000df4 <MX_GPIO_Init+0x164>)
 8000d46:	f002 fbe1 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : light_exti_sens_Pin button_press_Pin */
  GPIO_InitStruct.Pin = light_exti_sens_Pin|button_press_Pin;
 8000d4a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4826      	ldr	r0, [pc, #152]	; (8000dfc <MX_GPIO_Init+0x16c>)
 8000d62:	f002 fbd3 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : button_up_Pin button_down_Pin ac_source_Pin */
  GPIO_InitStruct.Pin = button_up_Pin|button_down_Pin|ac_source_Pin;
 8000d66:	f240 4303 	movw	r3, #1027	; 0x403
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	481e      	ldr	r0, [pc, #120]	; (8000df8 <MX_GPIO_Init+0x168>)
 8000d7e:	f002 fbc5 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : wellmotor_relay_Pin */
  GPIO_InitStruct.Pin = wellmotor_relay_Pin;
 8000d82:	2304      	movs	r3, #4
 8000d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(wellmotor_relay_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4817      	ldr	r0, [pc, #92]	; (8000df8 <MX_GPIO_Init+0x168>)
 8000d9a:	f002 fbb7 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : dht_in_Pin */
  GPIO_InitStruct.Pin = dht_in_Pin;
 8000d9e:	2320      	movs	r3, #32
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(dht_in_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4811      	ldr	r0, [pc, #68]	; (8000df8 <MX_GPIO_Init+0x168>)
 8000db2:	f002 fbab 	bl	800350c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2006      	movs	r0, #6
 8000dbc:	f001 ffff 	bl	8002dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dc0:	2006      	movs	r0, #6
 8000dc2:	f002 f818 	bl	8002df6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2007      	movs	r0, #7
 8000dcc:	f001 fff7 	bl	8002dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000dd0:	2007      	movs	r0, #7
 8000dd2:	f002 f810 	bl	8002df6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2028      	movs	r0, #40	; 0x28
 8000ddc:	f001 ffef 	bl	8002dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000de0:	2028      	movs	r0, #40	; 0x28
 8000de2:	f002 f808 	bl	8002df6 <HAL_NVIC_EnableIRQ>

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020800 	.word	0x40020800
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40020000 	.word	0x40020000

08000e00 <delay_us>:

/* USER CODE BEGIN 4 */

void delay_us (uint16_t us)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <delay_us+0x30>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000e12:	bf00      	nop
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <delay_us+0x30>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d3f9      	bcc.n	8000e14 <delay_us+0x14>
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000258 	.word	0x20000258

08000e34 <HAL_ADC_ConvCpltCallback>:


/*-----------------INTERRUPTS BEGIN-----------------------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a52      	ldr	r2, [pc, #328]	; (8000f88 <HAL_ADC_ConvCpltCallback+0x154>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	f040 809b 	bne.w	8000f7c <HAL_ADC_ConvCpltCallback+0x148>

		for(int x =0; x<adc_moist_number; x++){
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	e042      	b.n	8000ed2 <HAL_ADC_ConvCpltCallback+0x9e>
			adc_result_dma[x] = (adc_result_dma[x]> 2730) ? 2730:adc_result_dma[x];
 8000e4c:	4a4f      	ldr	r2, [pc, #316]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x158>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d805      	bhi.n	8000e6a <HAL_ADC_ConvCpltCallback+0x36>
 8000e5e:	4a4b      	ldr	r2, [pc, #300]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x158>)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	e001      	b.n	8000e6e <HAL_ADC_ConvCpltCallback+0x3a>
 8000e6a:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8000e6e:	4947      	ldr	r1, [pc, #284]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x158>)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_result_dma[x] = (adc_result_dma[x]< 1260) ? 1260:adc_result_dma[x];
 8000e76:	4a45      	ldr	r2, [pc, #276]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x158>)
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	f240 42eb 	movw	r2, #1259	; 0x4eb
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d905      	bls.n	8000e94 <HAL_ADC_ConvCpltCallback+0x60>
 8000e88:	4a40      	ldr	r2, [pc, #256]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x158>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	e001      	b.n	8000e98 <HAL_ADC_ConvCpltCallback+0x64>
 8000e94:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8000e98:	493c      	ldr	r1, [pc, #240]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x158>)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_result_percentage[x] = 100-((adc_result_dma[x]-1260)*100/1470);
 8000ea0:	4a3a      	ldr	r2, [pc, #232]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x158>)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8000eae:	2264      	movs	r2, #100	; 0x64
 8000eb0:	fb02 f303 	mul.w	r3, r2, r3
 8000eb4:	4a36      	ldr	r2, [pc, #216]	; (8000f90 <HAL_ADC_ConvCpltCallback+0x15c>)
 8000eb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eba:	11d2      	asrs	r2, r2, #7
 8000ebc:	17db      	asrs	r3, r3, #31
 8000ebe:	1a9b      	subs	r3, r3, r2
 8000ec0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000ec4:	4933      	ldr	r1, [pc, #204]	; (8000f94 <HAL_ADC_ConvCpltCallback+0x160>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int x =0; x<adc_moist_number; x++){
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	dbb8      	blt.n	8000e4c <HAL_ADC_ConvCpltCallback+0x18>
		}
			//Produces Line average : adc_line_avg
			adc_total_moist_avg = 0;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <HAL_ADC_ConvCpltCallback+0x164>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
			int y =0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
			int per_line_offset = moist_per_line[0];
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	60fb      	str	r3, [r7, #12]
			for(int x = 0; x < adc_line_number; x++){
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	e03b      	b.n	8000f66 <HAL_ADC_ConvCpltCallback+0x132>
				adc_line_avg[x] = 0;
 8000eee:	4a2b      	ldr	r2, [pc, #172]	; (8000f9c <HAL_ADC_ConvCpltCallback+0x168>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(; y < per_line_offset; y++){
 8000ef8:	e00f      	b.n	8000f1a <HAL_ADC_ConvCpltCallback+0xe6>
					adc_line_avg[x] += adc_result_percentage[y];
 8000efa:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <HAL_ADC_ConvCpltCallback+0x168>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f02:	4924      	ldr	r1, [pc, #144]	; (8000f94 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f0a:	441a      	add	r2, r3
 8000f0c:	4923      	ldr	r1, [pc, #140]	; (8000f9c <HAL_ADC_ConvCpltCallback+0x168>)
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(; y < per_line_offset; y++){
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	3301      	adds	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbeb      	blt.n	8000efa <HAL_ADC_ConvCpltCallback+0xc6>
				}
				adc_line_avg[x] /= moist_per_line[x];
 8000f22:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <HAL_ADC_ConvCpltCallback+0x168>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f2a:	491d      	ldr	r1, [pc, #116]	; (8000fa0 <HAL_ADC_ConvCpltCallback+0x16c>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f32:	fb92 f2f3 	sdiv	r2, r2, r3
 8000f36:	4919      	ldr	r1, [pc, #100]	; (8000f9c <HAL_ADC_ConvCpltCallback+0x168>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			   per_line_offset += moist_per_line[x+1];
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <HAL_ADC_ConvCpltCallback+0x16c>)
 8000f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
			   adc_total_moist_avg += adc_line_avg[x];
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <HAL_ADC_ConvCpltCallback+0x168>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_ADC_ConvCpltCallback+0x164>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_ADC_ConvCpltCallback+0x164>)
 8000f5e:	6013      	str	r3, [r2, #0]
			for(int x = 0; x < adc_line_number; x++){
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	2202      	movs	r2, #2
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	dbbf      	blt.n	8000eee <HAL_ADC_ConvCpltCallback+0xba>
			}
			adc_total_moist_avg /= adc_line_number;
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_ADC_ConvCpltCallback+0x164>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2202      	movs	r2, #2
 8000f74:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_ADC_ConvCpltCallback+0x164>)
 8000f7a:	6013      	str	r3, [r2, #0]


	}
}
 8000f7c:	bf00      	nop
 8000f7e:	371c      	adds	r7, #28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	20000150 	.word	0x20000150
 8000f8c:	200000e4 	.word	0x200000e4
 8000f90:	164a893b 	.word	0x164a893b
 8000f94:	2000019c 	.word	0x2000019c
 8000f98:	2000008c 	.word	0x2000008c
 8000f9c:	200000d4 	.word	0x200000d4
 8000fa0:	0800644c 	.word	0x0800644c

08000fa4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
	menu_lcd_refresh = 1;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_GPIO_EXTI_Callback+0x48>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
    if(GPIO_Pin == button_up_Pin){
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d103      	bne.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x1e>
    	menu_up = 1;
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
    }else if(GPIO_Pin == button_down_Pin){
    	menu_down = 1;
    }else if(GPIO_Pin == button_press_Pin){
    	menu_click = 1;
    }
}
 8000fc0:	e00d      	b.n	8000fde <HAL_GPIO_EXTI_Callback+0x3a>
    }else if(GPIO_Pin == button_down_Pin){
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d103      	bne.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x2c>
    	menu_down = 1;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
}
 8000fce:	e006      	b.n	8000fde <HAL_GPIO_EXTI_Callback+0x3a>
    }else if(GPIO_Pin == button_press_Pin){
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fd6:	d102      	bne.n	8000fde <HAL_GPIO_EXTI_Callback+0x3a>
    	menu_click = 1;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000090 	.word	0x20000090
 8000ff0:	20000098 	.word	0x20000098
 8000ff4:	2000009c 	.word	0x2000009c
 8000ff8:	20000094 	.word	0x20000094

08000ffc <Set_Pin_Output>:
/*-----------------INTERRUPTS END-----------------------*/


/*-----------------DHT11 BEGIN--------------------------*/
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f002 fa6e 	bl	800350c <HAL_GPIO_Init>
}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105c:	2301      	movs	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4619      	mov	r1, r3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f002 fa50 	bl	800350c <HAL_GPIO_Init>
}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <DHT11_Start>:

void DHT11_Start (void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001078:	2120      	movs	r1, #32
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <DHT11_Start+0x3c>)
 800107c:	f7ff ffbe 	bl	8000ffc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001080:	2200      	movs	r2, #0
 8001082:	2120      	movs	r1, #32
 8001084:	480a      	ldr	r0, [pc, #40]	; (80010b0 <DHT11_Start+0x3c>)
 8001086:	f002 fbdd 	bl	8003844 <HAL_GPIO_WritePin>
	delay_us (18000);   // wait for 18ms
 800108a:	f244 6050 	movw	r0, #18000	; 0x4650
 800108e:	f7ff feb7 	bl	8000e00 <delay_us>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001092:	2201      	movs	r2, #1
 8001094:	2120      	movs	r1, #32
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <DHT11_Start+0x3c>)
 8001098:	f002 fbd4 	bl	8003844 <HAL_GPIO_WritePin>
    delay_us (20);   // wait for 20us
 800109c:	2014      	movs	r0, #20
 800109e:	f7ff feaf 	bl	8000e00 <delay_us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80010a2:	2120      	movs	r1, #32
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <DHT11_Start+0x3c>)
 80010a6:	f7ff ffc7 	bl	8001038 <Set_Pin_Input>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40020400 	.word	0x40020400

080010b4 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	71fb      	strb	r3, [r7, #7]
	delay_us (40);
 80010be:	2028      	movs	r0, #40	; 0x28
 80010c0:	f7ff fe9e 	bl	8000e00 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80010c4:	2120      	movs	r1, #32
 80010c6:	4811      	ldr	r0, [pc, #68]	; (800110c <DHT11_Check_Response+0x58>)
 80010c8:	f002 fba4 	bl	8003814 <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10e      	bne.n	80010f0 <DHT11_Check_Response+0x3c>
	{
		delay_us (80);
 80010d2:	2050      	movs	r0, #80	; 0x50
 80010d4:	f7ff fe94 	bl	8000e00 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80010d8:	2120      	movs	r1, #32
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <DHT11_Check_Response+0x58>)
 80010dc:	f002 fb9a 	bl	8003814 <HAL_GPIO_ReadPin>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <DHT11_Check_Response+0x38>
 80010e6:	2301      	movs	r3, #1
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	e001      	b.n	80010f0 <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 80010ec:	23ff      	movs	r3, #255	; 0xff
 80010ee:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 80010f0:	bf00      	nop
 80010f2:	2120      	movs	r1, #32
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <DHT11_Check_Response+0x58>)
 80010f6:	f002 fb8d 	bl	8003814 <HAL_GPIO_ReadPin>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f8      	bne.n	80010f2 <DHT11_Check_Response+0x3e>

	return Response;
 8001100:	79fb      	ldrb	r3, [r7, #7]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020400 	.word	0x40020400

08001110 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001116:	2300      	movs	r3, #0
 8001118:	71bb      	strb	r3, [r7, #6]
 800111a:	e037      	b.n	800118c <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 800111c:	bf00      	nop
 800111e:	2120      	movs	r1, #32
 8001120:	481e      	ldr	r0, [pc, #120]	; (800119c <DHT11_Read+0x8c>)
 8001122:	f002 fb77 	bl	8003814 <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f8      	beq.n	800111e <DHT11_Read+0xe>
		delay_us (40);   // wait for 40 us
 800112c:	2028      	movs	r0, #40	; 0x28
 800112e:	f7ff fe67 	bl	8000e00 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001132:	2120      	movs	r1, #32
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <DHT11_Read+0x8c>)
 8001136:	f002 fb6d 	bl	8003814 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10e      	bne.n	800115e <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	f1c3 0307 	rsb	r3, r3, #7
 8001146:	2201      	movs	r2, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	b25b      	sxtb	r3, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	b25a      	sxtb	r2, r3
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	4013      	ands	r3, r2
 8001158:	b25b      	sxtb	r3, r3
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	e00b      	b.n	8001176 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	f1c3 0307 	rsb	r3, r3, #7
 8001164:	2201      	movs	r2, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	b25a      	sxtb	r2, r3
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4313      	orrs	r3, r2
 8001172:	b25b      	sxtb	r3, r3
 8001174:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8001176:	bf00      	nop
 8001178:	2120      	movs	r1, #32
 800117a:	4808      	ldr	r0, [pc, #32]	; (800119c <DHT11_Read+0x8c>)
 800117c:	f002 fb4a 	bl	8003814 <HAL_GPIO_ReadPin>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f8      	bne.n	8001178 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	3301      	adds	r3, #1
 800118a:	71bb      	strb	r3, [r7, #6]
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	2b07      	cmp	r3, #7
 8001190:	d9c4      	bls.n	800111c <DHT11_Read+0xc>
	}
	return i;
 8001192:	79fb      	ldrb	r3, [r7, #7]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40020400 	.word	0x40020400

080011a0 <DHT11_get_value>:

void DHT11_get_value(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	DHT11_Start();
 80011a4:	f7ff ff66 	bl	8001074 <DHT11_Start>
	Presence = DHT11_Check_Response();
 80011a8:	f7ff ff84 	bl	80010b4 <DHT11_Check_Response>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <DHT11_get_value+0x8c>)
 80011b2:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read ();
 80011b4:	f7ff ffac 	bl	8001110 <DHT11_Read>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <DHT11_get_value+0x90>)
 80011be:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read ();
 80011c0:	f7ff ffa6 	bl	8001110 <DHT11_Read>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <DHT11_get_value+0x94>)
 80011ca:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read ();
 80011cc:	f7ff ffa0 	bl	8001110 <DHT11_Read>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <DHT11_get_value+0x98>)
 80011d6:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read ();
 80011d8:	f7ff ff9a 	bl	8001110 <DHT11_Read>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <DHT11_get_value+0x9c>)
 80011e2:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 80011e4:	f7ff ff94 	bl	8001110 <DHT11_Read>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <DHT11_get_value+0xa0>)
 80011ee:	801a      	strh	r2, [r3, #0]
	TEMP = Temp_byte1;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <DHT11_get_value+0x98>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <DHT11_get_value+0xa4>)
 80011f8:	801a      	strh	r2, [r3, #0]
	RH = Rh_byte1;
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <DHT11_get_value+0x90>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <DHT11_get_value+0xa8>)
 8001202:	801a      	strh	r2, [r3, #0]
	inst_temperature = (float) TEMP;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <DHT11_get_value+0xa4>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <DHT11_get_value+0xac>)
 8001212:	edc3 7a00 	vstr	s15, [r3]
	inst_humidity = (float) RH;
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <DHT11_get_value+0xa8>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <DHT11_get_value+0xb0>)
 8001224:	edc3 7a00 	vstr	s15, [r3]
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200000c4 	.word	0x200000c4
 8001230:	20000148 	.word	0x20000148
 8001234:	20000254 	.word	0x20000254
 8001238:	20000198 	.word	0x20000198
 800123c:	200002cc 	.word	0x200002cc
 8001240:	200002c4 	.word	0x200002c4
 8001244:	2000014c 	.word	0x2000014c
 8001248:	2000014a 	.word	0x2000014a
 800124c:	200000bc 	.word	0x200000bc
 8001250:	200000c0 	.word	0x200000c0

08001254 <mode_manual>:

/*-----------------DHT11 END----------------------------*/

/*-----------------MODE FUNCTIONS BEGIN-----------------*/
void mode_manual(int start){
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	if(start){
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d01b      	beq.n	800129a <mode_manual+0x46>
		HAL_GPIO_WritePin(GPIOA, line0_relay_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001268:	481b      	ldr	r0, [pc, #108]	; (80012d8 <mode_manual+0x84>)
 800126a:	f002 faeb 	bl	8003844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, line1_relay_Pin, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001274:	4818      	ldr	r0, [pc, #96]	; (80012d8 <mode_manual+0x84>)
 8001276:	f002 fae5 	bl	8003844 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800127a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127e:	f000 ff63 	bl	8002148 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, tankmotor_relay_Pin, GPIO_PIN_SET);
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001288:	4813      	ldr	r0, [pc, #76]	; (80012d8 <mode_manual+0x84>)
 800128a:	f002 fadb 	bl	8003844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, wellmotor_relay_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	2104      	movs	r1, #4
 8001292:	4811      	ldr	r0, [pc, #68]	; (80012d8 <mode_manual+0x84>)
 8001294:	f002 fad6 	bl	8003844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, wellmotor_relay_Pin, GPIO_PIN_RESET);
		HAL_Delay(1000);
		HAL_GPIO_WritePin(GPIOA, line0_relay_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, line1_relay_Pin, GPIO_PIN_RESET);
	}
}
 8001298:	e01a      	b.n	80012d0 <mode_manual+0x7c>
		HAL_GPIO_WritePin(GPIOA, tankmotor_relay_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <mode_manual+0x84>)
 80012a2:	f002 facf 	bl	8003844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, wellmotor_relay_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2104      	movs	r1, #4
 80012aa:	480b      	ldr	r0, [pc, #44]	; (80012d8 <mode_manual+0x84>)
 80012ac:	f002 faca 	bl	8003844 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80012b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b4:	f000 ff48 	bl	8002148 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, line0_relay_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <mode_manual+0x84>)
 80012c0:	f002 fac0 	bl	8003844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, line1_relay_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ca:	4803      	ldr	r0, [pc, #12]	; (80012d8 <mode_manual+0x84>)
 80012cc:	f002 faba 	bl	8003844 <HAL_GPIO_WritePin>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40020000 	.word	0x40020000

080012dc <get_time>:
  sDate.Year = set_year;
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK){}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
}

void get_time(){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80012e2:	2200      	movs	r2, #0
 80012e4:	4914      	ldr	r1, [pc, #80]	; (8001338 <get_time+0x5c>)
 80012e6:	4815      	ldr	r0, [pc, #84]	; (800133c <get_time+0x60>)
 80012e8:	f003 fd9a 	bl	8004e20 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 80012ec:	2200      	movs	r2, #0
 80012ee:	4914      	ldr	r1, [pc, #80]	; (8001340 <get_time+0x64>)
 80012f0:	4812      	ldr	r0, [pc, #72]	; (800133c <get_time+0x60>)
 80012f2:	f003 fe9a 	bl	800502a <HAL_RTC_GetDate>
	sprintf(timeBuff,"%d,%d.%d", currTime.Hours, currTime.Minutes, currTime.Seconds);
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <get_time+0x5c>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <get_time+0x5c>)
 80012fe:	785b      	ldrb	r3, [r3, #1]
 8001300:	4619      	mov	r1, r3
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <get_time+0x5c>)
 8001304:	789b      	ldrb	r3, [r3, #2]
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	460b      	mov	r3, r1
 800130a:	490e      	ldr	r1, [pc, #56]	; (8001344 <get_time+0x68>)
 800130c:	480e      	ldr	r0, [pc, #56]	; (8001348 <get_time+0x6c>)
 800130e:	f004 fbaf 	bl	8005a70 <siprintf>
	sprintf(dateBuff,"%02d-%02d-%2d",currDate.Date, currDate.Month, 2000 + currDate.Year);
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <get_time+0x64>)
 8001314:	789b      	ldrb	r3, [r3, #2]
 8001316:	461a      	mov	r2, r3
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <get_time+0x64>)
 800131a:	785b      	ldrb	r3, [r3, #1]
 800131c:	4619      	mov	r1, r3
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <get_time+0x64>)
 8001320:	78db      	ldrb	r3, [r3, #3]
 8001322:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	460b      	mov	r3, r1
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <get_time+0x70>)
 800132c:	4808      	ldr	r0, [pc, #32]	; (8001350 <get_time+0x74>)
 800132e:	f004 fb9f 	bl	8005a70 <siprintf>
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200000a4 	.word	0x200000a4
 800133c:	20000218 	.word	0x20000218
 8001340:	200000b8 	.word	0x200000b8
 8001344:	080062e4 	.word	0x080062e4
 8001348:	200002b0 	.word	0x200002b0
 800134c:	080062f0 	.word	0x080062f0
 8001350:	20000240 	.word	0x20000240

08001354 <lcd_initial_message>:

/*-----------------MENU BEGIN-------------------------*/
void lcd_initial_message(){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	lcd_init ();
 8001358:	f7ff f9a4 	bl	80006a4 <lcd_init>
	lcd_send_string ("ECODROP");
 800135c:	4812      	ldr	r0, [pc, #72]	; (80013a8 <lcd_initial_message+0x54>)
 800135e:	f7ff f9e3 	bl	8000728 <lcd_send_string>
	HAL_Delay(500);
 8001362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001366:	f000 feef 	bl	8002148 <HAL_Delay>
	lcd_put_cur(1, 0);
 800136a:	2100      	movs	r1, #0
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff f97a 	bl	8000666 <lcd_put_cur>
	lcd_send_string("Irrigation");
 8001372:	480e      	ldr	r0, [pc, #56]	; (80013ac <lcd_initial_message+0x58>)
 8001374:	f7ff f9d8 	bl	8000728 <lcd_send_string>
	HAL_Delay(1000);
 8001378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800137c:	f000 fee4 	bl	8002148 <HAL_Delay>
	lcd_send_cmd (0x01);
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff f8f9 	bl	8000578 <lcd_send_cmd>
	HAL_Delay(100);
 8001386:	2064      	movs	r0, #100	; 0x64
 8001388:	f000 fede 	bl	8002148 <HAL_Delay>
	lcd_init ();
 800138c:	f7ff f98a 	bl	80006a4 <lcd_init>
	lcd_send_string ("> Manual Mode");
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <lcd_initial_message+0x5c>)
 8001392:	f7ff f9c9 	bl	8000728 <lcd_send_string>
	lcd_put_cur(1, 0);
 8001396:	2100      	movs	r1, #0
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff f964 	bl	8000666 <lcd_put_cur>
	lcd_send_string("  Planner Mode  ");
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <lcd_initial_message+0x60>)
 80013a0:	f7ff f9c2 	bl	8000728 <lcd_send_string>

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	08006300 	.word	0x08006300
 80013ac:	08006308 	.word	0x08006308
 80013b0:	08006314 	.word	0x08006314
 80013b4:	08006324 	.word	0x08006324

080013b8 <menu_func>:

void menu_func(int refresh, int reset){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	if(refresh){
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 8437 	beq.w	8001c38 <menu_func+0x880>
		current_page = (reset) ? 0:current_page;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <menu_func+0x1e>
 80013d0:	4bac      	ldr	r3, [pc, #688]	; (8001684 <menu_func+0x2cc>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	e000      	b.n	80013d8 <menu_func+0x20>
 80013d6:	2300      	movs	r3, #0
 80013d8:	4aaa      	ldr	r2, [pc, #680]	; (8001684 <menu_func+0x2cc>)
 80013da:	6013      	str	r3, [r2, #0]
		lcd_clear();
 80013dc:	f7ff f92c 	bl	8000638 <lcd_clear>
		switch(current_page){
 80013e0:	4ba8      	ldr	r3, [pc, #672]	; (8001684 <menu_func+0x2cc>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b11      	cmp	r3, #17
 80013e6:	f200 841b 	bhi.w	8001c20 <menu_func+0x868>
 80013ea:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <menu_func+0x38>)
 80013ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f0:	08001439 	.word	0x08001439
 80013f4:	080014ad 	.word	0x080014ad
 80013f8:	08001521 	.word	0x08001521
 80013fc:	08001595 	.word	0x08001595
 8001400:	08001609 	.word	0x08001609
 8001404:	080016bd 	.word	0x080016bd
 8001408:	08001731 	.word	0x08001731
 800140c:	08001781 	.word	0x08001781
 8001410:	080017f5 	.word	0x080017f5
 8001414:	08001869 	.word	0x08001869
 8001418:	080018dd 	.word	0x080018dd
 800141c:	0800191b 	.word	0x0800191b
 8001420:	08001959 	.word	0x08001959
 8001424:	08001a13 	.word	0x08001a13
 8001428:	08001a87 	.word	0x08001a87
 800142c:	08001ac5 	.word	0x08001ac5
 8001430:	08001b39 	.word	0x08001b39
 8001434:	08001bad 	.word	0x08001bad
			case 0:
				if(menu_click){
 8001438:	4b93      	ldr	r3, [pc, #588]	; (8001688 <menu_func+0x2d0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00a      	beq.n	8001456 <menu_func+0x9e>
					current_page = 4;
 8001440:	4b90      	ldr	r3, [pc, #576]	; (8001684 <menu_func+0x2cc>)
 8001442:	2204      	movs	r2, #4
 8001444:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001446:	4b90      	ldr	r3, [pc, #576]	; (8001688 <menu_func+0x2d0>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800144c:	2100      	movs	r1, #0
 800144e:	2001      	movs	r0, #1
 8001450:	f7ff ffb2 	bl	80013b8 <menu_func>
					break;
 8001454:	e3e4      	b.n	8001c20 <menu_func+0x868>
				  }else if(menu_down){
 8001456:	4b8d      	ldr	r3, [pc, #564]	; (800168c <menu_func+0x2d4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <menu_func+0xbc>
					 current_page = 1;
 800145e:	4b89      	ldr	r3, [pc, #548]	; (8001684 <menu_func+0x2cc>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]
					 menu_down=0;
 8001464:	4b89      	ldr	r3, [pc, #548]	; (800168c <menu_func+0x2d4>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
					 menu_func(1, 0);
 800146a:	2100      	movs	r1, #0
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff ffa3 	bl	80013b8 <menu_func>
					 break;
 8001472:	e3d5      	b.n	8001c20 <menu_func+0x868>
				  }else if(menu_up){
 8001474:	4b86      	ldr	r3, [pc, #536]	; (8001690 <menu_func+0x2d8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00a      	beq.n	8001492 <menu_func+0xda>
					 current_page = 3;
 800147c:	4b81      	ldr	r3, [pc, #516]	; (8001684 <menu_func+0x2cc>)
 800147e:	2203      	movs	r2, #3
 8001480:	601a      	str	r2, [r3, #0]
					 menu_up =0;
 8001482:	4b83      	ldr	r3, [pc, #524]	; (8001690 <menu_func+0x2d8>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
					 menu_func(1, 0);
 8001488:	2100      	movs	r1, #0
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff ff94 	bl	80013b8 <menu_func>
					 break;
 8001490:	e3c6      	b.n	8001c20 <menu_func+0x868>
				  }
				lcd_init ();
 8001492:	f7ff f907 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Manual Mode");
 8001496:	487f      	ldr	r0, [pc, #508]	; (8001694 <menu_func+0x2dc>)
 8001498:	f7ff f946 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 800149c:	2100      	movs	r1, #0
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff f8e1 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Planner Mode  ");
 80014a4:	487c      	ldr	r0, [pc, #496]	; (8001698 <menu_func+0x2e0>)
 80014a6:	f7ff f93f 	bl	8000728 <lcd_send_string>
				break;
 80014aa:	e3b9      	b.n	8001c20 <menu_func+0x868>

			case 1:
				if(menu_click){
 80014ac:	4b76      	ldr	r3, [pc, #472]	; (8001688 <menu_func+0x2d0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00a      	beq.n	80014ca <menu_func+0x112>
					current_page = 7;
 80014b4:	4b73      	ldr	r3, [pc, #460]	; (8001684 <menu_func+0x2cc>)
 80014b6:	2207      	movs	r2, #7
 80014b8:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80014ba:	4b73      	ldr	r3, [pc, #460]	; (8001688 <menu_func+0x2d0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80014c0:	2100      	movs	r1, #0
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff ff78 	bl	80013b8 <menu_func>
					break;
 80014c8:	e3aa      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_down){
 80014ca:	4b70      	ldr	r3, [pc, #448]	; (800168c <menu_func+0x2d4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00a      	beq.n	80014e8 <menu_func+0x130>
					current_page = 2;
 80014d2:	4b6c      	ldr	r3, [pc, #432]	; (8001684 <menu_func+0x2cc>)
 80014d4:	2202      	movs	r2, #2
 80014d6:	601a      	str	r2, [r3, #0]
					menu_down =0;
 80014d8:	4b6c      	ldr	r3, [pc, #432]	; (800168c <menu_func+0x2d4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80014de:	2100      	movs	r1, #0
 80014e0:	2001      	movs	r0, #1
 80014e2:	f7ff ff69 	bl	80013b8 <menu_func>
					break;
 80014e6:	e39b      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_up){
 80014e8:	4b69      	ldr	r3, [pc, #420]	; (8001690 <menu_func+0x2d8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00a      	beq.n	8001506 <menu_func+0x14e>
					current_page = 0;
 80014f0:	4b64      	ldr	r3, [pc, #400]	; (8001684 <menu_func+0x2cc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
					menu_up =0;
 80014f6:	4b66      	ldr	r3, [pc, #408]	; (8001690 <menu_func+0x2d8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80014fc:	2100      	movs	r1, #0
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff ff5a 	bl	80013b8 <menu_func>
					break;
 8001504:	e38c      	b.n	8001c20 <menu_func+0x868>
				}
				lcd_init ();
 8001506:	f7ff f8cd 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Planner Mode  ");
 800150a:	4864      	ldr	r0, [pc, #400]	; (800169c <menu_func+0x2e4>)
 800150c:	f7ff f90c 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001510:	2100      	movs	r1, #0
 8001512:	2001      	movs	r0, #1
 8001514:	f7ff f8a7 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Auto Mode");
 8001518:	4861      	ldr	r0, [pc, #388]	; (80016a0 <menu_func+0x2e8>)
 800151a:	f7ff f905 	bl	8000728 <lcd_send_string>
				break;
 800151e:	e37f      	b.n	8001c20 <menu_func+0x868>

			case 2:
				if(menu_click){
 8001520:	4b59      	ldr	r3, [pc, #356]	; (8001688 <menu_func+0x2d0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00a      	beq.n	800153e <menu_func+0x186>
					current_page = 14;
 8001528:	4b56      	ldr	r3, [pc, #344]	; (8001684 <menu_func+0x2cc>)
 800152a:	220e      	movs	r2, #14
 800152c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800152e:	4b56      	ldr	r3, [pc, #344]	; (8001688 <menu_func+0x2d0>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001534:	2100      	movs	r1, #0
 8001536:	2001      	movs	r0, #1
 8001538:	f7ff ff3e 	bl	80013b8 <menu_func>
					break;
 800153c:	e370      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_down){
 800153e:	4b53      	ldr	r3, [pc, #332]	; (800168c <menu_func+0x2d4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00a      	beq.n	800155c <menu_func+0x1a4>
					current_page = 3;
 8001546:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <menu_func+0x2cc>)
 8001548:	2203      	movs	r2, #3
 800154a:	601a      	str	r2, [r3, #0]
					menu_down =0;
 800154c:	4b4f      	ldr	r3, [pc, #316]	; (800168c <menu_func+0x2d4>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001552:	2100      	movs	r1, #0
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff ff2f 	bl	80013b8 <menu_func>
					break;
 800155a:	e361      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_up){
 800155c:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <menu_func+0x2d8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00a      	beq.n	800157a <menu_func+0x1c2>
					current_page = 1;
 8001564:	4b47      	ldr	r3, [pc, #284]	; (8001684 <menu_func+0x2cc>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]
					menu_up =0;
 800156a:	4b49      	ldr	r3, [pc, #292]	; (8001690 <menu_func+0x2d8>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001570:	2100      	movs	r1, #0
 8001572:	2001      	movs	r0, #1
 8001574:	f7ff ff20 	bl	80013b8 <menu_func>
					break;
 8001578:	e352      	b.n	8001c20 <menu_func+0x868>
				}
				lcd_init ();
 800157a:	f7ff f893 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Auto Mode");
 800157e:	4849      	ldr	r0, [pc, #292]	; (80016a4 <menu_func+0x2ec>)
 8001580:	f7ff f8d2 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001584:	2100      	movs	r1, #0
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff f86d 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Settings");
 800158c:	4846      	ldr	r0, [pc, #280]	; (80016a8 <menu_func+0x2f0>)
 800158e:	f7ff f8cb 	bl	8000728 <lcd_send_string>
				break;
 8001592:	e345      	b.n	8001c20 <menu_func+0x868>

			case 3:
				if(menu_click){
 8001594:	4b3c      	ldr	r3, [pc, #240]	; (8001688 <menu_func+0x2d0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00a      	beq.n	80015b2 <menu_func+0x1fa>
					current_page = 15;
 800159c:	4b39      	ldr	r3, [pc, #228]	; (8001684 <menu_func+0x2cc>)
 800159e:	220f      	movs	r2, #15
 80015a0:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80015a2:	4b39      	ldr	r3, [pc, #228]	; (8001688 <menu_func+0x2d0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80015a8:	2100      	movs	r1, #0
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff ff04 	bl	80013b8 <menu_func>
					break;
 80015b0:	e336      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_down){
 80015b2:	4b36      	ldr	r3, [pc, #216]	; (800168c <menu_func+0x2d4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00a      	beq.n	80015d0 <menu_func+0x218>
					current_page = 0;
 80015ba:	4b32      	ldr	r3, [pc, #200]	; (8001684 <menu_func+0x2cc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80015c0:	4b32      	ldr	r3, [pc, #200]	; (800168c <menu_func+0x2d4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80015c6:	2100      	movs	r1, #0
 80015c8:	2001      	movs	r0, #1
 80015ca:	f7ff fef5 	bl	80013b8 <menu_func>
					break;
 80015ce:	e327      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_up){
 80015d0:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <menu_func+0x2d8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00a      	beq.n	80015ee <menu_func+0x236>
					current_page = 2;
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <menu_func+0x2cc>)
 80015da:	2202      	movs	r2, #2
 80015dc:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80015de:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <menu_func+0x2d8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80015e4:	2100      	movs	r1, #0
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff fee6 	bl	80013b8 <menu_func>
					break;
 80015ec:	e318      	b.n	8001c20 <menu_func+0x868>
				}
				lcd_init ();
 80015ee:	f7ff f859 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Settings");
 80015f2:	482e      	ldr	r0, [pc, #184]	; (80016ac <menu_func+0x2f4>)
 80015f4:	f7ff f898 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 80015f8:	2100      	movs	r1, #0
 80015fa:	2001      	movs	r0, #1
 80015fc:	f7ff f833 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  ");
 8001600:	482b      	ldr	r0, [pc, #172]	; (80016b0 <menu_func+0x2f8>)
 8001602:	f7ff f891 	bl	8000728 <lcd_send_string>
				break;
 8001606:	e30b      	b.n	8001c20 <menu_func+0x868>

			case 4:
				if(menu_click){
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <menu_func+0x2d0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00d      	beq.n	800162c <menu_func+0x274>
					current_page = 6;
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <menu_func+0x2cc>)
 8001612:	2206      	movs	r2, #6
 8001614:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <menu_func+0x2d0>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
					mode_manual(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff fe19 	bl	8001254 <mode_manual>
					menu_func(1, 0);
 8001622:	2100      	movs	r1, #0
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff fec7 	bl	80013b8 <menu_func>
					break;
 800162a:	e2f9      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_down){
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <menu_func+0x2d4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00a      	beq.n	800164a <menu_func+0x292>
					current_page = 5;
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <menu_func+0x2cc>)
 8001636:	2205      	movs	r2, #5
 8001638:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <menu_func+0x2d4>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001640:	2100      	movs	r1, #0
 8001642:	2001      	movs	r0, #1
 8001644:	f7ff feb8 	bl	80013b8 <menu_func>
					break;
 8001648:	e2ea      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_up){
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <menu_func+0x2d8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00a      	beq.n	8001668 <menu_func+0x2b0>
					current_page = 5;
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <menu_func+0x2cc>)
 8001654:	2205      	movs	r2, #5
 8001656:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <menu_func+0x2d8>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800165e:	2100      	movs	r1, #0
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff fea9 	bl	80013b8 <menu_func>
					break;
 8001666:	e2db      	b.n	8001c20 <menu_func+0x868>
				}
				lcd_init ();
 8001668:	f7ff f81c 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Press Start");
 800166c:	4811      	ldr	r0, [pc, #68]	; (80016b4 <menu_func+0x2fc>)
 800166e:	f7ff f85b 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001672:	2100      	movs	r1, #0
 8001674:	2001      	movs	r0, #1
 8001676:	f7fe fff6 	bl	8000666 <lcd_put_cur>
				lcd_send_string(" Back");
 800167a:	480f      	ldr	r0, [pc, #60]	; (80016b8 <menu_func+0x300>)
 800167c:	f7ff f854 	bl	8000728 <lcd_send_string>
				break;
 8001680:	e2ce      	b.n	8001c20 <menu_func+0x868>
 8001682:	bf00      	nop
 8001684:	200000a0 	.word	0x200000a0
 8001688:	20000094 	.word	0x20000094
 800168c:	2000009c 	.word	0x2000009c
 8001690:	20000098 	.word	0x20000098
 8001694:	08006314 	.word	0x08006314
 8001698:	08006324 	.word	0x08006324
 800169c:	08006338 	.word	0x08006338
 80016a0:	0800634c 	.word	0x0800634c
 80016a4:	08006358 	.word	0x08006358
 80016a8:	08006364 	.word	0x08006364
 80016ac:	08006370 	.word	0x08006370
 80016b0:	0800637c 	.word	0x0800637c
 80016b4:	08006380 	.word	0x08006380
 80016b8:	08006390 	.word	0x08006390

			case 5:
				if(menu_click){
 80016bc:	4bae      	ldr	r3, [pc, #696]	; (8001978 <menu_func+0x5c0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00a      	beq.n	80016da <menu_func+0x322>
					current_page = 0;
 80016c4:	4bad      	ldr	r3, [pc, #692]	; (800197c <menu_func+0x5c4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80016ca:	4bab      	ldr	r3, [pc, #684]	; (8001978 <menu_func+0x5c0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80016d0:	2100      	movs	r1, #0
 80016d2:	2001      	movs	r0, #1
 80016d4:	f7ff fe70 	bl	80013b8 <menu_func>
					break;
 80016d8:	e2a2      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_down){
 80016da:	4ba9      	ldr	r3, [pc, #676]	; (8001980 <menu_func+0x5c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00a      	beq.n	80016f8 <menu_func+0x340>
					current_page = 4;
 80016e2:	4ba6      	ldr	r3, [pc, #664]	; (800197c <menu_func+0x5c4>)
 80016e4:	2204      	movs	r2, #4
 80016e6:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80016e8:	4ba5      	ldr	r3, [pc, #660]	; (8001980 <menu_func+0x5c8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80016ee:	2100      	movs	r1, #0
 80016f0:	2001      	movs	r0, #1
 80016f2:	f7ff fe61 	bl	80013b8 <menu_func>
					break;
 80016f6:	e293      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_up){
 80016f8:	4ba2      	ldr	r3, [pc, #648]	; (8001984 <menu_func+0x5cc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00a      	beq.n	8001716 <menu_func+0x35e>
					current_page = 4;
 8001700:	4b9e      	ldr	r3, [pc, #632]	; (800197c <menu_func+0x5c4>)
 8001702:	2204      	movs	r2, #4
 8001704:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001706:	4b9f      	ldr	r3, [pc, #636]	; (8001984 <menu_func+0x5cc>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800170c:	2100      	movs	r1, #0
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff fe52 	bl	80013b8 <menu_func>
					break;
 8001714:	e284      	b.n	8001c20 <menu_func+0x868>
				}
				lcd_init ();
 8001716:	f7fe ffc5 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Back");
 800171a:	489b      	ldr	r0, [pc, #620]	; (8001988 <menu_func+0x5d0>)
 800171c:	f7ff f804 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001720:	2100      	movs	r1, #0
 8001722:	2001      	movs	r0, #1
 8001724:	f7fe ff9f 	bl	8000666 <lcd_put_cur>
				lcd_send_string("");
 8001728:	4898      	ldr	r0, [pc, #608]	; (800198c <menu_func+0x5d4>)
 800172a:	f7fe fffd 	bl	8000728 <lcd_send_string>
				break;
 800172e:	e277      	b.n	8001c20 <menu_func+0x868>

			case 6:
				if(menu_click){
 8001730:	4b91      	ldr	r3, [pc, #580]	; (8001978 <menu_func+0x5c0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00d      	beq.n	8001754 <menu_func+0x39c>
					current_page = 4;
 8001738:	4b90      	ldr	r3, [pc, #576]	; (800197c <menu_func+0x5c4>)
 800173a:	2204      	movs	r2, #4
 800173c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800173e:	4b8e      	ldr	r3, [pc, #568]	; (8001978 <menu_func+0x5c0>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
					mode_manual(0);
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff fd85 	bl	8001254 <mode_manual>
					menu_func(1, 0);
 800174a:	2100      	movs	r1, #0
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff fe33 	bl	80013b8 <menu_func>
					lcd_init ();
					lcd_send_string ("Watering");
					lcd_put_cur(1, 0);
					lcd_send_string("Now");
				}
				break;
 8001752:	e265      	b.n	8001c20 <menu_func+0x868>
					current_page = 6;
 8001754:	4b89      	ldr	r3, [pc, #548]	; (800197c <menu_func+0x5c4>)
 8001756:	2206      	movs	r2, #6
 8001758:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 800175a:	4b8a      	ldr	r3, [pc, #552]	; (8001984 <menu_func+0x5cc>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001760:	4b87      	ldr	r3, [pc, #540]	; (8001980 <menu_func+0x5c8>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
					lcd_init ();
 8001766:	f7fe ff9d 	bl	80006a4 <lcd_init>
					lcd_send_string ("Watering");
 800176a:	4889      	ldr	r0, [pc, #548]	; (8001990 <menu_func+0x5d8>)
 800176c:	f7fe ffdc 	bl	8000728 <lcd_send_string>
					lcd_put_cur(1, 0);
 8001770:	2100      	movs	r1, #0
 8001772:	2001      	movs	r0, #1
 8001774:	f7fe ff77 	bl	8000666 <lcd_put_cur>
					lcd_send_string("Now");
 8001778:	4886      	ldr	r0, [pc, #536]	; (8001994 <menu_func+0x5dc>)
 800177a:	f7fe ffd5 	bl	8000728 <lcd_send_string>
				break;
 800177e:	e24f      	b.n	8001c20 <menu_func+0x868>

			case 7:
				if(menu_click){
 8001780:	4b7d      	ldr	r3, [pc, #500]	; (8001978 <menu_func+0x5c0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00a      	beq.n	800179e <menu_func+0x3e6>
					current_page = 10;
 8001788:	4b7c      	ldr	r3, [pc, #496]	; (800197c <menu_func+0x5c4>)
 800178a:	220a      	movs	r2, #10
 800178c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800178e:	4b7a      	ldr	r3, [pc, #488]	; (8001978 <menu_func+0x5c0>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001794:	2100      	movs	r1, #0
 8001796:	2001      	movs	r0, #1
 8001798:	f7ff fe0e 	bl	80013b8 <menu_func>
					break;
 800179c:	e240      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_down){
 800179e:	4b78      	ldr	r3, [pc, #480]	; (8001980 <menu_func+0x5c8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00a      	beq.n	80017bc <menu_func+0x404>
					current_page = 8;
 80017a6:	4b75      	ldr	r3, [pc, #468]	; (800197c <menu_func+0x5c4>)
 80017a8:	2208      	movs	r2, #8
 80017aa:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80017ac:	4b74      	ldr	r3, [pc, #464]	; (8001980 <menu_func+0x5c8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80017b2:	2100      	movs	r1, #0
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7ff fdff 	bl	80013b8 <menu_func>
					break;
 80017ba:	e231      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_up){
 80017bc:	4b71      	ldr	r3, [pc, #452]	; (8001984 <menu_func+0x5cc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00a      	beq.n	80017da <menu_func+0x422>
					current_page = 13;
 80017c4:	4b6d      	ldr	r3, [pc, #436]	; (800197c <menu_func+0x5c4>)
 80017c6:	220d      	movs	r2, #13
 80017c8:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80017ca:	4b6e      	ldr	r3, [pc, #440]	; (8001984 <menu_func+0x5cc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80017d0:	2100      	movs	r1, #0
 80017d2:	2001      	movs	r0, #1
 80017d4:	f7ff fdf0 	bl	80013b8 <menu_func>
					break;
 80017d8:	e222      	b.n	8001c20 <menu_func+0x868>
				}
				lcd_init ();
 80017da:	f7fe ff63 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Line 1");
 80017de:	486e      	ldr	r0, [pc, #440]	; (8001998 <menu_func+0x5e0>)
 80017e0:	f7fe ffa2 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 80017e4:	2100      	movs	r1, #0
 80017e6:	2001      	movs	r0, #1
 80017e8:	f7fe ff3d 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Line 2");
 80017ec:	486b      	ldr	r0, [pc, #428]	; (800199c <menu_func+0x5e4>)
 80017ee:	f7fe ff9b 	bl	8000728 <lcd_send_string>
				break;
 80017f2:	e215      	b.n	8001c20 <menu_func+0x868>

			case 8:
				if(menu_click){
 80017f4:	4b60      	ldr	r3, [pc, #384]	; (8001978 <menu_func+0x5c0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00a      	beq.n	8001812 <menu_func+0x45a>
					current_page = 10;
 80017fc:	4b5f      	ldr	r3, [pc, #380]	; (800197c <menu_func+0x5c4>)
 80017fe:	220a      	movs	r2, #10
 8001800:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001802:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <menu_func+0x5c0>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001808:	2100      	movs	r1, #0
 800180a:	2001      	movs	r0, #1
 800180c:	f7ff fdd4 	bl	80013b8 <menu_func>
					break;
 8001810:	e206      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_down){
 8001812:	4b5b      	ldr	r3, [pc, #364]	; (8001980 <menu_func+0x5c8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00a      	beq.n	8001830 <menu_func+0x478>
					current_page = 9;
 800181a:	4b58      	ldr	r3, [pc, #352]	; (800197c <menu_func+0x5c4>)
 800181c:	2209      	movs	r2, #9
 800181e:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001820:	4b57      	ldr	r3, [pc, #348]	; (8001980 <menu_func+0x5c8>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001826:	2100      	movs	r1, #0
 8001828:	2001      	movs	r0, #1
 800182a:	f7ff fdc5 	bl	80013b8 <menu_func>
					break;
 800182e:	e1f7      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_up){
 8001830:	4b54      	ldr	r3, [pc, #336]	; (8001984 <menu_func+0x5cc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00a      	beq.n	800184e <menu_func+0x496>
					current_page = 7;
 8001838:	4b50      	ldr	r3, [pc, #320]	; (800197c <menu_func+0x5c4>)
 800183a:	2207      	movs	r2, #7
 800183c:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 800183e:	4b51      	ldr	r3, [pc, #324]	; (8001984 <menu_func+0x5cc>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001844:	2100      	movs	r1, #0
 8001846:	2001      	movs	r0, #1
 8001848:	f7ff fdb6 	bl	80013b8 <menu_func>
					break;
 800184c:	e1e8      	b.n	8001c20 <menu_func+0x868>
				}
				lcd_init ();
 800184e:	f7fe ff29 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Line 2");
 8001852:	4853      	ldr	r0, [pc, #332]	; (80019a0 <menu_func+0x5e8>)
 8001854:	f7fe ff68 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001858:	2100      	movs	r1, #0
 800185a:	2001      	movs	r0, #1
 800185c:	f7fe ff03 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Time");
 8001860:	4850      	ldr	r0, [pc, #320]	; (80019a4 <menu_func+0x5ec>)
 8001862:	f7fe ff61 	bl	8000728 <lcd_send_string>
				break;
 8001866:	e1db      	b.n	8001c20 <menu_func+0x868>

			case 9:
				if(menu_click){
 8001868:	4b43      	ldr	r3, [pc, #268]	; (8001978 <menu_func+0x5c0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00a      	beq.n	8001886 <menu_func+0x4ce>
					current_page = 11;
 8001870:	4b42      	ldr	r3, [pc, #264]	; (800197c <menu_func+0x5c4>)
 8001872:	220b      	movs	r2, #11
 8001874:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001876:	4b40      	ldr	r3, [pc, #256]	; (8001978 <menu_func+0x5c0>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800187c:	2100      	movs	r1, #0
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff fd9a 	bl	80013b8 <menu_func>
					break;
 8001884:	e1cc      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_down){
 8001886:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <menu_func+0x5c8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00a      	beq.n	80018a4 <menu_func+0x4ec>
					current_page = 12;
 800188e:	4b3b      	ldr	r3, [pc, #236]	; (800197c <menu_func+0x5c4>)
 8001890:	220c      	movs	r2, #12
 8001892:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <menu_func+0x5c8>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800189a:	2100      	movs	r1, #0
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff fd8b 	bl	80013b8 <menu_func>
					break;
 80018a2:	e1bd      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_up){
 80018a4:	4b37      	ldr	r3, [pc, #220]	; (8001984 <menu_func+0x5cc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00a      	beq.n	80018c2 <menu_func+0x50a>
					current_page = 8;
 80018ac:	4b33      	ldr	r3, [pc, #204]	; (800197c <menu_func+0x5c4>)
 80018ae:	2208      	movs	r2, #8
 80018b0:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80018b2:	4b34      	ldr	r3, [pc, #208]	; (8001984 <menu_func+0x5cc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80018b8:	2100      	movs	r1, #0
 80018ba:	2001      	movs	r0, #1
 80018bc:	f7ff fd7c 	bl	80013b8 <menu_func>
					break;
 80018c0:	e1ae      	b.n	8001c20 <menu_func+0x868>
				}
				lcd_init ();
 80018c2:	f7fe feef 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Time");
 80018c6:	4838      	ldr	r0, [pc, #224]	; (80019a8 <menu_func+0x5f0>)
 80018c8:	f7fe ff2e 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 80018cc:	2100      	movs	r1, #0
 80018ce:	2001      	movs	r0, #1
 80018d0:	f7fe fec9 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Start");
 80018d4:	4835      	ldr	r0, [pc, #212]	; (80019ac <menu_func+0x5f4>)
 80018d6:	f7fe ff27 	bl	8000728 <lcd_send_string>
				break;
 80018da:	e1a1      	b.n	8001c20 <menu_func+0x868>

			case 10:
				if(menu_click){
 80018dc:	4b26      	ldr	r3, [pc, #152]	; (8001978 <menu_func+0x5c0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00a      	beq.n	80018fa <menu_func+0x542>
					current_page = 7;
 80018e4:	4b25      	ldr	r3, [pc, #148]	; (800197c <menu_func+0x5c4>)
 80018e6:	2207      	movs	r2, #7
 80018e8:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <menu_func+0x5c0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80018f0:	2100      	movs	r1, #0
 80018f2:	2001      	movs	r0, #1
 80018f4:	f7ff fd60 	bl	80013b8 <menu_func>
					break;
 80018f8:	e192      	b.n	8001c20 <menu_func+0x868>
				}else{
					current_page = 10;
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <menu_func+0x5c4>)
 80018fc:	220a      	movs	r2, #10
 80018fe:	601a      	str	r2, [r3, #0]
					lcd_init ();
 8001900:	f7fe fed0 	bl	80006a4 <lcd_init>
					lcd_send_string ("> 20");
 8001904:	482a      	ldr	r0, [pc, #168]	; (80019b0 <menu_func+0x5f8>)
 8001906:	f7fe ff0f 	bl	8000728 <lcd_send_string>
					lcd_put_cur(1, 0);
 800190a:	2100      	movs	r1, #0
 800190c:	2001      	movs	r0, #1
 800190e:	f7fe feaa 	bl	8000666 <lcd_put_cur>
					lcd_send_string("  ");
 8001912:	4828      	ldr	r0, [pc, #160]	; (80019b4 <menu_func+0x5fc>)
 8001914:	f7fe ff08 	bl	8000728 <lcd_send_string>
				}
				break;
 8001918:	e182      	b.n	8001c20 <menu_func+0x868>

			case 11:
				if(menu_click){
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <menu_func+0x5c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00a      	beq.n	8001938 <menu_func+0x580>
					current_page = 9;
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <menu_func+0x5c4>)
 8001924:	2209      	movs	r2, #9
 8001926:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <menu_func+0x5c0>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800192e:	2100      	movs	r1, #0
 8001930:	2001      	movs	r0, #1
 8001932:	f7ff fd41 	bl	80013b8 <menu_func>
					break;
 8001936:	e173      	b.n	8001c20 <menu_func+0x868>
				}else{
					current_page = 11;
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <menu_func+0x5c4>)
 800193a:	220b      	movs	r2, #11
 800193c:	601a      	str	r2, [r3, #0]
					lcd_init ();
 800193e:	f7fe feb1 	bl	80006a4 <lcd_init>
					lcd_send_string ("> Saat Loopu");
 8001942:	481d      	ldr	r0, [pc, #116]	; (80019b8 <menu_func+0x600>)
 8001944:	f7fe fef0 	bl	8000728 <lcd_send_string>
					lcd_put_cur(1, 0);
 8001948:	2100      	movs	r1, #0
 800194a:	2001      	movs	r0, #1
 800194c:	f7fe fe8b 	bl	8000666 <lcd_put_cur>
					lcd_send_string("  ");
 8001950:	4818      	ldr	r0, [pc, #96]	; (80019b4 <menu_func+0x5fc>)
 8001952:	f7fe fee9 	bl	8000728 <lcd_send_string>
				}
				break;
 8001956:	e163      	b.n	8001c20 <menu_func+0x868>

			case 12:
				if(menu_click){
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <menu_func+0x5c0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d02d      	beq.n	80019bc <menu_func+0x604>
					current_page = 1;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <menu_func+0x5c4>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <menu_func+0x5c0>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800196c:	2100      	movs	r1, #0
 800196e:	2001      	movs	r0, #1
 8001970:	f7ff fd22 	bl	80013b8 <menu_func>
					break;
 8001974:	e154      	b.n	8001c20 <menu_func+0x868>
 8001976:	bf00      	nop
 8001978:	20000094 	.word	0x20000094
 800197c:	200000a0 	.word	0x200000a0
 8001980:	2000009c 	.word	0x2000009c
 8001984:	20000098 	.word	0x20000098
 8001988:	08006398 	.word	0x08006398
 800198c:	080063a0 	.word	0x080063a0
 8001990:	080063a4 	.word	0x080063a4
 8001994:	080063b0 	.word	0x080063b0
 8001998:	080063b4 	.word	0x080063b4
 800199c:	080063c0 	.word	0x080063c0
 80019a0:	080063cc 	.word	0x080063cc
 80019a4:	080063d8 	.word	0x080063d8
 80019a8:	080063e0 	.word	0x080063e0
 80019ac:	080063e8 	.word	0x080063e8
 80019b0:	080063f0 	.word	0x080063f0
 80019b4:	0800637c 	.word	0x0800637c
 80019b8:	080063f8 	.word	0x080063f8
				}else if(menu_down){
 80019bc:	4ba0      	ldr	r3, [pc, #640]	; (8001c40 <menu_func+0x888>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00a      	beq.n	80019da <menu_func+0x622>
					current_page = 13;
 80019c4:	4b9f      	ldr	r3, [pc, #636]	; (8001c44 <menu_func+0x88c>)
 80019c6:	220d      	movs	r2, #13
 80019c8:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80019ca:	4b9d      	ldr	r3, [pc, #628]	; (8001c40 <menu_func+0x888>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80019d0:	2100      	movs	r1, #0
 80019d2:	2001      	movs	r0, #1
 80019d4:	f7ff fcf0 	bl	80013b8 <menu_func>
					break;
 80019d8:	e122      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_up){
 80019da:	4b9b      	ldr	r3, [pc, #620]	; (8001c48 <menu_func+0x890>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00a      	beq.n	80019f8 <menu_func+0x640>
					current_page = 9;
 80019e2:	4b98      	ldr	r3, [pc, #608]	; (8001c44 <menu_func+0x88c>)
 80019e4:	2209      	movs	r2, #9
 80019e6:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80019e8:	4b97      	ldr	r3, [pc, #604]	; (8001c48 <menu_func+0x890>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80019ee:	2100      	movs	r1, #0
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff fce1 	bl	80013b8 <menu_func>
					break;
 80019f6:	e113      	b.n	8001c20 <menu_func+0x868>
				}
				lcd_init ();
 80019f8:	f7fe fe54 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Start");
 80019fc:	4893      	ldr	r0, [pc, #588]	; (8001c4c <menu_func+0x894>)
 80019fe:	f7fe fe93 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	2001      	movs	r0, #1
 8001a06:	f7fe fe2e 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Back");
 8001a0a:	4891      	ldr	r0, [pc, #580]	; (8001c50 <menu_func+0x898>)
 8001a0c:	f7fe fe8c 	bl	8000728 <lcd_send_string>
				break;
 8001a10:	e106      	b.n	8001c20 <menu_func+0x868>

			case 13:
				if(menu_click){
 8001a12:	4b90      	ldr	r3, [pc, #576]	; (8001c54 <menu_func+0x89c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00a      	beq.n	8001a30 <menu_func+0x678>
					current_page = 1;
 8001a1a:	4b8a      	ldr	r3, [pc, #552]	; (8001c44 <menu_func+0x88c>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001a20:	4b8c      	ldr	r3, [pc, #560]	; (8001c54 <menu_func+0x89c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001a26:	2100      	movs	r1, #0
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7ff fcc5 	bl	80013b8 <menu_func>
					break;
 8001a2e:	e0f7      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_down){
 8001a30:	4b83      	ldr	r3, [pc, #524]	; (8001c40 <menu_func+0x888>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00a      	beq.n	8001a4e <menu_func+0x696>
					current_page = 7;
 8001a38:	4b82      	ldr	r3, [pc, #520]	; (8001c44 <menu_func+0x88c>)
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001a3e:	4b80      	ldr	r3, [pc, #512]	; (8001c40 <menu_func+0x888>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001a44:	2100      	movs	r1, #0
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff fcb6 	bl	80013b8 <menu_func>
					break;
 8001a4c:	e0e8      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_up){
 8001a4e:	4b7e      	ldr	r3, [pc, #504]	; (8001c48 <menu_func+0x890>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00a      	beq.n	8001a6c <menu_func+0x6b4>
					current_page = 12;
 8001a56:	4b7b      	ldr	r3, [pc, #492]	; (8001c44 <menu_func+0x88c>)
 8001a58:	220c      	movs	r2, #12
 8001a5a:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001a5c:	4b7a      	ldr	r3, [pc, #488]	; (8001c48 <menu_func+0x890>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001a62:	2100      	movs	r1, #0
 8001a64:	2001      	movs	r0, #1
 8001a66:	f7ff fca7 	bl	80013b8 <menu_func>
					break;
 8001a6a:	e0d9      	b.n	8001c20 <menu_func+0x868>
				}
				lcd_init ();
 8001a6c:	f7fe fe1a 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Back");
 8001a70:	4879      	ldr	r0, [pc, #484]	; (8001c58 <menu_func+0x8a0>)
 8001a72:	f7fe fe59 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001a76:	2100      	movs	r1, #0
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7fe fdf4 	bl	8000666 <lcd_put_cur>
				lcd_send_string(" ");
 8001a7e:	4877      	ldr	r0, [pc, #476]	; (8001c5c <menu_func+0x8a4>)
 8001a80:	f7fe fe52 	bl	8000728 <lcd_send_string>
				break;
 8001a84:	e0cc      	b.n	8001c20 <menu_func+0x868>

			case 14:
				if(menu_click){
 8001a86:	4b73      	ldr	r3, [pc, #460]	; (8001c54 <menu_func+0x89c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00a      	beq.n	8001aa4 <menu_func+0x6ec>
					current_page = 2;
 8001a8e:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <menu_func+0x88c>)
 8001a90:	2202      	movs	r2, #2
 8001a92:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001a94:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <menu_func+0x89c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7ff fc8b 	bl	80013b8 <menu_func>
					break;
 8001aa2:	e0bd      	b.n	8001c20 <menu_func+0x868>
				}else{
					current_page = 14;
 8001aa4:	4b67      	ldr	r3, [pc, #412]	; (8001c44 <menu_func+0x88c>)
 8001aa6:	220e      	movs	r2, #14
 8001aa8:	601a      	str	r2, [r3, #0]
					lcd_init ();
 8001aaa:	f7fe fdfb 	bl	80006a4 <lcd_init>
					lcd_send_string ("> INFO DISP");
 8001aae:	486c      	ldr	r0, [pc, #432]	; (8001c60 <menu_func+0x8a8>)
 8001ab0:	f7fe fe3a 	bl	8000728 <lcd_send_string>
					lcd_put_cur(1, 0);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f7fe fdd5 	bl	8000666 <lcd_put_cur>
					lcd_send_string("  ");
 8001abc:	4869      	ldr	r0, [pc, #420]	; (8001c64 <menu_func+0x8ac>)
 8001abe:	f7fe fe33 	bl	8000728 <lcd_send_string>
				}
				break;
 8001ac2:	e0ad      	b.n	8001c20 <menu_func+0x868>

			case 15:
				if(menu_click){
 8001ac4:	4b63      	ldr	r3, [pc, #396]	; (8001c54 <menu_func+0x89c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00a      	beq.n	8001ae2 <menu_func+0x72a>
					current_page = 11;
 8001acc:	4b5d      	ldr	r3, [pc, #372]	; (8001c44 <menu_func+0x88c>)
 8001ace:	220b      	movs	r2, #11
 8001ad0:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001ad2:	4b60      	ldr	r3, [pc, #384]	; (8001c54 <menu_func+0x89c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2001      	movs	r0, #1
 8001adc:	f7ff fc6c 	bl	80013b8 <menu_func>
					break;
 8001ae0:	e09e      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_down){
 8001ae2:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <menu_func+0x888>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00a      	beq.n	8001b00 <menu_func+0x748>
					current_page = 16;
 8001aea:	4b56      	ldr	r3, [pc, #344]	; (8001c44 <menu_func+0x88c>)
 8001aec:	2210      	movs	r2, #16
 8001aee:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <menu_func+0x888>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001af6:	2100      	movs	r1, #0
 8001af8:	2001      	movs	r0, #1
 8001afa:	f7ff fc5d 	bl	80013b8 <menu_func>
					break;
 8001afe:	e08f      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_up){
 8001b00:	4b51      	ldr	r3, [pc, #324]	; (8001c48 <menu_func+0x890>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00a      	beq.n	8001b1e <menu_func+0x766>
					current_page = 17;
 8001b08:	4b4e      	ldr	r3, [pc, #312]	; (8001c44 <menu_func+0x88c>)
 8001b0a:	2211      	movs	r2, #17
 8001b0c:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001b0e:	4b4e      	ldr	r3, [pc, #312]	; (8001c48 <menu_func+0x890>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001b14:	2100      	movs	r1, #0
 8001b16:	2001      	movs	r0, #1
 8001b18:	f7ff fc4e 	bl	80013b8 <menu_func>
					break;
 8001b1c:	e080      	b.n	8001c20 <menu_func+0x868>
				}
				lcd_init ();
 8001b1e:	f7fe fdc1 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Time S.");
 8001b22:	4851      	ldr	r0, [pc, #324]	; (8001c68 <menu_func+0x8b0>)
 8001b24:	f7fe fe00 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7fe fd9b 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Bluetooth");
 8001b30:	484e      	ldr	r0, [pc, #312]	; (8001c6c <menu_func+0x8b4>)
 8001b32:	f7fe fdf9 	bl	8000728 <lcd_send_string>
				break;
 8001b36:	e073      	b.n	8001c20 <menu_func+0x868>

			case 16:
				if(menu_click){
 8001b38:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <menu_func+0x89c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00a      	beq.n	8001b56 <menu_func+0x79e>
					current_page = 11;
 8001b40:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <menu_func+0x88c>)
 8001b42:	220b      	movs	r2, #11
 8001b44:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <menu_func+0x89c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7ff fc32 	bl	80013b8 <menu_func>
					break;
 8001b54:	e064      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_down){
 8001b56:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <menu_func+0x888>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00a      	beq.n	8001b74 <menu_func+0x7bc>
					current_page = 17;
 8001b5e:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <menu_func+0x88c>)
 8001b60:	2211      	movs	r2, #17
 8001b62:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001b64:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <menu_func+0x888>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f7ff fc23 	bl	80013b8 <menu_func>
					break;
 8001b72:	e055      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_up){
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <menu_func+0x890>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00a      	beq.n	8001b92 <menu_func+0x7da>
					current_page = 15;
 8001b7c:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <menu_func+0x88c>)
 8001b7e:	220f      	movs	r2, #15
 8001b80:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001b82:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <menu_func+0x890>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7ff fc14 	bl	80013b8 <menu_func>
					break;
 8001b90:	e046      	b.n	8001c20 <menu_func+0x868>
				}
				lcd_init ();
 8001b92:	f7fe fd87 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Bluetooth");
 8001b96:	4836      	ldr	r0, [pc, #216]	; (8001c70 <menu_func+0x8b8>)
 8001b98:	f7fe fdc6 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f7fe fd61 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Back");
 8001ba4:	482a      	ldr	r0, [pc, #168]	; (8001c50 <menu_func+0x898>)
 8001ba6:	f7fe fdbf 	bl	8000728 <lcd_send_string>
				break;
 8001baa:	e039      	b.n	8001c20 <menu_func+0x868>
			case 17:
				if(menu_click){
 8001bac:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <menu_func+0x89c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00a      	beq.n	8001bca <menu_func+0x812>
					current_page = 3;
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <menu_func+0x88c>)
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <menu_func+0x89c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f7ff fbf8 	bl	80013b8 <menu_func>
					break;
 8001bc8:	e02a      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_down){
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <menu_func+0x888>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00a      	beq.n	8001be8 <menu_func+0x830>
					current_page = 15;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <menu_func+0x88c>)
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <menu_func+0x888>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001bde:	2100      	movs	r1, #0
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff fbe9 	bl	80013b8 <menu_func>
					break;
 8001be6:	e01b      	b.n	8001c20 <menu_func+0x868>
				}else if(menu_up){
 8001be8:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <menu_func+0x890>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00a      	beq.n	8001c06 <menu_func+0x84e>
					current_page = 16;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <menu_func+0x88c>)
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <menu_func+0x890>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f7ff fbda 	bl	80013b8 <menu_func>
					break;
 8001c04:	e00c      	b.n	8001c20 <menu_func+0x868>
				}
				lcd_init ();
 8001c06:	f7fe fd4d 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Back");
 8001c0a:	4813      	ldr	r0, [pc, #76]	; (8001c58 <menu_func+0x8a0>)
 8001c0c:	f7fe fd8c 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001c10:	2100      	movs	r1, #0
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7fe fd27 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  ");
 8001c18:	4812      	ldr	r0, [pc, #72]	; (8001c64 <menu_func+0x8ac>)
 8001c1a:	f7fe fd85 	bl	8000728 <lcd_send_string>
				break;
 8001c1e:	bf00      	nop
		}
		menu_lcd_refresh = 0;
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <menu_func+0x8bc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
		menu_click= 0;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <menu_func+0x89c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
		menu_up = 0;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <menu_func+0x890>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
		menu_down = 0;
 8001c32:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <menu_func+0x888>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
	}
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000009c 	.word	0x2000009c
 8001c44:	200000a0 	.word	0x200000a0
 8001c48:	20000098 	.word	0x20000098
 8001c4c:	08006408 	.word	0x08006408
 8001c50:	08006410 	.word	0x08006410
 8001c54:	20000094 	.word	0x20000094
 8001c58:	08006398 	.word	0x08006398
 8001c5c:	08006418 	.word	0x08006418
 8001c60:	0800641c 	.word	0x0800641c
 8001c64:	0800637c 	.word	0x0800637c
 8001c68:	08006428 	.word	0x08006428
 8001c6c:	08006434 	.word	0x08006434
 8001c70:	08006440 	.word	0x08006440
 8001c74:	20000090 	.word	0x20000090

08001c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c7c:	b672      	cpsid	i
}
 8001c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <Error_Handler+0x8>
	...

08001c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a32      	ldr	r2, [pc, #200]	; (8001dbc <HAL_ADC_MspInit+0xe8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d15e      	bne.n	8001db4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <HAL_ADC_MspInit+0xec>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	4a30      	ldr	r2, [pc, #192]	; (8001dc0 <HAL_ADC_MspInit+0xec>)
 8001d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d04:	6453      	str	r3, [r2, #68]	; 0x44
 8001d06:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <HAL_ADC_MspInit+0xec>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <HAL_ADC_MspInit+0xec>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a29      	ldr	r2, [pc, #164]	; (8001dc0 <HAL_ADC_MspInit+0xec>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_ADC_MspInit+0xec>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = moisture_adc_sens0_Pin|moisture_adc_sens1_Pin|moisture_adc_sens2_Pin|moisture_adc_sens3_Pin
 8001d2e:	237f      	movs	r3, #127	; 0x7f
 8001d30:	617b      	str	r3, [r7, #20]
                          |rain_adc_sens_Pin|waterlevel_adc_sens_Pin|waterflow_adc_sens_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d32:	2303      	movs	r3, #3
 8001d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4820      	ldr	r0, [pc, #128]	; (8001dc4 <HAL_ADC_MspInit+0xf0>)
 8001d42:	f001 fbe3 	bl	800350c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_ADC_MspInit+0xf4>)
 8001d48:	4a20      	ldr	r2, [pc, #128]	; (8001dcc <HAL_ADC_MspInit+0xf8>)
 8001d4a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_ADC_MspInit+0xf4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_ADC_MspInit+0xf4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_ADC_MspInit+0xf4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_ADC_MspInit+0xf4>)
 8001d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d64:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_ADC_MspInit+0xf4>)
 8001d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d6c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_ADC_MspInit+0xf4>)
 8001d70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HAL_ADC_MspInit+0xf4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_ADC_MspInit+0xf4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_ADC_MspInit+0xf4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d88:	480f      	ldr	r0, [pc, #60]	; (8001dc8 <HAL_ADC_MspInit+0xf4>)
 8001d8a:	f001 f84f 	bl	8002e2c <HAL_DMA_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001d94:	f7ff ff70 	bl	8001c78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <HAL_ADC_MspInit+0xf4>)
 8001d9c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_ADC_MspInit+0xf4>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2100      	movs	r1, #0
 8001da8:	2012      	movs	r0, #18
 8001daa:	f001 f808 	bl	8002dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001dae:	2012      	movs	r0, #18
 8001db0:	f001 f821 	bl	8002df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001db4:	bf00      	nop
 8001db6:	3728      	adds	r7, #40	; 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40012000 	.word	0x40012000
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	200001b8 	.word	0x200001b8
 8001dcc:	40026410 	.word	0x40026410

08001dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <HAL_I2C_MspInit+0x84>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d12b      	bne.n	8001e4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_I2C_MspInit+0x88>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_I2C_MspInit+0x88>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_I2C_MspInit+0x88>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_LCD_Pin|I2C1_SDA_LCD_Pin;
 8001e0e:	23c0      	movs	r3, #192	; 0xc0
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e12:	2312      	movs	r3, #18
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e16:	2301      	movs	r3, #1
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	480c      	ldr	r0, [pc, #48]	; (8001e5c <HAL_I2C_MspInit+0x8c>)
 8001e2a:	f001 fb6f 	bl	800350c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_I2C_MspInit+0x88>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <HAL_I2C_MspInit+0x88>)
 8001e38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_I2C_MspInit+0x88>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	; 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40005400 	.word	0x40005400
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020400 	.word	0x40020400

08001e60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <HAL_RTC_MspInit+0x24>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d102      	bne.n	8001e78 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_RTC_MspInit+0x28>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40002800 	.word	0x40002800
 8001e88:	42470e3c 	.word	0x42470e3c

08001e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0b      	ldr	r2, [pc, #44]	; (8001ec8 <HAL_TIM_Base_MspInit+0x3c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d10d      	bne.n	8001eba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_TIM_Base_MspInit+0x40>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_TIM_Base_MspInit+0x40>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <HAL_TIM_Base_MspInit+0x40>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <NMI_Handler+0x4>

08001ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <BusFault_Handler+0x4>

08001ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <UsageFault_Handler+0x4>

08001eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1c:	f000 f8f4 	bl	8002108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f001 fca5 	bl	8003878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f36:	2002      	movs	r0, #2
 8001f38:	f001 fc9e 	bl	8003878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <ADC_IRQHandler+0x10>)
 8001f46:	f000 f966 	bl	8002216 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000150 	.word	0x20000150

08001f54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001f58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f5c:	f001 fc8c 	bl	8003878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001f60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f64:	f001 fc88 	bl	8003878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <DMA2_Stream0_IRQHandler+0x10>)
 8001f72:	f001 f861 	bl	8003038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200001b8 	.word	0x200001b8

08001f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f88:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <_sbrk+0x5c>)
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <_sbrk+0x60>)
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <_sbrk+0x64>)
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <_sbrk+0x68>)
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <_sbrk+0x64>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d207      	bcs.n	8001fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb0:	f003 fd2c 	bl	8005a0c <__errno>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	e009      	b.n	8001fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <_sbrk+0x64>)
 8001fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20010000 	.word	0x20010000
 8001fe0:	00000400 	.word	0x00000400
 8001fe4:	200000c8 	.word	0x200000c8
 8001fe8:	200002e8 	.word	0x200002e8

08001fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <SystemInit+0x20>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <SystemInit+0x20>)
 8001ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002048 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002014:	480d      	ldr	r0, [pc, #52]	; (800204c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002016:	490e      	ldr	r1, [pc, #56]	; (8002050 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002018:	4a0e      	ldr	r2, [pc, #56]	; (8002054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800202c:	4c0b      	ldr	r4, [pc, #44]	; (800205c <LoopFillZerobss+0x26>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800203a:	f7ff ffd7 	bl	8001fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203e:	f003 fceb 	bl	8005a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002042:	f7fe fb87 	bl	8000754 <main>
  bx  lr    
 8002046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002048:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800204c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002050:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002054:	080064b8 	.word	0x080064b8
  ldr r2, =_sbss
 8002058:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800205c:	200002e4 	.word	0x200002e4

08002060 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <DMA1_Stream0_IRQHandler>
	...

08002064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_Init+0x40>)
 800206e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_Init+0x40>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_Init+0x40>)
 800207a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800207e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <HAL_Init+0x40>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208c:	2003      	movs	r0, #3
 800208e:	f000 fe8b 	bl	8002da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002092:	2000      	movs	r0, #0
 8002094:	f000 f808 	bl	80020a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002098:	f7ff fdf4 	bl	8001c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00

080020a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_InitTick+0x54>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_InitTick+0x58>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fea3 	bl	8002e12 <HAL_SYSTICK_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00e      	b.n	80020f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d80a      	bhi.n	80020f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020dc:	2200      	movs	r2, #0
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f000 fe6b 	bl	8002dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e8:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_InitTick+0x5c>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000008 	.word	0x20000008
 8002104:	20000004 	.word	0x20000004

08002108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_IncTick+0x20>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x24>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4413      	add	r3, r2
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_IncTick+0x24>)
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000008 	.word	0x20000008
 800212c:	200002d0 	.word	0x200002d0

08002130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return uwTick;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_GetTick+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	200002d0 	.word	0x200002d0

08002148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002150:	f7ff ffee 	bl	8002130 <HAL_GetTick>
 8002154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d005      	beq.n	800216e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_Delay+0x44>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800216e:	bf00      	nop
 8002170:	f7ff ffde 	bl	8002130 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d8f7      	bhi.n	8002170 <HAL_Delay+0x28>
  {
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000008 	.word	0x20000008

08002190 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e033      	b.n	800220e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fd90 	bl	8001cd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021d6:	f023 0302 	bic.w	r3, r3, #2
 80021da:	f043 0202 	orr.w	r2, r3, #2
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fb88 	bl	80028f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f023 0303 	bic.w	r3, r3, #3
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
 80021fe:	e001      	b.n	8002204 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b02      	cmp	r3, #2
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b20      	cmp	r3, #32
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d049      	beq.n	80022ec <HAL_ADC_IRQHandler+0xd6>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d046      	beq.n	80022ec <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d12b      	bne.n	80022dc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d127      	bne.n	80022dc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d119      	bne.n	80022dc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0220 	bic.w	r2, r2, #32
 80022b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f043 0201 	orr.w	r2, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7fe fda9 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f06f 0212 	mvn.w	r2, #18
 80022ea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf0c      	ite	eq
 80022fa:	2301      	moveq	r3, #1
 80022fc:	2300      	movne	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d057      	beq.n	80023ce <HAL_ADC_IRQHandler+0x1b8>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d054      	beq.n	80023ce <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d139      	bne.n	80023be <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002362:	2b00      	cmp	r3, #0
 8002364:	d12b      	bne.n	80023be <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002370:	2b00      	cmp	r3, #0
 8002372:	d124      	bne.n	80023be <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d11d      	bne.n	80023be <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002386:	2b00      	cmp	r3, #0
 8002388:	d119      	bne.n	80023be <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002398:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fc18 	bl	8002bf4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 020c 	mvn.w	r2, #12
 80023cc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ee:	2b40      	cmp	r3, #64	; 0x40
 80023f0:	bf0c      	ite	eq
 80023f2:	2301      	moveq	r3, #1
 80023f4:	2300      	movne	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d017      	beq.n	8002430 <HAL_ADC_IRQHandler+0x21a>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d014      	beq.n	8002430 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d10d      	bne.n	8002430 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f933 	bl	800268c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f06f 0201 	mvn.w	r2, #1
 800242e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b20      	cmp	r3, #32
 800243c:	bf0c      	ite	eq
 800243e:	2301      	moveq	r3, #1
 8002440:	2300      	movne	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002454:	bf0c      	ite	eq
 8002456:	2301      	moveq	r3, #1
 8002458:	2300      	movne	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d015      	beq.n	8002490 <HAL_ADC_IRQHandler+0x27a>
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d012      	beq.n	8002490 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f043 0202 	orr.w	r2, r3, #2
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f06f 0220 	mvn.w	r2, #32
 800247e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f90d 	bl	80026a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f06f 0220 	mvn.w	r2, #32
 800248e:	601a      	str	r2, [r3, #0]
  }
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_Start_DMA+0x1e>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e0ce      	b.n	8002654 <HAL_ADC_Start_DMA+0x1bc>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d018      	beq.n	80024fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024dc:	4b5f      	ldr	r3, [pc, #380]	; (800265c <HAL_ADC_Start_DMA+0x1c4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a5f      	ldr	r2, [pc, #380]	; (8002660 <HAL_ADC_Start_DMA+0x1c8>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	0c9a      	lsrs	r2, r3, #18
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024f0:	e002      	b.n	80024f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f9      	bne.n	80024f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800250c:	d107      	bne.n	800251e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800251c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	f040 8086 	bne.w	800263a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002558:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256c:	d106      	bne.n	800257c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f023 0206 	bic.w	r2, r3, #6
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	645a      	str	r2, [r3, #68]	; 0x44
 800257a:	e002      	b.n	8002582 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800258a:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_ADC_Start_DMA+0x1cc>)
 800258c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	4a35      	ldr	r2, [pc, #212]	; (8002668 <HAL_ADC_Start_DMA+0x1d0>)
 8002594:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	4a34      	ldr	r2, [pc, #208]	; (800266c <HAL_ADC_Start_DMA+0x1d4>)
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	4a33      	ldr	r2, [pc, #204]	; (8002670 <HAL_ADC_Start_DMA+0x1d8>)
 80025a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80025be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	334c      	adds	r3, #76	; 0x4c
 80025da:	4619      	mov	r1, r3
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f000 fcd2 	bl	8002f88 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10f      	bne.n	8002610 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d129      	bne.n	8002652 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	e020      	b.n	8002652 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a17      	ldr	r2, [pc, #92]	; (8002674 <HAL_ADC_Start_DMA+0x1dc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d11b      	bne.n	8002652 <HAL_ADC_Start_DMA+0x1ba>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d114      	bne.n	8002652 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	e00b      	b.n	8002652 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f043 0210 	orr.w	r2, r3, #16
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f043 0201 	orr.w	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000000 	.word	0x20000000
 8002660:	431bde83 	.word	0x431bde83
 8002664:	40012300 	.word	0x40012300
 8002668:	08002af1 	.word	0x08002af1
 800266c:	08002bab 	.word	0x08002bab
 8002670:	08002bc7 	.word	0x08002bc7
 8002674:	40012000 	.word	0x40012000

08002678 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1c>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e105      	b.n	80028dc <HAL_ADC_ConfigChannel+0x228>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b09      	cmp	r3, #9
 80026de:	d925      	bls.n	800272c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68d9      	ldr	r1, [r3, #12]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	3b1e      	subs	r3, #30
 80026f6:	2207      	movs	r2, #7
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43da      	mvns	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	400a      	ands	r2, r1
 8002704:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68d9      	ldr	r1, [r3, #12]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
 8002716:	4618      	mov	r0, r3
 8002718:	4603      	mov	r3, r0
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4403      	add	r3, r0
 800271e:	3b1e      	subs	r3, #30
 8002720:	409a      	lsls	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	e022      	b.n	8002772 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6919      	ldr	r1, [r3, #16]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	2207      	movs	r2, #7
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	400a      	ands	r2, r1
 800274e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6919      	ldr	r1, [r3, #16]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	4618      	mov	r0, r3
 8002762:	4603      	mov	r3, r0
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4403      	add	r3, r0
 8002768:	409a      	lsls	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b06      	cmp	r3, #6
 8002778:	d824      	bhi.n	80027c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	3b05      	subs	r3, #5
 800278c:	221f      	movs	r2, #31
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	400a      	ands	r2, r1
 800279a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	3b05      	subs	r3, #5
 80027b6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34
 80027c2:	e04c      	b.n	800285e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b0c      	cmp	r3, #12
 80027ca:	d824      	bhi.n	8002816 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	3b23      	subs	r3, #35	; 0x23
 80027de:	221f      	movs	r2, #31
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43da      	mvns	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	400a      	ands	r2, r1
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	3b23      	subs	r3, #35	; 0x23
 8002808:	fa00 f203 	lsl.w	r2, r0, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
 8002814:	e023      	b.n	800285e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	3b41      	subs	r3, #65	; 0x41
 8002828:	221f      	movs	r2, #31
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	400a      	ands	r2, r1
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	4618      	mov	r0, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	3b41      	subs	r3, #65	; 0x41
 8002852:	fa00 f203 	lsl.w	r2, r0, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <HAL_ADC_ConfigChannel+0x234>)
 8002860:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a21      	ldr	r2, [pc, #132]	; (80028ec <HAL_ADC_ConfigChannel+0x238>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d109      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x1cc>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b12      	cmp	r3, #18
 8002872:	d105      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_ADC_ConfigChannel+0x238>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d123      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x21e>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b10      	cmp	r3, #16
 8002890:	d003      	beq.n	800289a <HAL_ADC_ConfigChannel+0x1e6>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b11      	cmp	r3, #17
 8002898:	d11b      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d111      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <HAL_ADC_ConfigChannel+0x23c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <HAL_ADC_ConfigChannel+0x240>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	0c9a      	lsrs	r2, r3, #18
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028c4:	e002      	b.n	80028cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f9      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40012300 	.word	0x40012300
 80028ec:	40012000 	.word	0x40012000
 80028f0:	20000000 	.word	0x20000000
 80028f4:	431bde83 	.word	0x431bde83

080028f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002900:	4b79      	ldr	r3, [pc, #484]	; (8002ae8 <ADC_Init+0x1f0>)
 8002902:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	431a      	orrs	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800292c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	021a      	lsls	r2, r3, #8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002950:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002972:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6899      	ldr	r1, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	4a58      	ldr	r2, [pc, #352]	; (8002aec <ADC_Init+0x1f4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d022      	beq.n	80029d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800299e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6899      	ldr	r1, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6899      	ldr	r1, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	e00f      	b.n	80029f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0202 	bic.w	r2, r2, #2
 8002a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6899      	ldr	r1, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	7e1b      	ldrb	r3, [r3, #24]
 8002a10:	005a      	lsls	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01b      	beq.n	8002a5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6859      	ldr	r1, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	035a      	lsls	r2, r3, #13
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	e007      	b.n	8002a6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	051a      	lsls	r2, r3, #20
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6899      	ldr	r1, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aae:	025a      	lsls	r2, r3, #9
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6899      	ldr	r1, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	029a      	lsls	r2, r3, #10
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	609a      	str	r2, [r3, #8]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40012300 	.word	0x40012300
 8002aec:	0f000001 	.word	0x0f000001

08002af0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d13c      	bne.n	8002b84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d12b      	bne.n	8002b7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d127      	bne.n	8002b7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d006      	beq.n	8002b48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d119      	bne.n	8002b7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0220 	bic.w	r2, r2, #32
 8002b56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f7fe f959 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b82:	e00e      	b.n	8002ba2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f7ff fd85 	bl	80026a0 <HAL_ADC_ErrorCallback>
}
 8002b96:	e004      	b.n	8002ba2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7ff fd5d 	bl	8002678 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2240      	movs	r2, #64	; 0x40
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f043 0204 	orr.w	r2, r3, #4
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7ff fd5a 	bl	80026a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c24:	4013      	ands	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c3a:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	60d3      	str	r3, [r2, #12]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <__NVIC_GetPriorityGrouping+0x18>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	f003 0307 	and.w	r3, r3, #7
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	db0b      	blt.n	8002c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	f003 021f 	and.w	r2, r3, #31
 8002c84:	4907      	ldr	r1, [pc, #28]	; (8002ca4 <__NVIC_EnableIRQ+0x38>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000e100 	.word	0xe000e100

08002ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	6039      	str	r1, [r7, #0]
 8002cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	db0a      	blt.n	8002cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	490c      	ldr	r1, [pc, #48]	; (8002cf4 <__NVIC_SetPriority+0x4c>)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	0112      	lsls	r2, r2, #4
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	440b      	add	r3, r1
 8002ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd0:	e00a      	b.n	8002ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	4908      	ldr	r1, [pc, #32]	; (8002cf8 <__NVIC_SetPriority+0x50>)
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	3b04      	subs	r3, #4
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	761a      	strb	r2, [r3, #24]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000e100 	.word	0xe000e100
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b089      	sub	sp, #36	; 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f1c3 0307 	rsb	r3, r3, #7
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	bf28      	it	cs
 8002d1a:	2304      	movcs	r3, #4
 8002d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3304      	adds	r3, #4
 8002d22:	2b06      	cmp	r3, #6
 8002d24:	d902      	bls.n	8002d2c <NVIC_EncodePriority+0x30>
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3b03      	subs	r3, #3
 8002d2a:	e000      	b.n	8002d2e <NVIC_EncodePriority+0x32>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d30:	f04f 32ff 	mov.w	r2, #4294967295
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	401a      	ands	r2, r3
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d44:	f04f 31ff 	mov.w	r1, #4294967295
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	43d9      	mvns	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	4313      	orrs	r3, r2
         );
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3724      	adds	r7, #36	; 0x24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d74:	d301      	bcc.n	8002d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00f      	b.n	8002d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <SysTick_Config+0x40>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d82:	210f      	movs	r1, #15
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	f7ff ff8e 	bl	8002ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <SysTick_Config+0x40>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <SysTick_Config+0x40>)
 8002d94:	2207      	movs	r2, #7
 8002d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	e000e010 	.word	0xe000e010

08002da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ff29 	bl	8002c08 <__NVIC_SetPriorityGrouping>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd0:	f7ff ff3e 	bl	8002c50 <__NVIC_GetPriorityGrouping>
 8002dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	6978      	ldr	r0, [r7, #20]
 8002ddc:	f7ff ff8e 	bl	8002cfc <NVIC_EncodePriority>
 8002de0:	4602      	mov	r2, r0
 8002de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff5d 	bl	8002ca8 <__NVIC_SetPriority>
}
 8002dee:	bf00      	nop
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff31 	bl	8002c6c <__NVIC_EnableIRQ>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff ffa2 	bl	8002d64 <SysTick_Config>
 8002e20:	4603      	mov	r3, r0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e38:	f7ff f97a 	bl	8002130 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e099      	b.n	8002f7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e68:	e00f      	b.n	8002e8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6a:	f7ff f961 	bl	8002130 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d908      	bls.n	8002e8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2203      	movs	r2, #3
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e078      	b.n	8002f7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e8      	bne.n	8002e6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4b38      	ldr	r3, [pc, #224]	; (8002f84 <HAL_DMA_Init+0x158>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d107      	bne.n	8002ef4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	4313      	orrs	r3, r2
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0307 	bic.w	r3, r3, #7
 8002f0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d117      	bne.n	8002f4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00e      	beq.n	8002f4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fa6f 	bl	8003414 <DMA_CheckFifoParam>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2240      	movs	r2, #64	; 0x40
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e016      	b.n	8002f7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fa26 	bl	80033a8 <DMA_CalcBaseAndBitshift>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	223f      	movs	r2, #63	; 0x3f
 8002f66:	409a      	lsls	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	f010803f 	.word	0xf010803f

08002f88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_DMA_Start_IT+0x26>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e040      	b.n	8003030 <HAL_DMA_Start_IT+0xa8>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d12f      	bne.n	8003022 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f9b8 	bl	800334c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	223f      	movs	r2, #63	; 0x3f
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0216 	orr.w	r2, r2, #22
 8002ff6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0208 	orr.w	r2, r2, #8
 800300e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e005      	b.n	800302e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800302a:	2302      	movs	r3, #2
 800302c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800302e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003044:	4b92      	ldr	r3, [pc, #584]	; (8003290 <HAL_DMA_IRQHandler+0x258>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a92      	ldr	r2, [pc, #584]	; (8003294 <HAL_DMA_IRQHandler+0x25c>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	0a9b      	lsrs	r3, r3, #10
 8003050:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003062:	2208      	movs	r2, #8
 8003064:	409a      	lsls	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01a      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d013      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0204 	bic.w	r2, r2, #4
 800308a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	2208      	movs	r2, #8
 8003092:	409a      	lsls	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	2201      	movs	r2, #1
 80030aa:	409a      	lsls	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d012      	beq.n	80030da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c6:	2201      	movs	r2, #1
 80030c8:	409a      	lsls	r2, r3
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	f043 0202 	orr.w	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	2204      	movs	r2, #4
 80030e0:	409a      	lsls	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d012      	beq.n	8003110 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	2204      	movs	r2, #4
 80030fe:	409a      	lsls	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	f043 0204 	orr.w	r2, r3, #4
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	2210      	movs	r2, #16
 8003116:	409a      	lsls	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d043      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d03c      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	2210      	movs	r2, #16
 8003134:	409a      	lsls	r2, r3
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d018      	beq.n	800317a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d108      	bne.n	8003168 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d024      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4798      	blx	r3
 8003166:	e01f      	b.n	80031a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01b      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
 8003178:	e016      	b.n	80031a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d107      	bne.n	8003198 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0208 	bic.w	r2, r2, #8
 8003196:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	2220      	movs	r2, #32
 80031ae:	409a      	lsls	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 808e 	beq.w	80032d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8086 	beq.w	80032d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	2220      	movs	r2, #32
 80031d0:	409a      	lsls	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d136      	bne.n	8003250 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0216 	bic.w	r2, r2, #22
 80031f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003200:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <HAL_DMA_IRQHandler+0x1da>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0208 	bic.w	r2, r2, #8
 8003220:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	223f      	movs	r2, #63	; 0x3f
 8003228:	409a      	lsls	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003242:	2b00      	cmp	r3, #0
 8003244:	d07d      	beq.n	8003342 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
        }
        return;
 800324e:	e078      	b.n	8003342 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d01c      	beq.n	8003298 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d108      	bne.n	800327e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	2b00      	cmp	r3, #0
 8003272:	d030      	beq.n	80032d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
 800327c:	e02b      	b.n	80032d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d027      	beq.n	80032d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	4798      	blx	r3
 800328e:	e022      	b.n	80032d6 <HAL_DMA_IRQHandler+0x29e>
 8003290:	20000000 	.word	0x20000000
 8003294:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10f      	bne.n	80032c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0210 	bic.w	r2, r2, #16
 80032b4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d032      	beq.n	8003344 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d022      	beq.n	8003330 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2205      	movs	r2, #5
 80032ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	3301      	adds	r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	429a      	cmp	r2, r3
 800330c:	d307      	bcc.n	800331e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f2      	bne.n	8003302 <HAL_DMA_IRQHandler+0x2ca>
 800331c:	e000      	b.n	8003320 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800331e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
 8003340:	e000      	b.n	8003344 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003342:	bf00      	nop
    }
  }
}
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop

0800334c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003368:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b40      	cmp	r3, #64	; 0x40
 8003378:	d108      	bne.n	800338c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800338a:	e007      	b.n	800339c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	60da      	str	r2, [r3, #12]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	3b10      	subs	r3, #16
 80033b8:	4a14      	ldr	r2, [pc, #80]	; (800340c <DMA_CalcBaseAndBitshift+0x64>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033c2:	4a13      	ldr	r2, [pc, #76]	; (8003410 <DMA_CalcBaseAndBitshift+0x68>)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d909      	bls.n	80033ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033de:	f023 0303 	bic.w	r3, r3, #3
 80033e2:	1d1a      	adds	r2, r3, #4
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	659a      	str	r2, [r3, #88]	; 0x58
 80033e8:	e007      	b.n	80033fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	aaaaaaab 	.word	0xaaaaaaab
 8003410:	0800646c 	.word	0x0800646c

08003414 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11f      	bne.n	800346e <DMA_CheckFifoParam+0x5a>
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b03      	cmp	r3, #3
 8003432:	d856      	bhi.n	80034e2 <DMA_CheckFifoParam+0xce>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <DMA_CheckFifoParam+0x28>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	0800344d 	.word	0x0800344d
 8003440:	0800345f 	.word	0x0800345f
 8003444:	0800344d 	.word	0x0800344d
 8003448:	080034e3 	.word	0x080034e3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d046      	beq.n	80034e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345c:	e043      	b.n	80034e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003466:	d140      	bne.n	80034ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800346c:	e03d      	b.n	80034ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003476:	d121      	bne.n	80034bc <DMA_CheckFifoParam+0xa8>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b03      	cmp	r3, #3
 800347c:	d837      	bhi.n	80034ee <DMA_CheckFifoParam+0xda>
 800347e:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <DMA_CheckFifoParam+0x70>)
 8003480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003484:	08003495 	.word	0x08003495
 8003488:	0800349b 	.word	0x0800349b
 800348c:	08003495 	.word	0x08003495
 8003490:	080034ad 	.word	0x080034ad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      break;
 8003498:	e030      	b.n	80034fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d025      	beq.n	80034f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034aa:	e022      	b.n	80034f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034b4:	d11f      	bne.n	80034f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034ba:	e01c      	b.n	80034f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d903      	bls.n	80034ca <DMA_CheckFifoParam+0xb6>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d003      	beq.n	80034d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034c8:	e018      	b.n	80034fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
      break;
 80034ce:	e015      	b.n	80034fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00e      	beq.n	80034fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      break;
 80034e0:	e00b      	b.n	80034fa <DMA_CheckFifoParam+0xe6>
      break;
 80034e2:	bf00      	nop
 80034e4:	e00a      	b.n	80034fc <DMA_CheckFifoParam+0xe8>
      break;
 80034e6:	bf00      	nop
 80034e8:	e008      	b.n	80034fc <DMA_CheckFifoParam+0xe8>
      break;
 80034ea:	bf00      	nop
 80034ec:	e006      	b.n	80034fc <DMA_CheckFifoParam+0xe8>
      break;
 80034ee:	bf00      	nop
 80034f0:	e004      	b.n	80034fc <DMA_CheckFifoParam+0xe8>
      break;
 80034f2:	bf00      	nop
 80034f4:	e002      	b.n	80034fc <DMA_CheckFifoParam+0xe8>
      break;   
 80034f6:	bf00      	nop
 80034f8:	e000      	b.n	80034fc <DMA_CheckFifoParam+0xe8>
      break;
 80034fa:	bf00      	nop
    }
  } 
  
  return status; 
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop

0800350c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800351e:	2300      	movs	r3, #0
 8003520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	e159      	b.n	80037dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003528:	2201      	movs	r2, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	429a      	cmp	r2, r3
 8003542:	f040 8148 	bne.w	80037d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d005      	beq.n	800355e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800355a:	2b02      	cmp	r3, #2
 800355c:	d130      	bne.n	80035c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	2203      	movs	r2, #3
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4313      	orrs	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003594:	2201      	movs	r2, #1
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 0201 	and.w	r2, r3, #1
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d017      	beq.n	80035fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	2203      	movs	r2, #3
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d123      	bne.n	8003650 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	08da      	lsrs	r2, r3, #3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3208      	adds	r2, #8
 8003610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	220f      	movs	r2, #15
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	08da      	lsrs	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3208      	adds	r2, #8
 800364a:	69b9      	ldr	r1, [r7, #24]
 800364c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	2203      	movs	r2, #3
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0203 	and.w	r2, r3, #3
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80a2 	beq.w	80037d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b57      	ldr	r3, [pc, #348]	; (80037f4 <HAL_GPIO_Init+0x2e8>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	4a56      	ldr	r2, [pc, #344]	; (80037f4 <HAL_GPIO_Init+0x2e8>)
 800369c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036a0:	6453      	str	r3, [r2, #68]	; 0x44
 80036a2:	4b54      	ldr	r3, [pc, #336]	; (80037f4 <HAL_GPIO_Init+0x2e8>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ae:	4a52      	ldr	r2, [pc, #328]	; (80037f8 <HAL_GPIO_Init+0x2ec>)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	3302      	adds	r3, #2
 80036b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	220f      	movs	r2, #15
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a49      	ldr	r2, [pc, #292]	; (80037fc <HAL_GPIO_Init+0x2f0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d019      	beq.n	800370e <HAL_GPIO_Init+0x202>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a48      	ldr	r2, [pc, #288]	; (8003800 <HAL_GPIO_Init+0x2f4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_GPIO_Init+0x1fe>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a47      	ldr	r2, [pc, #284]	; (8003804 <HAL_GPIO_Init+0x2f8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00d      	beq.n	8003706 <HAL_GPIO_Init+0x1fa>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a46      	ldr	r2, [pc, #280]	; (8003808 <HAL_GPIO_Init+0x2fc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <HAL_GPIO_Init+0x1f6>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a45      	ldr	r2, [pc, #276]	; (800380c <HAL_GPIO_Init+0x300>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_GPIO_Init+0x1f2>
 80036fa:	2304      	movs	r3, #4
 80036fc:	e008      	b.n	8003710 <HAL_GPIO_Init+0x204>
 80036fe:	2307      	movs	r3, #7
 8003700:	e006      	b.n	8003710 <HAL_GPIO_Init+0x204>
 8003702:	2303      	movs	r3, #3
 8003704:	e004      	b.n	8003710 <HAL_GPIO_Init+0x204>
 8003706:	2302      	movs	r3, #2
 8003708:	e002      	b.n	8003710 <HAL_GPIO_Init+0x204>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_GPIO_Init+0x204>
 800370e:	2300      	movs	r3, #0
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	f002 0203 	and.w	r2, r2, #3
 8003716:	0092      	lsls	r2, r2, #2
 8003718:	4093      	lsls	r3, r2
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003720:	4935      	ldr	r1, [pc, #212]	; (80037f8 <HAL_GPIO_Init+0x2ec>)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	089b      	lsrs	r3, r3, #2
 8003726:	3302      	adds	r3, #2
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800372e:	4b38      	ldr	r3, [pc, #224]	; (8003810 <HAL_GPIO_Init+0x304>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003752:	4a2f      	ldr	r2, [pc, #188]	; (8003810 <HAL_GPIO_Init+0x304>)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003758:	4b2d      	ldr	r3, [pc, #180]	; (8003810 <HAL_GPIO_Init+0x304>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800377c:	4a24      	ldr	r2, [pc, #144]	; (8003810 <HAL_GPIO_Init+0x304>)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003782:	4b23      	ldr	r3, [pc, #140]	; (8003810 <HAL_GPIO_Init+0x304>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	43db      	mvns	r3, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4013      	ands	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037a6:	4a1a      	ldr	r2, [pc, #104]	; (8003810 <HAL_GPIO_Init+0x304>)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037ac:	4b18      	ldr	r3, [pc, #96]	; (8003810 <HAL_GPIO_Init+0x304>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037d0:	4a0f      	ldr	r2, [pc, #60]	; (8003810 <HAL_GPIO_Init+0x304>)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3301      	adds	r3, #1
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b0f      	cmp	r3, #15
 80037e0:	f67f aea2 	bls.w	8003528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	3724      	adds	r7, #36	; 0x24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40013800 	.word	0x40013800
 80037fc:	40020000 	.word	0x40020000
 8003800:	40020400 	.word	0x40020400
 8003804:	40020800 	.word	0x40020800
 8003808:	40020c00 	.word	0x40020c00
 800380c:	40021000 	.word	0x40021000
 8003810:	40013c00 	.word	0x40013c00

08003814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	887b      	ldrh	r3, [r7, #2]
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
 8003830:	e001      	b.n	8003836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	807b      	strh	r3, [r7, #2]
 8003850:	4613      	mov	r3, r2
 8003852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003854:	787b      	ldrb	r3, [r7, #1]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800385a:	887a      	ldrh	r2, [r7, #2]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003860:	e003      	b.n	800386a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003862:	887b      	ldrh	r3, [r7, #2]
 8003864:	041a      	lsls	r2, r3, #16
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	619a      	str	r2, [r3, #24]
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d006      	beq.n	800389c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800388e:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003894:	88fb      	ldrh	r3, [r7, #6]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd fb84 	bl	8000fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40013c00 	.word	0x40013c00

080038a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e12b      	b.n	8003b12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fe fa7e 	bl	8001dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2224      	movs	r2, #36	; 0x24
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800390a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800390c:	f001 f838 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 8003910:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4a81      	ldr	r2, [pc, #516]	; (8003b1c <HAL_I2C_Init+0x274>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d807      	bhi.n	800392c <HAL_I2C_Init+0x84>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a80      	ldr	r2, [pc, #512]	; (8003b20 <HAL_I2C_Init+0x278>)
 8003920:	4293      	cmp	r3, r2
 8003922:	bf94      	ite	ls
 8003924:	2301      	movls	r3, #1
 8003926:	2300      	movhi	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	e006      	b.n	800393a <HAL_I2C_Init+0x92>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4a7d      	ldr	r2, [pc, #500]	; (8003b24 <HAL_I2C_Init+0x27c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	bf94      	ite	ls
 8003934:	2301      	movls	r3, #1
 8003936:	2300      	movhi	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e0e7      	b.n	8003b12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4a78      	ldr	r2, [pc, #480]	; (8003b28 <HAL_I2C_Init+0x280>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	0c9b      	lsrs	r3, r3, #18
 800394c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4a6a      	ldr	r2, [pc, #424]	; (8003b1c <HAL_I2C_Init+0x274>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d802      	bhi.n	800397c <HAL_I2C_Init+0xd4>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	3301      	adds	r3, #1
 800397a:	e009      	b.n	8003990 <HAL_I2C_Init+0xe8>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	4a69      	ldr	r2, [pc, #420]	; (8003b2c <HAL_I2C_Init+0x284>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	099b      	lsrs	r3, r3, #6
 800398e:	3301      	adds	r3, #1
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	430b      	orrs	r3, r1
 8003996:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	495c      	ldr	r1, [pc, #368]	; (8003b1c <HAL_I2C_Init+0x274>)
 80039ac:	428b      	cmp	r3, r1
 80039ae:	d819      	bhi.n	80039e4 <HAL_I2C_Init+0x13c>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1e59      	subs	r1, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80039be:	1c59      	adds	r1, r3, #1
 80039c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039c4:	400b      	ands	r3, r1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_I2C_Init+0x138>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1e59      	subs	r1, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d8:	3301      	adds	r3, #1
 80039da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039de:	e051      	b.n	8003a84 <HAL_I2C_Init+0x1dc>
 80039e0:	2304      	movs	r3, #4
 80039e2:	e04f      	b.n	8003a84 <HAL_I2C_Init+0x1dc>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d111      	bne.n	8003a10 <HAL_I2C_Init+0x168>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1e58      	subs	r0, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	440b      	add	r3, r1
 80039fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fe:	3301      	adds	r3, #1
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e012      	b.n	8003a36 <HAL_I2C_Init+0x18e>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1e58      	subs	r0, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	0099      	lsls	r1, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Init+0x196>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e022      	b.n	8003a84 <HAL_I2C_Init+0x1dc>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10e      	bne.n	8003a64 <HAL_I2C_Init+0x1bc>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1e58      	subs	r0, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6859      	ldr	r1, [r3, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	440b      	add	r3, r1
 8003a54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a58:	3301      	adds	r3, #1
 8003a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a62:	e00f      	b.n	8003a84 <HAL_I2C_Init+0x1dc>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1e58      	subs	r0, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	0099      	lsls	r1, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	6809      	ldr	r1, [r1, #0]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ab2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6911      	ldr	r1, [r2, #16]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68d2      	ldr	r2, [r2, #12]
 8003abe:	4311      	orrs	r1, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	000186a0 	.word	0x000186a0
 8003b20:	001e847f 	.word	0x001e847f
 8003b24:	003d08ff 	.word	0x003d08ff
 8003b28:	431bde83 	.word	0x431bde83
 8003b2c:	10624dd3 	.word	0x10624dd3

08003b30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	817b      	strh	r3, [r7, #10]
 8003b40:	4613      	mov	r3, r2
 8003b42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b44:	f7fe faf4 	bl	8002130 <HAL_GetTick>
 8003b48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	f040 80e0 	bne.w	8003d18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	2319      	movs	r3, #25
 8003b5e:	2201      	movs	r2, #1
 8003b60:	4970      	ldr	r1, [pc, #448]	; (8003d24 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f964 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e0d3      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2C_Master_Transmit+0x50>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e0cc      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ea>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d007      	beq.n	8003ba6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2221      	movs	r2, #33	; 0x21
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	893a      	ldrh	r2, [r7, #8]
 8003bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4a50      	ldr	r2, [pc, #320]	; (8003d28 <HAL_I2C_Master_Transmit+0x1f8>)
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003be8:	8979      	ldrh	r1, [r7, #10]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	6a3a      	ldr	r2, [r7, #32]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f89c 	bl	8003d2c <I2C_MasterRequestWrite>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e08d      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c14:	e066      	b.n	8003ce4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	6a39      	ldr	r1, [r7, #32]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f9de 	bl	8003fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00d      	beq.n	8003c42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d107      	bne.n	8003c3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e06b      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	781a      	ldrb	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d11b      	bne.n	8003cb8 <HAL_I2C_Master_Transmit+0x188>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d017      	beq.n	8003cb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	781a      	ldrb	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	6a39      	ldr	r1, [r7, #32]
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f9ce 	bl	800405e <I2C_WaitOnBTFFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d107      	bne.n	8003ce0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e01a      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d194      	bne.n	8003c16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e000      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
  }
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	00100002 	.word	0x00100002
 8003d28:	ffff0000 	.word	0xffff0000

08003d2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d006      	beq.n	8003d56 <I2C_MasterRequestWrite+0x2a>
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d003      	beq.n	8003d56 <I2C_MasterRequestWrite+0x2a>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d54:	d108      	bne.n	8003d68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e00b      	b.n	8003d80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	2b12      	cmp	r3, #18
 8003d6e:	d107      	bne.n	8003d80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f84f 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00d      	beq.n	8003db4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da6:	d103      	bne.n	8003db0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e035      	b.n	8003e20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dbc:	d108      	bne.n	8003dd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dbe:	897b      	ldrh	r3, [r7, #10]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dcc:	611a      	str	r2, [r3, #16]
 8003dce:	e01b      	b.n	8003e08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003dd0:	897b      	ldrh	r3, [r7, #10]
 8003dd2:	11db      	asrs	r3, r3, #7
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f003 0306 	and.w	r3, r3, #6
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f063 030f 	orn	r3, r3, #15
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	490e      	ldr	r1, [pc, #56]	; (8003e28 <I2C_MasterRequestWrite+0xfc>)
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f875 	bl	8003ede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e010      	b.n	8003e20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dfe:	897b      	ldrh	r3, [r7, #10]
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4907      	ldr	r1, [pc, #28]	; (8003e2c <I2C_MasterRequestWrite+0x100>)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f865 	bl	8003ede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	00010008 	.word	0x00010008
 8003e2c:	00010002 	.word	0x00010002

08003e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e40:	e025      	b.n	8003e8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d021      	beq.n	8003e8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fe f971 	bl	8002130 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d116      	bne.n	8003e8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f043 0220 	orr.w	r2, r3, #32
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e023      	b.n	8003ed6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d10d      	bne.n	8003eb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	e00c      	b.n	8003ece <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	43da      	mvns	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bf0c      	ite	eq
 8003ec6:	2301      	moveq	r3, #1
 8003ec8:	2300      	movne	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d0b6      	beq.n	8003e42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003eec:	e051      	b.n	8003f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efc:	d123      	bne.n	8003f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f043 0204 	orr.w	r2, r3, #4
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e046      	b.n	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4c:	d021      	beq.n	8003f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f4e:	f7fe f8ef 	bl	8002130 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d302      	bcc.n	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d116      	bne.n	8003f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f043 0220 	orr.w	r2, r3, #32
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e020      	b.n	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	0c1b      	lsrs	r3, r3, #16
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d10c      	bne.n	8003fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	43da      	mvns	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bf14      	ite	ne
 8003fae:	2301      	movne	r3, #1
 8003fb0:	2300      	moveq	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	e00b      	b.n	8003fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	43da      	mvns	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf14      	ite	ne
 8003fc8:	2301      	movne	r3, #1
 8003fca:	2300      	moveq	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d18d      	bne.n	8003eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fe8:	e02d      	b.n	8004046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f878 	bl	80040e0 <I2C_IsAcknowledgeFailed>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e02d      	b.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004000:	d021      	beq.n	8004046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004002:	f7fe f895 	bl	8002130 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	429a      	cmp	r2, r3
 8004010:	d302      	bcc.n	8004018 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d116      	bne.n	8004046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f043 0220 	orr.w	r2, r3, #32
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e007      	b.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004050:	2b80      	cmp	r3, #128	; 0x80
 8004052:	d1ca      	bne.n	8003fea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800406a:	e02d      	b.n	80040c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f837 	bl	80040e0 <I2C_IsAcknowledgeFailed>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e02d      	b.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004082:	d021      	beq.n	80040c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004084:	f7fe f854 	bl	8002130 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	429a      	cmp	r2, r3
 8004092:	d302      	bcc.n	800409a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d116      	bne.n	80040c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	f043 0220 	orr.w	r2, r3, #32
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e007      	b.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d1ca      	bne.n	800406c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f6:	d11b      	bne.n	8004130 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004100:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	f043 0204 	orr.w	r2, r3, #4
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e264      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d075      	beq.n	800424a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800415e:	4ba3      	ldr	r3, [pc, #652]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b04      	cmp	r3, #4
 8004168:	d00c      	beq.n	8004184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800416a:	4ba0      	ldr	r3, [pc, #640]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004172:	2b08      	cmp	r3, #8
 8004174:	d112      	bne.n	800419c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004176:	4b9d      	ldr	r3, [pc, #628]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004182:	d10b      	bne.n	800419c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	4b99      	ldr	r3, [pc, #612]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d05b      	beq.n	8004248 <HAL_RCC_OscConfig+0x108>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d157      	bne.n	8004248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e23f      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a4:	d106      	bne.n	80041b4 <HAL_RCC_OscConfig+0x74>
 80041a6:	4b91      	ldr	r3, [pc, #580]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a90      	ldr	r2, [pc, #576]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e01d      	b.n	80041f0 <HAL_RCC_OscConfig+0xb0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x98>
 80041be:	4b8b      	ldr	r3, [pc, #556]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a8a      	ldr	r2, [pc, #552]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b88      	ldr	r3, [pc, #544]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a87      	ldr	r2, [pc, #540]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e00b      	b.n	80041f0 <HAL_RCC_OscConfig+0xb0>
 80041d8:	4b84      	ldr	r3, [pc, #528]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a83      	ldr	r2, [pc, #524]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80041de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b81      	ldr	r3, [pc, #516]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a80      	ldr	r2, [pc, #512]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80041ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fd ff9a 	bl	8002130 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004200:	f7fd ff96 	bl	8002130 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e204      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	4b76      	ldr	r3, [pc, #472]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0xc0>
 800421e:	e014      	b.n	800424a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fd ff86 	bl	8002130 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004228:	f7fd ff82 	bl	8002130 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e1f0      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423a:	4b6c      	ldr	r3, [pc, #432]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0xe8>
 8004246:	e000      	b.n	800424a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d063      	beq.n	800431e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004256:	4b65      	ldr	r3, [pc, #404]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00b      	beq.n	800427a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004262:	4b62      	ldr	r3, [pc, #392]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800426a:	2b08      	cmp	r3, #8
 800426c:	d11c      	bne.n	80042a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426e:	4b5f      	ldr	r3, [pc, #380]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d116      	bne.n	80042a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427a:	4b5c      	ldr	r3, [pc, #368]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <HAL_RCC_OscConfig+0x152>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d001      	beq.n	8004292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e1c4      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004292:	4b56      	ldr	r3, [pc, #344]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4952      	ldr	r1, [pc, #328]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	e03a      	b.n	800431e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d020      	beq.n	80042f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b0:	4b4f      	ldr	r3, [pc, #316]	; (80043f0 <HAL_RCC_OscConfig+0x2b0>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fd ff3b 	bl	8002130 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042be:	f7fd ff37 	bl	8002130 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e1a5      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d0:	4b46      	ldr	r3, [pc, #280]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042dc:	4b43      	ldr	r3, [pc, #268]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4940      	ldr	r1, [pc, #256]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	600b      	str	r3, [r1, #0]
 80042f0:	e015      	b.n	800431e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042f2:	4b3f      	ldr	r3, [pc, #252]	; (80043f0 <HAL_RCC_OscConfig+0x2b0>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7fd ff1a 	bl	8002130 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004300:	f7fd ff16 	bl	8002130 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e184      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004312:	4b36      	ldr	r3, [pc, #216]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d030      	beq.n	800438c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004332:	4b30      	ldr	r3, [pc, #192]	; (80043f4 <HAL_RCC_OscConfig+0x2b4>)
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004338:	f7fd fefa 	bl	8002130 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004340:	f7fd fef6 	bl	8002130 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e164      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004352:	4b26      	ldr	r3, [pc, #152]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 8004354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0x200>
 800435e:	e015      	b.n	800438c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004360:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <HAL_RCC_OscConfig+0x2b4>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004366:	f7fd fee3 	bl	8002130 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436e:	f7fd fedf 	bl	8002130 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e14d      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004380:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 8004382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f0      	bne.n	800436e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a0 	beq.w	80044da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439a:	2300      	movs	r3, #0
 800439c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800439e:	4b13      	ldr	r3, [pc, #76]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10f      	bne.n	80043ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	4a0e      	ldr	r2, [pc, #56]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c6:	2301      	movs	r3, #1
 80043c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCC_OscConfig+0x2b8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d121      	bne.n	800441a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043d6:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <HAL_RCC_OscConfig+0x2b8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <HAL_RCC_OscConfig+0x2b8>)
 80043dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e2:	f7fd fea5 	bl	8002130 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e8:	e011      	b.n	800440e <HAL_RCC_OscConfig+0x2ce>
 80043ea:	bf00      	nop
 80043ec:	40023800 	.word	0x40023800
 80043f0:	42470000 	.word	0x42470000
 80043f4:	42470e80 	.word	0x42470e80
 80043f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043fc:	f7fd fe98 	bl	8002130 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e106      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440e:	4b85      	ldr	r3, [pc, #532]	; (8004624 <HAL_RCC_OscConfig+0x4e4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d106      	bne.n	8004430 <HAL_RCC_OscConfig+0x2f0>
 8004422:	4b81      	ldr	r3, [pc, #516]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	4a80      	ldr	r2, [pc, #512]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	6713      	str	r3, [r2, #112]	; 0x70
 800442e:	e01c      	b.n	800446a <HAL_RCC_OscConfig+0x32a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b05      	cmp	r3, #5
 8004436:	d10c      	bne.n	8004452 <HAL_RCC_OscConfig+0x312>
 8004438:	4b7b      	ldr	r3, [pc, #492]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	4a7a      	ldr	r2, [pc, #488]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 800443e:	f043 0304 	orr.w	r3, r3, #4
 8004442:	6713      	str	r3, [r2, #112]	; 0x70
 8004444:	4b78      	ldr	r3, [pc, #480]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004448:	4a77      	ldr	r2, [pc, #476]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6713      	str	r3, [r2, #112]	; 0x70
 8004450:	e00b      	b.n	800446a <HAL_RCC_OscConfig+0x32a>
 8004452:	4b75      	ldr	r3, [pc, #468]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	4a74      	ldr	r2, [pc, #464]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	6713      	str	r3, [r2, #112]	; 0x70
 800445e:	4b72      	ldr	r3, [pc, #456]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	4a71      	ldr	r2, [pc, #452]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 8004464:	f023 0304 	bic.w	r3, r3, #4
 8004468:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d015      	beq.n	800449e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004472:	f7fd fe5d 	bl	8002130 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004478:	e00a      	b.n	8004490 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800447a:	f7fd fe59 	bl	8002130 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	f241 3288 	movw	r2, #5000	; 0x1388
 8004488:	4293      	cmp	r3, r2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e0c5      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004490:	4b65      	ldr	r3, [pc, #404]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0ee      	beq.n	800447a <HAL_RCC_OscConfig+0x33a>
 800449c:	e014      	b.n	80044c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449e:	f7fd fe47 	bl	8002130 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a4:	e00a      	b.n	80044bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a6:	f7fd fe43 	bl	8002130 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e0af      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044bc:	4b5a      	ldr	r3, [pc, #360]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1ee      	bne.n	80044a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ce:	4b56      	ldr	r3, [pc, #344]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	4a55      	ldr	r2, [pc, #340]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 80044d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 809b 	beq.w	800461a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044e4:	4b50      	ldr	r3, [pc, #320]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d05c      	beq.n	80045aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d141      	bne.n	800457c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f8:	4b4c      	ldr	r3, [pc, #304]	; (800462c <HAL_RCC_OscConfig+0x4ec>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fe:	f7fd fe17 	bl	8002130 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004506:	f7fd fe13 	bl	8002130 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e081      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004518:	4b43      	ldr	r3, [pc, #268]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	019b      	lsls	r3, r3, #6
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	085b      	lsrs	r3, r3, #1
 800453c:	3b01      	subs	r3, #1
 800453e:	041b      	lsls	r3, r3, #16
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	061b      	lsls	r3, r3, #24
 8004548:	4937      	ldr	r1, [pc, #220]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 800454a:	4313      	orrs	r3, r2
 800454c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800454e:	4b37      	ldr	r3, [pc, #220]	; (800462c <HAL_RCC_OscConfig+0x4ec>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fd fdec 	bl	8002130 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455c:	f7fd fde8 	bl	8002130 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e056      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456e:	4b2e      	ldr	r3, [pc, #184]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x41c>
 800457a:	e04e      	b.n	800461a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457c:	4b2b      	ldr	r3, [pc, #172]	; (800462c <HAL_RCC_OscConfig+0x4ec>)
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004582:	f7fd fdd5 	bl	8002130 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458a:	f7fd fdd1 	bl	8002130 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e03f      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459c:	4b22      	ldr	r3, [pc, #136]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f0      	bne.n	800458a <HAL_RCC_OscConfig+0x44a>
 80045a8:	e037      	b.n	800461a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e032      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045b6:	4b1c      	ldr	r3, [pc, #112]	; (8004628 <HAL_RCC_OscConfig+0x4e8>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d028      	beq.n	8004616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d121      	bne.n	8004616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d11a      	bne.n	8004616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045e6:	4013      	ands	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d111      	bne.n	8004616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	3b01      	subs	r3, #1
 8004600:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004602:	429a      	cmp	r2, r3
 8004604:	d107      	bne.n	8004616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d001      	beq.n	800461a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40007000 	.word	0x40007000
 8004628:	40023800 	.word	0x40023800
 800462c:	42470060 	.word	0x42470060

08004630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0cc      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004644:	4b68      	ldr	r3, [pc, #416]	; (80047e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d90c      	bls.n	800466c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b65      	ldr	r3, [pc, #404]	; (80047e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b63      	ldr	r3, [pc, #396]	; (80047e8 <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0b8      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d020      	beq.n	80046ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004684:	4b59      	ldr	r3, [pc, #356]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	4a58      	ldr	r2, [pc, #352]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800468e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800469c:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a52      	ldr	r2, [pc, #328]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a8:	4b50      	ldr	r3, [pc, #320]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	494d      	ldr	r1, [pc, #308]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d044      	beq.n	8004750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ce:	4b47      	ldr	r3, [pc, #284]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d119      	bne.n	800470e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e07f      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d003      	beq.n	80046ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d107      	bne.n	80046fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ee:	4b3f      	ldr	r3, [pc, #252]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e06f      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fe:	4b3b      	ldr	r3, [pc, #236]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e067      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800470e:	4b37      	ldr	r3, [pc, #220]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f023 0203 	bic.w	r2, r3, #3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	4934      	ldr	r1, [pc, #208]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	4313      	orrs	r3, r2
 800471e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004720:	f7fd fd06 	bl	8002130 <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004726:	e00a      	b.n	800473e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004728:	f7fd fd02 	bl	8002130 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f241 3288 	movw	r2, #5000	; 0x1388
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e04f      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473e:	4b2b      	ldr	r3, [pc, #172]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 020c 	and.w	r2, r3, #12
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	429a      	cmp	r2, r3
 800474e:	d1eb      	bne.n	8004728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004750:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d20c      	bcs.n	8004778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475e:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004766:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d001      	beq.n	8004778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e032      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004784:	4b19      	ldr	r3, [pc, #100]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4916      	ldr	r1, [pc, #88]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047a2:	4b12      	ldr	r3, [pc, #72]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	490e      	ldr	r1, [pc, #56]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047b6:	f000 f821 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 80047ba:	4602      	mov	r2, r0
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	490a      	ldr	r1, [pc, #40]	; (80047f0 <HAL_RCC_ClockConfig+0x1c0>)
 80047c8:	5ccb      	ldrb	r3, [r1, r3]
 80047ca:	fa22 f303 	lsr.w	r3, r2, r3
 80047ce:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047d2:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fd fc66 	bl	80020a8 <HAL_InitTick>

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40023c00 	.word	0x40023c00
 80047ec:	40023800 	.word	0x40023800
 80047f0:	08006454 	.word	0x08006454
 80047f4:	20000000 	.word	0x20000000
 80047f8:	20000004 	.word	0x20000004

080047fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047fc:	b5b0      	push	{r4, r5, r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004802:	2100      	movs	r1, #0
 8004804:	6079      	str	r1, [r7, #4]
 8004806:	2100      	movs	r1, #0
 8004808:	60f9      	str	r1, [r7, #12]
 800480a:	2100      	movs	r1, #0
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800480e:	2100      	movs	r1, #0
 8004810:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004812:	4952      	ldr	r1, [pc, #328]	; (800495c <HAL_RCC_GetSysClockFreq+0x160>)
 8004814:	6889      	ldr	r1, [r1, #8]
 8004816:	f001 010c 	and.w	r1, r1, #12
 800481a:	2908      	cmp	r1, #8
 800481c:	d00d      	beq.n	800483a <HAL_RCC_GetSysClockFreq+0x3e>
 800481e:	2908      	cmp	r1, #8
 8004820:	f200 8094 	bhi.w	800494c <HAL_RCC_GetSysClockFreq+0x150>
 8004824:	2900      	cmp	r1, #0
 8004826:	d002      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0x32>
 8004828:	2904      	cmp	r1, #4
 800482a:	d003      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0x38>
 800482c:	e08e      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800482e:	4b4c      	ldr	r3, [pc, #304]	; (8004960 <HAL_RCC_GetSysClockFreq+0x164>)
 8004830:	60bb      	str	r3, [r7, #8]
       break;
 8004832:	e08e      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004834:	4b4b      	ldr	r3, [pc, #300]	; (8004964 <HAL_RCC_GetSysClockFreq+0x168>)
 8004836:	60bb      	str	r3, [r7, #8]
      break;
 8004838:	e08b      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800483a:	4948      	ldr	r1, [pc, #288]	; (800495c <HAL_RCC_GetSysClockFreq+0x160>)
 800483c:	6849      	ldr	r1, [r1, #4]
 800483e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004842:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004844:	4945      	ldr	r1, [pc, #276]	; (800495c <HAL_RCC_GetSysClockFreq+0x160>)
 8004846:	6849      	ldr	r1, [r1, #4]
 8004848:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800484c:	2900      	cmp	r1, #0
 800484e:	d024      	beq.n	800489a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004850:	4942      	ldr	r1, [pc, #264]	; (800495c <HAL_RCC_GetSysClockFreq+0x160>)
 8004852:	6849      	ldr	r1, [r1, #4]
 8004854:	0989      	lsrs	r1, r1, #6
 8004856:	4608      	mov	r0, r1
 8004858:	f04f 0100 	mov.w	r1, #0
 800485c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004860:	f04f 0500 	mov.w	r5, #0
 8004864:	ea00 0204 	and.w	r2, r0, r4
 8004868:	ea01 0305 	and.w	r3, r1, r5
 800486c:	493d      	ldr	r1, [pc, #244]	; (8004964 <HAL_RCC_GetSysClockFreq+0x168>)
 800486e:	fb01 f003 	mul.w	r0, r1, r3
 8004872:	2100      	movs	r1, #0
 8004874:	fb01 f102 	mul.w	r1, r1, r2
 8004878:	1844      	adds	r4, r0, r1
 800487a:	493a      	ldr	r1, [pc, #232]	; (8004964 <HAL_RCC_GetSysClockFreq+0x168>)
 800487c:	fba2 0101 	umull	r0, r1, r2, r1
 8004880:	1863      	adds	r3, r4, r1
 8004882:	4619      	mov	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	461a      	mov	r2, r3
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	f7fb fcf8 	bl	8000280 <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4613      	mov	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	e04a      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800489a:	4b30      	ldr	r3, [pc, #192]	; (800495c <HAL_RCC_GetSysClockFreq+0x160>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	099b      	lsrs	r3, r3, #6
 80048a0:	461a      	mov	r2, r3
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048aa:	f04f 0100 	mov.w	r1, #0
 80048ae:	ea02 0400 	and.w	r4, r2, r0
 80048b2:	ea03 0501 	and.w	r5, r3, r1
 80048b6:	4620      	mov	r0, r4
 80048b8:	4629      	mov	r1, r5
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	014b      	lsls	r3, r1, #5
 80048c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048c8:	0142      	lsls	r2, r0, #5
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	1b00      	subs	r0, r0, r4
 80048d0:	eb61 0105 	sbc.w	r1, r1, r5
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	018b      	lsls	r3, r1, #6
 80048de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048e2:	0182      	lsls	r2, r0, #6
 80048e4:	1a12      	subs	r2, r2, r0
 80048e6:	eb63 0301 	sbc.w	r3, r3, r1
 80048ea:	f04f 0000 	mov.w	r0, #0
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	00d9      	lsls	r1, r3, #3
 80048f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048f8:	00d0      	lsls	r0, r2, #3
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	1912      	adds	r2, r2, r4
 8004900:	eb45 0303 	adc.w	r3, r5, r3
 8004904:	f04f 0000 	mov.w	r0, #0
 8004908:	f04f 0100 	mov.w	r1, #0
 800490c:	0299      	lsls	r1, r3, #10
 800490e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004912:	0290      	lsls	r0, r2, #10
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4610      	mov	r0, r2
 800491a:	4619      	mov	r1, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	461a      	mov	r2, r3
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	f7fb fcac 	bl	8000280 <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4613      	mov	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <HAL_RCC_GetSysClockFreq+0x160>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	3301      	adds	r3, #1
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	60bb      	str	r3, [r7, #8]
      break;
 800494a:	e002      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <HAL_RCC_GetSysClockFreq+0x164>)
 800494e:	60bb      	str	r3, [r7, #8]
      break;
 8004950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004952:	68bb      	ldr	r3, [r7, #8]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bdb0      	pop	{r4, r5, r7, pc}
 800495c:	40023800 	.word	0x40023800
 8004960:	00f42400 	.word	0x00f42400
 8004964:	017d7840 	.word	0x017d7840

08004968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <HAL_RCC_GetHCLKFreq+0x14>)
 800496e:	681b      	ldr	r3, [r3, #0]
}
 8004970:	4618      	mov	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20000000 	.word	0x20000000

08004980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004984:	f7ff fff0 	bl	8004968 <HAL_RCC_GetHCLKFreq>
 8004988:	4602      	mov	r2, r0
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	0a9b      	lsrs	r3, r3, #10
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	4903      	ldr	r1, [pc, #12]	; (80049a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004996:	5ccb      	ldrb	r3, [r1, r3]
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40023800 	.word	0x40023800
 80049a4:	08006464 	.word	0x08006464

080049a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d035      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049d0:	4b67      	ldr	r3, [pc, #412]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049d6:	f7fd fbab 	bl	8002130 <HAL_GetTick>
 80049da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049de:	f7fd fba7 	bl	8002130 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e0ba      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049f0:	4b60      	ldr	r3, [pc, #384]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1f0      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	019a      	lsls	r2, r3, #6
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	071b      	lsls	r3, r3, #28
 8004a08:	495a      	ldr	r1, [pc, #360]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a10:	4b57      	ldr	r3, [pc, #348]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a16:	f7fd fb8b 	bl	8002130 <HAL_GetTick>
 8004a1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a1e:	f7fd fb87 	bl	8002130 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e09a      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a30:	4b50      	ldr	r3, [pc, #320]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8083 	beq.w	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	4b49      	ldr	r3, [pc, #292]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	4a48      	ldr	r2, [pc, #288]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a58:	6413      	str	r3, [r2, #64]	; 0x40
 8004a5a:	4b46      	ldr	r3, [pc, #280]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a66:	4b44      	ldr	r3, [pc, #272]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a43      	ldr	r2, [pc, #268]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a72:	f7fd fb5d 	bl	8002130 <HAL_GetTick>
 8004a76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a7a:	f7fd fb59 	bl	8002130 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e06c      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a8c:	4b3a      	ldr	r3, [pc, #232]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a98:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02f      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d028      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ab6:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004abe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ac0:	4b2e      	ldr	r3, [pc, #184]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ac6:	4b2d      	ldr	r3, [pc, #180]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004acc:	4a29      	ldr	r2, [pc, #164]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ad2:	4b28      	ldr	r3, [pc, #160]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d114      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ade:	f7fd fb27 	bl	8002130 <HAL_GetTick>
 8004ae2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae4:	e00a      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae6:	f7fd fb23 	bl	8002130 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d901      	bls.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e034      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afc:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0ee      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b14:	d10d      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b16:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	4912      	ldr	r1, [pc, #72]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	608b      	str	r3, [r1, #8]
 8004b30:	e005      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	4a0f      	ldr	r2, [pc, #60]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b3c:	6093      	str	r3, [r2, #8]
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4a:	490a      	ldr	r1, [pc, #40]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	7c1a      	ldrb	r2, [r3, #16]
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b62:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	42470068 	.word	0x42470068
 8004b74:	40023800 	.word	0x40023800
 8004b78:	40007000 	.word	0x40007000
 8004b7c:	42470e40 	.word	0x42470e40
 8004b80:	424711e0 	.word	0x424711e0

08004b84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e083      	b.n	8004c9e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	7f5b      	ldrb	r3, [r3, #29]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fd f95a 	bl	8001e60 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	22ca      	movs	r2, #202	; 0xca
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2253      	movs	r2, #83	; 0x53
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fbc0 	bl	8005348 <RTC_EnterInitMode>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	22ff      	movs	r2, #255	; 0xff
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e05e      	b.n	8004c9e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6899      	ldr	r1, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68d2      	ldr	r2, [r2, #12]
 8004c1a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6919      	ldr	r1, [r3, #16]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	041a      	lsls	r2, r3, #16
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10e      	bne.n	8004c6c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fb52 	bl	80052f8 <HAL_RTC_WaitForSynchro>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	22ff      	movs	r2, #255	; 0xff
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2204      	movs	r2, #4
 8004c66:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e018      	b.n	8004c9e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	22ff      	movs	r2, #255	; 0xff
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ca6:	b590      	push	{r4, r7, lr}
 8004ca8:	b087      	sub	sp, #28
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	7f1b      	ldrb	r3, [r3, #28]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RTC_SetTime+0x1c>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e0aa      	b.n	8004e18 <HAL_RTC_SetTime+0x172>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d126      	bne.n	8004d22 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fb57 	bl	80053a0 <RTC_ByteToBcd2>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	785b      	ldrb	r3, [r3, #1]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fb50 	bl	80053a0 <RTC_ByteToBcd2>
 8004d00:	4603      	mov	r3, r0
 8004d02:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d04:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	789b      	ldrb	r3, [r3, #2]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fb48 	bl	80053a0 <RTC_ByteToBcd2>
 8004d10:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004d12:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	78db      	ldrb	r3, [r3, #3]
 8004d1a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e018      	b.n	8004d54 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2200      	movs	r2, #0
 8004d34:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d42:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d48:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	78db      	ldrb	r3, [r3, #3]
 8004d4e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	22ca      	movs	r2, #202	; 0xca
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2253      	movs	r2, #83	; 0x53
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 faef 	bl	8005348 <RTC_EnterInitMode>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	22ff      	movs	r2, #255	; 0xff
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e047      	b.n	8004e18 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d92:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d96:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004da6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6899      	ldr	r1, [r3, #8]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d111      	bne.n	8004e02 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fa8a 	bl	80052f8 <HAL_RTC_WaitForSynchro>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00b      	beq.n	8004e02 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	22ff      	movs	r2, #255	; 0xff
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2204      	movs	r2, #4
 8004df6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e00a      	b.n	8004e18 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	22ff      	movs	r2, #255	; 0xff
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004e16:	2300      	movs	r3, #0
  }
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd90      	pop	{r4, r7, pc}

08004e20 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e52:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d11a      	bne.n	8004ed2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fa9b 	bl	80053dc <RTC_Bcd2ToByte>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	785b      	ldrb	r3, [r3, #1]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fa92 	bl	80053dc <RTC_Bcd2ToByte>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	461a      	mov	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	789b      	ldrb	r3, [r3, #2]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fa89 	bl	80053dc <RTC_Bcd2ToByte>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	461a      	mov	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	7f1b      	ldrb	r3, [r3, #28]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_RTC_SetDate+0x1c>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e094      	b.n	8005022 <HAL_RTC_SetDate+0x146>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2202      	movs	r2, #2
 8004f02:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10e      	bne.n	8004f28 <HAL_RTC_SetDate+0x4c>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	785b      	ldrb	r3, [r3, #1]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	f023 0310 	bic.w	r3, r3, #16
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	330a      	adds	r3, #10
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11c      	bne.n	8004f68 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	78db      	ldrb	r3, [r3, #3]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fa34 	bl	80053a0 <RTC_ByteToBcd2>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fa2d 	bl	80053a0 <RTC_ByteToBcd2>
 8004f46:	4603      	mov	r3, r0
 8004f48:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f4a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	789b      	ldrb	r3, [r3, #2]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fa25 	bl	80053a0 <RTC_ByteToBcd2>
 8004f56:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f58:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e00e      	b.n	8004f86 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	78db      	ldrb	r3, [r3, #3]
 8004f6c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	785b      	ldrb	r3, [r3, #1]
 8004f72:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f74:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004f7a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	22ca      	movs	r2, #202	; 0xca
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2253      	movs	r2, #83	; 0x53
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 f9d6 	bl	8005348 <RTC_EnterInitMode>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	22ff      	movs	r2, #255	; 0xff
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2204      	movs	r2, #4
 8004fae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e033      	b.n	8005022 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004fc4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004fc8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fd8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d111      	bne.n	800500c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f985 	bl	80052f8 <HAL_RTC_WaitForSynchro>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00b      	beq.n	800500c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	22ff      	movs	r2, #255	; 0xff
 8004ffa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2204      	movs	r2, #4
 8005000:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e00a      	b.n	8005022 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	22ff      	movs	r2, #255	; 0xff
 8005012:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005020:	2300      	movs	r3, #0
  }
}
 8005022:	4618      	mov	r0, r3
 8005024:	371c      	adds	r7, #28
 8005026:	46bd      	mov	sp, r7
 8005028:	bd90      	pop	{r4, r7, pc}

0800502a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005044:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005048:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	b2da      	uxtb	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	0a1b      	lsrs	r3, r3, #8
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f003 031f 	and.w	r3, r3, #31
 800505e:	b2da      	uxtb	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800506c:	b2da      	uxtb	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	0b5b      	lsrs	r3, r3, #13
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d11a      	bne.n	80050be <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	78db      	ldrb	r3, [r3, #3]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 f9a5 	bl	80053dc <RTC_Bcd2ToByte>
 8005092:	4603      	mov	r3, r0
 8005094:	461a      	mov	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	785b      	ldrb	r3, [r3, #1]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 f99c 	bl	80053dc <RTC_Bcd2ToByte>
 80050a4:	4603      	mov	r3, r0
 80050a6:	461a      	mov	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	789b      	ldrb	r3, [r3, #2]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 f993 	bl	80053dc <RTC_Bcd2ToByte>
 80050b6:	4603      	mov	r3, r0
 80050b8:	461a      	mov	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80050c8:	b590      	push	{r4, r7, lr}
 80050ca:	b089      	sub	sp, #36	; 0x24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	61fb      	str	r3, [r7, #28]
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	7f1b      	ldrb	r3, [r3, #28]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_RTC_SetAlarm+0x24>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e101      	b.n	80052f0 <HAL_RTC_SetAlarm+0x228>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d137      	bne.n	800516e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	d102      	bne.n	8005112 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2200      	movs	r2, #0
 8005110:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f942 	bl	80053a0 <RTC_ByteToBcd2>
 800511c:	4603      	mov	r3, r0
 800511e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 f93b 	bl	80053a0 <RTC_ByteToBcd2>
 800512a:	4603      	mov	r3, r0
 800512c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800512e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	789b      	ldrb	r3, [r3, #2]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 f933 	bl	80053a0 <RTC_ByteToBcd2>
 800513a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800513c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	78db      	ldrb	r3, [r3, #3]
 8005144:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005146:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 f925 	bl	80053a0 <RTC_ByteToBcd2>
 8005156:	4603      	mov	r3, r0
 8005158:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800515a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005162:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005168:	4313      	orrs	r3, r2
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	e023      	b.n	80051b6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d102      	bne.n	8005182 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2200      	movs	r2, #0
 8005180:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	785b      	ldrb	r3, [r3, #1]
 800518c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800518e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005194:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	78db      	ldrb	r3, [r3, #3]
 800519a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800519c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80051a6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80051ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	22ca      	movs	r2, #202	; 0xca
 80051c8:	625a      	str	r2, [r3, #36]	; 0x24
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2253      	movs	r2, #83	; 0x53
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051da:	d13f      	bne.n	800525c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051ea:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051fa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051fc:	f7fc ff98 	bl	8002130 <HAL_GetTick>
 8005200:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005202:	e013      	b.n	800522c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005204:	f7fc ff94 	bl	8002130 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005212:	d90b      	bls.n	800522c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	22ff      	movs	r2, #255	; 0xff
 800521a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2203      	movs	r2, #3
 8005220:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e061      	b.n	80052f0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0e4      	beq.n	8005204 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005258:	609a      	str	r2, [r3, #8]
 800525a:	e03e      	b.n	80052da <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800526a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800527a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800527c:	f7fc ff58 	bl	8002130 <HAL_GetTick>
 8005280:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005282:	e013      	b.n	80052ac <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005284:	f7fc ff54 	bl	8002130 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005292:	d90b      	bls.n	80052ac <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	22ff      	movs	r2, #255	; 0xff
 800529a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2203      	movs	r2, #3
 80052a0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e021      	b.n	80052f0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0e4      	beq.n	8005284 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	22ff      	movs	r2, #255	; 0xff
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3724      	adds	r7, #36	; 0x24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd90      	pop	{r4, r7, pc}

080052f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005312:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005314:	f7fc ff0c 	bl	8002130 <HAL_GetTick>
 8005318:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800531a:	e009      	b.n	8005330 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800531c:	f7fc ff08 	bl	8002130 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800532a:	d901      	bls.n	8005330 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e007      	b.n	8005340 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0ee      	beq.n	800531c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d119      	bne.n	8005396 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f04f 32ff 	mov.w	r2, #4294967295
 800536a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800536c:	f7fc fee0 	bl	8002130 <HAL_GetTick>
 8005370:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005372:	e009      	b.n	8005388 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005374:	f7fc fedc 	bl	8002130 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005382:	d901      	bls.n	8005388 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e007      	b.n	8005398 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0ee      	beq.n	8005374 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80053ae:	e005      	b.n	80053bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3301      	adds	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80053b6:	79fb      	ldrb	r3, [r7, #7]
 80053b8:	3b0a      	subs	r3, #10
 80053ba:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	2b09      	cmp	r3, #9
 80053c0:	d8f6      	bhi.n	80053b0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	b2db      	uxtb	r3, r3
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	091b      	lsrs	r3, r3, #4
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	b2da      	uxtb	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	4413      	add	r3, r2
 800540a:	b2db      	uxtb	r3, r3
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e041      	b.n	80054ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc fd24 	bl	8001e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3304      	adds	r3, #4
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f000 f950 	bl	80056fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d001      	beq.n	80054d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e03c      	b.n	800554a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1e      	ldr	r2, [pc, #120]	; (8005558 <HAL_TIM_Base_Start+0xa0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d018      	beq.n	8005514 <HAL_TIM_Base_Start+0x5c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ea:	d013      	beq.n	8005514 <HAL_TIM_Base_Start+0x5c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1a      	ldr	r2, [pc, #104]	; (800555c <HAL_TIM_Base_Start+0xa4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00e      	beq.n	8005514 <HAL_TIM_Base_Start+0x5c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a19      	ldr	r2, [pc, #100]	; (8005560 <HAL_TIM_Base_Start+0xa8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d009      	beq.n	8005514 <HAL_TIM_Base_Start+0x5c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a17      	ldr	r2, [pc, #92]	; (8005564 <HAL_TIM_Base_Start+0xac>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <HAL_TIM_Base_Start+0x5c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a16      	ldr	r2, [pc, #88]	; (8005568 <HAL_TIM_Base_Start+0xb0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d111      	bne.n	8005538 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b06      	cmp	r3, #6
 8005524:	d010      	beq.n	8005548 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005536:	e007      	b.n	8005548 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40010000 	.word	0x40010000
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40014000 	.word	0x40014000

0800556c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_TIM_ConfigClockSource+0x1c>
 8005584:	2302      	movs	r3, #2
 8005586:	e0b4      	b.n	80056f2 <HAL_TIM_ConfigClockSource+0x186>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c0:	d03e      	beq.n	8005640 <HAL_TIM_ConfigClockSource+0xd4>
 80055c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c6:	f200 8087 	bhi.w	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 80055ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ce:	f000 8086 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x172>
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d6:	d87f      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b70      	cmp	r3, #112	; 0x70
 80055da:	d01a      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0xa6>
 80055dc:	2b70      	cmp	r3, #112	; 0x70
 80055de:	d87b      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 80055e0:	2b60      	cmp	r3, #96	; 0x60
 80055e2:	d050      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x11a>
 80055e4:	2b60      	cmp	r3, #96	; 0x60
 80055e6:	d877      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 80055e8:	2b50      	cmp	r3, #80	; 0x50
 80055ea:	d03c      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0xfa>
 80055ec:	2b50      	cmp	r3, #80	; 0x50
 80055ee:	d873      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	d058      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x13a>
 80055f4:	2b40      	cmp	r3, #64	; 0x40
 80055f6:	d86f      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f8:	2b30      	cmp	r3, #48	; 0x30
 80055fa:	d064      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x15a>
 80055fc:	2b30      	cmp	r3, #48	; 0x30
 80055fe:	d86b      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005600:	2b20      	cmp	r3, #32
 8005602:	d060      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005604:	2b20      	cmp	r3, #32
 8005606:	d867      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b00      	cmp	r3, #0
 800560a:	d05c      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x15a>
 800560c:	2b10      	cmp	r3, #16
 800560e:	d05a      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005610:	e062      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6899      	ldr	r1, [r3, #8]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f000 f965 	bl	80058f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005634:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	609a      	str	r2, [r3, #8]
      break;
 800563e:	e04f      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	6899      	ldr	r1, [r3, #8]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f000 f94e 	bl	80058f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005662:	609a      	str	r2, [r3, #8]
      break;
 8005664:	e03c      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6859      	ldr	r1, [r3, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	461a      	mov	r2, r3
 8005674:	f000 f8c2 	bl	80057fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2150      	movs	r1, #80	; 0x50
 800567e:	4618      	mov	r0, r3
 8005680:	f000 f91b 	bl	80058ba <TIM_ITRx_SetConfig>
      break;
 8005684:	e02c      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6859      	ldr	r1, [r3, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	461a      	mov	r2, r3
 8005694:	f000 f8e1 	bl	800585a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2160      	movs	r1, #96	; 0x60
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f90b 	bl	80058ba <TIM_ITRx_SetConfig>
      break;
 80056a4:	e01c      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6859      	ldr	r1, [r3, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f000 f8a2 	bl	80057fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2140      	movs	r1, #64	; 0x40
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f8fb 	bl	80058ba <TIM_ITRx_SetConfig>
      break;
 80056c4:	e00c      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4619      	mov	r1, r3
 80056d0:	4610      	mov	r0, r2
 80056d2:	f000 f8f2 	bl	80058ba <TIM_ITRx_SetConfig>
      break;
 80056d6:	e003      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
      break;
 80056dc:	e000      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a34      	ldr	r2, [pc, #208]	; (80057e0 <TIM_Base_SetConfig+0xe4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00f      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571a:	d00b      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a31      	ldr	r2, [pc, #196]	; (80057e4 <TIM_Base_SetConfig+0xe8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a30      	ldr	r2, [pc, #192]	; (80057e8 <TIM_Base_SetConfig+0xec>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a2f      	ldr	r2, [pc, #188]	; (80057ec <TIM_Base_SetConfig+0xf0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a25      	ldr	r2, [pc, #148]	; (80057e0 <TIM_Base_SetConfig+0xe4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01b      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005754:	d017      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a22      	ldr	r2, [pc, #136]	; (80057e4 <TIM_Base_SetConfig+0xe8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a21      	ldr	r2, [pc, #132]	; (80057e8 <TIM_Base_SetConfig+0xec>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00f      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a20      	ldr	r2, [pc, #128]	; (80057ec <TIM_Base_SetConfig+0xf0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00b      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a1f      	ldr	r2, [pc, #124]	; (80057f0 <TIM_Base_SetConfig+0xf4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d007      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a1e      	ldr	r2, [pc, #120]	; (80057f4 <TIM_Base_SetConfig+0xf8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <TIM_Base_SetConfig+0xfc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d108      	bne.n	8005798 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a08      	ldr	r2, [pc, #32]	; (80057e0 <TIM_Base_SetConfig+0xe4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d103      	bne.n	80057cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	615a      	str	r2, [r3, #20]
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40010000 	.word	0x40010000
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40014000 	.word	0x40014000
 80057f4:	40014400 	.word	0x40014400
 80057f8:	40014800 	.word	0x40014800

080057fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f023 0201 	bic.w	r2, r3, #1
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f023 030a 	bic.w	r3, r3, #10
 8005838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800585a:	b480      	push	{r7}
 800585c:	b087      	sub	sp, #28
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f023 0210 	bic.w	r2, r3, #16
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	031b      	lsls	r3, r3, #12
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005896:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b085      	sub	sp, #20
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f043 0307 	orr.w	r3, r3, #7
 80058dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	609a      	str	r2, [r3, #8]
}
 80058e4:	bf00      	nop
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800590a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	021a      	lsls	r2, r3, #8
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	431a      	orrs	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4313      	orrs	r3, r2
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	609a      	str	r2, [r3, #8]
}
 8005924:	bf00      	nop
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005944:	2302      	movs	r3, #2
 8005946:	e050      	b.n	80059ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d018      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005994:	d013      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00e      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d009      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d004      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a13      	ldr	r2, [pc, #76]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d10c      	bne.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40014000 	.word	0x40014000

08005a0c <__errno>:
 8005a0c:	4b01      	ldr	r3, [pc, #4]	; (8005a14 <__errno+0x8>)
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	2000000c 	.word	0x2000000c

08005a18 <__libc_init_array>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4d0d      	ldr	r5, [pc, #52]	; (8005a50 <__libc_init_array+0x38>)
 8005a1c:	4c0d      	ldr	r4, [pc, #52]	; (8005a54 <__libc_init_array+0x3c>)
 8005a1e:	1b64      	subs	r4, r4, r5
 8005a20:	10a4      	asrs	r4, r4, #2
 8005a22:	2600      	movs	r6, #0
 8005a24:	42a6      	cmp	r6, r4
 8005a26:	d109      	bne.n	8005a3c <__libc_init_array+0x24>
 8005a28:	4d0b      	ldr	r5, [pc, #44]	; (8005a58 <__libc_init_array+0x40>)
 8005a2a:	4c0c      	ldr	r4, [pc, #48]	; (8005a5c <__libc_init_array+0x44>)
 8005a2c:	f000 fc4e 	bl	80062cc <_init>
 8005a30:	1b64      	subs	r4, r4, r5
 8005a32:	10a4      	asrs	r4, r4, #2
 8005a34:	2600      	movs	r6, #0
 8005a36:	42a6      	cmp	r6, r4
 8005a38:	d105      	bne.n	8005a46 <__libc_init_array+0x2e>
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
 8005a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a40:	4798      	blx	r3
 8005a42:	3601      	adds	r6, #1
 8005a44:	e7ee      	b.n	8005a24 <__libc_init_array+0xc>
 8005a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a4a:	4798      	blx	r3
 8005a4c:	3601      	adds	r6, #1
 8005a4e:	e7f2      	b.n	8005a36 <__libc_init_array+0x1e>
 8005a50:	080064b0 	.word	0x080064b0
 8005a54:	080064b0 	.word	0x080064b0
 8005a58:	080064b0 	.word	0x080064b0
 8005a5c:	080064b4 	.word	0x080064b4

08005a60 <memset>:
 8005a60:	4402      	add	r2, r0
 8005a62:	4603      	mov	r3, r0
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d100      	bne.n	8005a6a <memset+0xa>
 8005a68:	4770      	bx	lr
 8005a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6e:	e7f9      	b.n	8005a64 <memset+0x4>

08005a70 <siprintf>:
 8005a70:	b40e      	push	{r1, r2, r3}
 8005a72:	b500      	push	{lr}
 8005a74:	b09c      	sub	sp, #112	; 0x70
 8005a76:	ab1d      	add	r3, sp, #116	; 0x74
 8005a78:	9002      	str	r0, [sp, #8]
 8005a7a:	9006      	str	r0, [sp, #24]
 8005a7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a80:	4809      	ldr	r0, [pc, #36]	; (8005aa8 <siprintf+0x38>)
 8005a82:	9107      	str	r1, [sp, #28]
 8005a84:	9104      	str	r1, [sp, #16]
 8005a86:	4909      	ldr	r1, [pc, #36]	; (8005aac <siprintf+0x3c>)
 8005a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a8c:	9105      	str	r1, [sp, #20]
 8005a8e:	6800      	ldr	r0, [r0, #0]
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	a902      	add	r1, sp, #8
 8005a94:	f000 f868 	bl	8005b68 <_svfiprintf_r>
 8005a98:	9b02      	ldr	r3, [sp, #8]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	b01c      	add	sp, #112	; 0x70
 8005aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa4:	b003      	add	sp, #12
 8005aa6:	4770      	bx	lr
 8005aa8:	2000000c 	.word	0x2000000c
 8005aac:	ffff0208 	.word	0xffff0208

08005ab0 <__ssputs_r>:
 8005ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	688e      	ldr	r6, [r1, #8]
 8005ab6:	429e      	cmp	r6, r3
 8005ab8:	4682      	mov	sl, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	4690      	mov	r8, r2
 8005abe:	461f      	mov	r7, r3
 8005ac0:	d838      	bhi.n	8005b34 <__ssputs_r+0x84>
 8005ac2:	898a      	ldrh	r2, [r1, #12]
 8005ac4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ac8:	d032      	beq.n	8005b30 <__ssputs_r+0x80>
 8005aca:	6825      	ldr	r5, [r4, #0]
 8005acc:	6909      	ldr	r1, [r1, #16]
 8005ace:	eba5 0901 	sub.w	r9, r5, r1
 8005ad2:	6965      	ldr	r5, [r4, #20]
 8005ad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ad8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005adc:	3301      	adds	r3, #1
 8005ade:	444b      	add	r3, r9
 8005ae0:	106d      	asrs	r5, r5, #1
 8005ae2:	429d      	cmp	r5, r3
 8005ae4:	bf38      	it	cc
 8005ae6:	461d      	movcc	r5, r3
 8005ae8:	0553      	lsls	r3, r2, #21
 8005aea:	d531      	bpl.n	8005b50 <__ssputs_r+0xa0>
 8005aec:	4629      	mov	r1, r5
 8005aee:	f000 fb47 	bl	8006180 <_malloc_r>
 8005af2:	4606      	mov	r6, r0
 8005af4:	b950      	cbnz	r0, 8005b0c <__ssputs_r+0x5c>
 8005af6:	230c      	movs	r3, #12
 8005af8:	f8ca 3000 	str.w	r3, [sl]
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b02:	81a3      	strh	r3, [r4, #12]
 8005b04:	f04f 30ff 	mov.w	r0, #4294967295
 8005b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b0c:	6921      	ldr	r1, [r4, #16]
 8005b0e:	464a      	mov	r2, r9
 8005b10:	f000 fabe 	bl	8006090 <memcpy>
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	6126      	str	r6, [r4, #16]
 8005b22:	6165      	str	r5, [r4, #20]
 8005b24:	444e      	add	r6, r9
 8005b26:	eba5 0509 	sub.w	r5, r5, r9
 8005b2a:	6026      	str	r6, [r4, #0]
 8005b2c:	60a5      	str	r5, [r4, #8]
 8005b2e:	463e      	mov	r6, r7
 8005b30:	42be      	cmp	r6, r7
 8005b32:	d900      	bls.n	8005b36 <__ssputs_r+0x86>
 8005b34:	463e      	mov	r6, r7
 8005b36:	4632      	mov	r2, r6
 8005b38:	6820      	ldr	r0, [r4, #0]
 8005b3a:	4641      	mov	r1, r8
 8005b3c:	f000 fab6 	bl	80060ac <memmove>
 8005b40:	68a3      	ldr	r3, [r4, #8]
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	1b9b      	subs	r3, r3, r6
 8005b46:	4432      	add	r2, r6
 8005b48:	60a3      	str	r3, [r4, #8]
 8005b4a:	6022      	str	r2, [r4, #0]
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	e7db      	b.n	8005b08 <__ssputs_r+0x58>
 8005b50:	462a      	mov	r2, r5
 8005b52:	f000 fb6f 	bl	8006234 <_realloc_r>
 8005b56:	4606      	mov	r6, r0
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d1e1      	bne.n	8005b20 <__ssputs_r+0x70>
 8005b5c:	6921      	ldr	r1, [r4, #16]
 8005b5e:	4650      	mov	r0, sl
 8005b60:	f000 fabe 	bl	80060e0 <_free_r>
 8005b64:	e7c7      	b.n	8005af6 <__ssputs_r+0x46>
	...

08005b68 <_svfiprintf_r>:
 8005b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6c:	4698      	mov	r8, r3
 8005b6e:	898b      	ldrh	r3, [r1, #12]
 8005b70:	061b      	lsls	r3, r3, #24
 8005b72:	b09d      	sub	sp, #116	; 0x74
 8005b74:	4607      	mov	r7, r0
 8005b76:	460d      	mov	r5, r1
 8005b78:	4614      	mov	r4, r2
 8005b7a:	d50e      	bpl.n	8005b9a <_svfiprintf_r+0x32>
 8005b7c:	690b      	ldr	r3, [r1, #16]
 8005b7e:	b963      	cbnz	r3, 8005b9a <_svfiprintf_r+0x32>
 8005b80:	2140      	movs	r1, #64	; 0x40
 8005b82:	f000 fafd 	bl	8006180 <_malloc_r>
 8005b86:	6028      	str	r0, [r5, #0]
 8005b88:	6128      	str	r0, [r5, #16]
 8005b8a:	b920      	cbnz	r0, 8005b96 <_svfiprintf_r+0x2e>
 8005b8c:	230c      	movs	r3, #12
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	e0d1      	b.n	8005d3a <_svfiprintf_r+0x1d2>
 8005b96:	2340      	movs	r3, #64	; 0x40
 8005b98:	616b      	str	r3, [r5, #20]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9e:	2320      	movs	r3, #32
 8005ba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ba8:	2330      	movs	r3, #48	; 0x30
 8005baa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d54 <_svfiprintf_r+0x1ec>
 8005bae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bb2:	f04f 0901 	mov.w	r9, #1
 8005bb6:	4623      	mov	r3, r4
 8005bb8:	469a      	mov	sl, r3
 8005bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bbe:	b10a      	cbz	r2, 8005bc4 <_svfiprintf_r+0x5c>
 8005bc0:	2a25      	cmp	r2, #37	; 0x25
 8005bc2:	d1f9      	bne.n	8005bb8 <_svfiprintf_r+0x50>
 8005bc4:	ebba 0b04 	subs.w	fp, sl, r4
 8005bc8:	d00b      	beq.n	8005be2 <_svfiprintf_r+0x7a>
 8005bca:	465b      	mov	r3, fp
 8005bcc:	4622      	mov	r2, r4
 8005bce:	4629      	mov	r1, r5
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	f7ff ff6d 	bl	8005ab0 <__ssputs_r>
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	f000 80aa 	beq.w	8005d30 <_svfiprintf_r+0x1c8>
 8005bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bde:	445a      	add	r2, fp
 8005be0:	9209      	str	r2, [sp, #36]	; 0x24
 8005be2:	f89a 3000 	ldrb.w	r3, [sl]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 80a2 	beq.w	8005d30 <_svfiprintf_r+0x1c8>
 8005bec:	2300      	movs	r3, #0
 8005bee:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bf6:	f10a 0a01 	add.w	sl, sl, #1
 8005bfa:	9304      	str	r3, [sp, #16]
 8005bfc:	9307      	str	r3, [sp, #28]
 8005bfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c02:	931a      	str	r3, [sp, #104]	; 0x68
 8005c04:	4654      	mov	r4, sl
 8005c06:	2205      	movs	r2, #5
 8005c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0c:	4851      	ldr	r0, [pc, #324]	; (8005d54 <_svfiprintf_r+0x1ec>)
 8005c0e:	f7fa fae7 	bl	80001e0 <memchr>
 8005c12:	9a04      	ldr	r2, [sp, #16]
 8005c14:	b9d8      	cbnz	r0, 8005c4e <_svfiprintf_r+0xe6>
 8005c16:	06d0      	lsls	r0, r2, #27
 8005c18:	bf44      	itt	mi
 8005c1a:	2320      	movmi	r3, #32
 8005c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c20:	0711      	lsls	r1, r2, #28
 8005c22:	bf44      	itt	mi
 8005c24:	232b      	movmi	r3, #43	; 0x2b
 8005c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c30:	d015      	beq.n	8005c5e <_svfiprintf_r+0xf6>
 8005c32:	9a07      	ldr	r2, [sp, #28]
 8005c34:	4654      	mov	r4, sl
 8005c36:	2000      	movs	r0, #0
 8005c38:	f04f 0c0a 	mov.w	ip, #10
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c42:	3b30      	subs	r3, #48	; 0x30
 8005c44:	2b09      	cmp	r3, #9
 8005c46:	d94e      	bls.n	8005ce6 <_svfiprintf_r+0x17e>
 8005c48:	b1b0      	cbz	r0, 8005c78 <_svfiprintf_r+0x110>
 8005c4a:	9207      	str	r2, [sp, #28]
 8005c4c:	e014      	b.n	8005c78 <_svfiprintf_r+0x110>
 8005c4e:	eba0 0308 	sub.w	r3, r0, r8
 8005c52:	fa09 f303 	lsl.w	r3, r9, r3
 8005c56:	4313      	orrs	r3, r2
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	46a2      	mov	sl, r4
 8005c5c:	e7d2      	b.n	8005c04 <_svfiprintf_r+0x9c>
 8005c5e:	9b03      	ldr	r3, [sp, #12]
 8005c60:	1d19      	adds	r1, r3, #4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	9103      	str	r1, [sp, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	bfbb      	ittet	lt
 8005c6a:	425b      	neglt	r3, r3
 8005c6c:	f042 0202 	orrlt.w	r2, r2, #2
 8005c70:	9307      	strge	r3, [sp, #28]
 8005c72:	9307      	strlt	r3, [sp, #28]
 8005c74:	bfb8      	it	lt
 8005c76:	9204      	strlt	r2, [sp, #16]
 8005c78:	7823      	ldrb	r3, [r4, #0]
 8005c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005c7c:	d10c      	bne.n	8005c98 <_svfiprintf_r+0x130>
 8005c7e:	7863      	ldrb	r3, [r4, #1]
 8005c80:	2b2a      	cmp	r3, #42	; 0x2a
 8005c82:	d135      	bne.n	8005cf0 <_svfiprintf_r+0x188>
 8005c84:	9b03      	ldr	r3, [sp, #12]
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	9203      	str	r2, [sp, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	bfb8      	it	lt
 8005c90:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c94:	3402      	adds	r4, #2
 8005c96:	9305      	str	r3, [sp, #20]
 8005c98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d64 <_svfiprintf_r+0x1fc>
 8005c9c:	7821      	ldrb	r1, [r4, #0]
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	f7fa fa9d 	bl	80001e0 <memchr>
 8005ca6:	b140      	cbz	r0, 8005cba <_svfiprintf_r+0x152>
 8005ca8:	2340      	movs	r3, #64	; 0x40
 8005caa:	eba0 000a 	sub.w	r0, r0, sl
 8005cae:	fa03 f000 	lsl.w	r0, r3, r0
 8005cb2:	9b04      	ldr	r3, [sp, #16]
 8005cb4:	4303      	orrs	r3, r0
 8005cb6:	3401      	adds	r4, #1
 8005cb8:	9304      	str	r3, [sp, #16]
 8005cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cbe:	4826      	ldr	r0, [pc, #152]	; (8005d58 <_svfiprintf_r+0x1f0>)
 8005cc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cc4:	2206      	movs	r2, #6
 8005cc6:	f7fa fa8b 	bl	80001e0 <memchr>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d038      	beq.n	8005d40 <_svfiprintf_r+0x1d8>
 8005cce:	4b23      	ldr	r3, [pc, #140]	; (8005d5c <_svfiprintf_r+0x1f4>)
 8005cd0:	bb1b      	cbnz	r3, 8005d1a <_svfiprintf_r+0x1b2>
 8005cd2:	9b03      	ldr	r3, [sp, #12]
 8005cd4:	3307      	adds	r3, #7
 8005cd6:	f023 0307 	bic.w	r3, r3, #7
 8005cda:	3308      	adds	r3, #8
 8005cdc:	9303      	str	r3, [sp, #12]
 8005cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce0:	4433      	add	r3, r6
 8005ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce4:	e767      	b.n	8005bb6 <_svfiprintf_r+0x4e>
 8005ce6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cea:	460c      	mov	r4, r1
 8005cec:	2001      	movs	r0, #1
 8005cee:	e7a5      	b.n	8005c3c <_svfiprintf_r+0xd4>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	3401      	adds	r4, #1
 8005cf4:	9305      	str	r3, [sp, #20]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	f04f 0c0a 	mov.w	ip, #10
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d02:	3a30      	subs	r2, #48	; 0x30
 8005d04:	2a09      	cmp	r2, #9
 8005d06:	d903      	bls.n	8005d10 <_svfiprintf_r+0x1a8>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0c5      	beq.n	8005c98 <_svfiprintf_r+0x130>
 8005d0c:	9105      	str	r1, [sp, #20]
 8005d0e:	e7c3      	b.n	8005c98 <_svfiprintf_r+0x130>
 8005d10:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d14:	4604      	mov	r4, r0
 8005d16:	2301      	movs	r3, #1
 8005d18:	e7f0      	b.n	8005cfc <_svfiprintf_r+0x194>
 8005d1a:	ab03      	add	r3, sp, #12
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	462a      	mov	r2, r5
 8005d20:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <_svfiprintf_r+0x1f8>)
 8005d22:	a904      	add	r1, sp, #16
 8005d24:	4638      	mov	r0, r7
 8005d26:	f3af 8000 	nop.w
 8005d2a:	1c42      	adds	r2, r0, #1
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	d1d6      	bne.n	8005cde <_svfiprintf_r+0x176>
 8005d30:	89ab      	ldrh	r3, [r5, #12]
 8005d32:	065b      	lsls	r3, r3, #25
 8005d34:	f53f af2c 	bmi.w	8005b90 <_svfiprintf_r+0x28>
 8005d38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d3a:	b01d      	add	sp, #116	; 0x74
 8005d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d40:	ab03      	add	r3, sp, #12
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	462a      	mov	r2, r5
 8005d46:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <_svfiprintf_r+0x1f8>)
 8005d48:	a904      	add	r1, sp, #16
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	f000 f87a 	bl	8005e44 <_printf_i>
 8005d50:	e7eb      	b.n	8005d2a <_svfiprintf_r+0x1c2>
 8005d52:	bf00      	nop
 8005d54:	08006474 	.word	0x08006474
 8005d58:	0800647e 	.word	0x0800647e
 8005d5c:	00000000 	.word	0x00000000
 8005d60:	08005ab1 	.word	0x08005ab1
 8005d64:	0800647a 	.word	0x0800647a

08005d68 <_printf_common>:
 8005d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6c:	4616      	mov	r6, r2
 8005d6e:	4699      	mov	r9, r3
 8005d70:	688a      	ldr	r2, [r1, #8]
 8005d72:	690b      	ldr	r3, [r1, #16]
 8005d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	bfb8      	it	lt
 8005d7c:	4613      	movlt	r3, r2
 8005d7e:	6033      	str	r3, [r6, #0]
 8005d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d84:	4607      	mov	r7, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	b10a      	cbz	r2, 8005d8e <_printf_common+0x26>
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	6033      	str	r3, [r6, #0]
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	0699      	lsls	r1, r3, #26
 8005d92:	bf42      	ittt	mi
 8005d94:	6833      	ldrmi	r3, [r6, #0]
 8005d96:	3302      	addmi	r3, #2
 8005d98:	6033      	strmi	r3, [r6, #0]
 8005d9a:	6825      	ldr	r5, [r4, #0]
 8005d9c:	f015 0506 	ands.w	r5, r5, #6
 8005da0:	d106      	bne.n	8005db0 <_printf_common+0x48>
 8005da2:	f104 0a19 	add.w	sl, r4, #25
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	6832      	ldr	r2, [r6, #0]
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dc26      	bgt.n	8005dfe <_printf_common+0x96>
 8005db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005db4:	1e13      	subs	r3, r2, #0
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	bf18      	it	ne
 8005dba:	2301      	movne	r3, #1
 8005dbc:	0692      	lsls	r2, r2, #26
 8005dbe:	d42b      	bmi.n	8005e18 <_printf_common+0xb0>
 8005dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	47c0      	blx	r8
 8005dca:	3001      	adds	r0, #1
 8005dcc:	d01e      	beq.n	8005e0c <_printf_common+0xa4>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	68e5      	ldr	r5, [r4, #12]
 8005dd2:	6832      	ldr	r2, [r6, #0]
 8005dd4:	f003 0306 	and.w	r3, r3, #6
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	bf08      	it	eq
 8005ddc:	1aad      	subeq	r5, r5, r2
 8005dde:	68a3      	ldr	r3, [r4, #8]
 8005de0:	6922      	ldr	r2, [r4, #16]
 8005de2:	bf0c      	ite	eq
 8005de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de8:	2500      	movne	r5, #0
 8005dea:	4293      	cmp	r3, r2
 8005dec:	bfc4      	itt	gt
 8005dee:	1a9b      	subgt	r3, r3, r2
 8005df0:	18ed      	addgt	r5, r5, r3
 8005df2:	2600      	movs	r6, #0
 8005df4:	341a      	adds	r4, #26
 8005df6:	42b5      	cmp	r5, r6
 8005df8:	d11a      	bne.n	8005e30 <_printf_common+0xc8>
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	e008      	b.n	8005e10 <_printf_common+0xa8>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4652      	mov	r2, sl
 8005e02:	4649      	mov	r1, r9
 8005e04:	4638      	mov	r0, r7
 8005e06:	47c0      	blx	r8
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d103      	bne.n	8005e14 <_printf_common+0xac>
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e14:	3501      	adds	r5, #1
 8005e16:	e7c6      	b.n	8005da6 <_printf_common+0x3e>
 8005e18:	18e1      	adds	r1, r4, r3
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	2030      	movs	r0, #48	; 0x30
 8005e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e22:	4422      	add	r2, r4
 8005e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e2c:	3302      	adds	r3, #2
 8005e2e:	e7c7      	b.n	8005dc0 <_printf_common+0x58>
 8005e30:	2301      	movs	r3, #1
 8005e32:	4622      	mov	r2, r4
 8005e34:	4649      	mov	r1, r9
 8005e36:	4638      	mov	r0, r7
 8005e38:	47c0      	blx	r8
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d0e6      	beq.n	8005e0c <_printf_common+0xa4>
 8005e3e:	3601      	adds	r6, #1
 8005e40:	e7d9      	b.n	8005df6 <_printf_common+0x8e>
	...

08005e44 <_printf_i>:
 8005e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	460c      	mov	r4, r1
 8005e4a:	4691      	mov	r9, r2
 8005e4c:	7e27      	ldrb	r7, [r4, #24]
 8005e4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e50:	2f78      	cmp	r7, #120	; 0x78
 8005e52:	4680      	mov	r8, r0
 8005e54:	469a      	mov	sl, r3
 8005e56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e5a:	d807      	bhi.n	8005e6c <_printf_i+0x28>
 8005e5c:	2f62      	cmp	r7, #98	; 0x62
 8005e5e:	d80a      	bhi.n	8005e76 <_printf_i+0x32>
 8005e60:	2f00      	cmp	r7, #0
 8005e62:	f000 80d8 	beq.w	8006016 <_printf_i+0x1d2>
 8005e66:	2f58      	cmp	r7, #88	; 0x58
 8005e68:	f000 80a3 	beq.w	8005fb2 <_printf_i+0x16e>
 8005e6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e74:	e03a      	b.n	8005eec <_printf_i+0xa8>
 8005e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e7a:	2b15      	cmp	r3, #21
 8005e7c:	d8f6      	bhi.n	8005e6c <_printf_i+0x28>
 8005e7e:	a001      	add	r0, pc, #4	; (adr r0, 8005e84 <_printf_i+0x40>)
 8005e80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e84:	08005edd 	.word	0x08005edd
 8005e88:	08005ef1 	.word	0x08005ef1
 8005e8c:	08005e6d 	.word	0x08005e6d
 8005e90:	08005e6d 	.word	0x08005e6d
 8005e94:	08005e6d 	.word	0x08005e6d
 8005e98:	08005e6d 	.word	0x08005e6d
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08005e6d 	.word	0x08005e6d
 8005ea4:	08005e6d 	.word	0x08005e6d
 8005ea8:	08005e6d 	.word	0x08005e6d
 8005eac:	08005e6d 	.word	0x08005e6d
 8005eb0:	08005ffd 	.word	0x08005ffd
 8005eb4:	08005f21 	.word	0x08005f21
 8005eb8:	08005fdf 	.word	0x08005fdf
 8005ebc:	08005e6d 	.word	0x08005e6d
 8005ec0:	08005e6d 	.word	0x08005e6d
 8005ec4:	0800601f 	.word	0x0800601f
 8005ec8:	08005e6d 	.word	0x08005e6d
 8005ecc:	08005f21 	.word	0x08005f21
 8005ed0:	08005e6d 	.word	0x08005e6d
 8005ed4:	08005e6d 	.word	0x08005e6d
 8005ed8:	08005fe7 	.word	0x08005fe7
 8005edc:	680b      	ldr	r3, [r1, #0]
 8005ede:	1d1a      	adds	r2, r3, #4
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	600a      	str	r2, [r1, #0]
 8005ee4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0a3      	b.n	8006038 <_printf_i+0x1f4>
 8005ef0:	6825      	ldr	r5, [r4, #0]
 8005ef2:	6808      	ldr	r0, [r1, #0]
 8005ef4:	062e      	lsls	r6, r5, #24
 8005ef6:	f100 0304 	add.w	r3, r0, #4
 8005efa:	d50a      	bpl.n	8005f12 <_printf_i+0xce>
 8005efc:	6805      	ldr	r5, [r0, #0]
 8005efe:	600b      	str	r3, [r1, #0]
 8005f00:	2d00      	cmp	r5, #0
 8005f02:	da03      	bge.n	8005f0c <_printf_i+0xc8>
 8005f04:	232d      	movs	r3, #45	; 0x2d
 8005f06:	426d      	negs	r5, r5
 8005f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f0c:	485e      	ldr	r0, [pc, #376]	; (8006088 <_printf_i+0x244>)
 8005f0e:	230a      	movs	r3, #10
 8005f10:	e019      	b.n	8005f46 <_printf_i+0x102>
 8005f12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f16:	6805      	ldr	r5, [r0, #0]
 8005f18:	600b      	str	r3, [r1, #0]
 8005f1a:	bf18      	it	ne
 8005f1c:	b22d      	sxthne	r5, r5
 8005f1e:	e7ef      	b.n	8005f00 <_printf_i+0xbc>
 8005f20:	680b      	ldr	r3, [r1, #0]
 8005f22:	6825      	ldr	r5, [r4, #0]
 8005f24:	1d18      	adds	r0, r3, #4
 8005f26:	6008      	str	r0, [r1, #0]
 8005f28:	0628      	lsls	r0, r5, #24
 8005f2a:	d501      	bpl.n	8005f30 <_printf_i+0xec>
 8005f2c:	681d      	ldr	r5, [r3, #0]
 8005f2e:	e002      	b.n	8005f36 <_printf_i+0xf2>
 8005f30:	0669      	lsls	r1, r5, #25
 8005f32:	d5fb      	bpl.n	8005f2c <_printf_i+0xe8>
 8005f34:	881d      	ldrh	r5, [r3, #0]
 8005f36:	4854      	ldr	r0, [pc, #336]	; (8006088 <_printf_i+0x244>)
 8005f38:	2f6f      	cmp	r7, #111	; 0x6f
 8005f3a:	bf0c      	ite	eq
 8005f3c:	2308      	moveq	r3, #8
 8005f3e:	230a      	movne	r3, #10
 8005f40:	2100      	movs	r1, #0
 8005f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f46:	6866      	ldr	r6, [r4, #4]
 8005f48:	60a6      	str	r6, [r4, #8]
 8005f4a:	2e00      	cmp	r6, #0
 8005f4c:	bfa2      	ittt	ge
 8005f4e:	6821      	ldrge	r1, [r4, #0]
 8005f50:	f021 0104 	bicge.w	r1, r1, #4
 8005f54:	6021      	strge	r1, [r4, #0]
 8005f56:	b90d      	cbnz	r5, 8005f5c <_printf_i+0x118>
 8005f58:	2e00      	cmp	r6, #0
 8005f5a:	d04d      	beq.n	8005ff8 <_printf_i+0x1b4>
 8005f5c:	4616      	mov	r6, r2
 8005f5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f62:	fb03 5711 	mls	r7, r3, r1, r5
 8005f66:	5dc7      	ldrb	r7, [r0, r7]
 8005f68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f6c:	462f      	mov	r7, r5
 8005f6e:	42bb      	cmp	r3, r7
 8005f70:	460d      	mov	r5, r1
 8005f72:	d9f4      	bls.n	8005f5e <_printf_i+0x11a>
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d10b      	bne.n	8005f90 <_printf_i+0x14c>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	07df      	lsls	r7, r3, #31
 8005f7c:	d508      	bpl.n	8005f90 <_printf_i+0x14c>
 8005f7e:	6923      	ldr	r3, [r4, #16]
 8005f80:	6861      	ldr	r1, [r4, #4]
 8005f82:	4299      	cmp	r1, r3
 8005f84:	bfde      	ittt	le
 8005f86:	2330      	movle	r3, #48	; 0x30
 8005f88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f90:	1b92      	subs	r2, r2, r6
 8005f92:	6122      	str	r2, [r4, #16]
 8005f94:	f8cd a000 	str.w	sl, [sp]
 8005f98:	464b      	mov	r3, r9
 8005f9a:	aa03      	add	r2, sp, #12
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	f7ff fee2 	bl	8005d68 <_printf_common>
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d14c      	bne.n	8006042 <_printf_i+0x1fe>
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	b004      	add	sp, #16
 8005fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb2:	4835      	ldr	r0, [pc, #212]	; (8006088 <_printf_i+0x244>)
 8005fb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	680e      	ldr	r6, [r1, #0]
 8005fbc:	061f      	lsls	r7, r3, #24
 8005fbe:	f856 5b04 	ldr.w	r5, [r6], #4
 8005fc2:	600e      	str	r6, [r1, #0]
 8005fc4:	d514      	bpl.n	8005ff0 <_printf_i+0x1ac>
 8005fc6:	07d9      	lsls	r1, r3, #31
 8005fc8:	bf44      	itt	mi
 8005fca:	f043 0320 	orrmi.w	r3, r3, #32
 8005fce:	6023      	strmi	r3, [r4, #0]
 8005fd0:	b91d      	cbnz	r5, 8005fda <_printf_i+0x196>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	f023 0320 	bic.w	r3, r3, #32
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	2310      	movs	r3, #16
 8005fdc:	e7b0      	b.n	8005f40 <_printf_i+0xfc>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	f043 0320 	orr.w	r3, r3, #32
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	2378      	movs	r3, #120	; 0x78
 8005fe8:	4828      	ldr	r0, [pc, #160]	; (800608c <_printf_i+0x248>)
 8005fea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fee:	e7e3      	b.n	8005fb8 <_printf_i+0x174>
 8005ff0:	065e      	lsls	r6, r3, #25
 8005ff2:	bf48      	it	mi
 8005ff4:	b2ad      	uxthmi	r5, r5
 8005ff6:	e7e6      	b.n	8005fc6 <_printf_i+0x182>
 8005ff8:	4616      	mov	r6, r2
 8005ffa:	e7bb      	b.n	8005f74 <_printf_i+0x130>
 8005ffc:	680b      	ldr	r3, [r1, #0]
 8005ffe:	6826      	ldr	r6, [r4, #0]
 8006000:	6960      	ldr	r0, [r4, #20]
 8006002:	1d1d      	adds	r5, r3, #4
 8006004:	600d      	str	r5, [r1, #0]
 8006006:	0635      	lsls	r5, r6, #24
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	d501      	bpl.n	8006010 <_printf_i+0x1cc>
 800600c:	6018      	str	r0, [r3, #0]
 800600e:	e002      	b.n	8006016 <_printf_i+0x1d2>
 8006010:	0671      	lsls	r1, r6, #25
 8006012:	d5fb      	bpl.n	800600c <_printf_i+0x1c8>
 8006014:	8018      	strh	r0, [r3, #0]
 8006016:	2300      	movs	r3, #0
 8006018:	6123      	str	r3, [r4, #16]
 800601a:	4616      	mov	r6, r2
 800601c:	e7ba      	b.n	8005f94 <_printf_i+0x150>
 800601e:	680b      	ldr	r3, [r1, #0]
 8006020:	1d1a      	adds	r2, r3, #4
 8006022:	600a      	str	r2, [r1, #0]
 8006024:	681e      	ldr	r6, [r3, #0]
 8006026:	6862      	ldr	r2, [r4, #4]
 8006028:	2100      	movs	r1, #0
 800602a:	4630      	mov	r0, r6
 800602c:	f7fa f8d8 	bl	80001e0 <memchr>
 8006030:	b108      	cbz	r0, 8006036 <_printf_i+0x1f2>
 8006032:	1b80      	subs	r0, r0, r6
 8006034:	6060      	str	r0, [r4, #4]
 8006036:	6863      	ldr	r3, [r4, #4]
 8006038:	6123      	str	r3, [r4, #16]
 800603a:	2300      	movs	r3, #0
 800603c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006040:	e7a8      	b.n	8005f94 <_printf_i+0x150>
 8006042:	6923      	ldr	r3, [r4, #16]
 8006044:	4632      	mov	r2, r6
 8006046:	4649      	mov	r1, r9
 8006048:	4640      	mov	r0, r8
 800604a:	47d0      	blx	sl
 800604c:	3001      	adds	r0, #1
 800604e:	d0ab      	beq.n	8005fa8 <_printf_i+0x164>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	079b      	lsls	r3, r3, #30
 8006054:	d413      	bmi.n	800607e <_printf_i+0x23a>
 8006056:	68e0      	ldr	r0, [r4, #12]
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	4298      	cmp	r0, r3
 800605c:	bfb8      	it	lt
 800605e:	4618      	movlt	r0, r3
 8006060:	e7a4      	b.n	8005fac <_printf_i+0x168>
 8006062:	2301      	movs	r3, #1
 8006064:	4632      	mov	r2, r6
 8006066:	4649      	mov	r1, r9
 8006068:	4640      	mov	r0, r8
 800606a:	47d0      	blx	sl
 800606c:	3001      	adds	r0, #1
 800606e:	d09b      	beq.n	8005fa8 <_printf_i+0x164>
 8006070:	3501      	adds	r5, #1
 8006072:	68e3      	ldr	r3, [r4, #12]
 8006074:	9903      	ldr	r1, [sp, #12]
 8006076:	1a5b      	subs	r3, r3, r1
 8006078:	42ab      	cmp	r3, r5
 800607a:	dcf2      	bgt.n	8006062 <_printf_i+0x21e>
 800607c:	e7eb      	b.n	8006056 <_printf_i+0x212>
 800607e:	2500      	movs	r5, #0
 8006080:	f104 0619 	add.w	r6, r4, #25
 8006084:	e7f5      	b.n	8006072 <_printf_i+0x22e>
 8006086:	bf00      	nop
 8006088:	08006485 	.word	0x08006485
 800608c:	08006496 	.word	0x08006496

08006090 <memcpy>:
 8006090:	440a      	add	r2, r1
 8006092:	4291      	cmp	r1, r2
 8006094:	f100 33ff 	add.w	r3, r0, #4294967295
 8006098:	d100      	bne.n	800609c <memcpy+0xc>
 800609a:	4770      	bx	lr
 800609c:	b510      	push	{r4, lr}
 800609e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060a6:	4291      	cmp	r1, r2
 80060a8:	d1f9      	bne.n	800609e <memcpy+0xe>
 80060aa:	bd10      	pop	{r4, pc}

080060ac <memmove>:
 80060ac:	4288      	cmp	r0, r1
 80060ae:	b510      	push	{r4, lr}
 80060b0:	eb01 0402 	add.w	r4, r1, r2
 80060b4:	d902      	bls.n	80060bc <memmove+0x10>
 80060b6:	4284      	cmp	r4, r0
 80060b8:	4623      	mov	r3, r4
 80060ba:	d807      	bhi.n	80060cc <memmove+0x20>
 80060bc:	1e43      	subs	r3, r0, #1
 80060be:	42a1      	cmp	r1, r4
 80060c0:	d008      	beq.n	80060d4 <memmove+0x28>
 80060c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060ca:	e7f8      	b.n	80060be <memmove+0x12>
 80060cc:	4402      	add	r2, r0
 80060ce:	4601      	mov	r1, r0
 80060d0:	428a      	cmp	r2, r1
 80060d2:	d100      	bne.n	80060d6 <memmove+0x2a>
 80060d4:	bd10      	pop	{r4, pc}
 80060d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060de:	e7f7      	b.n	80060d0 <memmove+0x24>

080060e0 <_free_r>:
 80060e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060e2:	2900      	cmp	r1, #0
 80060e4:	d048      	beq.n	8006178 <_free_r+0x98>
 80060e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ea:	9001      	str	r0, [sp, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f1a1 0404 	sub.w	r4, r1, #4
 80060f2:	bfb8      	it	lt
 80060f4:	18e4      	addlt	r4, r4, r3
 80060f6:	f000 f8d3 	bl	80062a0 <__malloc_lock>
 80060fa:	4a20      	ldr	r2, [pc, #128]	; (800617c <_free_r+0x9c>)
 80060fc:	9801      	ldr	r0, [sp, #4]
 80060fe:	6813      	ldr	r3, [r2, #0]
 8006100:	4615      	mov	r5, r2
 8006102:	b933      	cbnz	r3, 8006112 <_free_r+0x32>
 8006104:	6063      	str	r3, [r4, #4]
 8006106:	6014      	str	r4, [r2, #0]
 8006108:	b003      	add	sp, #12
 800610a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800610e:	f000 b8cd 	b.w	80062ac <__malloc_unlock>
 8006112:	42a3      	cmp	r3, r4
 8006114:	d90b      	bls.n	800612e <_free_r+0x4e>
 8006116:	6821      	ldr	r1, [r4, #0]
 8006118:	1862      	adds	r2, r4, r1
 800611a:	4293      	cmp	r3, r2
 800611c:	bf04      	itt	eq
 800611e:	681a      	ldreq	r2, [r3, #0]
 8006120:	685b      	ldreq	r3, [r3, #4]
 8006122:	6063      	str	r3, [r4, #4]
 8006124:	bf04      	itt	eq
 8006126:	1852      	addeq	r2, r2, r1
 8006128:	6022      	streq	r2, [r4, #0]
 800612a:	602c      	str	r4, [r5, #0]
 800612c:	e7ec      	b.n	8006108 <_free_r+0x28>
 800612e:	461a      	mov	r2, r3
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	b10b      	cbz	r3, 8006138 <_free_r+0x58>
 8006134:	42a3      	cmp	r3, r4
 8006136:	d9fa      	bls.n	800612e <_free_r+0x4e>
 8006138:	6811      	ldr	r1, [r2, #0]
 800613a:	1855      	adds	r5, r2, r1
 800613c:	42a5      	cmp	r5, r4
 800613e:	d10b      	bne.n	8006158 <_free_r+0x78>
 8006140:	6824      	ldr	r4, [r4, #0]
 8006142:	4421      	add	r1, r4
 8006144:	1854      	adds	r4, r2, r1
 8006146:	42a3      	cmp	r3, r4
 8006148:	6011      	str	r1, [r2, #0]
 800614a:	d1dd      	bne.n	8006108 <_free_r+0x28>
 800614c:	681c      	ldr	r4, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	6053      	str	r3, [r2, #4]
 8006152:	4421      	add	r1, r4
 8006154:	6011      	str	r1, [r2, #0]
 8006156:	e7d7      	b.n	8006108 <_free_r+0x28>
 8006158:	d902      	bls.n	8006160 <_free_r+0x80>
 800615a:	230c      	movs	r3, #12
 800615c:	6003      	str	r3, [r0, #0]
 800615e:	e7d3      	b.n	8006108 <_free_r+0x28>
 8006160:	6825      	ldr	r5, [r4, #0]
 8006162:	1961      	adds	r1, r4, r5
 8006164:	428b      	cmp	r3, r1
 8006166:	bf04      	itt	eq
 8006168:	6819      	ldreq	r1, [r3, #0]
 800616a:	685b      	ldreq	r3, [r3, #4]
 800616c:	6063      	str	r3, [r4, #4]
 800616e:	bf04      	itt	eq
 8006170:	1949      	addeq	r1, r1, r5
 8006172:	6021      	streq	r1, [r4, #0]
 8006174:	6054      	str	r4, [r2, #4]
 8006176:	e7c7      	b.n	8006108 <_free_r+0x28>
 8006178:	b003      	add	sp, #12
 800617a:	bd30      	pop	{r4, r5, pc}
 800617c:	200000cc 	.word	0x200000cc

08006180 <_malloc_r>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	1ccd      	adds	r5, r1, #3
 8006184:	f025 0503 	bic.w	r5, r5, #3
 8006188:	3508      	adds	r5, #8
 800618a:	2d0c      	cmp	r5, #12
 800618c:	bf38      	it	cc
 800618e:	250c      	movcc	r5, #12
 8006190:	2d00      	cmp	r5, #0
 8006192:	4606      	mov	r6, r0
 8006194:	db01      	blt.n	800619a <_malloc_r+0x1a>
 8006196:	42a9      	cmp	r1, r5
 8006198:	d903      	bls.n	80061a2 <_malloc_r+0x22>
 800619a:	230c      	movs	r3, #12
 800619c:	6033      	str	r3, [r6, #0]
 800619e:	2000      	movs	r0, #0
 80061a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a2:	f000 f87d 	bl	80062a0 <__malloc_lock>
 80061a6:	4921      	ldr	r1, [pc, #132]	; (800622c <_malloc_r+0xac>)
 80061a8:	680a      	ldr	r2, [r1, #0]
 80061aa:	4614      	mov	r4, r2
 80061ac:	b99c      	cbnz	r4, 80061d6 <_malloc_r+0x56>
 80061ae:	4f20      	ldr	r7, [pc, #128]	; (8006230 <_malloc_r+0xb0>)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	b923      	cbnz	r3, 80061be <_malloc_r+0x3e>
 80061b4:	4621      	mov	r1, r4
 80061b6:	4630      	mov	r0, r6
 80061b8:	f000 f862 	bl	8006280 <_sbrk_r>
 80061bc:	6038      	str	r0, [r7, #0]
 80061be:	4629      	mov	r1, r5
 80061c0:	4630      	mov	r0, r6
 80061c2:	f000 f85d 	bl	8006280 <_sbrk_r>
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	d123      	bne.n	8006212 <_malloc_r+0x92>
 80061ca:	230c      	movs	r3, #12
 80061cc:	6033      	str	r3, [r6, #0]
 80061ce:	4630      	mov	r0, r6
 80061d0:	f000 f86c 	bl	80062ac <__malloc_unlock>
 80061d4:	e7e3      	b.n	800619e <_malloc_r+0x1e>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	1b5b      	subs	r3, r3, r5
 80061da:	d417      	bmi.n	800620c <_malloc_r+0x8c>
 80061dc:	2b0b      	cmp	r3, #11
 80061de:	d903      	bls.n	80061e8 <_malloc_r+0x68>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	441c      	add	r4, r3
 80061e4:	6025      	str	r5, [r4, #0]
 80061e6:	e004      	b.n	80061f2 <_malloc_r+0x72>
 80061e8:	6863      	ldr	r3, [r4, #4]
 80061ea:	42a2      	cmp	r2, r4
 80061ec:	bf0c      	ite	eq
 80061ee:	600b      	streq	r3, [r1, #0]
 80061f0:	6053      	strne	r3, [r2, #4]
 80061f2:	4630      	mov	r0, r6
 80061f4:	f000 f85a 	bl	80062ac <__malloc_unlock>
 80061f8:	f104 000b 	add.w	r0, r4, #11
 80061fc:	1d23      	adds	r3, r4, #4
 80061fe:	f020 0007 	bic.w	r0, r0, #7
 8006202:	1ac2      	subs	r2, r0, r3
 8006204:	d0cc      	beq.n	80061a0 <_malloc_r+0x20>
 8006206:	1a1b      	subs	r3, r3, r0
 8006208:	50a3      	str	r3, [r4, r2]
 800620a:	e7c9      	b.n	80061a0 <_malloc_r+0x20>
 800620c:	4622      	mov	r2, r4
 800620e:	6864      	ldr	r4, [r4, #4]
 8006210:	e7cc      	b.n	80061ac <_malloc_r+0x2c>
 8006212:	1cc4      	adds	r4, r0, #3
 8006214:	f024 0403 	bic.w	r4, r4, #3
 8006218:	42a0      	cmp	r0, r4
 800621a:	d0e3      	beq.n	80061e4 <_malloc_r+0x64>
 800621c:	1a21      	subs	r1, r4, r0
 800621e:	4630      	mov	r0, r6
 8006220:	f000 f82e 	bl	8006280 <_sbrk_r>
 8006224:	3001      	adds	r0, #1
 8006226:	d1dd      	bne.n	80061e4 <_malloc_r+0x64>
 8006228:	e7cf      	b.n	80061ca <_malloc_r+0x4a>
 800622a:	bf00      	nop
 800622c:	200000cc 	.word	0x200000cc
 8006230:	200000d0 	.word	0x200000d0

08006234 <_realloc_r>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	4607      	mov	r7, r0
 8006238:	4614      	mov	r4, r2
 800623a:	460e      	mov	r6, r1
 800623c:	b921      	cbnz	r1, 8006248 <_realloc_r+0x14>
 800623e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006242:	4611      	mov	r1, r2
 8006244:	f7ff bf9c 	b.w	8006180 <_malloc_r>
 8006248:	b922      	cbnz	r2, 8006254 <_realloc_r+0x20>
 800624a:	f7ff ff49 	bl	80060e0 <_free_r>
 800624e:	4625      	mov	r5, r4
 8006250:	4628      	mov	r0, r5
 8006252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006254:	f000 f830 	bl	80062b8 <_malloc_usable_size_r>
 8006258:	42a0      	cmp	r0, r4
 800625a:	d20f      	bcs.n	800627c <_realloc_r+0x48>
 800625c:	4621      	mov	r1, r4
 800625e:	4638      	mov	r0, r7
 8006260:	f7ff ff8e 	bl	8006180 <_malloc_r>
 8006264:	4605      	mov	r5, r0
 8006266:	2800      	cmp	r0, #0
 8006268:	d0f2      	beq.n	8006250 <_realloc_r+0x1c>
 800626a:	4631      	mov	r1, r6
 800626c:	4622      	mov	r2, r4
 800626e:	f7ff ff0f 	bl	8006090 <memcpy>
 8006272:	4631      	mov	r1, r6
 8006274:	4638      	mov	r0, r7
 8006276:	f7ff ff33 	bl	80060e0 <_free_r>
 800627a:	e7e9      	b.n	8006250 <_realloc_r+0x1c>
 800627c:	4635      	mov	r5, r6
 800627e:	e7e7      	b.n	8006250 <_realloc_r+0x1c>

08006280 <_sbrk_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4d06      	ldr	r5, [pc, #24]	; (800629c <_sbrk_r+0x1c>)
 8006284:	2300      	movs	r3, #0
 8006286:	4604      	mov	r4, r0
 8006288:	4608      	mov	r0, r1
 800628a:	602b      	str	r3, [r5, #0]
 800628c:	f7fb fe78 	bl	8001f80 <_sbrk>
 8006290:	1c43      	adds	r3, r0, #1
 8006292:	d102      	bne.n	800629a <_sbrk_r+0x1a>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	b103      	cbz	r3, 800629a <_sbrk_r+0x1a>
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	bd38      	pop	{r3, r4, r5, pc}
 800629c:	200002d4 	.word	0x200002d4

080062a0 <__malloc_lock>:
 80062a0:	4801      	ldr	r0, [pc, #4]	; (80062a8 <__malloc_lock+0x8>)
 80062a2:	f000 b811 	b.w	80062c8 <__retarget_lock_acquire_recursive>
 80062a6:	bf00      	nop
 80062a8:	200002dc 	.word	0x200002dc

080062ac <__malloc_unlock>:
 80062ac:	4801      	ldr	r0, [pc, #4]	; (80062b4 <__malloc_unlock+0x8>)
 80062ae:	f000 b80c 	b.w	80062ca <__retarget_lock_release_recursive>
 80062b2:	bf00      	nop
 80062b4:	200002dc 	.word	0x200002dc

080062b8 <_malloc_usable_size_r>:
 80062b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062bc:	1f18      	subs	r0, r3, #4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bfbc      	itt	lt
 80062c2:	580b      	ldrlt	r3, [r1, r0]
 80062c4:	18c0      	addlt	r0, r0, r3
 80062c6:	4770      	bx	lr

080062c8 <__retarget_lock_acquire_recursive>:
 80062c8:	4770      	bx	lr

080062ca <__retarget_lock_release_recursive>:
 80062ca:	4770      	bx	lr

080062cc <_init>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	bf00      	nop
 80062d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d2:	bc08      	pop	{r3}
 80062d4:	469e      	mov	lr, r3
 80062d6:	4770      	bx	lr

080062d8 <_fini>:
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	bf00      	nop
 80062dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062de:	bc08      	pop	{r3}
 80062e0:	469e      	mov	lr, r3
 80062e2:	4770      	bx	lr
