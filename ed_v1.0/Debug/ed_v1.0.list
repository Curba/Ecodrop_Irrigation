
ed_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005268  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800558c  0800558c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800558c  0800558c  0001558c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005594  08005594  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800559c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000000c  080055a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080055a8  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001237d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254c  00000000  00000000  000323b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00034908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  000359c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001814e  00000000  00000000  00036998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ee9  00000000  00000000  0004eae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fca2  00000000  00000000  000629cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102671  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004730  00000000  00000000  001026c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080053e4 	.word	0x080053e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080053e4 	.word	0x080053e4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	f023 030f 	bic.w	r3, r3, #15
 80004dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	f043 030c 	orr.w	r3, r3, #12
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	f043 0308 	orr.w	r3, r3, #8
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004f8:	7bbb      	ldrb	r3, [r7, #14]
 80004fa:	f043 030c 	orr.w	r3, r3, #12
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000502:	7bbb      	ldrb	r3, [r7, #14]
 8000504:	f043 0308 	orr.w	r3, r3, #8
 8000508:	b2db      	uxtb	r3, r3
 800050a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800050c:	f107 0208 	add.w	r2, r7, #8
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2304      	movs	r3, #4
 8000516:	214e      	movs	r1, #78	; 0x4e
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <lcd_send_cmd+0x5c>)
 800051a:	f003 f895 	bl	8003648 <HAL_I2C_Master_Transmit>
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	2000005c 	.word	0x2000005c

0800052c <lcd_send_data>:

void lcd_send_data (char data)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af02      	add	r7, sp, #8
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	f023 030f 	bic.w	r3, r3, #15
 800053c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	f043 030d 	orr.w	r3, r3, #13
 800054a:	b2db      	uxtb	r3, r3
 800054c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	f043 0309 	orr.w	r3, r3, #9
 8000554:	b2db      	uxtb	r3, r3
 8000556:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	f043 030d 	orr.w	r3, r3, #13
 800055e:	b2db      	uxtb	r3, r3
 8000560:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	f043 0309 	orr.w	r3, r3, #9
 8000568:	b2db      	uxtb	r3, r3
 800056a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800056c:	f107 0208 	add.w	r2, r7, #8
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2304      	movs	r3, #4
 8000576:	214e      	movs	r1, #78	; 0x4e
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <lcd_send_data+0x5c>)
 800057a:	f003 f865 	bl	8003648 <HAL_I2C_Master_Transmit>
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	2000005c 	.word	0x2000005c

0800058c <lcd_clear>:

void lcd_clear (void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000592:	2080      	movs	r0, #128	; 0x80
 8000594:	f7ff ff9a 	bl	80004cc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	e005      	b.n	80005aa <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800059e:	2020      	movs	r0, #32
 80005a0:	f7ff ffc4 	bl	800052c <lcd_send_data>
	for (int i=0; i<70; i++)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b45      	cmp	r3, #69	; 0x45
 80005ae:	ddf6      	ble.n	800059e <lcd_clear+0x12>
	}
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
    switch (row)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d003      	beq.n	80005d2 <lcd_put_cur+0x18>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d005      	beq.n	80005dc <lcd_put_cur+0x22>
 80005d0:	e009      	b.n	80005e6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	603b      	str	r3, [r7, #0]
            break;
 80005da:	e004      	b.n	80005e6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005e2:	603b      	str	r3, [r7, #0]
            break;
 80005e4:	bf00      	nop
    };
    lcd_send_cmd (col);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff6e 	bl	80004cc <lcd_send_cmd>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <lcd_init>:


void lcd_init (void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	delay_us(60000);  // wait for >40ms
 80005fc:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000600:	f000 fba2 	bl	8000d48 <delay_us>
	lcd_send_cmd (0x30);
 8000604:	2030      	movs	r0, #48	; 0x30
 8000606:	f7ff ff61 	bl	80004cc <lcd_send_cmd>
	delay_us(6000);  // wait for >4.1ms
 800060a:	f241 7070 	movw	r0, #6000	; 0x1770
 800060e:	f000 fb9b 	bl	8000d48 <delay_us>
	lcd_send_cmd (0x30);
 8000612:	2030      	movs	r0, #48	; 0x30
 8000614:	f7ff ff5a 	bl	80004cc <lcd_send_cmd>
	delay_us(2000);  // wait for >100us
 8000618:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800061c:	f000 fb94 	bl	8000d48 <delay_us>
	lcd_send_cmd (0x30);
 8000620:	2030      	movs	r0, #48	; 0x30
 8000622:	f7ff ff53 	bl	80004cc <lcd_send_cmd>
	delay_us(200);
 8000626:	20c8      	movs	r0, #200	; 0xc8
 8000628:	f000 fb8e 	bl	8000d48 <delay_us>
	lcd_send_cmd (0x20);  // 4bit mode
 800062c:	2020      	movs	r0, #32
 800062e:	f7ff ff4d 	bl	80004cc <lcd_send_cmd>
	delay_us(2000);
 8000632:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000636:	f000 fb87 	bl	8000d48 <delay_us>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800063a:	2028      	movs	r0, #40	; 0x28
 800063c:	f7ff ff46 	bl	80004cc <lcd_send_cmd>
	delay_us(2000);
 8000640:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000644:	f000 fb80 	bl	8000d48 <delay_us>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000648:	2008      	movs	r0, #8
 800064a:	f7ff ff3f 	bl	80004cc <lcd_send_cmd>
	delay_us(2000);
 800064e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000652:	f000 fb79 	bl	8000d48 <delay_us>
	lcd_send_cmd (0x01);  // clear display
 8000656:	2001      	movs	r0, #1
 8000658:	f7ff ff38 	bl	80004cc <lcd_send_cmd>
	delay_us(4000);
 800065c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000660:	f000 fb72 	bl	8000d48 <delay_us>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000664:	2006      	movs	r0, #6
 8000666:	f7ff ff31 	bl	80004cc <lcd_send_cmd>
	delay_us(2000);
 800066a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800066e:	f000 fb6b 	bl	8000d48 <delay_us>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000672:	200c      	movs	r0, #12
 8000674:	f7ff ff2a 	bl	80004cc <lcd_send_cmd>
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}

0800067c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000684:	e006      	b.n	8000694 <lcd_send_string+0x18>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff4c 	bl	800052c <lcd_send_data>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1f4      	bne.n	8000686 <lcd_send_string+0xa>
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f001 fa7d 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f839 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 fa8f 	bl	8000bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ba:	f000 fa6d 	bl	8000b98 <MX_DMA_Init>
  MX_ADC1_Init();
 80006be:	f000 f8b9 	bl	8000834 <MX_ADC1_Init>
  MX_I2C1_Init();
 80006c2:	f000 f95d 	bl	8000980 <MX_I2C1_Init>
  MX_RTC_Init();
 80006c6:	f000 f989 	bl	80009dc <MX_RTC_Init>
  MX_TIM1_Init();
 80006ca:	f000 fa15 	bl	8000af8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Initializes line average array


  for(int x = 0; x < 4; x ++){
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	e007      	b.n	80006e4 <main+0x3c>
		  adc_line_avg[x] = 0;
 80006d4:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <main+0x6c>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2100      	movs	r1, #0
 80006da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int x = 0; x < 4; x ++){
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3301      	adds	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	ddf4      	ble.n	80006d4 <main+0x2c>
			}

  //HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, -511);
  HAL_TIM_Base_Start(&htim1);
 80006ea:	480b      	ldr	r0, [pc, #44]	; (8000718 <main+0x70>)
 80006ec:	f004 fba4 	bl	8004e38 <HAL_TIM_Base_Start>
  lcd_initial_message();
 80006f0:	f000 fc12 	bl	8000f18 <lcd_initial_message>


	  //DHT11_get_value();
	  //get_time();

	  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_dma, adc_channel_lenght);
 80006f4:	2307      	movs	r3, #7
 80006f6:	461a      	mov	r2, r3
 80006f8:	4908      	ldr	r1, [pc, #32]	; (800071c <main+0x74>)
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <main+0x78>)
 80006fc:	f001 fc70 	bl	8001fe0 <HAL_ADC_Start_DMA>
	  //mode_planner(0,1);
	  //mode_manual(mode_manual_start);
	  menu_func(menu_lcd_refresh, 0);
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <main+0x7c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fc38 	bl	8000f7c <menu_func>
	  delay_us(100);
 800070c:	2064      	movs	r0, #100	; 0x64
 800070e:	f000 fb1b 	bl	8000d48 <delay_us>
	  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_dma, adc_channel_lenght);
 8000712:	e7ef      	b.n	80006f4 <main+0x4c>
 8000714:	2000003c 	.word	0x2000003c
 8000718:	200001c0 	.word	0x200001c0
 800071c:	2000004c 	.word	0x2000004c
 8000720:	200000b8 	.word	0x200000b8
 8000724:	20000028 	.word	0x20000028

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b098      	sub	sp, #96	; 0x60
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000732:	2230      	movs	r2, #48	; 0x30
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f004 fe4c 	bl	80053d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b32      	ldr	r3, [pc, #200]	; (800082c <SystemClock_Config+0x104>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a31      	ldr	r2, [pc, #196]	; (800082c <SystemClock_Config+0x104>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b2f      	ldr	r3, [pc, #188]	; (800082c <SystemClock_Config+0x104>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000778:	2300      	movs	r3, #0
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <SystemClock_Config+0x108>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000784:	4a2a      	ldr	r2, [pc, #168]	; (8000830 <SystemClock_Config+0x108>)
 8000786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <SystemClock_Config+0x108>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000798:	230a      	movs	r3, #10
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	2310      	movs	r3, #16
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b0:	2308      	movs	r3, #8
 80007b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007b4:	2354      	movs	r3, #84	; 0x54
 80007b6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007bc:	2304      	movs	r3, #4
 80007be:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007c4:	4618      	mov	r0, r3
 80007c6:	f003 fa47 	bl	8003c58 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007d0:	f001 f82c 	bl	800182c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	230f      	movs	r3, #15
 80007d6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2102      	movs	r1, #2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 fca9 	bl	8004148 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80007fc:	f001 f816 	bl	800182c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_RTC;
 8000800:	230a      	movs	r3, #10
 8000802:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000808:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800080a:	2301      	movs	r3, #1
 800080c:	763b      	strb	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fe54 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800081e:	f001 f805 	bl	800182c <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3760      	adds	r7, #96	; 0x60
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083a:	463b      	mov	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000846:	4b4b      	ldr	r3, [pc, #300]	; (8000974 <MX_ADC1_Init+0x140>)
 8000848:	4a4b      	ldr	r2, [pc, #300]	; (8000978 <MX_ADC1_Init+0x144>)
 800084a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800084c:	4b49      	ldr	r3, [pc, #292]	; (8000974 <MX_ADC1_Init+0x140>)
 800084e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000852:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000854:	4b47      	ldr	r3, [pc, #284]	; (8000974 <MX_ADC1_Init+0x140>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800085a:	4b46      	ldr	r3, [pc, #280]	; (8000974 <MX_ADC1_Init+0x140>)
 800085c:	2201      	movs	r2, #1
 800085e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000860:	4b44      	ldr	r3, [pc, #272]	; (8000974 <MX_ADC1_Init+0x140>)
 8000862:	2200      	movs	r2, #0
 8000864:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000866:	4b43      	ldr	r3, [pc, #268]	; (8000974 <MX_ADC1_Init+0x140>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <MX_ADC1_Init+0x140>)
 8000870:	2200      	movs	r2, #0
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000874:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <MX_ADC1_Init+0x140>)
 8000876:	4a41      	ldr	r2, [pc, #260]	; (800097c <MX_ADC1_Init+0x148>)
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087a:	4b3e      	ldr	r3, [pc, #248]	; (8000974 <MX_ADC1_Init+0x140>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000880:	4b3c      	ldr	r3, [pc, #240]	; (8000974 <MX_ADC1_Init+0x140>)
 8000882:	2207      	movs	r2, #7
 8000884:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000886:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <MX_ADC1_Init+0x140>)
 8000888:	2201      	movs	r2, #1
 800088a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088e:	4b39      	ldr	r3, [pc, #228]	; (8000974 <MX_ADC1_Init+0x140>)
 8000890:	2201      	movs	r2, #1
 8000892:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000894:	4837      	ldr	r0, [pc, #220]	; (8000974 <MX_ADC1_Init+0x140>)
 8000896:	f001 fa1f 	bl	8001cd8 <HAL_ADC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008a0:	f000 ffc4 	bl	800182c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80008ac:	2302      	movs	r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	482f      	ldr	r0, [pc, #188]	; (8000974 <MX_ADC1_Init+0x140>)
 80008b6:	f001 fca1 	bl	80021fc <HAL_ADC_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008c0:	f000 ffb4 	bl	800182c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	4619      	mov	r1, r3
 80008d0:	4828      	ldr	r0, [pc, #160]	; (8000974 <MX_ADC1_Init+0x140>)
 80008d2:	f001 fc93 	bl	80021fc <HAL_ADC_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008dc:	f000 ffa6 	bl	800182c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80008e4:	2303      	movs	r3, #3
 80008e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4821      	ldr	r0, [pc, #132]	; (8000974 <MX_ADC1_Init+0x140>)
 80008ee:	f001 fc85 	bl	80021fc <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80008f8:	f000 ff98 	bl	800182c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008fc:	2303      	movs	r3, #3
 80008fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	481a      	ldr	r0, [pc, #104]	; (8000974 <MX_ADC1_Init+0x140>)
 800090a:	f001 fc77 	bl	80021fc <HAL_ADC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000914:	f000 ff8a 	bl	800182c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000918:	2304      	movs	r3, #4
 800091a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800091c:	2305      	movs	r3, #5
 800091e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <MX_ADC1_Init+0x140>)
 8000926:	f001 fc69 	bl	80021fc <HAL_ADC_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000930:	f000 ff7c 	bl	800182c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000934:	2305      	movs	r3, #5
 8000936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000938:	2306      	movs	r3, #6
 800093a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_ADC1_Init+0x140>)
 8000942:	f001 fc5b 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800094c:	f000 ff6e 	bl	800182c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000950:	2306      	movs	r3, #6
 8000952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000954:	2307      	movs	r3, #7
 8000956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_ADC1_Init+0x140>)
 800095e:	f001 fc4d 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000968:	f000 ff60 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200000b8 	.word	0x200000b8
 8000978:	40012000 	.word	0x40012000
 800097c:	0f000001 	.word	0x0f000001

08000980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_I2C1_Init+0x50>)
 8000986:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <MX_I2C1_Init+0x54>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_I2C1_Init+0x50>)
 800098c:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_I2C1_Init+0x58>)
 800098e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_I2C1_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_I2C1_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_I2C1_Init+0x50>)
 800099e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009be:	f002 fcff 	bl	80033c0 <HAL_I2C_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009c8:	f000 ff30 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000005c 	.word	0x2000005c
 80009d4:	40005400 	.word	0x40005400
 80009d8:	00061a80 	.word	0x00061a80

080009dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b090      	sub	sp, #64	; 0x40
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2228      	movs	r2, #40	; 0x28
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 fce9 	bl	80053d4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a02:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <MX_RTC_Init+0x114>)
 8000a04:	4a3b      	ldr	r2, [pc, #236]	; (8000af4 <MX_RTC_Init+0x118>)
 8000a06:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a08:	4b39      	ldr	r3, [pc, #228]	; (8000af0 <MX_RTC_Init+0x114>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a0e:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <MX_RTC_Init+0x114>)
 8000a10:	227f      	movs	r2, #127	; 0x7f
 8000a12:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 280;
 8000a14:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <MX_RTC_Init+0x114>)
 8000a16:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000a1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a1c:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <MX_RTC_Init+0x114>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a22:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <MX_RTC_Init+0x114>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a28:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <MX_RTC_Init+0x114>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a2e:	4830      	ldr	r0, [pc, #192]	; (8000af0 <MX_RTC_Init+0x114>)
 8000a30:	f003 fe34 	bl	800469c <HAL_RTC_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000a3a:	f000 fef7 	bl	800182c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a54:	2300      	movs	r3, #0
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4823      	ldr	r0, [pc, #140]	; (8000af0 <MX_RTC_Init+0x114>)
 8000a62:	f003 feac 	bl	80047be <HAL_RTC_SetTime>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000a6c:	f000 fede 	bl	800182c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a70:	2301      	movs	r3, #1
 8000a72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_MARCH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x4;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4817      	ldr	r0, [pc, #92]	; (8000af0 <MX_RTC_Init+0x114>)
 8000a92:	f003 ff51 	bl	8004938 <HAL_RTC_SetDate>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000a9c:	f000 fec6 	bl	800182c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x3;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x45;
 8000aa4:	2345      	movs	r3, #69	; 0x45
 8000aa6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x4;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_RTC_Init+0x114>)
 8000ad8:	f003 ffd5 	bl	8004a86 <HAL_RTC_SetAlarm>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000ae2:	f000 fea3 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	3740      	adds	r7, #64	; 0x40
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000180 	.word	0x20000180
 8000af4:	40002800 	.word	0x40002800

08000af8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b14:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <MX_TIM1_Init+0x98>)
 8000b16:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <MX_TIM1_Init+0x9c>)
 8000b18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <MX_TIM1_Init+0x98>)
 8000b1c:	2253      	movs	r2, #83	; 0x53
 8000b1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <MX_TIM1_Init+0x98>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_TIM1_Init+0x98>)
 8000b28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_TIM1_Init+0x98>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MX_TIM1_Init+0x98>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_TIM1_Init+0x98>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b40:	4813      	ldr	r0, [pc, #76]	; (8000b90 <MX_TIM1_Init+0x98>)
 8000b42:	f004 f92a 	bl	8004d9a <HAL_TIM_Base_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b4c:	f000 fe6e 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_TIM1_Init+0x98>)
 8000b5e:	f004 f9c5 	bl	8004eec <HAL_TIM_ConfigClockSource>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b68:	f000 fe60 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_TIM1_Init+0x98>)
 8000b7a:	f004 fb99 	bl	80052b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b84:	f000 fe52 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200001c0 	.word	0x200001c0
 8000b94:	40010000 	.word	0x40010000

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2038      	movs	r0, #56	; 0x38
 8000bc0:	f001 fea1 	bl	8002906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bc4:	2038      	movs	r0, #56	; 0x38
 8000bc6:	f001 feba 	bl	800293e <HAL_NVIC_EnableIRQ>

}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b51      	ldr	r3, [pc, #324]	; (8000d38 <MX_GPIO_Init+0x160>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a50      	ldr	r2, [pc, #320]	; (8000d38 <MX_GPIO_Init+0x160>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b4e      	ldr	r3, [pc, #312]	; (8000d38 <MX_GPIO_Init+0x160>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b4a      	ldr	r3, [pc, #296]	; (8000d38 <MX_GPIO_Init+0x160>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a49      	ldr	r2, [pc, #292]	; (8000d38 <MX_GPIO_Init+0x160>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b47      	ldr	r3, [pc, #284]	; (8000d38 <MX_GPIO_Init+0x160>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	4b43      	ldr	r3, [pc, #268]	; (8000d38 <MX_GPIO_Init+0x160>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a42      	ldr	r2, [pc, #264]	; (8000d38 <MX_GPIO_Init+0x160>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b40      	ldr	r3, [pc, #256]	; (8000d38 <MX_GPIO_Init+0x160>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b3c      	ldr	r3, [pc, #240]	; (8000d38 <MX_GPIO_Init+0x160>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a3b      	ldr	r2, [pc, #236]	; (8000d38 <MX_GPIO_Init+0x160>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b39      	ldr	r3, [pc, #228]	; (8000d38 <MX_GPIO_Init+0x160>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin|line1_relay_Pin|line0_relay_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000c64:	4835      	ldr	r0, [pc, #212]	; (8000d3c <MX_GPIO_Init+0x164>)
 8000c66:	f002 fb79 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(wellmotor_relay_GPIO_Port, wellmotor_relay_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	4834      	ldr	r0, [pc, #208]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000c70:	f002 fb74 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : tankmotor_relay_Pin line1_relay_Pin line0_relay_Pin */
  GPIO_InitStruct.Pin = tankmotor_relay_Pin|line1_relay_Pin|line0_relay_Pin;
 8000c74:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	482b      	ldr	r0, [pc, #172]	; (8000d3c <MX_GPIO_Init+0x164>)
 8000c8e:	f002 f9e1 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : light_exti_sens_Pin button_press_Pin */
  GPIO_InitStruct.Pin = light_exti_sens_Pin|button_press_Pin;
 8000c92:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4826      	ldr	r0, [pc, #152]	; (8000d44 <MX_GPIO_Init+0x16c>)
 8000caa:	f002 f9d3 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : button_up_Pin button_down_Pin ac_source_Pin */
  GPIO_InitStruct.Pin = button_up_Pin|button_down_Pin|ac_source_Pin;
 8000cae:	f240 4303 	movw	r3, #1027	; 0x403
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	481e      	ldr	r0, [pc, #120]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000cc6:	f002 f9c5 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : wellmotor_relay_Pin */
  GPIO_InitStruct.Pin = wellmotor_relay_Pin;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(wellmotor_relay_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4817      	ldr	r0, [pc, #92]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000ce2:	f002 f9b7 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : dht_in_Pin */
  GPIO_InitStruct.Pin = dht_in_Pin;
 8000ce6:	2320      	movs	r3, #32
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(dht_in_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4811      	ldr	r0, [pc, #68]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000cfa:	f002 f9ab 	bl	8003054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2006      	movs	r0, #6
 8000d04:	f001 fdff 	bl	8002906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d08:	2006      	movs	r0, #6
 8000d0a:	f001 fe18 	bl	800293e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2007      	movs	r0, #7
 8000d14:	f001 fdf7 	bl	8002906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d18:	2007      	movs	r0, #7
 8000d1a:	f001 fe10 	bl	800293e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2028      	movs	r0, #40	; 0x28
 8000d24:	f001 fdef 	bl	8002906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d28:	2028      	movs	r0, #40	; 0x28
 8000d2a:	f001 fe08 	bl	800293e <HAL_NVIC_EnableIRQ>

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020800 	.word	0x40020800
 8000d40:	40020400 	.word	0x40020400
 8000d44:	40020000 	.word	0x40020000

08000d48 <delay_us>:

/* USER CODE BEGIN 4 */

void delay_us (uint16_t us)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <delay_us+0x30>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000d5a:	bf00      	nop
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <delay_us+0x30>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d3f9      	bcc.n	8000d5c <delay_us+0x14>
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200001c0 	.word	0x200001c0

08000d7c <HAL_ADC_ConvCpltCallback>:


/*-----------------INTERRUPTS BEGIN-----------------------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	f040 8087 	bne.w	8000e9c <HAL_ADC_ConvCpltCallback+0x120>

		for(int x =0; x<4; x++){
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e042      	b.n	8000e1a <HAL_ADC_ConvCpltCallback+0x9e>
			adc_result_dma[x] = (adc_result_dma[x]> 2730) ? 2730:adc_result_dma[x];
 8000d94:	4a45      	ldr	r2, [pc, #276]	; (8000eac <HAL_ADC_ConvCpltCallback+0x130>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d805      	bhi.n	8000db2 <HAL_ADC_ConvCpltCallback+0x36>
 8000da6:	4a41      	ldr	r2, [pc, #260]	; (8000eac <HAL_ADC_ConvCpltCallback+0x130>)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	e001      	b.n	8000db6 <HAL_ADC_ConvCpltCallback+0x3a>
 8000db2:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8000db6:	493d      	ldr	r1, [pc, #244]	; (8000eac <HAL_ADC_ConvCpltCallback+0x130>)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_result_dma[x] = (adc_result_dma[x]< 1260) ? 1260:adc_result_dma[x];
 8000dbe:	4a3b      	ldr	r2, [pc, #236]	; (8000eac <HAL_ADC_ConvCpltCallback+0x130>)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	f240 42eb 	movw	r2, #1259	; 0x4eb
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d905      	bls.n	8000ddc <HAL_ADC_ConvCpltCallback+0x60>
 8000dd0:	4a36      	ldr	r2, [pc, #216]	; (8000eac <HAL_ADC_ConvCpltCallback+0x130>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	e001      	b.n	8000de0 <HAL_ADC_ConvCpltCallback+0x64>
 8000ddc:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8000de0:	4932      	ldr	r1, [pc, #200]	; (8000eac <HAL_ADC_ConvCpltCallback+0x130>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_result_percentage[x] = 100-((adc_result_dma[x]-1260)*100/1470);
 8000de8:	4a30      	ldr	r2, [pc, #192]	; (8000eac <HAL_ADC_ConvCpltCallback+0x130>)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8000df6:	2264      	movs	r2, #100	; 0x64
 8000df8:	fb02 f303 	mul.w	r3, r2, r3
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <HAL_ADC_ConvCpltCallback+0x134>)
 8000dfe:	fb82 1203 	smull	r1, r2, r2, r3
 8000e02:	11d2      	asrs	r2, r2, #7
 8000e04:	17db      	asrs	r3, r3, #31
 8000e06:	1a9b      	subs	r3, r3, r2
 8000e08:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000e0c:	4929      	ldr	r1, [pc, #164]	; (8000eb4 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int x =0; x<4; x++){
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	ddb9      	ble.n	8000d94 <HAL_ADC_ConvCpltCallback+0x18>
		}
			//Produces Line average : adc_line_avg
			int y =0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
			int per_line_offset = moist_per_line[0];
 8000e24:	2302      	movs	r3, #2
 8000e26:	60fb      	str	r3, [r7, #12]
			for(int x = 0; x < adc_line_number; x++){
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	e032      	b.n	8000e94 <HAL_ADC_ConvCpltCallback+0x118>
				adc_line_avg[x] = 0;
 8000e2e:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	2100      	movs	r1, #0
 8000e34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(; y < per_line_offset; y++){
 8000e38:	e00f      	b.n	8000e5a <HAL_ADC_ConvCpltCallback+0xde>
					adc_line_avg[x] += adc_result_percentage[y];
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e42:	491c      	ldr	r1, [pc, #112]	; (8000eb4 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e4a:	441a      	add	r2, r3
 8000e4c:	491a      	ldr	r1, [pc, #104]	; (8000eb8 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(; y < per_line_offset; y++){
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	3301      	adds	r3, #1
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	dbeb      	blt.n	8000e3a <HAL_ADC_ConvCpltCallback+0xbe>
				}
				adc_line_avg[x] /= moist_per_line[x];
 8000e62:	4a15      	ldr	r2, [pc, #84]	; (8000eb8 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e6a:	4914      	ldr	r1, [pc, #80]	; (8000ebc <HAL_ADC_ConvCpltCallback+0x140>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e72:	fb92 f2f3 	sdiv	r2, r2, r3
 8000e76:	4910      	ldr	r1, [pc, #64]	; (8000eb8 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			   per_line_offset += moist_per_line[x+1];
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	3301      	adds	r3, #1
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_ADC_ConvCpltCallback+0x140>)
 8000e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
			for(int x = 0; x < adc_line_number; x++){
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	3301      	adds	r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	2202      	movs	r2, #2
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	dbc8      	blt.n	8000e2e <HAL_ADC_ConvCpltCallback+0xb2>
			}

	}
}
 8000e9c:	bf00      	nop
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	200000b8 	.word	0x200000b8
 8000eac:	2000004c 	.word	0x2000004c
 8000eb0:	164a893b 	.word	0x164a893b
 8000eb4:	20000104 	.word	0x20000104
 8000eb8:	2000003c 	.word	0x2000003c
 8000ebc:	08005564 	.word	0x08005564

08000ec0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
	menu_lcd_refresh = 1;
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x48>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
    if(GPIO_Pin == button_up_Pin){
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d103      	bne.n	8000ede <HAL_GPIO_EXTI_Callback+0x1e>
    	menu_up = 1;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
    }else if(GPIO_Pin == button_down_Pin){
    	menu_down = 1;
    }else if(GPIO_Pin == button_press_Pin){
    	menu_click = 1;
    }
}
 8000edc:	e00d      	b.n	8000efa <HAL_GPIO_EXTI_Callback+0x3a>
    }else if(GPIO_Pin == button_down_Pin){
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d103      	bne.n	8000eec <HAL_GPIO_EXTI_Callback+0x2c>
    	menu_down = 1;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_GPIO_EXTI_Callback+0x50>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
}
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_EXTI_Callback+0x3a>
    }else if(GPIO_Pin == button_press_Pin){
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ef2:	d102      	bne.n	8000efa <HAL_GPIO_EXTI_Callback+0x3a>
    	menu_click = 1;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_GPIO_EXTI_Callback+0x54>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000028 	.word	0x20000028
 8000f0c:	20000030 	.word	0x20000030
 8000f10:	20000034 	.word	0x20000034
 8000f14:	2000002c 	.word	0x2000002c

08000f18 <lcd_initial_message>:
	sprintf(timeBuff,"%d,%d.%d", currTime.Hours, currTime.Minutes, currTime.Seconds);
	sprintf(dateBuff,"%02d-%02d-%2d",currDate.Date, currDate.Month, 2000 + currDate.Year);
}

/*-----------------MENU BEGIN-------------------------*/
void lcd_initial_message(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	lcd_init ();
 8000f1c:	f7ff fb6c 	bl	80005f8 <lcd_init>
	lcd_send_string ("ECODROP");
 8000f20:	4812      	ldr	r0, [pc, #72]	; (8000f6c <lcd_initial_message+0x54>)
 8000f22:	f7ff fbab 	bl	800067c <lcd_send_string>
	HAL_Delay(500);
 8000f26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f2a:	f000 feb1 	bl	8001c90 <HAL_Delay>
	lcd_put_cur(1, 0);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2001      	movs	r0, #1
 8000f32:	f7ff fb42 	bl	80005ba <lcd_put_cur>
	lcd_send_string("Irrigation");
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <lcd_initial_message+0x58>)
 8000f38:	f7ff fba0 	bl	800067c <lcd_send_string>
	HAL_Delay(1000);
 8000f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f40:	f000 fea6 	bl	8001c90 <HAL_Delay>
	lcd_send_cmd (0x01);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff fac1 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(100);
 8000f4a:	2064      	movs	r0, #100	; 0x64
 8000f4c:	f000 fea0 	bl	8001c90 <HAL_Delay>
	lcd_init ();
 8000f50:	f7ff fb52 	bl	80005f8 <lcd_init>
	lcd_send_string ("> Manual Mode");
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <lcd_initial_message+0x5c>)
 8000f56:	f7ff fb91 	bl	800067c <lcd_send_string>
	lcd_put_cur(1, 0);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f7ff fb2c 	bl	80005ba <lcd_put_cur>
	lcd_send_string("  Planner Mode  ");
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <lcd_initial_message+0x60>)
 8000f64:	f7ff fb8a 	bl	800067c <lcd_send_string>

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	08005418 	.word	0x08005418
 8000f70:	08005420 	.word	0x08005420
 8000f74:	0800542c 	.word	0x0800542c
 8000f78:	0800543c 	.word	0x0800543c

08000f7c <menu_func>:

void menu_func(int refresh, int reset){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	if(refresh){
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 842f 	beq.w	80017ec <menu_func+0x870>
		current_page = (reset) ? 0:current_page;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <menu_func+0x1e>
 8000f94:	4baa      	ldr	r3, [pc, #680]	; (8001240 <menu_func+0x2c4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	e000      	b.n	8000f9c <menu_func+0x20>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	4aa8      	ldr	r2, [pc, #672]	; (8001240 <menu_func+0x2c4>)
 8000f9e:	6013      	str	r3, [r2, #0]
		lcd_clear();
 8000fa0:	f7ff faf4 	bl	800058c <lcd_clear>
		switch(current_page){
 8000fa4:	4ba6      	ldr	r3, [pc, #664]	; (8001240 <menu_func+0x2c4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b11      	cmp	r3, #17
 8000faa:	f200 8413 	bhi.w	80017d4 <menu_func+0x858>
 8000fae:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <menu_func+0x38>)
 8000fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb4:	08000ffd 	.word	0x08000ffd
 8000fb8:	08001071 	.word	0x08001071
 8000fbc:	080010e5 	.word	0x080010e5
 8000fc0:	08001159 	.word	0x08001159
 8000fc4:	080011cd 	.word	0x080011cd
 8000fc8:	08001279 	.word	0x08001279
 8000fcc:	080012ed 	.word	0x080012ed
 8000fd0:	08001337 	.word	0x08001337
 8000fd4:	080013ab 	.word	0x080013ab
 8000fd8:	0800141f 	.word	0x0800141f
 8000fdc:	08001493 	.word	0x08001493
 8000fe0:	080014d1 	.word	0x080014d1
 8000fe4:	0800150f 	.word	0x0800150f
 8000fe8:	080015c7 	.word	0x080015c7
 8000fec:	0800163b 	.word	0x0800163b
 8000ff0:	08001679 	.word	0x08001679
 8000ff4:	080016ed 	.word	0x080016ed
 8000ff8:	08001761 	.word	0x08001761
			case 0:
				if(menu_click){
 8000ffc:	4b91      	ldr	r3, [pc, #580]	; (8001244 <menu_func+0x2c8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00a      	beq.n	800101a <menu_func+0x9e>
					current_page = 4;
 8001004:	4b8e      	ldr	r3, [pc, #568]	; (8001240 <menu_func+0x2c4>)
 8001006:	2204      	movs	r2, #4
 8001008:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800100a:	4b8e      	ldr	r3, [pc, #568]	; (8001244 <menu_func+0x2c8>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001010:	2100      	movs	r1, #0
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff ffb2 	bl	8000f7c <menu_func>
					break;
 8001018:	e3dc      	b.n	80017d4 <menu_func+0x858>
				  }else if(menu_down){
 800101a:	4b8b      	ldr	r3, [pc, #556]	; (8001248 <menu_func+0x2cc>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00a      	beq.n	8001038 <menu_func+0xbc>
					 current_page = 1;
 8001022:	4b87      	ldr	r3, [pc, #540]	; (8001240 <menu_func+0x2c4>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
					 menu_down=0;
 8001028:	4b87      	ldr	r3, [pc, #540]	; (8001248 <menu_func+0x2cc>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
					 menu_func(1, 0);
 800102e:	2100      	movs	r1, #0
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff ffa3 	bl	8000f7c <menu_func>
					 break;
 8001036:	e3cd      	b.n	80017d4 <menu_func+0x858>
				  }else if(menu_up){
 8001038:	4b84      	ldr	r3, [pc, #528]	; (800124c <menu_func+0x2d0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00a      	beq.n	8001056 <menu_func+0xda>
					 current_page = 3;
 8001040:	4b7f      	ldr	r3, [pc, #508]	; (8001240 <menu_func+0x2c4>)
 8001042:	2203      	movs	r2, #3
 8001044:	601a      	str	r2, [r3, #0]
					 menu_up =0;
 8001046:	4b81      	ldr	r3, [pc, #516]	; (800124c <menu_func+0x2d0>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
					 menu_func(1, 0);
 800104c:	2100      	movs	r1, #0
 800104e:	2001      	movs	r0, #1
 8001050:	f7ff ff94 	bl	8000f7c <menu_func>
					 break;
 8001054:	e3be      	b.n	80017d4 <menu_func+0x858>
				  }
				lcd_init ();
 8001056:	f7ff facf 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Manual Mode");
 800105a:	487d      	ldr	r0, [pc, #500]	; (8001250 <menu_func+0x2d4>)
 800105c:	f7ff fb0e 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 8001060:	2100      	movs	r1, #0
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff faa9 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Planner Mode  ");
 8001068:	487a      	ldr	r0, [pc, #488]	; (8001254 <menu_func+0x2d8>)
 800106a:	f7ff fb07 	bl	800067c <lcd_send_string>
				break;
 800106e:	e3b1      	b.n	80017d4 <menu_func+0x858>

			case 1:
				if(menu_click){
 8001070:	4b74      	ldr	r3, [pc, #464]	; (8001244 <menu_func+0x2c8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00a      	beq.n	800108e <menu_func+0x112>
					current_page = 7;
 8001078:	4b71      	ldr	r3, [pc, #452]	; (8001240 <menu_func+0x2c4>)
 800107a:	2207      	movs	r2, #7
 800107c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800107e:	4b71      	ldr	r3, [pc, #452]	; (8001244 <menu_func+0x2c8>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001084:	2100      	movs	r1, #0
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff ff78 	bl	8000f7c <menu_func>
					break;
 800108c:	e3a2      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_down){
 800108e:	4b6e      	ldr	r3, [pc, #440]	; (8001248 <menu_func+0x2cc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00a      	beq.n	80010ac <menu_func+0x130>
					current_page = 2;
 8001096:	4b6a      	ldr	r3, [pc, #424]	; (8001240 <menu_func+0x2c4>)
 8001098:	2202      	movs	r2, #2
 800109a:	601a      	str	r2, [r3, #0]
					menu_down =0;
 800109c:	4b6a      	ldr	r3, [pc, #424]	; (8001248 <menu_func+0x2cc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80010a2:	2100      	movs	r1, #0
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff69 	bl	8000f7c <menu_func>
					break;
 80010aa:	e393      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_up){
 80010ac:	4b67      	ldr	r3, [pc, #412]	; (800124c <menu_func+0x2d0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00a      	beq.n	80010ca <menu_func+0x14e>
					current_page = 0;
 80010b4:	4b62      	ldr	r3, [pc, #392]	; (8001240 <menu_func+0x2c4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
					menu_up =0;
 80010ba:	4b64      	ldr	r3, [pc, #400]	; (800124c <menu_func+0x2d0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80010c0:	2100      	movs	r1, #0
 80010c2:	2001      	movs	r0, #1
 80010c4:	f7ff ff5a 	bl	8000f7c <menu_func>
					break;
 80010c8:	e384      	b.n	80017d4 <menu_func+0x858>
				}
				lcd_init ();
 80010ca:	f7ff fa95 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Planner Mode  ");
 80010ce:	4862      	ldr	r0, [pc, #392]	; (8001258 <menu_func+0x2dc>)
 80010d0:	f7ff fad4 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 80010d4:	2100      	movs	r1, #0
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff fa6f 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Auto Mode");
 80010dc:	485f      	ldr	r0, [pc, #380]	; (800125c <menu_func+0x2e0>)
 80010de:	f7ff facd 	bl	800067c <lcd_send_string>
				break;
 80010e2:	e377      	b.n	80017d4 <menu_func+0x858>

			case 2:
				if(menu_click){
 80010e4:	4b57      	ldr	r3, [pc, #348]	; (8001244 <menu_func+0x2c8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00a      	beq.n	8001102 <menu_func+0x186>
					current_page = 14;
 80010ec:	4b54      	ldr	r3, [pc, #336]	; (8001240 <menu_func+0x2c4>)
 80010ee:	220e      	movs	r2, #14
 80010f0:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80010f2:	4b54      	ldr	r3, [pc, #336]	; (8001244 <menu_func+0x2c8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80010f8:	2100      	movs	r1, #0
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff ff3e 	bl	8000f7c <menu_func>
					break;
 8001100:	e368      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_down){
 8001102:	4b51      	ldr	r3, [pc, #324]	; (8001248 <menu_func+0x2cc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <menu_func+0x1a4>
					current_page = 3;
 800110a:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <menu_func+0x2c4>)
 800110c:	2203      	movs	r2, #3
 800110e:	601a      	str	r2, [r3, #0]
					menu_down =0;
 8001110:	4b4d      	ldr	r3, [pc, #308]	; (8001248 <menu_func+0x2cc>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001116:	2100      	movs	r1, #0
 8001118:	2001      	movs	r0, #1
 800111a:	f7ff ff2f 	bl	8000f7c <menu_func>
					break;
 800111e:	e359      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_up){
 8001120:	4b4a      	ldr	r3, [pc, #296]	; (800124c <menu_func+0x2d0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00a      	beq.n	800113e <menu_func+0x1c2>
					current_page = 1;
 8001128:	4b45      	ldr	r3, [pc, #276]	; (8001240 <menu_func+0x2c4>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]
					menu_up =0;
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <menu_func+0x2d0>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001134:	2100      	movs	r1, #0
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff ff20 	bl	8000f7c <menu_func>
					break;
 800113c:	e34a      	b.n	80017d4 <menu_func+0x858>
				}
				lcd_init ();
 800113e:	f7ff fa5b 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Auto Mode");
 8001142:	4847      	ldr	r0, [pc, #284]	; (8001260 <menu_func+0x2e4>)
 8001144:	f7ff fa9a 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 8001148:	2100      	movs	r1, #0
 800114a:	2001      	movs	r0, #1
 800114c:	f7ff fa35 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Settings");
 8001150:	4844      	ldr	r0, [pc, #272]	; (8001264 <menu_func+0x2e8>)
 8001152:	f7ff fa93 	bl	800067c <lcd_send_string>
				break;
 8001156:	e33d      	b.n	80017d4 <menu_func+0x858>

			case 3:
				if(menu_click){
 8001158:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <menu_func+0x2c8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00a      	beq.n	8001176 <menu_func+0x1fa>
					//Manual Sub Menu
					current_page = 15;
 8001160:	4b37      	ldr	r3, [pc, #220]	; (8001240 <menu_func+0x2c4>)
 8001162:	220f      	movs	r2, #15
 8001164:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <menu_func+0x2c8>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800116c:	2100      	movs	r1, #0
 800116e:	2001      	movs	r0, #1
 8001170:	f7ff ff04 	bl	8000f7c <menu_func>
					break;
 8001174:	e32e      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_down){
 8001176:	4b34      	ldr	r3, [pc, #208]	; (8001248 <menu_func+0x2cc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00a      	beq.n	8001194 <menu_func+0x218>
					current_page = 0;
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <menu_func+0x2c4>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <menu_func+0x2cc>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800118a:	2100      	movs	r1, #0
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff fef5 	bl	8000f7c <menu_func>
					break;
 8001192:	e31f      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_up){
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <menu_func+0x2d0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00a      	beq.n	80011b2 <menu_func+0x236>
					current_page = 2;
 800119c:	4b28      	ldr	r3, [pc, #160]	; (8001240 <menu_func+0x2c4>)
 800119e:	2202      	movs	r2, #2
 80011a0:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <menu_func+0x2d0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80011a8:	2100      	movs	r1, #0
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff fee6 	bl	8000f7c <menu_func>
					break;
 80011b0:	e310      	b.n	80017d4 <menu_func+0x858>
				}
				lcd_init ();
 80011b2:	f7ff fa21 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Settings");
 80011b6:	482c      	ldr	r0, [pc, #176]	; (8001268 <menu_func+0x2ec>)
 80011b8:	f7ff fa60 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 80011bc:	2100      	movs	r1, #0
 80011be:	2001      	movs	r0, #1
 80011c0:	f7ff f9fb 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  ");
 80011c4:	4829      	ldr	r0, [pc, #164]	; (800126c <menu_func+0x2f0>)
 80011c6:	f7ff fa59 	bl	800067c <lcd_send_string>
				break;
 80011ca:	e303      	b.n	80017d4 <menu_func+0x858>

			case 4:
				if(menu_click){
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <menu_func+0x2c8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00a      	beq.n	80011ea <menu_func+0x26e>
					current_page = 6;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <menu_func+0x2c4>)
 80011d6:	2206      	movs	r2, #6
 80011d8:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <menu_func+0x2c8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80011e0:	2100      	movs	r1, #0
 80011e2:	2001      	movs	r0, #1
 80011e4:	f7ff feca 	bl	8000f7c <menu_func>
					break;
 80011e8:	e2f4      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_down){
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <menu_func+0x2cc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00a      	beq.n	8001208 <menu_func+0x28c>
					current_page = 5;
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <menu_func+0x2c4>)
 80011f4:	2205      	movs	r2, #5
 80011f6:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <menu_func+0x2cc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80011fe:	2100      	movs	r1, #0
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff febb 	bl	8000f7c <menu_func>
					break;
 8001206:	e2e5      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_up){
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <menu_func+0x2d0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00a      	beq.n	8001226 <menu_func+0x2aa>
					current_page = 5;
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <menu_func+0x2c4>)
 8001212:	2205      	movs	r2, #5
 8001214:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <menu_func+0x2d0>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800121c:	2100      	movs	r1, #0
 800121e:	2001      	movs	r0, #1
 8001220:	f7ff feac 	bl	8000f7c <menu_func>
					break;
 8001224:	e2d6      	b.n	80017d4 <menu_func+0x858>
				}
				lcd_init ();
 8001226:	f7ff f9e7 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Press Start");
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <menu_func+0x2f4>)
 800122c:	f7ff fa26 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 8001230:	2100      	movs	r1, #0
 8001232:	2001      	movs	r0, #1
 8001234:	f7ff f9c1 	bl	80005ba <lcd_put_cur>
				lcd_send_string(" Back");
 8001238:	480e      	ldr	r0, [pc, #56]	; (8001274 <menu_func+0x2f8>)
 800123a:	f7ff fa1f 	bl	800067c <lcd_send_string>
				break;
 800123e:	e2c9      	b.n	80017d4 <menu_func+0x858>
 8001240:	20000038 	.word	0x20000038
 8001244:	2000002c 	.word	0x2000002c
 8001248:	20000034 	.word	0x20000034
 800124c:	20000030 	.word	0x20000030
 8001250:	0800542c 	.word	0x0800542c
 8001254:	0800543c 	.word	0x0800543c
 8001258:	08005450 	.word	0x08005450
 800125c:	08005464 	.word	0x08005464
 8001260:	08005470 	.word	0x08005470
 8001264:	0800547c 	.word	0x0800547c
 8001268:	08005488 	.word	0x08005488
 800126c:	08005494 	.word	0x08005494
 8001270:	08005498 	.word	0x08005498
 8001274:	080054a8 	.word	0x080054a8

			case 5:
				if(menu_click){
 8001278:	4bac      	ldr	r3, [pc, #688]	; (800152c <menu_func+0x5b0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00a      	beq.n	8001296 <menu_func+0x31a>
					current_page = 0;
 8001280:	4bab      	ldr	r3, [pc, #684]	; (8001530 <menu_func+0x5b4>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001286:	4ba9      	ldr	r3, [pc, #676]	; (800152c <menu_func+0x5b0>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800128c:	2100      	movs	r1, #0
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff fe74 	bl	8000f7c <menu_func>
					break;
 8001294:	e29e      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_down){
 8001296:	4ba7      	ldr	r3, [pc, #668]	; (8001534 <menu_func+0x5b8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00a      	beq.n	80012b4 <menu_func+0x338>
					current_page = 4;
 800129e:	4ba4      	ldr	r3, [pc, #656]	; (8001530 <menu_func+0x5b4>)
 80012a0:	2204      	movs	r2, #4
 80012a2:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80012a4:	4ba3      	ldr	r3, [pc, #652]	; (8001534 <menu_func+0x5b8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80012aa:	2100      	movs	r1, #0
 80012ac:	2001      	movs	r0, #1
 80012ae:	f7ff fe65 	bl	8000f7c <menu_func>
					break;
 80012b2:	e28f      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_up){
 80012b4:	4ba0      	ldr	r3, [pc, #640]	; (8001538 <menu_func+0x5bc>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00a      	beq.n	80012d2 <menu_func+0x356>
					current_page = 4;
 80012bc:	4b9c      	ldr	r3, [pc, #624]	; (8001530 <menu_func+0x5b4>)
 80012be:	2204      	movs	r2, #4
 80012c0:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80012c2:	4b9d      	ldr	r3, [pc, #628]	; (8001538 <menu_func+0x5bc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80012c8:	2100      	movs	r1, #0
 80012ca:	2001      	movs	r0, #1
 80012cc:	f7ff fe56 	bl	8000f7c <menu_func>
					break;
 80012d0:	e280      	b.n	80017d4 <menu_func+0x858>
				}
				lcd_init ();
 80012d2:	f7ff f991 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Back");
 80012d6:	4899      	ldr	r0, [pc, #612]	; (800153c <menu_func+0x5c0>)
 80012d8:	f7ff f9d0 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 80012dc:	2100      	movs	r1, #0
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff f96b 	bl	80005ba <lcd_put_cur>
				lcd_send_string("");
 80012e4:	4896      	ldr	r0, [pc, #600]	; (8001540 <menu_func+0x5c4>)
 80012e6:	f7ff f9c9 	bl	800067c <lcd_send_string>
				break;
 80012ea:	e273      	b.n	80017d4 <menu_func+0x858>

			case 6:
				if(menu_click){
 80012ec:	4b8f      	ldr	r3, [pc, #572]	; (800152c <menu_func+0x5b0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00a      	beq.n	800130a <menu_func+0x38e>
					current_page = 4;
 80012f4:	4b8e      	ldr	r3, [pc, #568]	; (8001530 <menu_func+0x5b4>)
 80012f6:	2204      	movs	r2, #4
 80012f8:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80012fa:	4b8c      	ldr	r3, [pc, #560]	; (800152c <menu_func+0x5b0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001300:	2100      	movs	r1, #0
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fe3a 	bl	8000f7c <menu_func>
					lcd_init ();
					lcd_send_string ("Watering");
					lcd_put_cur(1, 0);
					lcd_send_string("Now");
				}
				break;
 8001308:	e264      	b.n	80017d4 <menu_func+0x858>
					current_page = 6;
 800130a:	4b89      	ldr	r3, [pc, #548]	; (8001530 <menu_func+0x5b4>)
 800130c:	2206      	movs	r2, #6
 800130e:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001310:	4b89      	ldr	r3, [pc, #548]	; (8001538 <menu_func+0x5bc>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001316:	4b87      	ldr	r3, [pc, #540]	; (8001534 <menu_func+0x5b8>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
					lcd_init ();
 800131c:	f7ff f96c 	bl	80005f8 <lcd_init>
					lcd_send_string ("Watering");
 8001320:	4888      	ldr	r0, [pc, #544]	; (8001544 <menu_func+0x5c8>)
 8001322:	f7ff f9ab 	bl	800067c <lcd_send_string>
					lcd_put_cur(1, 0);
 8001326:	2100      	movs	r1, #0
 8001328:	2001      	movs	r0, #1
 800132a:	f7ff f946 	bl	80005ba <lcd_put_cur>
					lcd_send_string("Now");
 800132e:	4886      	ldr	r0, [pc, #536]	; (8001548 <menu_func+0x5cc>)
 8001330:	f7ff f9a4 	bl	800067c <lcd_send_string>
				break;
 8001334:	e24e      	b.n	80017d4 <menu_func+0x858>

			case 7:
				if(menu_click){
 8001336:	4b7d      	ldr	r3, [pc, #500]	; (800152c <menu_func+0x5b0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00a      	beq.n	8001354 <menu_func+0x3d8>
					current_page = 10;
 800133e:	4b7c      	ldr	r3, [pc, #496]	; (8001530 <menu_func+0x5b4>)
 8001340:	220a      	movs	r2, #10
 8001342:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001344:	4b79      	ldr	r3, [pc, #484]	; (800152c <menu_func+0x5b0>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800134a:	2100      	movs	r1, #0
 800134c:	2001      	movs	r0, #1
 800134e:	f7ff fe15 	bl	8000f7c <menu_func>
					break;
 8001352:	e23f      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_down){
 8001354:	4b77      	ldr	r3, [pc, #476]	; (8001534 <menu_func+0x5b8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00a      	beq.n	8001372 <menu_func+0x3f6>
					current_page = 8;
 800135c:	4b74      	ldr	r3, [pc, #464]	; (8001530 <menu_func+0x5b4>)
 800135e:	2208      	movs	r2, #8
 8001360:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001362:	4b74      	ldr	r3, [pc, #464]	; (8001534 <menu_func+0x5b8>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001368:	2100      	movs	r1, #0
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff fe06 	bl	8000f7c <menu_func>
					break;
 8001370:	e230      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_up){
 8001372:	4b71      	ldr	r3, [pc, #452]	; (8001538 <menu_func+0x5bc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <menu_func+0x414>
					current_page = 13;
 800137a:	4b6d      	ldr	r3, [pc, #436]	; (8001530 <menu_func+0x5b4>)
 800137c:	220d      	movs	r2, #13
 800137e:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001380:	4b6d      	ldr	r3, [pc, #436]	; (8001538 <menu_func+0x5bc>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001386:	2100      	movs	r1, #0
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff fdf7 	bl	8000f7c <menu_func>
					break;
 800138e:	e221      	b.n	80017d4 <menu_func+0x858>
				}
				lcd_init ();
 8001390:	f7ff f932 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Line 1");
 8001394:	486d      	ldr	r0, [pc, #436]	; (800154c <menu_func+0x5d0>)
 8001396:	f7ff f971 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 800139a:	2100      	movs	r1, #0
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff f90c 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Line 2");
 80013a2:	486b      	ldr	r0, [pc, #428]	; (8001550 <menu_func+0x5d4>)
 80013a4:	f7ff f96a 	bl	800067c <lcd_send_string>
				break;
 80013a8:	e214      	b.n	80017d4 <menu_func+0x858>

			case 8:
				if(menu_click){
 80013aa:	4b60      	ldr	r3, [pc, #384]	; (800152c <menu_func+0x5b0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00a      	beq.n	80013c8 <menu_func+0x44c>
					current_page = 10;
 80013b2:	4b5f      	ldr	r3, [pc, #380]	; (8001530 <menu_func+0x5b4>)
 80013b4:	220a      	movs	r2, #10
 80013b6:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80013b8:	4b5c      	ldr	r3, [pc, #368]	; (800152c <menu_func+0x5b0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80013be:	2100      	movs	r1, #0
 80013c0:	2001      	movs	r0, #1
 80013c2:	f7ff fddb 	bl	8000f7c <menu_func>
					break;
 80013c6:	e205      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_down){
 80013c8:	4b5a      	ldr	r3, [pc, #360]	; (8001534 <menu_func+0x5b8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00a      	beq.n	80013e6 <menu_func+0x46a>
					current_page = 9;
 80013d0:	4b57      	ldr	r3, [pc, #348]	; (8001530 <menu_func+0x5b4>)
 80013d2:	2209      	movs	r2, #9
 80013d4:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80013d6:	4b57      	ldr	r3, [pc, #348]	; (8001534 <menu_func+0x5b8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80013dc:	2100      	movs	r1, #0
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff fdcc 	bl	8000f7c <menu_func>
					break;
 80013e4:	e1f6      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_up){
 80013e6:	4b54      	ldr	r3, [pc, #336]	; (8001538 <menu_func+0x5bc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00a      	beq.n	8001404 <menu_func+0x488>
					current_page = 7;
 80013ee:	4b50      	ldr	r3, [pc, #320]	; (8001530 <menu_func+0x5b4>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80013f4:	4b50      	ldr	r3, [pc, #320]	; (8001538 <menu_func+0x5bc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80013fa:	2100      	movs	r1, #0
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff fdbd 	bl	8000f7c <menu_func>
					break;
 8001402:	e1e7      	b.n	80017d4 <menu_func+0x858>
				}
				lcd_init ();
 8001404:	f7ff f8f8 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Line 2");
 8001408:	4852      	ldr	r0, [pc, #328]	; (8001554 <menu_func+0x5d8>)
 800140a:	f7ff f937 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 800140e:	2100      	movs	r1, #0
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff f8d2 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Time");
 8001416:	4850      	ldr	r0, [pc, #320]	; (8001558 <menu_func+0x5dc>)
 8001418:	f7ff f930 	bl	800067c <lcd_send_string>
				break;
 800141c:	e1da      	b.n	80017d4 <menu_func+0x858>

			case 9:
				if(menu_click){
 800141e:	4b43      	ldr	r3, [pc, #268]	; (800152c <menu_func+0x5b0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <menu_func+0x4c0>
					current_page = 11;
 8001426:	4b42      	ldr	r3, [pc, #264]	; (8001530 <menu_func+0x5b4>)
 8001428:	220b      	movs	r2, #11
 800142a:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800142c:	4b3f      	ldr	r3, [pc, #252]	; (800152c <menu_func+0x5b0>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001432:	2100      	movs	r1, #0
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff fda1 	bl	8000f7c <menu_func>
					break;
 800143a:	e1cb      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_down){
 800143c:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <menu_func+0x5b8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00a      	beq.n	800145a <menu_func+0x4de>
					current_page = 12;
 8001444:	4b3a      	ldr	r3, [pc, #232]	; (8001530 <menu_func+0x5b4>)
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <menu_func+0x5b8>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001450:	2100      	movs	r1, #0
 8001452:	2001      	movs	r0, #1
 8001454:	f7ff fd92 	bl	8000f7c <menu_func>
					break;
 8001458:	e1bc      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_up){
 800145a:	4b37      	ldr	r3, [pc, #220]	; (8001538 <menu_func+0x5bc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00a      	beq.n	8001478 <menu_func+0x4fc>
					current_page = 8;
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <menu_func+0x5b4>)
 8001464:	2208      	movs	r2, #8
 8001466:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001468:	4b33      	ldr	r3, [pc, #204]	; (8001538 <menu_func+0x5bc>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800146e:	2100      	movs	r1, #0
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff fd83 	bl	8000f7c <menu_func>
					break;
 8001476:	e1ad      	b.n	80017d4 <menu_func+0x858>
				}
				lcd_init ();
 8001478:	f7ff f8be 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Time");
 800147c:	4837      	ldr	r0, [pc, #220]	; (800155c <menu_func+0x5e0>)
 800147e:	f7ff f8fd 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 8001482:	2100      	movs	r1, #0
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff f898 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Start");
 800148a:	4835      	ldr	r0, [pc, #212]	; (8001560 <menu_func+0x5e4>)
 800148c:	f7ff f8f6 	bl	800067c <lcd_send_string>
				break;
 8001490:	e1a0      	b.n	80017d4 <menu_func+0x858>

			case 10:
				if(menu_click){
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <menu_func+0x5b0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00a      	beq.n	80014b0 <menu_func+0x534>
					current_page = 7;
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <menu_func+0x5b4>)
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <menu_func+0x5b0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80014a6:	2100      	movs	r1, #0
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff fd67 	bl	8000f7c <menu_func>
					break;
 80014ae:	e191      	b.n	80017d4 <menu_func+0x858>
				}else{
					current_page = 10;
 80014b0:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <menu_func+0x5b4>)
 80014b2:	220a      	movs	r2, #10
 80014b4:	601a      	str	r2, [r3, #0]
					lcd_init ();
 80014b6:	f7ff f89f 	bl	80005f8 <lcd_init>
					lcd_send_string ("> 20");
 80014ba:	482a      	ldr	r0, [pc, #168]	; (8001564 <menu_func+0x5e8>)
 80014bc:	f7ff f8de 	bl	800067c <lcd_send_string>
					lcd_put_cur(1, 0);
 80014c0:	2100      	movs	r1, #0
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff f879 	bl	80005ba <lcd_put_cur>
					lcd_send_string("  ");
 80014c8:	4827      	ldr	r0, [pc, #156]	; (8001568 <menu_func+0x5ec>)
 80014ca:	f7ff f8d7 	bl	800067c <lcd_send_string>
				}
				break;
 80014ce:	e181      	b.n	80017d4 <menu_func+0x858>

			case 11:
				if(menu_click){
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <menu_func+0x5b0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00a      	beq.n	80014ee <menu_func+0x572>
					current_page = 9;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <menu_func+0x5b4>)
 80014da:	2209      	movs	r2, #9
 80014dc:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <menu_func+0x5b0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80014e4:	2100      	movs	r1, #0
 80014e6:	2001      	movs	r0, #1
 80014e8:	f7ff fd48 	bl	8000f7c <menu_func>
					break;
 80014ec:	e172      	b.n	80017d4 <menu_func+0x858>
				}else{
					current_page = 11;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <menu_func+0x5b4>)
 80014f0:	220b      	movs	r2, #11
 80014f2:	601a      	str	r2, [r3, #0]
					lcd_init ();
 80014f4:	f7ff f880 	bl	80005f8 <lcd_init>
					lcd_send_string ("> Saat Loopu");
 80014f8:	481c      	ldr	r0, [pc, #112]	; (800156c <menu_func+0x5f0>)
 80014fa:	f7ff f8bf 	bl	800067c <lcd_send_string>
					lcd_put_cur(1, 0);
 80014fe:	2100      	movs	r1, #0
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff f85a 	bl	80005ba <lcd_put_cur>
					lcd_send_string("  ");
 8001506:	4818      	ldr	r0, [pc, #96]	; (8001568 <menu_func+0x5ec>)
 8001508:	f7ff f8b8 	bl	800067c <lcd_send_string>
				}
				break;
 800150c:	e162      	b.n	80017d4 <menu_func+0x858>

			case 12:
				if(menu_click){
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <menu_func+0x5b0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d02c      	beq.n	8001570 <menu_func+0x5f4>
					current_page = 1;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <menu_func+0x5b4>)
 8001518:	2201      	movs	r2, #1
 800151a:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <menu_func+0x5b0>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001522:	2100      	movs	r1, #0
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff fd29 	bl	8000f7c <menu_func>
					break;
 800152a:	e153      	b.n	80017d4 <menu_func+0x858>
 800152c:	2000002c 	.word	0x2000002c
 8001530:	20000038 	.word	0x20000038
 8001534:	20000034 	.word	0x20000034
 8001538:	20000030 	.word	0x20000030
 800153c:	080054b0 	.word	0x080054b0
 8001540:	080054b8 	.word	0x080054b8
 8001544:	080054bc 	.word	0x080054bc
 8001548:	080054c8 	.word	0x080054c8
 800154c:	080054cc 	.word	0x080054cc
 8001550:	080054d8 	.word	0x080054d8
 8001554:	080054e4 	.word	0x080054e4
 8001558:	080054f0 	.word	0x080054f0
 800155c:	080054f8 	.word	0x080054f8
 8001560:	08005500 	.word	0x08005500
 8001564:	08005508 	.word	0x08005508
 8001568:	08005494 	.word	0x08005494
 800156c:	08005510 	.word	0x08005510
				}else if(menu_down){
 8001570:	4ba0      	ldr	r3, [pc, #640]	; (80017f4 <menu_func+0x878>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00a      	beq.n	800158e <menu_func+0x612>
					current_page = 13;
 8001578:	4b9f      	ldr	r3, [pc, #636]	; (80017f8 <menu_func+0x87c>)
 800157a:	220d      	movs	r2, #13
 800157c:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800157e:	4b9d      	ldr	r3, [pc, #628]	; (80017f4 <menu_func+0x878>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001584:	2100      	movs	r1, #0
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff fcf8 	bl	8000f7c <menu_func>
					break;
 800158c:	e122      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_up){
 800158e:	4b9b      	ldr	r3, [pc, #620]	; (80017fc <menu_func+0x880>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00a      	beq.n	80015ac <menu_func+0x630>
					current_page = 9;
 8001596:	4b98      	ldr	r3, [pc, #608]	; (80017f8 <menu_func+0x87c>)
 8001598:	2209      	movs	r2, #9
 800159a:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 800159c:	4b97      	ldr	r3, [pc, #604]	; (80017fc <menu_func+0x880>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80015a2:	2100      	movs	r1, #0
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff fce9 	bl	8000f7c <menu_func>
					break;
 80015aa:	e113      	b.n	80017d4 <menu_func+0x858>
				}
				lcd_init ();
 80015ac:	f7ff f824 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Start");
 80015b0:	4893      	ldr	r0, [pc, #588]	; (8001800 <menu_func+0x884>)
 80015b2:	f7ff f863 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 80015b6:	2100      	movs	r1, #0
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7fe fffe 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Back");
 80015be:	4891      	ldr	r0, [pc, #580]	; (8001804 <menu_func+0x888>)
 80015c0:	f7ff f85c 	bl	800067c <lcd_send_string>
				break;
 80015c4:	e106      	b.n	80017d4 <menu_func+0x858>

			case 13:
				if(menu_click){
 80015c6:	4b90      	ldr	r3, [pc, #576]	; (8001808 <menu_func+0x88c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00a      	beq.n	80015e4 <menu_func+0x668>
					current_page = 1;
 80015ce:	4b8a      	ldr	r3, [pc, #552]	; (80017f8 <menu_func+0x87c>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80015d4:	4b8c      	ldr	r3, [pc, #560]	; (8001808 <menu_func+0x88c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80015da:	2100      	movs	r1, #0
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff fccd 	bl	8000f7c <menu_func>
					break;
 80015e2:	e0f7      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_down){
 80015e4:	4b83      	ldr	r3, [pc, #524]	; (80017f4 <menu_func+0x878>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00a      	beq.n	8001602 <menu_func+0x686>
					current_page = 7;
 80015ec:	4b82      	ldr	r3, [pc, #520]	; (80017f8 <menu_func+0x87c>)
 80015ee:	2207      	movs	r2, #7
 80015f0:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80015f2:	4b80      	ldr	r3, [pc, #512]	; (80017f4 <menu_func+0x878>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80015f8:	2100      	movs	r1, #0
 80015fa:	2001      	movs	r0, #1
 80015fc:	f7ff fcbe 	bl	8000f7c <menu_func>
					break;
 8001600:	e0e8      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_up){
 8001602:	4b7e      	ldr	r3, [pc, #504]	; (80017fc <menu_func+0x880>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00a      	beq.n	8001620 <menu_func+0x6a4>
					current_page = 12;
 800160a:	4b7b      	ldr	r3, [pc, #492]	; (80017f8 <menu_func+0x87c>)
 800160c:	220c      	movs	r2, #12
 800160e:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001610:	4b7a      	ldr	r3, [pc, #488]	; (80017fc <menu_func+0x880>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001616:	2100      	movs	r1, #0
 8001618:	2001      	movs	r0, #1
 800161a:	f7ff fcaf 	bl	8000f7c <menu_func>
					break;
 800161e:	e0d9      	b.n	80017d4 <menu_func+0x858>
				}
				lcd_init ();
 8001620:	f7fe ffea 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Back");
 8001624:	4879      	ldr	r0, [pc, #484]	; (800180c <menu_func+0x890>)
 8001626:	f7ff f829 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 800162a:	2100      	movs	r1, #0
 800162c:	2001      	movs	r0, #1
 800162e:	f7fe ffc4 	bl	80005ba <lcd_put_cur>
				lcd_send_string(" ");
 8001632:	4877      	ldr	r0, [pc, #476]	; (8001810 <menu_func+0x894>)
 8001634:	f7ff f822 	bl	800067c <lcd_send_string>
				break;
 8001638:	e0cc      	b.n	80017d4 <menu_func+0x858>

			case 14:
				if(menu_click){
 800163a:	4b73      	ldr	r3, [pc, #460]	; (8001808 <menu_func+0x88c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <menu_func+0x6dc>
					current_page = 2;
 8001642:	4b6d      	ldr	r3, [pc, #436]	; (80017f8 <menu_func+0x87c>)
 8001644:	2202      	movs	r2, #2
 8001646:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001648:	4b6f      	ldr	r3, [pc, #444]	; (8001808 <menu_func+0x88c>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800164e:	2100      	movs	r1, #0
 8001650:	2001      	movs	r0, #1
 8001652:	f7ff fc93 	bl	8000f7c <menu_func>
					break;
 8001656:	e0bd      	b.n	80017d4 <menu_func+0x858>
				}else{
					current_page = 14;
 8001658:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <menu_func+0x87c>)
 800165a:	220e      	movs	r2, #14
 800165c:	601a      	str	r2, [r3, #0]
					lcd_init ();
 800165e:	f7fe ffcb 	bl	80005f8 <lcd_init>
					lcd_send_string ("> INFO DISP");
 8001662:	486c      	ldr	r0, [pc, #432]	; (8001814 <menu_func+0x898>)
 8001664:	f7ff f80a 	bl	800067c <lcd_send_string>
					lcd_put_cur(1, 0);
 8001668:	2100      	movs	r1, #0
 800166a:	2001      	movs	r0, #1
 800166c:	f7fe ffa5 	bl	80005ba <lcd_put_cur>
					lcd_send_string("  ");
 8001670:	4869      	ldr	r0, [pc, #420]	; (8001818 <menu_func+0x89c>)
 8001672:	f7ff f803 	bl	800067c <lcd_send_string>
				}
				break;
 8001676:	e0ad      	b.n	80017d4 <menu_func+0x858>

			case 15:
				if(menu_click){
 8001678:	4b63      	ldr	r3, [pc, #396]	; (8001808 <menu_func+0x88c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00a      	beq.n	8001696 <menu_func+0x71a>
					current_page = 11;
 8001680:	4b5d      	ldr	r3, [pc, #372]	; (80017f8 <menu_func+0x87c>)
 8001682:	220b      	movs	r2, #11
 8001684:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001686:	4b60      	ldr	r3, [pc, #384]	; (8001808 <menu_func+0x88c>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800168c:	2100      	movs	r1, #0
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff fc74 	bl	8000f7c <menu_func>
					break;
 8001694:	e09e      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_down){
 8001696:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <menu_func+0x878>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00a      	beq.n	80016b4 <menu_func+0x738>
					current_page = 16;
 800169e:	4b56      	ldr	r3, [pc, #344]	; (80017f8 <menu_func+0x87c>)
 80016a0:	2210      	movs	r2, #16
 80016a2:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <menu_func+0x878>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80016aa:	2100      	movs	r1, #0
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff fc65 	bl	8000f7c <menu_func>
					break;
 80016b2:	e08f      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_up){
 80016b4:	4b51      	ldr	r3, [pc, #324]	; (80017fc <menu_func+0x880>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00a      	beq.n	80016d2 <menu_func+0x756>
					current_page = 17;
 80016bc:	4b4e      	ldr	r3, [pc, #312]	; (80017f8 <menu_func+0x87c>)
 80016be:	2211      	movs	r2, #17
 80016c0:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80016c2:	4b4e      	ldr	r3, [pc, #312]	; (80017fc <menu_func+0x880>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80016c8:	2100      	movs	r1, #0
 80016ca:	2001      	movs	r0, #1
 80016cc:	f7ff fc56 	bl	8000f7c <menu_func>
					break;
 80016d0:	e080      	b.n	80017d4 <menu_func+0x858>
				}
				lcd_init ();
 80016d2:	f7fe ff91 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Time S.");
 80016d6:	4851      	ldr	r0, [pc, #324]	; (800181c <menu_func+0x8a0>)
 80016d8:	f7fe ffd0 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 80016dc:	2100      	movs	r1, #0
 80016de:	2001      	movs	r0, #1
 80016e0:	f7fe ff6b 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Bluetooth");
 80016e4:	484e      	ldr	r0, [pc, #312]	; (8001820 <menu_func+0x8a4>)
 80016e6:	f7fe ffc9 	bl	800067c <lcd_send_string>
				break;
 80016ea:	e073      	b.n	80017d4 <menu_func+0x858>

			case 16:
				if(menu_click){
 80016ec:	4b46      	ldr	r3, [pc, #280]	; (8001808 <menu_func+0x88c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00a      	beq.n	800170a <menu_func+0x78e>
					current_page = 11;
 80016f4:	4b40      	ldr	r3, [pc, #256]	; (80017f8 <menu_func+0x87c>)
 80016f6:	220b      	movs	r2, #11
 80016f8:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <menu_func+0x88c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001700:	2100      	movs	r1, #0
 8001702:	2001      	movs	r0, #1
 8001704:	f7ff fc3a 	bl	8000f7c <menu_func>
					break;
 8001708:	e064      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_down){
 800170a:	4b3a      	ldr	r3, [pc, #232]	; (80017f4 <menu_func+0x878>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00a      	beq.n	8001728 <menu_func+0x7ac>
					current_page = 17;
 8001712:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <menu_func+0x87c>)
 8001714:	2211      	movs	r2, #17
 8001716:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <menu_func+0x878>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800171e:	2100      	movs	r1, #0
 8001720:	2001      	movs	r0, #1
 8001722:	f7ff fc2b 	bl	8000f7c <menu_func>
					break;
 8001726:	e055      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_up){
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <menu_func+0x880>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00a      	beq.n	8001746 <menu_func+0x7ca>
					current_page = 15;
 8001730:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <menu_func+0x87c>)
 8001732:	220f      	movs	r2, #15
 8001734:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001736:	4b31      	ldr	r3, [pc, #196]	; (80017fc <menu_func+0x880>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800173c:	2100      	movs	r1, #0
 800173e:	2001      	movs	r0, #1
 8001740:	f7ff fc1c 	bl	8000f7c <menu_func>
					break;
 8001744:	e046      	b.n	80017d4 <menu_func+0x858>
				}
				lcd_init ();
 8001746:	f7fe ff57 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Bluetooth");
 800174a:	4836      	ldr	r0, [pc, #216]	; (8001824 <menu_func+0x8a8>)
 800174c:	f7fe ff96 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 8001750:	2100      	movs	r1, #0
 8001752:	2001      	movs	r0, #1
 8001754:	f7fe ff31 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  Back");
 8001758:	482a      	ldr	r0, [pc, #168]	; (8001804 <menu_func+0x888>)
 800175a:	f7fe ff8f 	bl	800067c <lcd_send_string>
				break;
 800175e:	e039      	b.n	80017d4 <menu_func+0x858>
			case 17:
				if(menu_click){
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <menu_func+0x88c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00a      	beq.n	800177e <menu_func+0x802>
					current_page = 3;
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <menu_func+0x87c>)
 800176a:	2203      	movs	r2, #3
 800176c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <menu_func+0x88c>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001774:	2100      	movs	r1, #0
 8001776:	2001      	movs	r0, #1
 8001778:	f7ff fc00 	bl	8000f7c <menu_func>
					break;
 800177c:	e02a      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_down){
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <menu_func+0x878>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00a      	beq.n	800179c <menu_func+0x820>
					current_page = 15;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <menu_func+0x87c>)
 8001788:	220f      	movs	r2, #15
 800178a:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <menu_func+0x878>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001792:	2100      	movs	r1, #0
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff fbf1 	bl	8000f7c <menu_func>
					break;
 800179a:	e01b      	b.n	80017d4 <menu_func+0x858>
				}else if(menu_up){
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <menu_func+0x880>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00a      	beq.n	80017ba <menu_func+0x83e>
					current_page = 16;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <menu_func+0x87c>)
 80017a6:	2210      	movs	r2, #16
 80017a8:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <menu_func+0x880>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80017b0:	2100      	movs	r1, #0
 80017b2:	2001      	movs	r0, #1
 80017b4:	f7ff fbe2 	bl	8000f7c <menu_func>
					break;
 80017b8:	e00c      	b.n	80017d4 <menu_func+0x858>
				}
				lcd_init ();
 80017ba:	f7fe ff1d 	bl	80005f8 <lcd_init>
				lcd_send_string ("> Back");
 80017be:	4813      	ldr	r0, [pc, #76]	; (800180c <menu_func+0x890>)
 80017c0:	f7fe ff5c 	bl	800067c <lcd_send_string>
				lcd_put_cur(1, 0);
 80017c4:	2100      	movs	r1, #0
 80017c6:	2001      	movs	r0, #1
 80017c8:	f7fe fef7 	bl	80005ba <lcd_put_cur>
				lcd_send_string("  ");
 80017cc:	4812      	ldr	r0, [pc, #72]	; (8001818 <menu_func+0x89c>)
 80017ce:	f7fe ff55 	bl	800067c <lcd_send_string>
				break;
 80017d2:	bf00      	nop
		}
		menu_lcd_refresh = 0;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <menu_func+0x8ac>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
		menu_click= 0;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <menu_func+0x88c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
		menu_up = 0;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <menu_func+0x880>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
		menu_down = 0;
 80017e6:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <menu_func+0x878>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
	}
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000034 	.word	0x20000034
 80017f8:	20000038 	.word	0x20000038
 80017fc:	20000030 	.word	0x20000030
 8001800:	08005520 	.word	0x08005520
 8001804:	08005528 	.word	0x08005528
 8001808:	2000002c 	.word	0x2000002c
 800180c:	080054b0 	.word	0x080054b0
 8001810:	08005530 	.word	0x08005530
 8001814:	08005534 	.word	0x08005534
 8001818:	08005494 	.word	0x08005494
 800181c:	08005540 	.word	0x08005540
 8001820:	0800554c 	.word	0x0800554c
 8001824:	08005558 	.word	0x08005558
 8001828:	20000028 	.word	0x20000028

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001834:	e7fe      	b.n	8001834 <Error_Handler+0x8>
	...

08001838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_MspInit+0x4c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a0f      	ldr	r2, [pc, #60]	; (8001884 <HAL_MspInit+0x4c>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_MspInit+0x4c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a08      	ldr	r2, [pc, #32]	; (8001884 <HAL_MspInit+0x4c>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_MspInit+0x4c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a32      	ldr	r2, [pc, #200]	; (8001970 <HAL_ADC_MspInit+0xe8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d15e      	bne.n	8001968 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b31      	ldr	r3, [pc, #196]	; (8001974 <HAL_ADC_MspInit+0xec>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a30      	ldr	r2, [pc, #192]	; (8001974 <HAL_ADC_MspInit+0xec>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <HAL_ADC_MspInit+0xec>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_ADC_MspInit+0xec>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a29      	ldr	r2, [pc, #164]	; (8001974 <HAL_ADC_MspInit+0xec>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b27      	ldr	r3, [pc, #156]	; (8001974 <HAL_ADC_MspInit+0xec>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = moisture_adc_sens0_Pin|moisture_adc_sens1_Pin|moisture_adc_sens2_Pin|moisture_adc_sens3_Pin
 80018e2:	237f      	movs	r3, #127	; 0x7f
 80018e4:	617b      	str	r3, [r7, #20]
                          |rain_adc_sens_Pin|waterlevel_adc_sens_Pin|waterflow_adc_sens_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e6:	2303      	movs	r3, #3
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4820      	ldr	r0, [pc, #128]	; (8001978 <HAL_ADC_MspInit+0xf0>)
 80018f6:	f001 fbad 	bl	8003054 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_ADC_MspInit+0xf4>)
 80018fc:	4a20      	ldr	r2, [pc, #128]	; (8001980 <HAL_ADC_MspInit+0xf8>)
 80018fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_ADC_MspInit+0xf4>)
 8001902:	2200      	movs	r2, #0
 8001904:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <HAL_ADC_MspInit+0xf4>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <HAL_ADC_MspInit+0xf4>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <HAL_ADC_MspInit+0xf4>)
 8001914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001918:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_ADC_MspInit+0xf4>)
 800191c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001920:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_ADC_MspInit+0xf4>)
 8001924:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001928:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_ADC_MspInit+0xf4>)
 800192c:	2200      	movs	r2, #0
 800192e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_ADC_MspInit+0xf4>)
 8001932:	2200      	movs	r2, #0
 8001934:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_ADC_MspInit+0xf4>)
 8001938:	2200      	movs	r2, #0
 800193a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800193c:	480f      	ldr	r0, [pc, #60]	; (800197c <HAL_ADC_MspInit+0xf4>)
 800193e:	f001 f819 	bl	8002974 <HAL_DMA_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001948:	f7ff ff70 	bl	800182c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_ADC_MspInit+0xf4>)
 8001950:	639a      	str	r2, [r3, #56]	; 0x38
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_ADC_MspInit+0xf4>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	2012      	movs	r0, #18
 800195e:	f000 ffd2 	bl	8002906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001962:	2012      	movs	r0, #18
 8001964:	f000 ffeb 	bl	800293e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001968:	bf00      	nop
 800196a:	3728      	adds	r7, #40	; 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40012000 	.word	0x40012000
 8001974:	40023800 	.word	0x40023800
 8001978:	40020000 	.word	0x40020000
 800197c:	20000120 	.word	0x20000120
 8001980:	40026410 	.word	0x40026410

08001984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <HAL_I2C_MspInit+0x84>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d12b      	bne.n	80019fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_I2C_MspInit+0x88>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <HAL_I2C_MspInit+0x88>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_I2C_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_LCD_Pin|I2C1_SDA_LCD_Pin;
 80019c2:	23c0      	movs	r3, #192	; 0xc0
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c6:	2312      	movs	r3, #18
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019d2:	2304      	movs	r3, #4
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <HAL_I2C_MspInit+0x8c>)
 80019de:	f001 fb39 	bl	8003054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_I2C_MspInit+0x88>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <HAL_I2C_MspInit+0x88>)
 80019ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_I2C_MspInit+0x88>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40005400 	.word	0x40005400
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020400 	.word	0x40020400

08001a14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <HAL_RTC_MspInit+0x24>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d102      	bne.n	8001a2c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_RTC_MspInit+0x28>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40002800 	.word	0x40002800
 8001a3c:	42470e3c 	.word	0x42470e3c

08001a40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_TIM_Base_MspInit+0x3c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10d      	bne.n	8001a6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_TIM_Base_MspInit+0x40>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_TIM_Base_MspInit+0x40>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6453      	str	r3, [r2, #68]	; 0x44
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_TIM_Base_MspInit+0x40>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40023800 	.word	0x40023800

08001a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <NMI_Handler+0x4>

08001a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <MemManage_Handler+0x4>

08001a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <BusFault_Handler+0x4>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <UsageFault_Handler+0x4>

08001aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad0:	f000 f8be 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f001 fc57 	bl	8003390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001aea:	2002      	movs	r0, #2
 8001aec:	f001 fc50 	bl	8003390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <ADC_IRQHandler+0x10>)
 8001afa:	f000 f930 	bl	8001d5e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200000b8 	.word	0x200000b8

08001b08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001b0c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b10:	f001 fc3e 	bl	8003390 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b18:	f001 fc3a 	bl	8003390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <DMA2_Stream0_IRQHandler+0x10>)
 8001b26:	f001 f82b 	bl	8002b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000120 	.word	0x20000120

08001b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <SystemInit+0x20>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <SystemInit+0x20>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b5c:	480d      	ldr	r0, [pc, #52]	; (8001b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5e:	490e      	ldr	r1, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b60:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b74:	4c0b      	ldr	r4, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b82:	f7ff ffd7 	bl	8001b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b86:	f003 fc01 	bl	800538c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8a:	f7fe fd8d 	bl	80006a8 <main>
  bx  lr    
 8001b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b9c:	0800559c 	.word	0x0800559c
  ldr r2, =_sbss
 8001ba0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ba4:	2000023c 	.word	0x2000023c

08001ba8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <DMA1_Stream0_IRQHandler>
	...

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <HAL_Init+0x40>)
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <HAL_Init+0x40>)
 8001bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_Init+0x40>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f000 fe8b 	bl	80028f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 f808 	bl	8001bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff fe2a 	bl	8001838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x54>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_InitTick+0x58>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fea3 	bl	800295a <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00e      	b.n	8001c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d80a      	bhi.n	8001c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f000 fe6b 	bl	8002906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <HAL_InitTick+0x5c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000008 	.word	0x20000008
 8001c74:	20000238 	.word	0x20000238

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000238 	.word	0x20000238

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff ffee 	bl	8001c78 <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_Delay+0x44>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffde 	bl	8001c78 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000008 	.word	0x20000008

08001cd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e033      	b.n	8001d56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fdc6 	bl	8001888 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d118      	bne.n	8001d48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d1e:	f023 0302 	bic.w	r3, r3, #2
 8001d22:	f043 0202 	orr.w	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fb88 	bl	8002440 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f023 0303 	bic.w	r3, r3, #3
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
 8001d46:	e001      	b.n	8001d4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d049      	beq.n	8001e34 <HAL_ADC_IRQHandler+0xd6>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d046      	beq.n	8001e34 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d105      	bne.n	8001dbe <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d12b      	bne.n	8001e24 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d127      	bne.n	8001e24 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d119      	bne.n	8001e24 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0220 	bic.w	r2, r2, #32
 8001dfe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d105      	bne.n	8001e24 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f043 0201 	orr.w	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7fe ffa9 	bl	8000d7c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f06f 0212 	mvn.w	r2, #18
 8001e32:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf0c      	ite	eq
 8001e42:	2301      	moveq	r3, #1
 8001e44:	2300      	movne	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d057      	beq.n	8001f16 <HAL_ADC_IRQHandler+0x1b8>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d054      	beq.n	8001f16 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d139      	bne.n	8001f06 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d12b      	bne.n	8001f06 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d124      	bne.n	8001f06 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d11d      	bne.n	8001f06 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d119      	bne.n	8001f06 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ee0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d105      	bne.n	8001f06 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fc18 	bl	800273c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 020c 	mvn.w	r2, #12
 8001f14:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	bf0c      	ite	eq
 8001f3a:	2301      	moveq	r3, #1
 8001f3c:	2300      	movne	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d017      	beq.n	8001f78 <HAL_ADC_IRQHandler+0x21a>
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d014      	beq.n	8001f78 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d10d      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f933 	bl	80021d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f06f 0201 	mvn.w	r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	bf0c      	ite	eq
 8001f86:	2301      	moveq	r3, #1
 8001f88:	2300      	movne	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2301      	moveq	r3, #1
 8001fa0:	2300      	movne	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d015      	beq.n	8001fd8 <HAL_ADC_IRQHandler+0x27a>
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d012      	beq.n	8001fd8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f043 0202 	orr.w	r2, r3, #2
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f06f 0220 	mvn.w	r2, #32
 8001fc6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f90d 	bl	80021e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f06f 0220 	mvn.w	r2, #32
 8001fd6:	601a      	str	r2, [r3, #0]
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_Start_DMA+0x1e>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e0ce      	b.n	800219c <HAL_ADC_Start_DMA+0x1bc>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d018      	beq.n	8002046 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002024:	4b5f      	ldr	r3, [pc, #380]	; (80021a4 <HAL_ADC_Start_DMA+0x1c4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a5f      	ldr	r2, [pc, #380]	; (80021a8 <HAL_ADC_Start_DMA+0x1c8>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9a      	lsrs	r2, r3, #18
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002038:	e002      	b.n	8002040 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	3b01      	subs	r3, #1
 800203e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f9      	bne.n	800203a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002054:	d107      	bne.n	8002066 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002064:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	f040 8086 	bne.w	8002182 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b4:	d106      	bne.n	80020c4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f023 0206 	bic.w	r2, r3, #6
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	645a      	str	r2, [r3, #68]	; 0x44
 80020c2:	e002      	b.n	80020ca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d2:	4b36      	ldr	r3, [pc, #216]	; (80021ac <HAL_ADC_Start_DMA+0x1cc>)
 80020d4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	4a35      	ldr	r2, [pc, #212]	; (80021b0 <HAL_ADC_Start_DMA+0x1d0>)
 80020dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	4a34      	ldr	r2, [pc, #208]	; (80021b4 <HAL_ADC_Start_DMA+0x1d4>)
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ea:	4a33      	ldr	r2, [pc, #204]	; (80021b8 <HAL_ADC_Start_DMA+0x1d8>)
 80020ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002106:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002116:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	334c      	adds	r3, #76	; 0x4c
 8002122:	4619      	mov	r1, r3
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f000 fcd2 	bl	8002ad0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10f      	bne.n	8002158 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d129      	bne.n	800219a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	e020      	b.n	800219a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a17      	ldr	r2, [pc, #92]	; (80021bc <HAL_ADC_Start_DMA+0x1dc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d11b      	bne.n	800219a <HAL_ADC_Start_DMA+0x1ba>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d114      	bne.n	800219a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	e00b      	b.n	800219a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000000 	.word	0x20000000
 80021a8:	431bde83 	.word	0x431bde83
 80021ac:	40012300 	.word	0x40012300
 80021b0:	08002639 	.word	0x08002639
 80021b4:	080026f3 	.word	0x080026f3
 80021b8:	0800270f 	.word	0x0800270f
 80021bc:	40012000 	.word	0x40012000

080021c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1c>
 8002214:	2302      	movs	r3, #2
 8002216:	e105      	b.n	8002424 <HAL_ADC_ConfigChannel+0x228>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b09      	cmp	r3, #9
 8002226:	d925      	bls.n	8002274 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68d9      	ldr	r1, [r3, #12]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	3b1e      	subs	r3, #30
 800223e:	2207      	movs	r2, #7
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43da      	mvns	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	400a      	ands	r2, r1
 800224c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68d9      	ldr	r1, [r3, #12]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	4618      	mov	r0, r3
 8002260:	4603      	mov	r3, r0
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4403      	add	r3, r0
 8002266:	3b1e      	subs	r3, #30
 8002268:	409a      	lsls	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	e022      	b.n	80022ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6919      	ldr	r1, [r3, #16]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	2207      	movs	r2, #7
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	400a      	ands	r2, r1
 8002296:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6919      	ldr	r1, [r3, #16]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	4618      	mov	r0, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4403      	add	r3, r0
 80022b0:	409a      	lsls	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d824      	bhi.n	800230c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	3b05      	subs	r3, #5
 80022d4:	221f      	movs	r2, #31
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	400a      	ands	r2, r1
 80022e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	4618      	mov	r0, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	3b05      	subs	r3, #5
 80022fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	635a      	str	r2, [r3, #52]	; 0x34
 800230a:	e04c      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b0c      	cmp	r3, #12
 8002312:	d824      	bhi.n	800235e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	3b23      	subs	r3, #35	; 0x23
 8002326:	221f      	movs	r2, #31
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43da      	mvns	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	400a      	ands	r2, r1
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	b29b      	uxth	r3, r3
 8002342:	4618      	mov	r0, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	3b23      	subs	r3, #35	; 0x23
 8002350:	fa00 f203 	lsl.w	r2, r0, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
 800235c:	e023      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	3b41      	subs	r3, #65	; 0x41
 8002370:	221f      	movs	r2, #31
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	400a      	ands	r2, r1
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	4618      	mov	r0, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	3b41      	subs	r3, #65	; 0x41
 800239a:	fa00 f203 	lsl.w	r2, r0, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a6:	4b22      	ldr	r3, [pc, #136]	; (8002430 <HAL_ADC_ConfigChannel+0x234>)
 80023a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a21      	ldr	r2, [pc, #132]	; (8002434 <HAL_ADC_ConfigChannel+0x238>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d109      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1cc>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b12      	cmp	r3, #18
 80023ba:	d105      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a19      	ldr	r2, [pc, #100]	; (8002434 <HAL_ADC_ConfigChannel+0x238>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d123      	bne.n	800241a <HAL_ADC_ConfigChannel+0x21e>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d003      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0x1e6>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b11      	cmp	r3, #17
 80023e0:	d11b      	bne.n	800241a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d111      	bne.n	800241a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_ADC_ConfigChannel+0x23c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_ADC_ConfigChannel+0x240>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	0c9a      	lsrs	r2, r3, #18
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800240c:	e002      	b.n	8002414 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	3b01      	subs	r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f9      	bne.n	800240e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40012300 	.word	0x40012300
 8002434:	40012000 	.word	0x40012000
 8002438:	20000000 	.word	0x20000000
 800243c:	431bde83 	.word	0x431bde83

08002440 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002448:	4b79      	ldr	r3, [pc, #484]	; (8002630 <ADC_Init+0x1f0>)
 800244a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	431a      	orrs	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	021a      	lsls	r2, r3, #8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002498:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6899      	ldr	r1, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	4a58      	ldr	r2, [pc, #352]	; (8002634 <ADC_Init+0x1f4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d022      	beq.n	800251e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6899      	ldr	r1, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6899      	ldr	r1, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	e00f      	b.n	800253e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800252c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800253c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0202 	bic.w	r2, r2, #2
 800254c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6899      	ldr	r1, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7e1b      	ldrb	r3, [r3, #24]
 8002558:	005a      	lsls	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01b      	beq.n	80025a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800258a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	3b01      	subs	r3, #1
 8002598:	035a      	lsls	r2, r3, #13
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	e007      	b.n	80025b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	051a      	lsls	r2, r3, #20
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6899      	ldr	r1, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025f6:	025a      	lsls	r2, r3, #9
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800260e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6899      	ldr	r1, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	029a      	lsls	r2, r3, #10
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	609a      	str	r2, [r3, #8]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40012300 	.word	0x40012300
 8002634:	0f000001 	.word	0x0f000001

08002638 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800264e:	2b00      	cmp	r3, #0
 8002650:	d13c      	bne.n	80026cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d12b      	bne.n	80026c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002670:	2b00      	cmp	r3, #0
 8002672:	d127      	bne.n	80026c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800268c:	2b00      	cmp	r3, #0
 800268e:	d119      	bne.n	80026c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0220 	bic.w	r2, r2, #32
 800269e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f7fe fb59 	bl	8000d7c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026ca:	e00e      	b.n	80026ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff fd85 	bl	80021e8 <HAL_ADC_ErrorCallback>
}
 80026de:	e004      	b.n	80026ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	4798      	blx	r3
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff fd5d 	bl	80021c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2240      	movs	r2, #64	; 0x40
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f043 0204 	orr.w	r2, r3, #4
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f7ff fd5a 	bl	80021e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800276c:	4013      	ands	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800277c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002782:	4a04      	ldr	r2, [pc, #16]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	60d3      	str	r3, [r2, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <__NVIC_GetPriorityGrouping+0x18>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	f003 0307 	and.w	r3, r3, #7
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	db0b      	blt.n	80027de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	4907      	ldr	r1, [pc, #28]	; (80027ec <__NVIC_EnableIRQ+0x38>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	2001      	movs	r0, #1
 80027d6:	fa00 f202 	lsl.w	r2, r0, r2
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db0a      	blt.n	800281a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	490c      	ldr	r1, [pc, #48]	; (800283c <__NVIC_SetPriority+0x4c>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	440b      	add	r3, r1
 8002814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002818:	e00a      	b.n	8002830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4908      	ldr	r1, [pc, #32]	; (8002840 <__NVIC_SetPriority+0x50>)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3b04      	subs	r3, #4
 8002828:	0112      	lsls	r2, r2, #4
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	440b      	add	r3, r1
 800282e:	761a      	strb	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000e100 	.word	0xe000e100
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	; 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f1c3 0307 	rsb	r3, r3, #7
 800285e:	2b04      	cmp	r3, #4
 8002860:	bf28      	it	cs
 8002862:	2304      	movcs	r3, #4
 8002864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3304      	adds	r3, #4
 800286a:	2b06      	cmp	r3, #6
 800286c:	d902      	bls.n	8002874 <NVIC_EncodePriority+0x30>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3b03      	subs	r3, #3
 8002872:	e000      	b.n	8002876 <NVIC_EncodePriority+0x32>
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	f04f 32ff 	mov.w	r2, #4294967295
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800288c:	f04f 31ff 	mov.w	r1, #4294967295
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43d9      	mvns	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	4313      	orrs	r3, r2
         );
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028bc:	d301      	bcc.n	80028c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028be:	2301      	movs	r3, #1
 80028c0:	e00f      	b.n	80028e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <SysTick_Config+0x40>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ca:	210f      	movs	r1, #15
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	f7ff ff8e 	bl	80027f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <SysTick_Config+0x40>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <SysTick_Config+0x40>)
 80028dc:	2207      	movs	r2, #7
 80028de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	e000e010 	.word	0xe000e010

080028f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ff29 	bl	8002750 <__NVIC_SetPriorityGrouping>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002918:	f7ff ff3e 	bl	8002798 <__NVIC_GetPriorityGrouping>
 800291c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f7ff ff8e 	bl	8002844 <NVIC_EncodePriority>
 8002928:	4602      	mov	r2, r0
 800292a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff5d 	bl	80027f0 <__NVIC_SetPriority>
}
 8002936:	bf00      	nop
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff31 	bl	80027b4 <__NVIC_EnableIRQ>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ffa2 	bl	80028ac <SysTick_Config>
 8002968:	4603      	mov	r3, r0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002980:	f7ff f97a 	bl	8001c78 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e099      	b.n	8002ac4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b0:	e00f      	b.n	80029d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029b2:	f7ff f961 	bl	8001c78 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d908      	bls.n	80029d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2203      	movs	r2, #3
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e078      	b.n	8002ac4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1e8      	bne.n	80029b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	4b38      	ldr	r3, [pc, #224]	; (8002acc <HAL_DMA_Init+0x158>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d107      	bne.n	8002a3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	4313      	orrs	r3, r2
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f023 0307 	bic.w	r3, r3, #7
 8002a52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d117      	bne.n	8002a96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00e      	beq.n	8002a96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fa6f 	bl	8002f5c <DMA_CheckFifoParam>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2240      	movs	r2, #64	; 0x40
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a92:	2301      	movs	r3, #1
 8002a94:	e016      	b.n	8002ac4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fa26 	bl	8002ef0 <DMA_CalcBaseAndBitshift>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	223f      	movs	r2, #63	; 0x3f
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	f010803f 	.word	0xf010803f

08002ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_DMA_Start_IT+0x26>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e040      	b.n	8002b78 <HAL_DMA_Start_IT+0xa8>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d12f      	bne.n	8002b6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f9b8 	bl	8002e94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	223f      	movs	r2, #63	; 0x3f
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0216 	orr.w	r2, r2, #22
 8002b3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0208 	orr.w	r2, r2, #8
 8002b56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e005      	b.n	8002b76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b72:	2302      	movs	r3, #2
 8002b74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b8c:	4b92      	ldr	r3, [pc, #584]	; (8002dd8 <HAL_DMA_IRQHandler+0x258>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a92      	ldr	r2, [pc, #584]	; (8002ddc <HAL_DMA_IRQHandler+0x25c>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0a9b      	lsrs	r3, r3, #10
 8002b98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	2208      	movs	r2, #8
 8002bac:	409a      	lsls	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d01a      	beq.n	8002bec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0204 	bic.w	r2, r2, #4
 8002bd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	2208      	movs	r2, #8
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	f043 0201 	orr.w	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d012      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	2201      	movs	r2, #1
 8002c10:	409a      	lsls	r2, r3
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1a:	f043 0202 	orr.w	r2, r3, #2
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	2204      	movs	r2, #4
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d012      	beq.n	8002c58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00b      	beq.n	8002c58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	2204      	movs	r2, #4
 8002c46:	409a      	lsls	r2, r3
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	f043 0204 	orr.w	r2, r3, #4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d043      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d03c      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d018      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d108      	bne.n	8002cb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d024      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
 8002cae:	e01f      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01b      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
 8002cc0:	e016      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0208 	bic.w	r2, r2, #8
 8002cde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 808e 	beq.w	8002e1e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8086 	beq.w	8002e1e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	2220      	movs	r2, #32
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b05      	cmp	r3, #5
 8002d28:	d136      	bne.n	8002d98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0216 	bic.w	r2, r2, #22
 8002d38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d103      	bne.n	8002d5a <HAL_DMA_IRQHandler+0x1da>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0208 	bic.w	r2, r2, #8
 8002d68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	223f      	movs	r2, #63	; 0x3f
 8002d70:	409a      	lsls	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d07d      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
        }
        return;
 8002d96:	e078      	b.n	8002e8a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01c      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d108      	bne.n	8002dc6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d030      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
 8002dc4:	e02b      	b.n	8002e1e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d027      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
 8002dd6:	e022      	b.n	8002e1e <HAL_DMA_IRQHandler+0x29e>
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10f      	bne.n	8002e0e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0210 	bic.w	r2, r2, #16
 8002dfc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d032      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d022      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2205      	movs	r2, #5
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d307      	bcc.n	8002e66 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f2      	bne.n	8002e4a <HAL_DMA_IRQHandler+0x2ca>
 8002e64:	e000      	b.n	8002e68 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e66:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
 8002e88:	e000      	b.n	8002e8c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e8a:	bf00      	nop
    }
  }
}
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop

08002e94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002eb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d108      	bne.n	8002ed4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ed2:	e007      	b.n	8002ee4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	60da      	str	r2, [r3, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	3b10      	subs	r3, #16
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <DMA_CalcBaseAndBitshift+0x64>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f0a:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <DMA_CalcBaseAndBitshift+0x68>)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d909      	bls.n	8002f32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	1d1a      	adds	r2, r3, #4
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	659a      	str	r2, [r3, #88]	; 0x58
 8002f30:	e007      	b.n	8002f42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f3a:	f023 0303 	bic.w	r3, r3, #3
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	aaaaaaab 	.word	0xaaaaaaab
 8002f58:	08005584 	.word	0x08005584

08002f5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d11f      	bne.n	8002fb6 <DMA_CheckFifoParam+0x5a>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d856      	bhi.n	800302a <DMA_CheckFifoParam+0xce>
 8002f7c:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <DMA_CheckFifoParam+0x28>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002f95 	.word	0x08002f95
 8002f88:	08002fa7 	.word	0x08002fa7
 8002f8c:	08002f95 	.word	0x08002f95
 8002f90:	0800302b 	.word	0x0800302b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d046      	beq.n	800302e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa4:	e043      	b.n	800302e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fae:	d140      	bne.n	8003032 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb4:	e03d      	b.n	8003032 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fbe:	d121      	bne.n	8003004 <DMA_CheckFifoParam+0xa8>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d837      	bhi.n	8003036 <DMA_CheckFifoParam+0xda>
 8002fc6:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <DMA_CheckFifoParam+0x70>)
 8002fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fcc:	08002fdd 	.word	0x08002fdd
 8002fd0:	08002fe3 	.word	0x08002fe3
 8002fd4:	08002fdd 	.word	0x08002fdd
 8002fd8:	08002ff5 	.word	0x08002ff5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe0:	e030      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d025      	beq.n	800303a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff2:	e022      	b.n	800303a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ffc:	d11f      	bne.n	800303e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003002:	e01c      	b.n	800303e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d903      	bls.n	8003012 <DMA_CheckFifoParam+0xb6>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d003      	beq.n	8003018 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003010:	e018      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
      break;
 8003016:	e015      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00e      	beq.n	8003042 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
      break;
 8003028:	e00b      	b.n	8003042 <DMA_CheckFifoParam+0xe6>
      break;
 800302a:	bf00      	nop
 800302c:	e00a      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      break;
 800302e:	bf00      	nop
 8003030:	e008      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      break;
 8003032:	bf00      	nop
 8003034:	e006      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      break;
 8003036:	bf00      	nop
 8003038:	e004      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      break;
 800303a:	bf00      	nop
 800303c:	e002      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      break;   
 800303e:	bf00      	nop
 8003040:	e000      	b.n	8003044 <DMA_CheckFifoParam+0xe8>
      break;
 8003042:	bf00      	nop
    }
  } 
  
  return status; 
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop

08003054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	e159      	b.n	8003324 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003070:	2201      	movs	r2, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	429a      	cmp	r2, r3
 800308a:	f040 8148 	bne.w	800331e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d005      	beq.n	80030a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d130      	bne.n	8003108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	2203      	movs	r2, #3
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030dc:	2201      	movs	r2, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 0201 	and.w	r2, r3, #1
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b03      	cmp	r3, #3
 8003112:	d017      	beq.n	8003144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d123      	bne.n	8003198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	08da      	lsrs	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3208      	adds	r2, #8
 8003158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	220f      	movs	r2, #15
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	08da      	lsrs	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3208      	adds	r2, #8
 8003192:	69b9      	ldr	r1, [r7, #24]
 8003194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	2203      	movs	r2, #3
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0203 	and.w	r2, r3, #3
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80a2 	beq.w	800331e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4b57      	ldr	r3, [pc, #348]	; (800333c <HAL_GPIO_Init+0x2e8>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	4a56      	ldr	r2, [pc, #344]	; (800333c <HAL_GPIO_Init+0x2e8>)
 80031e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ea:	4b54      	ldr	r3, [pc, #336]	; (800333c <HAL_GPIO_Init+0x2e8>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031f6:	4a52      	ldr	r2, [pc, #328]	; (8003340 <HAL_GPIO_Init+0x2ec>)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	3302      	adds	r3, #2
 80031fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	220f      	movs	r2, #15
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a49      	ldr	r2, [pc, #292]	; (8003344 <HAL_GPIO_Init+0x2f0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d019      	beq.n	8003256 <HAL_GPIO_Init+0x202>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a48      	ldr	r2, [pc, #288]	; (8003348 <HAL_GPIO_Init+0x2f4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d013      	beq.n	8003252 <HAL_GPIO_Init+0x1fe>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a47      	ldr	r2, [pc, #284]	; (800334c <HAL_GPIO_Init+0x2f8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00d      	beq.n	800324e <HAL_GPIO_Init+0x1fa>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a46      	ldr	r2, [pc, #280]	; (8003350 <HAL_GPIO_Init+0x2fc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d007      	beq.n	800324a <HAL_GPIO_Init+0x1f6>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a45      	ldr	r2, [pc, #276]	; (8003354 <HAL_GPIO_Init+0x300>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_GPIO_Init+0x1f2>
 8003242:	2304      	movs	r3, #4
 8003244:	e008      	b.n	8003258 <HAL_GPIO_Init+0x204>
 8003246:	2307      	movs	r3, #7
 8003248:	e006      	b.n	8003258 <HAL_GPIO_Init+0x204>
 800324a:	2303      	movs	r3, #3
 800324c:	e004      	b.n	8003258 <HAL_GPIO_Init+0x204>
 800324e:	2302      	movs	r3, #2
 8003250:	e002      	b.n	8003258 <HAL_GPIO_Init+0x204>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_GPIO_Init+0x204>
 8003256:	2300      	movs	r3, #0
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	f002 0203 	and.w	r2, r2, #3
 800325e:	0092      	lsls	r2, r2, #2
 8003260:	4093      	lsls	r3, r2
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003268:	4935      	ldr	r1, [pc, #212]	; (8003340 <HAL_GPIO_Init+0x2ec>)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	3302      	adds	r3, #2
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003276:	4b38      	ldr	r3, [pc, #224]	; (8003358 <HAL_GPIO_Init+0x304>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800329a:	4a2f      	ldr	r2, [pc, #188]	; (8003358 <HAL_GPIO_Init+0x304>)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032a0:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <HAL_GPIO_Init+0x304>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032c4:	4a24      	ldr	r2, [pc, #144]	; (8003358 <HAL_GPIO_Init+0x304>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ca:	4b23      	ldr	r3, [pc, #140]	; (8003358 <HAL_GPIO_Init+0x304>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ee:	4a1a      	ldr	r2, [pc, #104]	; (8003358 <HAL_GPIO_Init+0x304>)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032f4:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_GPIO_Init+0x304>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003318:	4a0f      	ldr	r2, [pc, #60]	; (8003358 <HAL_GPIO_Init+0x304>)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3301      	adds	r3, #1
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	2b0f      	cmp	r3, #15
 8003328:	f67f aea2 	bls.w	8003070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	3724      	adds	r7, #36	; 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800
 8003340:	40013800 	.word	0x40013800
 8003344:	40020000 	.word	0x40020000
 8003348:	40020400 	.word	0x40020400
 800334c:	40020800 	.word	0x40020800
 8003350:	40020c00 	.word	0x40020c00
 8003354:	40021000 	.word	0x40021000
 8003358:	40013c00 	.word	0x40013c00

0800335c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
 8003368:	4613      	mov	r3, r2
 800336a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800336c:	787b      	ldrb	r3, [r7, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003378:	e003      	b.n	8003382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800337a:	887b      	ldrh	r3, [r7, #2]
 800337c:	041a      	lsls	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	619a      	str	r2, [r3, #24]
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d006      	beq.n	80033b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033a6:	4a05      	ldr	r2, [pc, #20]	; (80033bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd fd86 	bl	8000ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40013c00 	.word	0x40013c00

080033c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e12b      	b.n	800362a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe facc 	bl	8001984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	; 0x24
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003412:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003422:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003424:	f001 f838 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8003428:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4a81      	ldr	r2, [pc, #516]	; (8003634 <HAL_I2C_Init+0x274>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d807      	bhi.n	8003444 <HAL_I2C_Init+0x84>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a80      	ldr	r2, [pc, #512]	; (8003638 <HAL_I2C_Init+0x278>)
 8003438:	4293      	cmp	r3, r2
 800343a:	bf94      	ite	ls
 800343c:	2301      	movls	r3, #1
 800343e:	2300      	movhi	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e006      	b.n	8003452 <HAL_I2C_Init+0x92>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a7d      	ldr	r2, [pc, #500]	; (800363c <HAL_I2C_Init+0x27c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	bf94      	ite	ls
 800344c:	2301      	movls	r3, #1
 800344e:	2300      	movhi	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0e7      	b.n	800362a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a78      	ldr	r2, [pc, #480]	; (8003640 <HAL_I2C_Init+0x280>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	0c9b      	lsrs	r3, r3, #18
 8003464:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4a6a      	ldr	r2, [pc, #424]	; (8003634 <HAL_I2C_Init+0x274>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d802      	bhi.n	8003494 <HAL_I2C_Init+0xd4>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	3301      	adds	r3, #1
 8003492:	e009      	b.n	80034a8 <HAL_I2C_Init+0xe8>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	4a69      	ldr	r2, [pc, #420]	; (8003644 <HAL_I2C_Init+0x284>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	099b      	lsrs	r3, r3, #6
 80034a6:	3301      	adds	r3, #1
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	495c      	ldr	r1, [pc, #368]	; (8003634 <HAL_I2C_Init+0x274>)
 80034c4:	428b      	cmp	r3, r1
 80034c6:	d819      	bhi.n	80034fc <HAL_I2C_Init+0x13c>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1e59      	subs	r1, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80034d6:	1c59      	adds	r1, r3, #1
 80034d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034dc:	400b      	ands	r3, r1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_I2C_Init+0x138>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1e59      	subs	r1, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f6:	e051      	b.n	800359c <HAL_I2C_Init+0x1dc>
 80034f8:	2304      	movs	r3, #4
 80034fa:	e04f      	b.n	800359c <HAL_I2C_Init+0x1dc>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d111      	bne.n	8003528 <HAL_I2C_Init+0x168>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1e58      	subs	r0, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	440b      	add	r3, r1
 8003512:	fbb0 f3f3 	udiv	r3, r0, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	e012      	b.n	800354e <HAL_I2C_Init+0x18e>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1e58      	subs	r0, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	0099      	lsls	r1, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	fbb0 f3f3 	udiv	r3, r0, r3
 800353e:	3301      	adds	r3, #1
 8003540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Init+0x196>
 8003552:	2301      	movs	r3, #1
 8003554:	e022      	b.n	800359c <HAL_I2C_Init+0x1dc>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10e      	bne.n	800357c <HAL_I2C_Init+0x1bc>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1e58      	subs	r0, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	460b      	mov	r3, r1
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	440b      	add	r3, r1
 800356c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003570:	3301      	adds	r3, #1
 8003572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357a:	e00f      	b.n	800359c <HAL_I2C_Init+0x1dc>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1e58      	subs	r0, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	0099      	lsls	r1, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003592:	3301      	adds	r3, #1
 8003594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	6809      	ldr	r1, [r1, #0]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6911      	ldr	r1, [r2, #16]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68d2      	ldr	r2, [r2, #12]
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	430b      	orrs	r3, r1
 80035de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	000186a0 	.word	0x000186a0
 8003638:	001e847f 	.word	0x001e847f
 800363c:	003d08ff 	.word	0x003d08ff
 8003640:	431bde83 	.word	0x431bde83
 8003644:	10624dd3 	.word	0x10624dd3

08003648 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	461a      	mov	r2, r3
 8003654:	460b      	mov	r3, r1
 8003656:	817b      	strh	r3, [r7, #10]
 8003658:	4613      	mov	r3, r2
 800365a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800365c:	f7fe fb0c 	bl	8001c78 <HAL_GetTick>
 8003660:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b20      	cmp	r3, #32
 800366c:	f040 80e0 	bne.w	8003830 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2319      	movs	r3, #25
 8003676:	2201      	movs	r2, #1
 8003678:	4970      	ldr	r1, [pc, #448]	; (800383c <HAL_I2C_Master_Transmit+0x1f4>)
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f964 	bl	8003948 <I2C_WaitOnFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
 8003688:	e0d3      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_I2C_Master_Transmit+0x50>
 8003694:	2302      	movs	r3, #2
 8003696:	e0cc      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1ea>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d007      	beq.n	80036be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2221      	movs	r2, #33	; 0x21
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2210      	movs	r2, #16
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	893a      	ldrh	r2, [r7, #8]
 80036ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4a50      	ldr	r2, [pc, #320]	; (8003840 <HAL_I2C_Master_Transmit+0x1f8>)
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003700:	8979      	ldrh	r1, [r7, #10]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f89c 	bl	8003844 <I2C_MasterRequestWrite>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e08d      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800372c:	e066      	b.n	80037fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	6a39      	ldr	r1, [r7, #32]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f9de 	bl	8003af4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00d      	beq.n	800375a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	2b04      	cmp	r3, #4
 8003744:	d107      	bne.n	8003756 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003754:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06b      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	781a      	ldrb	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b04      	cmp	r3, #4
 8003796:	d11b      	bne.n	80037d0 <HAL_I2C_Master_Transmit+0x188>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	2b00      	cmp	r3, #0
 800379e:	d017      	beq.n	80037d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	781a      	ldrb	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	6a39      	ldr	r1, [r7, #32]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f9ce 	bl	8003b76 <I2C_WaitOnBTFFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d107      	bne.n	80037f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e01a      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	2b00      	cmp	r3, #0
 8003802:	d194      	bne.n	800372e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
  }
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	00100002 	.word	0x00100002
 8003840:	ffff0000 	.word	0xffff0000

08003844 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	460b      	mov	r3, r1
 8003852:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b08      	cmp	r3, #8
 800385e:	d006      	beq.n	800386e <I2C_MasterRequestWrite+0x2a>
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d003      	beq.n	800386e <I2C_MasterRequestWrite+0x2a>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800386c:	d108      	bne.n	8003880 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e00b      	b.n	8003898 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	2b12      	cmp	r3, #18
 8003886:	d107      	bne.n	8003898 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003896:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f84f 	bl	8003948 <I2C_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038be:	d103      	bne.n	80038c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e035      	b.n	8003938 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038d4:	d108      	bne.n	80038e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038d6:	897b      	ldrh	r3, [r7, #10]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038e4:	611a      	str	r2, [r3, #16]
 80038e6:	e01b      	b.n	8003920 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038e8:	897b      	ldrh	r3, [r7, #10]
 80038ea:	11db      	asrs	r3, r3, #7
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f003 0306 	and.w	r3, r3, #6
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f063 030f 	orn	r3, r3, #15
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	490e      	ldr	r1, [pc, #56]	; (8003940 <I2C_MasterRequestWrite+0xfc>)
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f875 	bl	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e010      	b.n	8003938 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003916:	897b      	ldrh	r3, [r7, #10]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4907      	ldr	r1, [pc, #28]	; (8003944 <I2C_MasterRequestWrite+0x100>)
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f865 	bl	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	00010008 	.word	0x00010008
 8003944:	00010002 	.word	0x00010002

08003948 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003958:	e025      	b.n	80039a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d021      	beq.n	80039a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003962:	f7fe f989 	bl	8001c78 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d302      	bcc.n	8003978 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d116      	bne.n	80039a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f043 0220 	orr.w	r2, r3, #32
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e023      	b.n	80039ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	0c1b      	lsrs	r3, r3, #16
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d10d      	bne.n	80039cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	43da      	mvns	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4013      	ands	r3, r2
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	e00c      	b.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	43da      	mvns	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4013      	ands	r3, r2
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	bf0c      	ite	eq
 80039de:	2301      	moveq	r3, #1
 80039e0:	2300      	movne	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d0b6      	beq.n	800395a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a04:	e051      	b.n	8003aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a14:	d123      	bne.n	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f043 0204 	orr.w	r2, r3, #4
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e046      	b.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d021      	beq.n	8003aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a66:	f7fe f907 	bl	8001c78 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d302      	bcc.n	8003a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d116      	bne.n	8003aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f043 0220 	orr.w	r2, r3, #32
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e020      	b.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d10c      	bne.n	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	43da      	mvns	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bf14      	ite	ne
 8003ac6:	2301      	movne	r3, #1
 8003ac8:	2300      	moveq	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	e00b      	b.n	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	43da      	mvns	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d18d      	bne.n	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b00:	e02d      	b.n	8003b5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f878 	bl	8003bf8 <I2C_IsAcknowledgeFailed>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e02d      	b.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d021      	beq.n	8003b5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1a:	f7fe f8ad 	bl	8001c78 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d302      	bcc.n	8003b30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d116      	bne.n	8003b5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f043 0220 	orr.w	r2, r3, #32
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e007      	b.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b68:	2b80      	cmp	r3, #128	; 0x80
 8003b6a:	d1ca      	bne.n	8003b02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b82:	e02d      	b.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f837 	bl	8003bf8 <I2C_IsAcknowledgeFailed>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e02d      	b.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d021      	beq.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9c:	f7fe f86c 	bl	8001c78 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d302      	bcc.n	8003bb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d116      	bne.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e007      	b.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d1ca      	bne.n	8003b84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0e:	d11b      	bne.n	8003c48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f043 0204 	orr.w	r2, r3, #4
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e264      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d075      	beq.n	8003d62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c76:	4ba3      	ldr	r3, [pc, #652]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d00c      	beq.n	8003c9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c82:	4ba0      	ldr	r3, [pc, #640]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d112      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c8e:	4b9d      	ldr	r3, [pc, #628]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c9a:	d10b      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	4b99      	ldr	r3, [pc, #612]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d05b      	beq.n	8003d60 <HAL_RCC_OscConfig+0x108>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d157      	bne.n	8003d60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e23f      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d106      	bne.n	8003ccc <HAL_RCC_OscConfig+0x74>
 8003cbe:	4b91      	ldr	r3, [pc, #580]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a90      	ldr	r2, [pc, #576]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e01d      	b.n	8003d08 <HAL_RCC_OscConfig+0xb0>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x98>
 8003cd6:	4b8b      	ldr	r3, [pc, #556]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a8a      	ldr	r2, [pc, #552]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b88      	ldr	r3, [pc, #544]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a87      	ldr	r2, [pc, #540]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e00b      	b.n	8003d08 <HAL_RCC_OscConfig+0xb0>
 8003cf0:	4b84      	ldr	r3, [pc, #528]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a83      	ldr	r2, [pc, #524]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	4b81      	ldr	r3, [pc, #516]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a80      	ldr	r2, [pc, #512]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d013      	beq.n	8003d38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fd ffb2 	bl	8001c78 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d18:	f7fd ffae 	bl	8001c78 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e204      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2a:	4b76      	ldr	r3, [pc, #472]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0xc0>
 8003d36:	e014      	b.n	8003d62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fd ff9e 	bl	8001c78 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d40:	f7fd ff9a 	bl	8001c78 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	; 0x64
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e1f0      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d52:	4b6c      	ldr	r3, [pc, #432]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0xe8>
 8003d5e:	e000      	b.n	8003d62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d063      	beq.n	8003e36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d6e:	4b65      	ldr	r3, [pc, #404]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7a:	4b62      	ldr	r3, [pc, #392]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d11c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d86:	4b5f      	ldr	r3, [pc, #380]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d116      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d92:	4b5c      	ldr	r3, [pc, #368]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_RCC_OscConfig+0x152>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d001      	beq.n	8003daa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e1c4      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003daa:	4b56      	ldr	r3, [pc, #344]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4952      	ldr	r1, [pc, #328]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	e03a      	b.n	8003e36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d020      	beq.n	8003e0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc8:	4b4f      	ldr	r3, [pc, #316]	; (8003f08 <HAL_RCC_OscConfig+0x2b0>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fd ff53 	bl	8001c78 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd6:	f7fd ff4f 	bl	8001c78 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e1a5      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de8:	4b46      	ldr	r3, [pc, #280]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df4:	4b43      	ldr	r3, [pc, #268]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4940      	ldr	r1, [pc, #256]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	600b      	str	r3, [r1, #0]
 8003e08:	e015      	b.n	8003e36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e0a:	4b3f      	ldr	r3, [pc, #252]	; (8003f08 <HAL_RCC_OscConfig+0x2b0>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7fd ff32 	bl	8001c78 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e18:	f7fd ff2e 	bl	8001c78 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e184      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2a:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d030      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d016      	beq.n	8003e78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4a:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <HAL_RCC_OscConfig+0x2b4>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fd ff12 	bl	8001c78 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e58:	f7fd ff0e 	bl	8001c78 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e164      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6a:	4b26      	ldr	r3, [pc, #152]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x200>
 8003e76:	e015      	b.n	8003ea4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <HAL_RCC_OscConfig+0x2b4>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7e:	f7fd fefb 	bl	8001c78 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e86:	f7fd fef7 	bl	8001c78 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e14d      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e98:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80a0 	beq.w	8003ff2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb6:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10f      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	4a0e      	ldr	r2, [pc, #56]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_OscConfig+0x2b8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d121      	bne.n	8003f32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eee:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <HAL_RCC_OscConfig+0x2b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <HAL_RCC_OscConfig+0x2b8>)
 8003ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efa:	f7fd febd 	bl	8001c78 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f00:	e011      	b.n	8003f26 <HAL_RCC_OscConfig+0x2ce>
 8003f02:	bf00      	nop
 8003f04:	40023800 	.word	0x40023800
 8003f08:	42470000 	.word	0x42470000
 8003f0c:	42470e80 	.word	0x42470e80
 8003f10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f14:	f7fd feb0 	bl	8001c78 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e106      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f26:	4b85      	ldr	r3, [pc, #532]	; (800413c <HAL_RCC_OscConfig+0x4e4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d106      	bne.n	8003f48 <HAL_RCC_OscConfig+0x2f0>
 8003f3a:	4b81      	ldr	r3, [pc, #516]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	4a80      	ldr	r2, [pc, #512]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6713      	str	r3, [r2, #112]	; 0x70
 8003f46:	e01c      	b.n	8003f82 <HAL_RCC_OscConfig+0x32a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b05      	cmp	r3, #5
 8003f4e:	d10c      	bne.n	8003f6a <HAL_RCC_OscConfig+0x312>
 8003f50:	4b7b      	ldr	r3, [pc, #492]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	4a7a      	ldr	r2, [pc, #488]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003f56:	f043 0304 	orr.w	r3, r3, #4
 8003f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5c:	4b78      	ldr	r3, [pc, #480]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a77      	ldr	r2, [pc, #476]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
 8003f68:	e00b      	b.n	8003f82 <HAL_RCC_OscConfig+0x32a>
 8003f6a:	4b75      	ldr	r3, [pc, #468]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	4a74      	ldr	r2, [pc, #464]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	6713      	str	r3, [r2, #112]	; 0x70
 8003f76:	4b72      	ldr	r3, [pc, #456]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	4a71      	ldr	r2, [pc, #452]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003f7c:	f023 0304 	bic.w	r3, r3, #4
 8003f80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d015      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8a:	f7fd fe75 	bl	8001c78 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f90:	e00a      	b.n	8003fa8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f92:	f7fd fe71 	bl	8001c78 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e0c5      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa8:	4b65      	ldr	r3, [pc, #404]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ee      	beq.n	8003f92 <HAL_RCC_OscConfig+0x33a>
 8003fb4:	e014      	b.n	8003fe0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb6:	f7fd fe5f 	bl	8001c78 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fd fe5b 	bl	8001c78 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0af      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd4:	4b5a      	ldr	r3, [pc, #360]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1ee      	bne.n	8003fbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d105      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe6:	4b56      	ldr	r3, [pc, #344]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	4a55      	ldr	r2, [pc, #340]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 809b 	beq.w	8004132 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ffc:	4b50      	ldr	r3, [pc, #320]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b08      	cmp	r3, #8
 8004006:	d05c      	beq.n	80040c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d141      	bne.n	8004094 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004010:	4b4c      	ldr	r3, [pc, #304]	; (8004144 <HAL_RCC_OscConfig+0x4ec>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004016:	f7fd fe2f 	bl	8001c78 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401e:	f7fd fe2b 	bl	8001c78 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e081      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004030:	4b43      	ldr	r3, [pc, #268]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	019b      	lsls	r3, r3, #6
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	3b01      	subs	r3, #1
 8004056:	041b      	lsls	r3, r3, #16
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	061b      	lsls	r3, r3, #24
 8004060:	4937      	ldr	r1, [pc, #220]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8004062:	4313      	orrs	r3, r2
 8004064:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004066:	4b37      	ldr	r3, [pc, #220]	; (8004144 <HAL_RCC_OscConfig+0x4ec>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fd fe04 	bl	8001c78 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004074:	f7fd fe00 	bl	8001c78 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e056      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004086:	4b2e      	ldr	r3, [pc, #184]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x41c>
 8004092:	e04e      	b.n	8004132 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004094:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <HAL_RCC_OscConfig+0x4ec>)
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409a:	f7fd fded 	bl	8001c78 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a2:	f7fd fde9 	bl	8001c78 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e03f      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b4:	4b22      	ldr	r3, [pc, #136]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f0      	bne.n	80040a2 <HAL_RCC_OscConfig+0x44a>
 80040c0:	e037      	b.n	8004132 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e032      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ce:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <HAL_RCC_OscConfig+0x4e8>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d028      	beq.n	800412e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d121      	bne.n	800412e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d11a      	bne.n	800412e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040fe:	4013      	ands	r3, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004104:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004106:	4293      	cmp	r3, r2
 8004108:	d111      	bne.n	800412e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	3b01      	subs	r3, #1
 8004118:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d107      	bne.n	800412e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800412a:	429a      	cmp	r2, r3
 800412c:	d001      	beq.n	8004132 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40007000 	.word	0x40007000
 8004140:	40023800 	.word	0x40023800
 8004144:	42470060 	.word	0x42470060

08004148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0cc      	b.n	80042f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800415c:	4b68      	ldr	r3, [pc, #416]	; (8004300 <HAL_RCC_ClockConfig+0x1b8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d90c      	bls.n	8004184 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	4b65      	ldr	r3, [pc, #404]	; (8004300 <HAL_RCC_ClockConfig+0x1b8>)
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004172:	4b63      	ldr	r3, [pc, #396]	; (8004300 <HAL_RCC_ClockConfig+0x1b8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0b8      	b.n	80042f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d020      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800419c:	4b59      	ldr	r3, [pc, #356]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a58      	ldr	r2, [pc, #352]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b4:	4b53      	ldr	r3, [pc, #332]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4a52      	ldr	r2, [pc, #328]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c0:	4b50      	ldr	r3, [pc, #320]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	494d      	ldr	r1, [pc, #308]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d044      	beq.n	8004268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e6:	4b47      	ldr	r3, [pc, #284]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d119      	bne.n	8004226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e07f      	b.n	80042f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d003      	beq.n	8004206 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004202:	2b03      	cmp	r3, #3
 8004204:	d107      	bne.n	8004216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004206:	4b3f      	ldr	r3, [pc, #252]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e06f      	b.n	80042f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004216:	4b3b      	ldr	r3, [pc, #236]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e067      	b.n	80042f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004226:	4b37      	ldr	r3, [pc, #220]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f023 0203 	bic.w	r2, r3, #3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4934      	ldr	r1, [pc, #208]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	4313      	orrs	r3, r2
 8004236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004238:	f7fd fd1e 	bl	8001c78 <HAL_GetTick>
 800423c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	e00a      	b.n	8004256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004240:	f7fd fd1a 	bl	8001c78 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	; 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e04f      	b.n	80042f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	4b2b      	ldr	r3, [pc, #172]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 020c 	and.w	r2, r3, #12
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	429a      	cmp	r2, r3
 8004266:	d1eb      	bne.n	8004240 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004268:	4b25      	ldr	r3, [pc, #148]	; (8004300 <HAL_RCC_ClockConfig+0x1b8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d20c      	bcs.n	8004290 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004276:	4b22      	ldr	r3, [pc, #136]	; (8004300 <HAL_RCC_ClockConfig+0x1b8>)
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <HAL_RCC_ClockConfig+0x1b8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e032      	b.n	80042f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800429c:	4b19      	ldr	r3, [pc, #100]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4916      	ldr	r1, [pc, #88]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ba:	4b12      	ldr	r3, [pc, #72]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	490e      	ldr	r1, [pc, #56]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ce:	f000 f821 	bl	8004314 <HAL_RCC_GetSysClockFreq>
 80042d2:	4602      	mov	r2, r0
 80042d4:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	490a      	ldr	r1, [pc, #40]	; (8004308 <HAL_RCC_ClockConfig+0x1c0>)
 80042e0:	5ccb      	ldrb	r3, [r1, r3]
 80042e2:	fa22 f303 	lsr.w	r3, r2, r3
 80042e6:	4a09      	ldr	r2, [pc, #36]	; (800430c <HAL_RCC_ClockConfig+0x1c4>)
 80042e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ea:	4b09      	ldr	r3, [pc, #36]	; (8004310 <HAL_RCC_ClockConfig+0x1c8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fd fc7e 	bl	8001bf0 <HAL_InitTick>

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40023c00 	.word	0x40023c00
 8004304:	40023800 	.word	0x40023800
 8004308:	0800556c 	.word	0x0800556c
 800430c:	20000000 	.word	0x20000000
 8004310:	20000004 	.word	0x20000004

08004314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004314:	b5b0      	push	{r4, r5, r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800431a:	2100      	movs	r1, #0
 800431c:	6079      	str	r1, [r7, #4]
 800431e:	2100      	movs	r1, #0
 8004320:	60f9      	str	r1, [r7, #12]
 8004322:	2100      	movs	r1, #0
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004326:	2100      	movs	r1, #0
 8004328:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800432a:	4952      	ldr	r1, [pc, #328]	; (8004474 <HAL_RCC_GetSysClockFreq+0x160>)
 800432c:	6889      	ldr	r1, [r1, #8]
 800432e:	f001 010c 	and.w	r1, r1, #12
 8004332:	2908      	cmp	r1, #8
 8004334:	d00d      	beq.n	8004352 <HAL_RCC_GetSysClockFreq+0x3e>
 8004336:	2908      	cmp	r1, #8
 8004338:	f200 8094 	bhi.w	8004464 <HAL_RCC_GetSysClockFreq+0x150>
 800433c:	2900      	cmp	r1, #0
 800433e:	d002      	beq.n	8004346 <HAL_RCC_GetSysClockFreq+0x32>
 8004340:	2904      	cmp	r1, #4
 8004342:	d003      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x38>
 8004344:	e08e      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004346:	4b4c      	ldr	r3, [pc, #304]	; (8004478 <HAL_RCC_GetSysClockFreq+0x164>)
 8004348:	60bb      	str	r3, [r7, #8]
       break;
 800434a:	e08e      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800434c:	4b4b      	ldr	r3, [pc, #300]	; (800447c <HAL_RCC_GetSysClockFreq+0x168>)
 800434e:	60bb      	str	r3, [r7, #8]
      break;
 8004350:	e08b      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004352:	4948      	ldr	r1, [pc, #288]	; (8004474 <HAL_RCC_GetSysClockFreq+0x160>)
 8004354:	6849      	ldr	r1, [r1, #4]
 8004356:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800435a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800435c:	4945      	ldr	r1, [pc, #276]	; (8004474 <HAL_RCC_GetSysClockFreq+0x160>)
 800435e:	6849      	ldr	r1, [r1, #4]
 8004360:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004364:	2900      	cmp	r1, #0
 8004366:	d024      	beq.n	80043b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004368:	4942      	ldr	r1, [pc, #264]	; (8004474 <HAL_RCC_GetSysClockFreq+0x160>)
 800436a:	6849      	ldr	r1, [r1, #4]
 800436c:	0989      	lsrs	r1, r1, #6
 800436e:	4608      	mov	r0, r1
 8004370:	f04f 0100 	mov.w	r1, #0
 8004374:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004378:	f04f 0500 	mov.w	r5, #0
 800437c:	ea00 0204 	and.w	r2, r0, r4
 8004380:	ea01 0305 	and.w	r3, r1, r5
 8004384:	493d      	ldr	r1, [pc, #244]	; (800447c <HAL_RCC_GetSysClockFreq+0x168>)
 8004386:	fb01 f003 	mul.w	r0, r1, r3
 800438a:	2100      	movs	r1, #0
 800438c:	fb01 f102 	mul.w	r1, r1, r2
 8004390:	1844      	adds	r4, r0, r1
 8004392:	493a      	ldr	r1, [pc, #232]	; (800447c <HAL_RCC_GetSysClockFreq+0x168>)
 8004394:	fba2 0101 	umull	r0, r1, r2, r1
 8004398:	1863      	adds	r3, r4, r1
 800439a:	4619      	mov	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	461a      	mov	r2, r3
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	f7fb ff16 	bl	80001d4 <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4613      	mov	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e04a      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b2:	4b30      	ldr	r3, [pc, #192]	; (8004474 <HAL_RCC_GetSysClockFreq+0x160>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	461a      	mov	r2, r3
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043c2:	f04f 0100 	mov.w	r1, #0
 80043c6:	ea02 0400 	and.w	r4, r2, r0
 80043ca:	ea03 0501 	and.w	r5, r3, r1
 80043ce:	4620      	mov	r0, r4
 80043d0:	4629      	mov	r1, r5
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	014b      	lsls	r3, r1, #5
 80043dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043e0:	0142      	lsls	r2, r0, #5
 80043e2:	4610      	mov	r0, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	1b00      	subs	r0, r0, r4
 80043e8:	eb61 0105 	sbc.w	r1, r1, r5
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	018b      	lsls	r3, r1, #6
 80043f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043fa:	0182      	lsls	r2, r0, #6
 80043fc:	1a12      	subs	r2, r2, r0
 80043fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004402:	f04f 0000 	mov.w	r0, #0
 8004406:	f04f 0100 	mov.w	r1, #0
 800440a:	00d9      	lsls	r1, r3, #3
 800440c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004410:	00d0      	lsls	r0, r2, #3
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	1912      	adds	r2, r2, r4
 8004418:	eb45 0303 	adc.w	r3, r5, r3
 800441c:	f04f 0000 	mov.w	r0, #0
 8004420:	f04f 0100 	mov.w	r1, #0
 8004424:	0299      	lsls	r1, r3, #10
 8004426:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800442a:	0290      	lsls	r0, r2, #10
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	461a      	mov	r2, r3
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	f7fb feca 	bl	80001d4 <__aeabi_uldivmod>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4613      	mov	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <HAL_RCC_GetSysClockFreq+0x160>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	3301      	adds	r3, #1
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	60bb      	str	r3, [r7, #8]
      break;
 8004462:	e002      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004464:	4b04      	ldr	r3, [pc, #16]	; (8004478 <HAL_RCC_GetSysClockFreq+0x164>)
 8004466:	60bb      	str	r3, [r7, #8]
      break;
 8004468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800446a:	68bb      	ldr	r3, [r7, #8]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bdb0      	pop	{r4, r5, r7, pc}
 8004474:	40023800 	.word	0x40023800
 8004478:	00f42400 	.word	0x00f42400
 800447c:	017d7840 	.word	0x017d7840

08004480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <HAL_RCC_GetHCLKFreq+0x14>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000000 	.word	0x20000000

08004498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800449c:	f7ff fff0 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	0a9b      	lsrs	r3, r3, #10
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	4903      	ldr	r1, [pc, #12]	; (80044bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ae:	5ccb      	ldrb	r3, [r1, r3]
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40023800 	.word	0x40023800
 80044bc:	0800557c 	.word	0x0800557c

080044c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d035      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044e8:	4b67      	ldr	r3, [pc, #412]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044ee:	f7fd fbc3 	bl	8001c78 <HAL_GetTick>
 80044f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044f4:	e008      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044f6:	f7fd fbbf 	bl	8001c78 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e0ba      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004508:	4b60      	ldr	r3, [pc, #384]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f0      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	019a      	lsls	r2, r3, #6
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	071b      	lsls	r3, r3, #28
 8004520:	495a      	ldr	r1, [pc, #360]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004528:	4b57      	ldr	r3, [pc, #348]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800452a:	2201      	movs	r2, #1
 800452c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800452e:	f7fd fba3 	bl	8001c78 <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004536:	f7fd fb9f 	bl	8001c78 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e09a      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004548:	4b50      	ldr	r3, [pc, #320]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 8083 	beq.w	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	4b49      	ldr	r3, [pc, #292]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a48      	ldr	r2, [pc, #288]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800456c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
 8004572:	4b46      	ldr	r3, [pc, #280]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800457e:	4b44      	ldr	r3, [pc, #272]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a43      	ldr	r2, [pc, #268]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004588:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800458a:	f7fd fb75 	bl	8001c78 <HAL_GetTick>
 800458e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004592:	f7fd fb71 	bl	8001c78 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e06c      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045a4:	4b3a      	ldr	r3, [pc, #232]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045b0:	4b36      	ldr	r3, [pc, #216]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02f      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d028      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ce:	4b2f      	ldr	r3, [pc, #188]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045d8:	4b2e      	ldr	r3, [pc, #184]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045de:	4b2d      	ldr	r3, [pc, #180]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045e4:	4a29      	ldr	r2, [pc, #164]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045ea:	4b28      	ldr	r3, [pc, #160]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d114      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fd fb3f 	bl	8001c78 <HAL_GetTick>
 80045fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	e00a      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fd fb3b 	bl	8001c78 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e034      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	4b1d      	ldr	r3, [pc, #116]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0ee      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800462c:	d10d      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800462e:	4b17      	ldr	r3, [pc, #92]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800463e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004642:	4912      	ldr	r1, [pc, #72]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004644:	4313      	orrs	r3, r2
 8004646:	608b      	str	r3, [r1, #8]
 8004648:	e005      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800464a:	4b10      	ldr	r3, [pc, #64]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	4a0f      	ldr	r2, [pc, #60]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004650:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004654:	6093      	str	r3, [r2, #8]
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004658:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004662:	490a      	ldr	r1, [pc, #40]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004664:	4313      	orrs	r3, r2
 8004666:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	7c1a      	ldrb	r2, [r3, #16]
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800467a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	42470068 	.word	0x42470068
 800468c:	40023800 	.word	0x40023800
 8004690:	40007000 	.word	0x40007000
 8004694:	42470e40 	.word	0x42470e40
 8004698:	424711e0 	.word	0x424711e0

0800469c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e083      	b.n	80047b6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7f5b      	ldrb	r3, [r3, #29]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fd f9a8 	bl	8001a14 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	22ca      	movs	r2, #202	; 0xca
 80046d0:	625a      	str	r2, [r3, #36]	; 0x24
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2253      	movs	r2, #83	; 0x53
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fb13 	bl	8004d06 <RTC_EnterInitMode>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d008      	beq.n	80046f8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	22ff      	movs	r2, #255	; 0xff
 80046ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2204      	movs	r2, #4
 80046f2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e05e      	b.n	80047b6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6899      	ldr	r1, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68d2      	ldr	r2, [r2, #12]
 8004732:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6919      	ldr	r1, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	041a      	lsls	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004756:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10e      	bne.n	8004784 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 faa5 	bl	8004cb6 <HAL_RTC_WaitForSynchro>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	22ff      	movs	r2, #255	; 0xff
 8004778:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2204      	movs	r2, #4
 800477e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e018      	b.n	80047b6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004792:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	22ff      	movs	r2, #255	; 0xff
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80047b4:	2300      	movs	r3, #0
  }
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047be:	b590      	push	{r4, r7, lr}
 80047c0:	b087      	sub	sp, #28
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	7f1b      	ldrb	r3, [r3, #28]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_RTC_SetTime+0x1c>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e0aa      	b.n	8004930 <HAL_RTC_SetTime+0x172>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2202      	movs	r2, #2
 80047e4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d126      	bne.n	800483a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2200      	movs	r2, #0
 80047fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f000 faaa 	bl	8004d5e <RTC_ByteToBcd2>
 800480a:	4603      	mov	r3, r0
 800480c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	785b      	ldrb	r3, [r3, #1]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 faa3 	bl	8004d5e <RTC_ByteToBcd2>
 8004818:	4603      	mov	r3, r0
 800481a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800481c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	789b      	ldrb	r3, [r3, #2]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fa9b 	bl	8004d5e <RTC_ByteToBcd2>
 8004828:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800482a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	78db      	ldrb	r3, [r3, #3]
 8004832:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e018      	b.n	800486c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	d102      	bne.n	800484e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2200      	movs	r2, #0
 800484c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800485a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004860:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	78db      	ldrb	r3, [r3, #3]
 8004866:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	22ca      	movs	r2, #202	; 0xca
 8004872:	625a      	str	r2, [r3, #36]	; 0x24
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2253      	movs	r2, #83	; 0x53
 800487a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fa42 	bl	8004d06 <RTC_EnterInitMode>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	22ff      	movs	r2, #255	; 0xff
 800488e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2204      	movs	r2, #4
 8004894:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e047      	b.n	8004930 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80048aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80048ae:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048be:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6899      	ldr	r1, [r3, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d111      	bne.n	800491a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f9dd 	bl	8004cb6 <HAL_RTC_WaitForSynchro>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	22ff      	movs	r2, #255	; 0xff
 8004908:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2204      	movs	r2, #4
 800490e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e00a      	b.n	8004930 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	22ff      	movs	r2, #255	; 0xff
 8004920:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800492e:	2300      	movs	r3, #0
  }
}
 8004930:	4618      	mov	r0, r3
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	bd90      	pop	{r4, r7, pc}

08004938 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	7f1b      	ldrb	r3, [r3, #28]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_RTC_SetDate+0x1c>
 8004950:	2302      	movs	r3, #2
 8004952:	e094      	b.n	8004a7e <HAL_RTC_SetDate+0x146>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2202      	movs	r2, #2
 800495e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10e      	bne.n	8004984 <HAL_RTC_SetDate+0x4c>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	f023 0310 	bic.w	r3, r3, #16
 800497a:	b2db      	uxtb	r3, r3
 800497c:	330a      	adds	r3, #10
 800497e:	b2da      	uxtb	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11c      	bne.n	80049c4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	78db      	ldrb	r3, [r3, #3]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f9e5 	bl	8004d5e <RTC_ByteToBcd2>
 8004994:	4603      	mov	r3, r0
 8004996:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	785b      	ldrb	r3, [r3, #1]
 800499c:	4618      	mov	r0, r3
 800499e:	f000 f9de 	bl	8004d5e <RTC_ByteToBcd2>
 80049a2:	4603      	mov	r3, r0
 80049a4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80049a6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	789b      	ldrb	r3, [r3, #2]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 f9d6 	bl	8004d5e <RTC_ByteToBcd2>
 80049b2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80049b4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e00e      	b.n	80049e2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	78db      	ldrb	r3, [r3, #3]
 80049c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	785b      	ldrb	r3, [r3, #1]
 80049ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80049d0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80049d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	22ca      	movs	r2, #202	; 0xca
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2253      	movs	r2, #83	; 0x53
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f987 	bl	8004d06 <RTC_EnterInitMode>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	22ff      	movs	r2, #255	; 0xff
 8004a04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2204      	movs	r2, #4
 8004a0a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e033      	b.n	8004a7e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a24:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a34:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d111      	bne.n	8004a68 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f936 	bl	8004cb6 <HAL_RTC_WaitForSynchro>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00b      	beq.n	8004a68 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	22ff      	movs	r2, #255	; 0xff
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2204      	movs	r2, #4
 8004a5c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e00a      	b.n	8004a7e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	22ff      	movs	r2, #255	; 0xff
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2201      	movs	r2, #1
 8004a74:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
  }
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd90      	pop	{r4, r7, pc}

08004a86 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004a86:	b590      	push	{r4, r7, lr}
 8004a88:	b089      	sub	sp, #36	; 0x24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	7f1b      	ldrb	r3, [r3, #28]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_RTC_SetAlarm+0x24>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e101      	b.n	8004cae <HAL_RTC_SetAlarm+0x228>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d137      	bne.n	8004b2c <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2200      	movs	r2, #0
 8004ace:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 f942 	bl	8004d5e <RTC_ByteToBcd2>
 8004ada:	4603      	mov	r3, r0
 8004adc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	785b      	ldrb	r3, [r3, #1]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f93b 	bl	8004d5e <RTC_ByteToBcd2>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004aec:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	789b      	ldrb	r3, [r3, #2]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 f933 	bl	8004d5e <RTC_ByteToBcd2>
 8004af8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004afa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	78db      	ldrb	r3, [r3, #3]
 8004b02:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004b04:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f925 	bl	8004d5e <RTC_ByteToBcd2>
 8004b14:	4603      	mov	r3, r0
 8004b16:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004b18:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004b20:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	e023      	b.n	8004b74 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	785b      	ldrb	r3, [r3, #1]
 8004b4a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004b4c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004b52:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	78db      	ldrb	r3, [r3, #3]
 8004b58:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004b5a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b62:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004b64:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004b6a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004b70:	4313      	orrs	r3, r2
 8004b72:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	22ca      	movs	r2, #202	; 0xca
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2253      	movs	r2, #83	; 0x53
 8004b8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b98:	d13f      	bne.n	8004c1a <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ba8:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bb8:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bba:	f7fd f85d 	bl	8001c78 <HAL_GetTick>
 8004bbe:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004bc0:	e013      	b.n	8004bea <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bc2:	f7fd f859 	bl	8001c78 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bd0:	d90b      	bls.n	8004bea <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	22ff      	movs	r2, #255	; 0xff
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2203      	movs	r2, #3
 8004bde:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e061      	b.n	8004cae <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0e4      	beq.n	8004bc2 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c16:	609a      	str	r2, [r3, #8]
 8004c18:	e03e      	b.n	8004c98 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c28:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c38:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c3a:	f7fd f81d 	bl	8001c78 <HAL_GetTick>
 8004c3e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004c40:	e013      	b.n	8004c6a <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c42:	f7fd f819 	bl	8001c78 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c50:	d90b      	bls.n	8004c6a <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	22ff      	movs	r2, #255	; 0xff
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e021      	b.n	8004cae <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0e4      	beq.n	8004c42 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c96:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	22ff      	movs	r2, #255	; 0xff
 8004c9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3724      	adds	r7, #36	; 0x24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd90      	pop	{r4, r7, pc}

08004cb6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cd2:	f7fc ffd1 	bl	8001c78 <HAL_GetTick>
 8004cd6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004cd8:	e009      	b.n	8004cee <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cda:	f7fc ffcd 	bl	8001c78 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ce8:	d901      	bls.n	8004cee <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e007      	b.n	8004cfe <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0ee      	beq.n	8004cda <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d119      	bne.n	8004d54 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f04f 32ff 	mov.w	r2, #4294967295
 8004d28:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d2a:	f7fc ffa5 	bl	8001c78 <HAL_GetTick>
 8004d2e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d30:	e009      	b.n	8004d46 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d32:	f7fc ffa1 	bl	8001c78 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d40:	d901      	bls.n	8004d46 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e007      	b.n	8004d56 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ee      	beq.n	8004d32 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	4603      	mov	r3, r0
 8004d66:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004d6c:	e005      	b.n	8004d7a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3301      	adds	r3, #1
 8004d72:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	3b0a      	subs	r3, #10
 8004d78:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	2b09      	cmp	r3, #9
 8004d7e:	d8f6      	bhi.n	8004d6e <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	b2db      	uxtb	r3, r3
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e041      	b.n	8004e30 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d106      	bne.n	8004dc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7fc fe3d 	bl	8001a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f000 f94f 	bl	800507c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d001      	beq.n	8004e50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e03c      	b.n	8004eca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1e      	ldr	r2, [pc, #120]	; (8004ed8 <HAL_TIM_Base_Start+0xa0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d018      	beq.n	8004e94 <HAL_TIM_Base_Start+0x5c>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6a:	d013      	beq.n	8004e94 <HAL_TIM_Base_Start+0x5c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1a      	ldr	r2, [pc, #104]	; (8004edc <HAL_TIM_Base_Start+0xa4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00e      	beq.n	8004e94 <HAL_TIM_Base_Start+0x5c>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a19      	ldr	r2, [pc, #100]	; (8004ee0 <HAL_TIM_Base_Start+0xa8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d009      	beq.n	8004e94 <HAL_TIM_Base_Start+0x5c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <HAL_TIM_Base_Start+0xac>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_TIM_Base_Start+0x5c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a16      	ldr	r2, [pc, #88]	; (8004ee8 <HAL_TIM_Base_Start+0xb0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d111      	bne.n	8004eb8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d010      	beq.n	8004ec8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	e007      	b.n	8004ec8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40014000 	.word	0x40014000

08004eec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_TIM_ConfigClockSource+0x1c>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e0b4      	b.n	8005072 <HAL_TIM_ConfigClockSource+0x186>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f40:	d03e      	beq.n	8004fc0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f46:	f200 8087 	bhi.w	8005058 <HAL_TIM_ConfigClockSource+0x16c>
 8004f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4e:	f000 8086 	beq.w	800505e <HAL_TIM_ConfigClockSource+0x172>
 8004f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f56:	d87f      	bhi.n	8005058 <HAL_TIM_ConfigClockSource+0x16c>
 8004f58:	2b70      	cmp	r3, #112	; 0x70
 8004f5a:	d01a      	beq.n	8004f92 <HAL_TIM_ConfigClockSource+0xa6>
 8004f5c:	2b70      	cmp	r3, #112	; 0x70
 8004f5e:	d87b      	bhi.n	8005058 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b60      	cmp	r3, #96	; 0x60
 8004f62:	d050      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x11a>
 8004f64:	2b60      	cmp	r3, #96	; 0x60
 8004f66:	d877      	bhi.n	8005058 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b50      	cmp	r3, #80	; 0x50
 8004f6a:	d03c      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0xfa>
 8004f6c:	2b50      	cmp	r3, #80	; 0x50
 8004f6e:	d873      	bhi.n	8005058 <HAL_TIM_ConfigClockSource+0x16c>
 8004f70:	2b40      	cmp	r3, #64	; 0x40
 8004f72:	d058      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x13a>
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d86f      	bhi.n	8005058 <HAL_TIM_ConfigClockSource+0x16c>
 8004f78:	2b30      	cmp	r3, #48	; 0x30
 8004f7a:	d064      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x15a>
 8004f7c:	2b30      	cmp	r3, #48	; 0x30
 8004f7e:	d86b      	bhi.n	8005058 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d060      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x15a>
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d867      	bhi.n	8005058 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d05c      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x15a>
 8004f8c:	2b10      	cmp	r3, #16
 8004f8e:	d05a      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x15a>
 8004f90:	e062      	b.n	8005058 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6899      	ldr	r1, [r3, #8]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f000 f965 	bl	8005270 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	609a      	str	r2, [r3, #8]
      break;
 8004fbe:	e04f      	b.n	8005060 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	6899      	ldr	r1, [r3, #8]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f000 f94e 	bl	8005270 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fe2:	609a      	str	r2, [r3, #8]
      break;
 8004fe4:	e03c      	b.n	8005060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6859      	ldr	r1, [r3, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f000 f8c2 	bl	800517c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2150      	movs	r1, #80	; 0x50
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 f91b 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8005004:	e02c      	b.n	8005060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	461a      	mov	r2, r3
 8005014:	f000 f8e1 	bl	80051da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2160      	movs	r1, #96	; 0x60
 800501e:	4618      	mov	r0, r3
 8005020:	f000 f90b 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8005024:	e01c      	b.n	8005060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6859      	ldr	r1, [r3, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	461a      	mov	r2, r3
 8005034:	f000 f8a2 	bl	800517c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2140      	movs	r1, #64	; 0x40
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f8fb 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8005044:	e00c      	b.n	8005060 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4619      	mov	r1, r3
 8005050:	4610      	mov	r0, r2
 8005052:	f000 f8f2 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8005056:	e003      	b.n	8005060 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
      break;
 800505c:	e000      	b.n	8005060 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800505e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a34      	ldr	r2, [pc, #208]	; (8005160 <TIM_Base_SetConfig+0xe4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00f      	beq.n	80050b4 <TIM_Base_SetConfig+0x38>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509a:	d00b      	beq.n	80050b4 <TIM_Base_SetConfig+0x38>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a31      	ldr	r2, [pc, #196]	; (8005164 <TIM_Base_SetConfig+0xe8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d007      	beq.n	80050b4 <TIM_Base_SetConfig+0x38>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a30      	ldr	r2, [pc, #192]	; (8005168 <TIM_Base_SetConfig+0xec>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d003      	beq.n	80050b4 <TIM_Base_SetConfig+0x38>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a2f      	ldr	r2, [pc, #188]	; (800516c <TIM_Base_SetConfig+0xf0>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d108      	bne.n	80050c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a25      	ldr	r2, [pc, #148]	; (8005160 <TIM_Base_SetConfig+0xe4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d01b      	beq.n	8005106 <TIM_Base_SetConfig+0x8a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d4:	d017      	beq.n	8005106 <TIM_Base_SetConfig+0x8a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a22      	ldr	r2, [pc, #136]	; (8005164 <TIM_Base_SetConfig+0xe8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d013      	beq.n	8005106 <TIM_Base_SetConfig+0x8a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a21      	ldr	r2, [pc, #132]	; (8005168 <TIM_Base_SetConfig+0xec>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00f      	beq.n	8005106 <TIM_Base_SetConfig+0x8a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a20      	ldr	r2, [pc, #128]	; (800516c <TIM_Base_SetConfig+0xf0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00b      	beq.n	8005106 <TIM_Base_SetConfig+0x8a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <TIM_Base_SetConfig+0xf4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d007      	beq.n	8005106 <TIM_Base_SetConfig+0x8a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <TIM_Base_SetConfig+0xf8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d003      	beq.n	8005106 <TIM_Base_SetConfig+0x8a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a1d      	ldr	r2, [pc, #116]	; (8005178 <TIM_Base_SetConfig+0xfc>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d108      	bne.n	8005118 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a08      	ldr	r2, [pc, #32]	; (8005160 <TIM_Base_SetConfig+0xe4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d103      	bne.n	800514c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	615a      	str	r2, [r3, #20]
}
 8005152:	bf00      	nop
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40010000 	.word	0x40010000
 8005164:	40000400 	.word	0x40000400
 8005168:	40000800 	.word	0x40000800
 800516c:	40000c00 	.word	0x40000c00
 8005170:	40014000 	.word	0x40014000
 8005174:	40014400 	.word	0x40014400
 8005178:	40014800 	.word	0x40014800

0800517c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f023 0201 	bic.w	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f023 030a 	bic.w	r3, r3, #10
 80051b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051da:	b480      	push	{r7}
 80051dc:	b087      	sub	sp, #28
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	f023 0210 	bic.w	r2, r3, #16
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	031b      	lsls	r3, r3, #12
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005216:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	f043 0307 	orr.w	r3, r3, #7
 800525c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800528a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	021a      	lsls	r2, r3, #8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	431a      	orrs	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4313      	orrs	r3, r2
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	609a      	str	r2, [r3, #8]
}
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e050      	b.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a1c      	ldr	r2, [pc, #112]	; (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d018      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005314:	d013      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a18      	ldr	r2, [pc, #96]	; (800537c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00e      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a16      	ldr	r2, [pc, #88]	; (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d009      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a15      	ldr	r2, [pc, #84]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d004      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a13      	ldr	r2, [pc, #76]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10c      	bne.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4313      	orrs	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000
 800537c:	40000400 	.word	0x40000400
 8005380:	40000800 	.word	0x40000800
 8005384:	40000c00 	.word	0x40000c00
 8005388:	40014000 	.word	0x40014000

0800538c <__libc_init_array>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	4d0d      	ldr	r5, [pc, #52]	; (80053c4 <__libc_init_array+0x38>)
 8005390:	4c0d      	ldr	r4, [pc, #52]	; (80053c8 <__libc_init_array+0x3c>)
 8005392:	1b64      	subs	r4, r4, r5
 8005394:	10a4      	asrs	r4, r4, #2
 8005396:	2600      	movs	r6, #0
 8005398:	42a6      	cmp	r6, r4
 800539a:	d109      	bne.n	80053b0 <__libc_init_array+0x24>
 800539c:	4d0b      	ldr	r5, [pc, #44]	; (80053cc <__libc_init_array+0x40>)
 800539e:	4c0c      	ldr	r4, [pc, #48]	; (80053d0 <__libc_init_array+0x44>)
 80053a0:	f000 f820 	bl	80053e4 <_init>
 80053a4:	1b64      	subs	r4, r4, r5
 80053a6:	10a4      	asrs	r4, r4, #2
 80053a8:	2600      	movs	r6, #0
 80053aa:	42a6      	cmp	r6, r4
 80053ac:	d105      	bne.n	80053ba <__libc_init_array+0x2e>
 80053ae:	bd70      	pop	{r4, r5, r6, pc}
 80053b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b4:	4798      	blx	r3
 80053b6:	3601      	adds	r6, #1
 80053b8:	e7ee      	b.n	8005398 <__libc_init_array+0xc>
 80053ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80053be:	4798      	blx	r3
 80053c0:	3601      	adds	r6, #1
 80053c2:	e7f2      	b.n	80053aa <__libc_init_array+0x1e>
 80053c4:	08005594 	.word	0x08005594
 80053c8:	08005594 	.word	0x08005594
 80053cc:	08005594 	.word	0x08005594
 80053d0:	08005598 	.word	0x08005598

080053d4 <memset>:
 80053d4:	4402      	add	r2, r0
 80053d6:	4603      	mov	r3, r0
 80053d8:	4293      	cmp	r3, r2
 80053da:	d100      	bne.n	80053de <memset+0xa>
 80053dc:	4770      	bx	lr
 80053de:	f803 1b01 	strb.w	r1, [r3], #1
 80053e2:	e7f9      	b.n	80053d8 <memset+0x4>

080053e4 <_init>:
 80053e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e6:	bf00      	nop
 80053e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ea:	bc08      	pop	{r3}
 80053ec:	469e      	mov	lr, r3
 80053ee:	4770      	bx	lr

080053f0 <_fini>:
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	bf00      	nop
 80053f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f6:	bc08      	pop	{r3}
 80053f8:	469e      	mov	lr, r3
 80053fa:	4770      	bx	lr
