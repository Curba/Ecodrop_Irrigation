
ed_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006448  08006448  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006450  08006450  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006450  08006450  00016450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000070  080064c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080064c8  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d71  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292f  00000000  00000000  00033e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00036740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  00037950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186a6  00000000  00000000  00038a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001594a  00000000  00000000  000510f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a06ec  00000000  00000000  00066a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010712c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a4  00000000  00000000  00107180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800626c 	.word	0x0800626c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800626c 	.word	0x0800626c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f023 030f 	bic.w	r3, r3, #15
 8000588:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	f043 030c 	orr.w	r3, r3, #12
 8000596:	b2db      	uxtb	r3, r3
 8000598:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005a4:	7bbb      	ldrb	r3, [r7, #14]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005ae:	7bbb      	ldrb	r3, [r7, #14]
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005b8:	f107 0208 	add.w	r2, r7, #8
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2304      	movs	r3, #4
 80005c2:	214e      	movs	r1, #78	; 0x4e
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <lcd_send_cmd+0x5c>)
 80005c6:	f003 fa29 	bl	8003a1c <HAL_I2C_Master_Transmit>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000f0 	.word	0x200000f0

080005d8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af02      	add	r7, sp, #8
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f023 030f 	bic.w	r3, r3, #15
 80005e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	f043 030d 	orr.w	r3, r3, #13
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	f043 0309 	orr.w	r3, r3, #9
 8000600:	b2db      	uxtb	r3, r3
 8000602:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000604:	7bbb      	ldrb	r3, [r7, #14]
 8000606:	f043 030d 	orr.w	r3, r3, #13
 800060a:	b2db      	uxtb	r3, r3
 800060c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	f043 0309 	orr.w	r3, r3, #9
 8000614:	b2db      	uxtb	r3, r3
 8000616:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000618:	f107 0208 	add.w	r2, r7, #8
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2304      	movs	r3, #4
 8000622:	214e      	movs	r1, #78	; 0x4e
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <lcd_send_data+0x5c>)
 8000626:	f003 f9f9 	bl	8003a1c <HAL_I2C_Master_Transmit>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000f0 	.word	0x200000f0

08000638 <lcd_clear>:

void lcd_clear (void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	f7ff ff9a 	bl	8000578 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	e005      	b.n	8000656 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800064a:	2020      	movs	r0, #32
 800064c:	f7ff ffc4 	bl	80005d8 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3301      	adds	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b45      	cmp	r3, #69	; 0x45
 800065a:	ddf6      	ble.n	800064a <lcd_clear+0x12>
	}
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <lcd_put_cur+0x18>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d005      	beq.n	8000688 <lcd_put_cur+0x22>
 800067c:	e009      	b.n	8000692 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	603b      	str	r3, [r7, #0]
            break;
 8000686:	e004      	b.n	8000692 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800068e:	603b      	str	r3, [r7, #0]
            break;
 8000690:	bf00      	nop
    };
    lcd_send_cmd (col);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff6e 	bl	8000578 <lcd_send_cmd>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <lcd_init>:


void lcd_init (void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	delay_us(60000);  // wait for >40ms
 80006a8:	f64e 2060 	movw	r0, #60000	; 0xea60
 80006ac:	f000 fc04 	bl	8000eb8 <delay_us>
	lcd_send_cmd (0x30);
 80006b0:	2030      	movs	r0, #48	; 0x30
 80006b2:	f7ff ff61 	bl	8000578 <lcd_send_cmd>
	delay_us(6000);  // wait for >4.1ms
 80006b6:	f241 7070 	movw	r0, #6000	; 0x1770
 80006ba:	f000 fbfd 	bl	8000eb8 <delay_us>
	lcd_send_cmd (0x30);
 80006be:	2030      	movs	r0, #48	; 0x30
 80006c0:	f7ff ff5a 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);  // wait for >100us
 80006c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c8:	f000 fbf6 	bl	8000eb8 <delay_us>
	lcd_send_cmd (0x30);
 80006cc:	2030      	movs	r0, #48	; 0x30
 80006ce:	f7ff ff53 	bl	8000578 <lcd_send_cmd>
	delay_us(200);
 80006d2:	20c8      	movs	r0, #200	; 0xc8
 80006d4:	f000 fbf0 	bl	8000eb8 <delay_us>
	lcd_send_cmd (0x20);  // 4bit mode
 80006d8:	2020      	movs	r0, #32
 80006da:	f7ff ff4d 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);
 80006de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006e2:	f000 fbe9 	bl	8000eb8 <delay_us>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006e6:	2028      	movs	r0, #40	; 0x28
 80006e8:	f7ff ff46 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);
 80006ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f0:	f000 fbe2 	bl	8000eb8 <delay_us>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006f4:	2008      	movs	r0, #8
 80006f6:	f7ff ff3f 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);
 80006fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006fe:	f000 fbdb 	bl	8000eb8 <delay_us>
	lcd_send_cmd (0x01);  // clear display
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff ff38 	bl	8000578 <lcd_send_cmd>
	delay_us(4000);
 8000708:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800070c:	f000 fbd4 	bl	8000eb8 <delay_us>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000710:	2006      	movs	r0, #6
 8000712:	f7ff ff31 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);
 8000716:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800071a:	f000 fbcd 	bl	8000eb8 <delay_us>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800071e:	200c      	movs	r0, #12
 8000720:	f7ff ff2a 	bl	8000578 <lcd_send_cmd>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000730:	e006      	b.n	8000740 <lcd_send_string+0x18>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff4c 	bl	80005d8 <lcd_send_data>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f4      	bne.n	8000732 <lcd_send_string+0xa>
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f001 fbf9 	bl	8001f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f89b 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 faf1 	bl	8000d48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000766:	f000 facf 	bl	8000d08 <MX_DMA_Init>
  MX_ADC1_Init();
 800076a:	f000 f91b 	bl	80009a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800076e:	f000 f9bf 	bl	8000af0 <MX_I2C1_Init>
  MX_RTC_Init();
 8000772:	f000 f9eb 	bl	8000b4c <MX_RTC_Init>
  MX_TIM1_Init();
 8000776:	f000 fa77 	bl	8000c68 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Initializes line average array


  for(int x = 0; x < 4; x ++){
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	e007      	b.n	8000790 <main+0x3c>
		  adc_line_avg[x] = 0;
 8000780:	4a35      	ldr	r2, [pc, #212]	; (8000858 <main+0x104>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2100      	movs	r1, #0
 8000786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int x = 0; x < 4; x ++){
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3301      	adds	r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b03      	cmp	r3, #3
 8000794:	ddf4      	ble.n	8000780 <main+0x2c>
			}

  HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, -511);
 8000796:	f46f 73ff 	mvn.w	r3, #510	; 0x1fe
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	482f      	ldr	r0, [pc, #188]	; (800085c <main+0x108>)
 80007a0:	f004 fdb0 	bl	8005304 <HAL_RTCEx_SetSmoothCalib>
  HAL_TIM_Base_Start(&htim1);
 80007a4:	482e      	ldr	r0, [pc, #184]	; (8000860 <main+0x10c>)
 80007a6:	f004 fe57 	bl	8005458 <HAL_TIM_Base_Start>
  lcd_initial_message();
 80007aa:	f000 fd51 	bl	8001250 <lcd_initial_message>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  DHT11_Start();
 80007ae:	f000 fc7d 	bl	80010ac <DHT11_Start>
	  	Presence = DHT11_Check_Response();
 80007b2:	f000 fc9b 	bl	80010ec <DHT11_Check_Response>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <main+0x110>)
 80007bc:	701a      	strb	r2, [r3, #0]
	  	Rh_byte1 = DHT11_Read ();
 80007be:	f000 fcc3 	bl	8001148 <DHT11_Read>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <main+0x114>)
 80007c8:	701a      	strb	r2, [r3, #0]
	  	Rh_byte2 = DHT11_Read ();
 80007ca:	f000 fcbd 	bl	8001148 <DHT11_Read>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <main+0x118>)
 80007d4:	701a      	strb	r2, [r3, #0]
	  	Temp_byte1 = DHT11_Read ();
 80007d6:	f000 fcb7 	bl	8001148 <DHT11_Read>
 80007da:	4603      	mov	r3, r0
 80007dc:	461a      	mov	r2, r3
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <main+0x11c>)
 80007e0:	701a      	strb	r2, [r3, #0]
	  	Temp_byte2 = DHT11_Read ();
 80007e2:	f000 fcb1 	bl	8001148 <DHT11_Read>
 80007e6:	4603      	mov	r3, r0
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <main+0x120>)
 80007ec:	701a      	strb	r2, [r3, #0]
	  	SUM = DHT11_Read();
 80007ee:	f000 fcab 	bl	8001148 <DHT11_Read>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <main+0x124>)
 80007f8:	801a      	strh	r2, [r3, #0]
	  	TEMP = Temp_byte1;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <main+0x11c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <main+0x128>)
 8000802:	801a      	strh	r2, [r3, #0]
	  	RH = Rh_byte1;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <main+0x114>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b29a      	uxth	r2, r3
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <main+0x12c>)
 800080c:	801a      	strh	r2, [r3, #0]
	  	Temperature = (float) TEMP;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <main+0x128>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	ee07 3a90 	vmov	s15, r3
 8000816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <main+0x130>)
 800081c:	edc3 7a00 	vstr	s15, [r3]
	  	Humidity = (float) RH;
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <main+0x12c>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	ee07 3a90 	vmov	s15, r3
 8000828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <main+0x134>)
 800082e:	edc3 7a00 	vstr	s15, [r3]

	  //DHT11_get_value();
	  get_time();
 8000832:	f000 fcd1 	bl	80011d8 <get_time>

	  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_dma, adc_channel_lenght);
 8000836:	2307      	movs	r3, #7
 8000838:	461a      	mov	r2, r3
 800083a:	4914      	ldr	r1, [pc, #80]	; (800088c <main+0x138>)
 800083c:	4814      	ldr	r0, [pc, #80]	; (8000890 <main+0x13c>)
 800083e:	f001 fda1 	bl	8002384 <HAL_ADC_Start_DMA>
	  //mode_planner(0,1);
	  //mode_manual(mode_manual_start);
	  menu_func(menu_lcd_refresh, 0);
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <main+0x140>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fd33 	bl	80012b4 <menu_func>
	  delay_us(100);
 800084e:	2064      	movs	r0, #100	; 0x64
 8000850:	f000 fb32 	bl	8000eb8 <delay_us>
	  DHT11_Start();
 8000854:	e7ab      	b.n	80007ae <main+0x5a>
 8000856:	bf00      	nop
 8000858:	200000d0 	.word	0x200000d0
 800085c:	20000214 	.word	0x20000214
 8000860:	20000254 	.word	0x20000254
 8000864:	200000c0 	.word	0x200000c0
 8000868:	20000144 	.word	0x20000144
 800086c:	20000250 	.word	0x20000250
 8000870:	20000194 	.word	0x20000194
 8000874:	200002c8 	.word	0x200002c8
 8000878:	200002c0 	.word	0x200002c0
 800087c:	20000148 	.word	0x20000148
 8000880:	20000146 	.word	0x20000146
 8000884:	200000b8 	.word	0x200000b8
 8000888:	200000bc 	.word	0x200000bc
 800088c:	200000e0 	.word	0x200000e0
 8000890:	2000014c 	.word	0x2000014c
 8000894:	2000008c 	.word	0x2000008c

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b098      	sub	sp, #96	; 0x60
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008a2:	2230      	movs	r2, #48	; 0x30
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f005 f8aa 	bl	8005a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	4b32      	ldr	r3, [pc, #200]	; (800099c <SystemClock_Config+0x104>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a31      	ldr	r2, [pc, #196]	; (800099c <SystemClock_Config+0x104>)
 80008d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
 80008dc:	4b2f      	ldr	r3, [pc, #188]	; (800099c <SystemClock_Config+0x104>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008e8:	2300      	movs	r3, #0
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <SystemClock_Config+0x108>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f4:	4a2a      	ldr	r2, [pc, #168]	; (80009a0 <SystemClock_Config+0x108>)
 80008f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <SystemClock_Config+0x108>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000908:	230a      	movs	r3, #10
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090c:	2301      	movs	r3, #1
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000910:	2310      	movs	r3, #16
 8000912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000914:	2301      	movs	r3, #1
 8000916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000918:	2302      	movs	r3, #2
 800091a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800091c:	2300      	movs	r3, #0
 800091e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000920:	2308      	movs	r3, #8
 8000922:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000924:	2354      	movs	r3, #84	; 0x54
 8000926:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800092c:	2304      	movs	r3, #4
 800092e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000934:	4618      	mov	r0, r3
 8000936:	f003 fb79 	bl	800402c <HAL_RCC_OscConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000940:	f001 f910 	bl	8001b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000944:	230f      	movs	r3, #15
 8000946:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000948:	2302      	movs	r3, #2
 800094a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	2102      	movs	r1, #2
 8000960:	4618      	mov	r0, r3
 8000962:	f003 fddb 	bl	800451c <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800096c:	f001 f8fa 	bl	8001b64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_RTC;
 8000970:	230a      	movs	r3, #10
 8000972:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000978:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800097a:	2301      	movs	r3, #1
 800097c:	763b      	strb	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4618      	mov	r0, r3
 8000984:	f003 ff86 	bl	8004894 <HAL_RCCEx_PeriphCLKConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800098e:	f001 f8e9 	bl	8001b64 <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3760      	adds	r7, #96	; 0x60
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40007000 	.word	0x40007000

080009a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009b6:	4b4b      	ldr	r3, [pc, #300]	; (8000ae4 <MX_ADC1_Init+0x140>)
 80009b8:	4a4b      	ldr	r2, [pc, #300]	; (8000ae8 <MX_ADC1_Init+0x144>)
 80009ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009bc:	4b49      	ldr	r3, [pc, #292]	; (8000ae4 <MX_ADC1_Init+0x140>)
 80009be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009c4:	4b47      	ldr	r3, [pc, #284]	; (8000ae4 <MX_ADC1_Init+0x140>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009ca:	4b46      	ldr	r3, [pc, #280]	; (8000ae4 <MX_ADC1_Init+0x140>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009d0:	4b44      	ldr	r3, [pc, #272]	; (8000ae4 <MX_ADC1_Init+0x140>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d6:	4b43      	ldr	r3, [pc, #268]	; (8000ae4 <MX_ADC1_Init+0x140>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009de:	4b41      	ldr	r3, [pc, #260]	; (8000ae4 <MX_ADC1_Init+0x140>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e4:	4b3f      	ldr	r3, [pc, #252]	; (8000ae4 <MX_ADC1_Init+0x140>)
 80009e6:	4a41      	ldr	r2, [pc, #260]	; (8000aec <MX_ADC1_Init+0x148>)
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ea:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <MX_ADC1_Init+0x140>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 80009f0:	4b3c      	ldr	r3, [pc, #240]	; (8000ae4 <MX_ADC1_Init+0x140>)
 80009f2:	2207      	movs	r2, #7
 80009f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009f6:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <MX_ADC1_Init+0x140>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fe:	4b39      	ldr	r3, [pc, #228]	; (8000ae4 <MX_ADC1_Init+0x140>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a04:	4837      	ldr	r0, [pc, #220]	; (8000ae4 <MX_ADC1_Init+0x140>)
 8000a06:	f001 fb39 	bl	800207c <HAL_ADC_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a10:	f001 f8a8 	bl	8001b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	482f      	ldr	r0, [pc, #188]	; (8000ae4 <MX_ADC1_Init+0x140>)
 8000a26:	f001 fdbb 	bl	80025a0 <HAL_ADC_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a30:	f001 f898 	bl	8001b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4828      	ldr	r0, [pc, #160]	; (8000ae4 <MX_ADC1_Init+0x140>)
 8000a42:	f001 fdad 	bl	80025a0 <HAL_ADC_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a4c:	f001 f88a 	bl	8001b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a54:	2303      	movs	r3, #3
 8000a56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4821      	ldr	r0, [pc, #132]	; (8000ae4 <MX_ADC1_Init+0x140>)
 8000a5e:	f001 fd9f 	bl	80025a0 <HAL_ADC_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a68:	f001 f87c 	bl	8001b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a70:	2304      	movs	r3, #4
 8000a72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <MX_ADC1_Init+0x140>)
 8000a7a:	f001 fd91 	bl	80025a0 <HAL_ADC_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a84:	f001 f86e 	bl	8001b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000a8c:	2305      	movs	r3, #5
 8000a8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a90:	463b      	mov	r3, r7
 8000a92:	4619      	mov	r1, r3
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <MX_ADC1_Init+0x140>)
 8000a96:	f001 fd83 	bl	80025a0 <HAL_ADC_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000aa0:	f001 f860 	bl	8001b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000aa8:	2306      	movs	r3, #6
 8000aaa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aac:	463b      	mov	r3, r7
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_ADC1_Init+0x140>)
 8000ab2:	f001 fd75 	bl	80025a0 <HAL_ADC_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000abc:	f001 f852 	bl	8001b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ac0:	2306      	movs	r3, #6
 8000ac2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_ADC1_Init+0x140>)
 8000ace:	f001 fd67 	bl	80025a0 <HAL_ADC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000ad8:	f001 f844 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000014c 	.word	0x2000014c
 8000ae8:	40012000 	.word	0x40012000
 8000aec:	0f000001 	.word	0x0f000001

08000af0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000af6:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <MX_I2C1_Init+0x54>)
 8000af8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <MX_I2C1_Init+0x58>)
 8000afe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b2e:	f002 fe31 	bl	8003794 <HAL_I2C_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b38:	f001 f814 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200000f0 	.word	0x200000f0
 8000b44:	40005400 	.word	0x40005400
 8000b48:	00061a80 	.word	0x00061a80

08000b4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b090      	sub	sp, #64	; 0x40
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	2228      	movs	r2, #40	; 0x28
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 ff47 	bl	8005a00 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b72:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <MX_RTC_Init+0x114>)
 8000b74:	4a3b      	ldr	r2, [pc, #236]	; (8000c64 <MX_RTC_Init+0x118>)
 8000b76:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b78:	4b39      	ldr	r3, [pc, #228]	; (8000c60 <MX_RTC_Init+0x114>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b7e:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <MX_RTC_Init+0x114>)
 8000b80:	227f      	movs	r2, #127	; 0x7f
 8000b82:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 280;
 8000b84:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <MX_RTC_Init+0x114>)
 8000b86:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000b8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b8c:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <MX_RTC_Init+0x114>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b92:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <MX_RTC_Init+0x114>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b98:	4b31      	ldr	r3, [pc, #196]	; (8000c60 <MX_RTC_Init+0x114>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b9e:	4830      	ldr	r0, [pc, #192]	; (8000c60 <MX_RTC_Init+0x114>)
 8000ba0:	f003 ff66 	bl	8004a70 <HAL_RTC_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000baa:	f000 ffdb 	bl	8001b64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4823      	ldr	r0, [pc, #140]	; (8000c60 <MX_RTC_Init+0x114>)
 8000bd2:	f003 ffde 	bl	8004b92 <HAL_RTC_SetTime>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000bdc:	f000 ffc2 	bl	8001b64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000be0:	2301      	movs	r3, #1
 8000be2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_MARCH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x4;
 8000bec:	2304      	movs	r3, #4
 8000bee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4817      	ldr	r0, [pc, #92]	; (8000c60 <MX_RTC_Init+0x114>)
 8000c02:	f004 f8e1 	bl	8004dc8 <HAL_RTC_SetDate>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000c0c:	f000 ffaa 	bl	8001b64 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x3;
 8000c10:	2303      	movs	r3, #3
 8000c12:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x45;
 8000c14:	2345      	movs	r3, #69	; 0x45
 8000c16:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x4;
 8000c34:	2304      	movs	r3, #4
 8000c36:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	2201      	movs	r2, #1
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_RTC_Init+0x114>)
 8000c48:	f004 f9b4 	bl	8004fb4 <HAL_RTC_SetAlarm>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000c52:	f000 ff87 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	3740      	adds	r7, #64	; 0x40
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000214 	.word	0x20000214
 8000c64:	40002800 	.word	0x40002800

08000c68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_TIM1_Init+0x98>)
 8000c86:	4a1f      	ldr	r2, [pc, #124]	; (8000d04 <MX_TIM1_Init+0x9c>)
 8000c88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_TIM1_Init+0x98>)
 8000c8c:	2253      	movs	r2, #83	; 0x53
 8000c8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_TIM1_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_TIM1_Init+0x98>)
 8000c98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_TIM1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_TIM1_Init+0x98>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_TIM1_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <MX_TIM1_Init+0x98>)
 8000cb2:	f004 fb82 	bl	80053ba <HAL_TIM_Base_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cbc:	f000 ff52 	bl	8001b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_TIM1_Init+0x98>)
 8000cce:	f004 fc1d 	bl	800550c <HAL_TIM_ConfigClockSource>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000cd8:	f000 ff44 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_TIM1_Init+0x98>)
 8000cea:	f004 fdf1 	bl	80058d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cf4:	f000 ff36 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000254 	.word	0x20000254
 8000d04:	40010000 	.word	0x40010000

08000d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_DMA_Init+0x3c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <MX_DMA_Init+0x3c>)
 8000d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_DMA_Init+0x3c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2038      	movs	r0, #56	; 0x38
 8000d30:	f001 ffbb 	bl	8002caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d34:	2038      	movs	r0, #56	; 0x38
 8000d36:	f001 ffd4 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b51      	ldr	r3, [pc, #324]	; (8000ea8 <MX_GPIO_Init+0x160>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a50      	ldr	r2, [pc, #320]	; (8000ea8 <MX_GPIO_Init+0x160>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b4e      	ldr	r3, [pc, #312]	; (8000ea8 <MX_GPIO_Init+0x160>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <MX_GPIO_Init+0x160>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a49      	ldr	r2, [pc, #292]	; (8000ea8 <MX_GPIO_Init+0x160>)
 8000d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <MX_GPIO_Init+0x160>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b43      	ldr	r3, [pc, #268]	; (8000ea8 <MX_GPIO_Init+0x160>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a42      	ldr	r2, [pc, #264]	; (8000ea8 <MX_GPIO_Init+0x160>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b40      	ldr	r3, [pc, #256]	; (8000ea8 <MX_GPIO_Init+0x160>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b3c      	ldr	r3, [pc, #240]	; (8000ea8 <MX_GPIO_Init+0x160>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a3b      	ldr	r2, [pc, #236]	; (8000ea8 <MX_GPIO_Init+0x160>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b39      	ldr	r3, [pc, #228]	; (8000ea8 <MX_GPIO_Init+0x160>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin|line1_relay_Pin|line0_relay_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000dd4:	4835      	ldr	r0, [pc, #212]	; (8000eac <MX_GPIO_Init+0x164>)
 8000dd6:	f002 fcab 	bl	8003730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(wellmotor_relay_GPIO_Port, wellmotor_relay_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2104      	movs	r1, #4
 8000dde:	4834      	ldr	r0, [pc, #208]	; (8000eb0 <MX_GPIO_Init+0x168>)
 8000de0:	f002 fca6 	bl	8003730 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : tankmotor_relay_Pin line1_relay_Pin line0_relay_Pin */
  GPIO_InitStruct.Pin = tankmotor_relay_Pin|line1_relay_Pin|line0_relay_Pin;
 8000de4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	482b      	ldr	r0, [pc, #172]	; (8000eac <MX_GPIO_Init+0x164>)
 8000dfe:	f002 fafb 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : light_exti_sens_Pin button_press_Pin */
  GPIO_InitStruct.Pin = light_exti_sens_Pin|button_press_Pin;
 8000e02:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4826      	ldr	r0, [pc, #152]	; (8000eb4 <MX_GPIO_Init+0x16c>)
 8000e1a:	f002 faed 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : button_up_Pin button_down_Pin ac_source_Pin */
  GPIO_InitStruct.Pin = button_up_Pin|button_down_Pin|ac_source_Pin;
 8000e1e:	f240 4303 	movw	r3, #1027	; 0x403
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <MX_GPIO_Init+0x168>)
 8000e36:	f002 fadf 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : wellmotor_relay_Pin */
  GPIO_InitStruct.Pin = wellmotor_relay_Pin;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(wellmotor_relay_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <MX_GPIO_Init+0x168>)
 8000e52:	f002 fad1 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : dht_in_Pin */
  GPIO_InitStruct.Pin = dht_in_Pin;
 8000e56:	2320      	movs	r3, #32
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(dht_in_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <MX_GPIO_Init+0x168>)
 8000e6a:	f002 fac5 	bl	80033f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2006      	movs	r0, #6
 8000e74:	f001 ff19 	bl	8002caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e78:	2006      	movs	r0, #6
 8000e7a:	f001 ff32 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2007      	movs	r0, #7
 8000e84:	f001 ff11 	bl	8002caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e88:	2007      	movs	r0, #7
 8000e8a:	f001 ff2a 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2028      	movs	r0, #40	; 0x28
 8000e94:	f001 ff09 	bl	8002caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e98:	2028      	movs	r0, #40	; 0x28
 8000e9a:	f001 ff22 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020800 	.word	0x40020800
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <delay_us>:

/* USER CODE BEGIN 4 */

void delay_us (uint16_t us)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <delay_us+0x30>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000eca:	bf00      	nop
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <delay_us+0x30>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d3f9      	bcc.n	8000ecc <delay_us+0x14>
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000254 	.word	0x20000254

08000eec <HAL_ADC_ConvCpltCallback>:


/*-----------------INTERRUPTS BEGIN-----------------------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000eec:	b480      	push	{r7}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a33      	ldr	r2, [pc, #204]	; (8000fc4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d15d      	bne.n	8000fb8 <HAL_ADC_ConvCpltCallback+0xcc>

		for(int x =0; x<adc_channel_lenght; x++){
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e056      	b.n	8000fb0 <HAL_ADC_ConvCpltCallback+0xc4>
			//adc_result_dma[x] = (adc_result_dma[x]> 2730) ? 2730:adc_result_dma[x];
			//adc_result_dma[x] = (adc_result_dma[x]< 1260) ? 1260:adc_result_dma[x];
			adc_result_percentage[x] = 100-((adc_result_dma[x]-1260)*100/1470);
 8000f02:	4a31      	ldr	r2, [pc, #196]	; (8000fc8 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8000f10:	2264      	movs	r2, #100	; 0x64
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	4a2d      	ldr	r2, [pc, #180]	; (8000fcc <HAL_ADC_ConvCpltCallback+0xe0>)
 8000f18:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1c:	11d2      	asrs	r2, r2, #7
 8000f1e:	17db      	asrs	r3, r3, #31
 8000f20:	1a9b      	subs	r3, r3, r2
 8000f22:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000f26:	492a      	ldr	r1, [pc, #168]	; (8000fd0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			//Produces Line average : adc_line_avg
			int y =0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
			int per_line_offset = moist_per_line[0];
 8000f32:	2302      	movs	r3, #2
 8000f34:	60fb      	str	r3, [r7, #12]
			for(int x = 0; x < adc_line_number; x++){
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	e032      	b.n	8000fa2 <HAL_ADC_ConvCpltCallback+0xb6>
				adc_line_avg[x] = 0;
 8000f3c:	4a25      	ldr	r2, [pc, #148]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	2100      	movs	r1, #0
 8000f42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(; y < per_line_offset; y++){
 8000f46:	e00f      	b.n	8000f68 <HAL_ADC_ConvCpltCallback+0x7c>
					adc_line_avg[x] += adc_result_percentage[y];
 8000f48:	4a22      	ldr	r2, [pc, #136]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f50:	491f      	ldr	r1, [pc, #124]	; (8000fd0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f58:	441a      	add	r2, r3
 8000f5a:	491e      	ldr	r1, [pc, #120]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(; y < per_line_offset; y++){
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	3301      	adds	r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbeb      	blt.n	8000f48 <HAL_ADC_ConvCpltCallback+0x5c>
				}
				adc_line_avg[x] /= moist_per_line[x];
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f78:	4917      	ldr	r1, [pc, #92]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0xec>)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f80:	fb92 f2f3 	sdiv	r2, r2, r3
 8000f84:	4913      	ldr	r1, [pc, #76]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			   per_line_offset += moist_per_line[x+1];
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0xec>)
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	4413      	add	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
			for(int x = 0; x < adc_line_number; x++){
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	dbc8      	blt.n	8000f3c <HAL_ADC_ConvCpltCallback+0x50>
		for(int x =0; x<adc_channel_lenght; x++){
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	dba4      	blt.n	8000f02 <HAL_ADC_ConvCpltCallback+0x16>
			}
		}
	}
}
 8000fb8:	bf00      	nop
 8000fba:	371c      	adds	r7, #28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	2000014c 	.word	0x2000014c
 8000fc8:	200000e0 	.word	0x200000e0
 8000fcc:	164a893b 	.word	0x164a893b
 8000fd0:	20000198 	.word	0x20000198
 8000fd4:	200000d0 	.word	0x200000d0
 8000fd8:	080063ec 	.word	0x080063ec

08000fdc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]
	menu_lcd_refresh = 1;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_GPIO_EXTI_Callback+0x48>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
    if(GPIO_Pin == button_up_Pin){
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d103      	bne.n	8000ffa <HAL_GPIO_EXTI_Callback+0x1e>
    	menu_up = 1;
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]
    }else if(GPIO_Pin == button_down_Pin){
    	menu_down = 1;
    }else if(GPIO_Pin == button_press_Pin){
    	menu_click = 1;
    }
}
 8000ff8:	e00d      	b.n	8001016 <HAL_GPIO_EXTI_Callback+0x3a>
    }else if(GPIO_Pin == button_down_Pin){
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d103      	bne.n	8001008 <HAL_GPIO_EXTI_Callback+0x2c>
    	menu_down = 1;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_GPIO_EXTI_Callback+0x50>)
 8001002:	2201      	movs	r2, #1
 8001004:	601a      	str	r2, [r3, #0]
}
 8001006:	e006      	b.n	8001016 <HAL_GPIO_EXTI_Callback+0x3a>
    }else if(GPIO_Pin == button_press_Pin){
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800100e:	d102      	bne.n	8001016 <HAL_GPIO_EXTI_Callback+0x3a>
    	menu_click = 1;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <HAL_GPIO_EXTI_Callback+0x54>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2000008c 	.word	0x2000008c
 8001028:	20000094 	.word	0x20000094
 800102c:	20000098 	.word	0x20000098
 8001030:	20000090 	.word	0x20000090

08001034 <Set_Pin_Output>:
/*-----------------INTERRUPTS END-----------------------*/


/*-----------------DHT11 BEGIN--------------------------*/
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001050:	887b      	ldrh	r3, [r7, #2]
 8001052:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f002 f9c8 	bl	80033f8 <HAL_GPIO_Init>
}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001094:	2301      	movs	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4619      	mov	r1, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f002 f9aa 	bl	80033f8 <HAL_GPIO_Init>
}
 80010a4:	bf00      	nop
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <DHT11_Start>:

void DHT11_Start (void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010b0:	2120      	movs	r1, #32
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <DHT11_Start+0x3c>)
 80010b4:	f7ff ffbe 	bl	8001034 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80010b8:	2200      	movs	r2, #0
 80010ba:	2120      	movs	r1, #32
 80010bc:	480a      	ldr	r0, [pc, #40]	; (80010e8 <DHT11_Start+0x3c>)
 80010be:	f002 fb37 	bl	8003730 <HAL_GPIO_WritePin>
	delay_us (18000);   // wait for 18ms
 80010c2:	f244 6050 	movw	r0, #18000	; 0x4650
 80010c6:	f7ff fef7 	bl	8000eb8 <delay_us>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010ca:	2201      	movs	r2, #1
 80010cc:	2120      	movs	r1, #32
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <DHT11_Start+0x3c>)
 80010d0:	f002 fb2e 	bl	8003730 <HAL_GPIO_WritePin>
    delay_us (20);   // wait for 20us
 80010d4:	2014      	movs	r0, #20
 80010d6:	f7ff feef 	bl	8000eb8 <delay_us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80010da:	2120      	movs	r1, #32
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <DHT11_Start+0x3c>)
 80010de:	f7ff ffc7 	bl	8001070 <Set_Pin_Input>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40020400 	.word	0x40020400

080010ec <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
	delay_us (40);
 80010f6:	2028      	movs	r0, #40	; 0x28
 80010f8:	f7ff fede 	bl	8000eb8 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80010fc:	2120      	movs	r1, #32
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <DHT11_Check_Response+0x58>)
 8001100:	f002 fafe 	bl	8003700 <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10e      	bne.n	8001128 <DHT11_Check_Response+0x3c>
	{
		delay_us (80);
 800110a:	2050      	movs	r0, #80	; 0x50
 800110c:	f7ff fed4 	bl	8000eb8 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001110:	2120      	movs	r1, #32
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <DHT11_Check_Response+0x58>)
 8001114:	f002 faf4 	bl	8003700 <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <DHT11_Check_Response+0x38>
 800111e:	2301      	movs	r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e001      	b.n	8001128 <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 8001124:	23ff      	movs	r3, #255	; 0xff
 8001126:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8001128:	bf00      	nop
 800112a:	2120      	movs	r1, #32
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <DHT11_Check_Response+0x58>)
 800112e:	f002 fae7 	bl	8003700 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f8      	bne.n	800112a <DHT11_Check_Response+0x3e>

	return Response;
 8001138:	79fb      	ldrb	r3, [r7, #7]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40020400 	.word	0x40020400

08001148 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800114e:	2300      	movs	r3, #0
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	e037      	b.n	80011c4 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001154:	bf00      	nop
 8001156:	2120      	movs	r1, #32
 8001158:	481e      	ldr	r0, [pc, #120]	; (80011d4 <DHT11_Read+0x8c>)
 800115a:	f002 fad1 	bl	8003700 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f8      	beq.n	8001156 <DHT11_Read+0xe>
		delay_us (40);   // wait for 40 us
 8001164:	2028      	movs	r0, #40	; 0x28
 8001166:	f7ff fea7 	bl	8000eb8 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800116a:	2120      	movs	r1, #32
 800116c:	4819      	ldr	r0, [pc, #100]	; (80011d4 <DHT11_Read+0x8c>)
 800116e:	f002 fac7 	bl	8003700 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10e      	bne.n	8001196 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2201      	movs	r2, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	b25b      	sxtb	r3, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	b25a      	sxtb	r2, r3
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	4013      	ands	r3, r2
 8001190:	b25b      	sxtb	r3, r3
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	e00b      	b.n	80011ae <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	f1c3 0307 	rsb	r3, r3, #7
 800119c:	2201      	movs	r2, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	b25a      	sxtb	r2, r3
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80011ae:	bf00      	nop
 80011b0:	2120      	movs	r1, #32
 80011b2:	4808      	ldr	r0, [pc, #32]	; (80011d4 <DHT11_Read+0x8c>)
 80011b4:	f002 faa4 	bl	8003700 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f8      	bne.n	80011b0 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 80011be:	79bb      	ldrb	r3, [r7, #6]
 80011c0:	3301      	adds	r3, #1
 80011c2:	71bb      	strb	r3, [r7, #6]
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d9c4      	bls.n	8001154 <DHT11_Read+0xc>
	}
	return i;
 80011ca:	79fb      	ldrb	r3, [r7, #7]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40020400 	.word	0x40020400

080011d8 <get_time>:
  sDate.Year = set_year;
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK){}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
}

void get_time(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80011de:	2200      	movs	r2, #0
 80011e0:	4914      	ldr	r1, [pc, #80]	; (8001234 <get_time+0x5c>)
 80011e2:	4815      	ldr	r0, [pc, #84]	; (8001238 <get_time+0x60>)
 80011e4:	f003 fd92 	bl	8004d0c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 80011e8:	2200      	movs	r2, #0
 80011ea:	4914      	ldr	r1, [pc, #80]	; (800123c <get_time+0x64>)
 80011ec:	4812      	ldr	r0, [pc, #72]	; (8001238 <get_time+0x60>)
 80011ee:	f003 fe92 	bl	8004f16 <HAL_RTC_GetDate>
	sprintf(timeBuff,"%d,%d.%d", currTime.Hours, currTime.Minutes, currTime.Seconds);
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <get_time+0x5c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <get_time+0x5c>)
 80011fa:	785b      	ldrb	r3, [r3, #1]
 80011fc:	4619      	mov	r1, r3
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <get_time+0x5c>)
 8001200:	789b      	ldrb	r3, [r3, #2]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	460b      	mov	r3, r1
 8001206:	490e      	ldr	r1, [pc, #56]	; (8001240 <get_time+0x68>)
 8001208:	480e      	ldr	r0, [pc, #56]	; (8001244 <get_time+0x6c>)
 800120a:	f004 fc01 	bl	8005a10 <siprintf>
	sprintf(dateBuff,"%02d-%02d-%2d",currDate.Date, currDate.Month, 2000 + currDate.Year);
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <get_time+0x64>)
 8001210:	789b      	ldrb	r3, [r3, #2]
 8001212:	461a      	mov	r2, r3
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <get_time+0x64>)
 8001216:	785b      	ldrb	r3, [r3, #1]
 8001218:	4619      	mov	r1, r3
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <get_time+0x64>)
 800121c:	78db      	ldrb	r3, [r3, #3]
 800121e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	460b      	mov	r3, r1
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <get_time+0x70>)
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <get_time+0x74>)
 800122a:	f004 fbf1 	bl	8005a10 <siprintf>
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200000a0 	.word	0x200000a0
 8001238:	20000214 	.word	0x20000214
 800123c:	200000b4 	.word	0x200000b4
 8001240:	08006284 	.word	0x08006284
 8001244:	200002ac 	.word	0x200002ac
 8001248:	08006290 	.word	0x08006290
 800124c:	2000023c 	.word	0x2000023c

08001250 <lcd_initial_message>:

/*-----------------MENU BEGIN-------------------------*/
void lcd_initial_message(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	lcd_init ();
 8001254:	f7ff fa26 	bl	80006a4 <lcd_init>
	lcd_send_string ("ECODROP");
 8001258:	4812      	ldr	r0, [pc, #72]	; (80012a4 <lcd_initial_message+0x54>)
 800125a:	f7ff fa65 	bl	8000728 <lcd_send_string>
	HAL_Delay(500);
 800125e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001262:	f000 fee7 	bl	8002034 <HAL_Delay>
	lcd_put_cur(1, 0);
 8001266:	2100      	movs	r1, #0
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff f9fc 	bl	8000666 <lcd_put_cur>
	lcd_send_string("Irrigation");
 800126e:	480e      	ldr	r0, [pc, #56]	; (80012a8 <lcd_initial_message+0x58>)
 8001270:	f7ff fa5a 	bl	8000728 <lcd_send_string>
	HAL_Delay(1000);
 8001274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001278:	f000 fedc 	bl	8002034 <HAL_Delay>
	lcd_send_cmd (0x01);
 800127c:	2001      	movs	r0, #1
 800127e:	f7ff f97b 	bl	8000578 <lcd_send_cmd>
	HAL_Delay(100);
 8001282:	2064      	movs	r0, #100	; 0x64
 8001284:	f000 fed6 	bl	8002034 <HAL_Delay>
	lcd_init ();
 8001288:	f7ff fa0c 	bl	80006a4 <lcd_init>
	lcd_send_string ("> Manual Mode");
 800128c:	4807      	ldr	r0, [pc, #28]	; (80012ac <lcd_initial_message+0x5c>)
 800128e:	f7ff fa4b 	bl	8000728 <lcd_send_string>
	lcd_put_cur(1, 0);
 8001292:	2100      	movs	r1, #0
 8001294:	2001      	movs	r0, #1
 8001296:	f7ff f9e6 	bl	8000666 <lcd_put_cur>
	lcd_send_string("  Planner Mode  ");
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <lcd_initial_message+0x60>)
 800129c:	f7ff fa44 	bl	8000728 <lcd_send_string>

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	080062a0 	.word	0x080062a0
 80012a8:	080062a8 	.word	0x080062a8
 80012ac:	080062b4 	.word	0x080062b4
 80012b0:	080062c4 	.word	0x080062c4

080012b4 <menu_func>:

void menu_func(int refresh, int reset){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	if(refresh){
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 842f 	beq.w	8001b24 <menu_func+0x870>
		current_page = (reset) ? 0:current_page;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <menu_func+0x1e>
 80012cc:	4baa      	ldr	r3, [pc, #680]	; (8001578 <menu_func+0x2c4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	e000      	b.n	80012d4 <menu_func+0x20>
 80012d2:	2300      	movs	r3, #0
 80012d4:	4aa8      	ldr	r2, [pc, #672]	; (8001578 <menu_func+0x2c4>)
 80012d6:	6013      	str	r3, [r2, #0]
		lcd_clear();
 80012d8:	f7ff f9ae 	bl	8000638 <lcd_clear>
		switch(current_page){
 80012dc:	4ba6      	ldr	r3, [pc, #664]	; (8001578 <menu_func+0x2c4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b11      	cmp	r3, #17
 80012e2:	f200 8413 	bhi.w	8001b0c <menu_func+0x858>
 80012e6:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <menu_func+0x38>)
 80012e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ec:	08001335 	.word	0x08001335
 80012f0:	080013a9 	.word	0x080013a9
 80012f4:	0800141d 	.word	0x0800141d
 80012f8:	08001491 	.word	0x08001491
 80012fc:	08001505 	.word	0x08001505
 8001300:	080015b1 	.word	0x080015b1
 8001304:	08001625 	.word	0x08001625
 8001308:	0800166f 	.word	0x0800166f
 800130c:	080016e3 	.word	0x080016e3
 8001310:	08001757 	.word	0x08001757
 8001314:	080017cb 	.word	0x080017cb
 8001318:	08001809 	.word	0x08001809
 800131c:	08001847 	.word	0x08001847
 8001320:	080018ff 	.word	0x080018ff
 8001324:	08001973 	.word	0x08001973
 8001328:	080019b1 	.word	0x080019b1
 800132c:	08001a25 	.word	0x08001a25
 8001330:	08001a99 	.word	0x08001a99
			case 0:
				if(menu_click){
 8001334:	4b91      	ldr	r3, [pc, #580]	; (800157c <menu_func+0x2c8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00a      	beq.n	8001352 <menu_func+0x9e>
					current_page = 4;
 800133c:	4b8e      	ldr	r3, [pc, #568]	; (8001578 <menu_func+0x2c4>)
 800133e:	2204      	movs	r2, #4
 8001340:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001342:	4b8e      	ldr	r3, [pc, #568]	; (800157c <menu_func+0x2c8>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001348:	2100      	movs	r1, #0
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff ffb2 	bl	80012b4 <menu_func>
					break;
 8001350:	e3dc      	b.n	8001b0c <menu_func+0x858>
				  }else if(menu_down){
 8001352:	4b8b      	ldr	r3, [pc, #556]	; (8001580 <menu_func+0x2cc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00a      	beq.n	8001370 <menu_func+0xbc>
					 current_page = 1;
 800135a:	4b87      	ldr	r3, [pc, #540]	; (8001578 <menu_func+0x2c4>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]
					 menu_down=0;
 8001360:	4b87      	ldr	r3, [pc, #540]	; (8001580 <menu_func+0x2cc>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
					 menu_func(1, 0);
 8001366:	2100      	movs	r1, #0
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff ffa3 	bl	80012b4 <menu_func>
					 break;
 800136e:	e3cd      	b.n	8001b0c <menu_func+0x858>
				  }else if(menu_up){
 8001370:	4b84      	ldr	r3, [pc, #528]	; (8001584 <menu_func+0x2d0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00a      	beq.n	800138e <menu_func+0xda>
					 current_page = 3;
 8001378:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <menu_func+0x2c4>)
 800137a:	2203      	movs	r2, #3
 800137c:	601a      	str	r2, [r3, #0]
					 menu_up =0;
 800137e:	4b81      	ldr	r3, [pc, #516]	; (8001584 <menu_func+0x2d0>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
					 menu_func(1, 0);
 8001384:	2100      	movs	r1, #0
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff ff94 	bl	80012b4 <menu_func>
					 break;
 800138c:	e3be      	b.n	8001b0c <menu_func+0x858>
				  }
				lcd_init ();
 800138e:	f7ff f989 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Manual Mode");
 8001392:	487d      	ldr	r0, [pc, #500]	; (8001588 <menu_func+0x2d4>)
 8001394:	f7ff f9c8 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001398:	2100      	movs	r1, #0
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff f963 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Planner Mode  ");
 80013a0:	487a      	ldr	r0, [pc, #488]	; (800158c <menu_func+0x2d8>)
 80013a2:	f7ff f9c1 	bl	8000728 <lcd_send_string>
				break;
 80013a6:	e3b1      	b.n	8001b0c <menu_func+0x858>

			case 1:
				if(menu_click){
 80013a8:	4b74      	ldr	r3, [pc, #464]	; (800157c <menu_func+0x2c8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00a      	beq.n	80013c6 <menu_func+0x112>
					current_page = 7;
 80013b0:	4b71      	ldr	r3, [pc, #452]	; (8001578 <menu_func+0x2c4>)
 80013b2:	2207      	movs	r2, #7
 80013b4:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80013b6:	4b71      	ldr	r3, [pc, #452]	; (800157c <menu_func+0x2c8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80013bc:	2100      	movs	r1, #0
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff ff78 	bl	80012b4 <menu_func>
					break;
 80013c4:	e3a2      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_down){
 80013c6:	4b6e      	ldr	r3, [pc, #440]	; (8001580 <menu_func+0x2cc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <menu_func+0x130>
					current_page = 2;
 80013ce:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <menu_func+0x2c4>)
 80013d0:	2202      	movs	r2, #2
 80013d2:	601a      	str	r2, [r3, #0]
					menu_down =0;
 80013d4:	4b6a      	ldr	r3, [pc, #424]	; (8001580 <menu_func+0x2cc>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80013da:	2100      	movs	r1, #0
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff ff69 	bl	80012b4 <menu_func>
					break;
 80013e2:	e393      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_up){
 80013e4:	4b67      	ldr	r3, [pc, #412]	; (8001584 <menu_func+0x2d0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00a      	beq.n	8001402 <menu_func+0x14e>
					current_page = 0;
 80013ec:	4b62      	ldr	r3, [pc, #392]	; (8001578 <menu_func+0x2c4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
					menu_up =0;
 80013f2:	4b64      	ldr	r3, [pc, #400]	; (8001584 <menu_func+0x2d0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80013f8:	2100      	movs	r1, #0
 80013fa:	2001      	movs	r0, #1
 80013fc:	f7ff ff5a 	bl	80012b4 <menu_func>
					break;
 8001400:	e384      	b.n	8001b0c <menu_func+0x858>
				}
				lcd_init ();
 8001402:	f7ff f94f 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Planner Mode  ");
 8001406:	4862      	ldr	r0, [pc, #392]	; (8001590 <menu_func+0x2dc>)
 8001408:	f7ff f98e 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 800140c:	2100      	movs	r1, #0
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff f929 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Auto Mode");
 8001414:	485f      	ldr	r0, [pc, #380]	; (8001594 <menu_func+0x2e0>)
 8001416:	f7ff f987 	bl	8000728 <lcd_send_string>
				break;
 800141a:	e377      	b.n	8001b0c <menu_func+0x858>

			case 2:
				if(menu_click){
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <menu_func+0x2c8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00a      	beq.n	800143a <menu_func+0x186>
					current_page = 14;
 8001424:	4b54      	ldr	r3, [pc, #336]	; (8001578 <menu_func+0x2c4>)
 8001426:	220e      	movs	r2, #14
 8001428:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800142a:	4b54      	ldr	r3, [pc, #336]	; (800157c <menu_func+0x2c8>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001430:	2100      	movs	r1, #0
 8001432:	2001      	movs	r0, #1
 8001434:	f7ff ff3e 	bl	80012b4 <menu_func>
					break;
 8001438:	e368      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_down){
 800143a:	4b51      	ldr	r3, [pc, #324]	; (8001580 <menu_func+0x2cc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00a      	beq.n	8001458 <menu_func+0x1a4>
					current_page = 3;
 8001442:	4b4d      	ldr	r3, [pc, #308]	; (8001578 <menu_func+0x2c4>)
 8001444:	2203      	movs	r2, #3
 8001446:	601a      	str	r2, [r3, #0]
					menu_down =0;
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <menu_func+0x2cc>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800144e:	2100      	movs	r1, #0
 8001450:	2001      	movs	r0, #1
 8001452:	f7ff ff2f 	bl	80012b4 <menu_func>
					break;
 8001456:	e359      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_up){
 8001458:	4b4a      	ldr	r3, [pc, #296]	; (8001584 <menu_func+0x2d0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00a      	beq.n	8001476 <menu_func+0x1c2>
					current_page = 1;
 8001460:	4b45      	ldr	r3, [pc, #276]	; (8001578 <menu_func+0x2c4>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]
					menu_up =0;
 8001466:	4b47      	ldr	r3, [pc, #284]	; (8001584 <menu_func+0x2d0>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800146c:	2100      	movs	r1, #0
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff ff20 	bl	80012b4 <menu_func>
					break;
 8001474:	e34a      	b.n	8001b0c <menu_func+0x858>
				}
				lcd_init ();
 8001476:	f7ff f915 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Auto Mode");
 800147a:	4847      	ldr	r0, [pc, #284]	; (8001598 <menu_func+0x2e4>)
 800147c:	f7ff f954 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001480:	2100      	movs	r1, #0
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff f8ef 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Settings");
 8001488:	4844      	ldr	r0, [pc, #272]	; (800159c <menu_func+0x2e8>)
 800148a:	f7ff f94d 	bl	8000728 <lcd_send_string>
				break;
 800148e:	e33d      	b.n	8001b0c <menu_func+0x858>

			case 3:
				if(menu_click){
 8001490:	4b3a      	ldr	r3, [pc, #232]	; (800157c <menu_func+0x2c8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00a      	beq.n	80014ae <menu_func+0x1fa>
					//Manual Sub Menu
					current_page = 15;
 8001498:	4b37      	ldr	r3, [pc, #220]	; (8001578 <menu_func+0x2c4>)
 800149a:	220f      	movs	r2, #15
 800149c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <menu_func+0x2c8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80014a4:	2100      	movs	r1, #0
 80014a6:	2001      	movs	r0, #1
 80014a8:	f7ff ff04 	bl	80012b4 <menu_func>
					break;
 80014ac:	e32e      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_down){
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <menu_func+0x2cc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00a      	beq.n	80014cc <menu_func+0x218>
					current_page = 0;
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <menu_func+0x2c4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <menu_func+0x2cc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80014c2:	2100      	movs	r1, #0
 80014c4:	2001      	movs	r0, #1
 80014c6:	f7ff fef5 	bl	80012b4 <menu_func>
					break;
 80014ca:	e31f      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_up){
 80014cc:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <menu_func+0x2d0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00a      	beq.n	80014ea <menu_func+0x236>
					current_page = 2;
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <menu_func+0x2c4>)
 80014d6:	2202      	movs	r2, #2
 80014d8:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <menu_func+0x2d0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80014e0:	2100      	movs	r1, #0
 80014e2:	2001      	movs	r0, #1
 80014e4:	f7ff fee6 	bl	80012b4 <menu_func>
					break;
 80014e8:	e310      	b.n	8001b0c <menu_func+0x858>
				}
				lcd_init ();
 80014ea:	f7ff f8db 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Settings");
 80014ee:	482c      	ldr	r0, [pc, #176]	; (80015a0 <menu_func+0x2ec>)
 80014f0:	f7ff f91a 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 80014f4:	2100      	movs	r1, #0
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff f8b5 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  ");
 80014fc:	4829      	ldr	r0, [pc, #164]	; (80015a4 <menu_func+0x2f0>)
 80014fe:	f7ff f913 	bl	8000728 <lcd_send_string>
				break;
 8001502:	e303      	b.n	8001b0c <menu_func+0x858>

			case 4:
				if(menu_click){
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <menu_func+0x2c8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00a      	beq.n	8001522 <menu_func+0x26e>
					current_page = 6;
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <menu_func+0x2c4>)
 800150e:	2206      	movs	r2, #6
 8001510:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <menu_func+0x2c8>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001518:	2100      	movs	r1, #0
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff feca 	bl	80012b4 <menu_func>
					break;
 8001520:	e2f4      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_down){
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <menu_func+0x2cc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00a      	beq.n	8001540 <menu_func+0x28c>
					current_page = 5;
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <menu_func+0x2c4>)
 800152c:	2205      	movs	r2, #5
 800152e:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <menu_func+0x2cc>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001536:	2100      	movs	r1, #0
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff febb 	bl	80012b4 <menu_func>
					break;
 800153e:	e2e5      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_up){
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <menu_func+0x2d0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00a      	beq.n	800155e <menu_func+0x2aa>
					current_page = 5;
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <menu_func+0x2c4>)
 800154a:	2205      	movs	r2, #5
 800154c:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <menu_func+0x2d0>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001554:	2100      	movs	r1, #0
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff feac 	bl	80012b4 <menu_func>
					break;
 800155c:	e2d6      	b.n	8001b0c <menu_func+0x858>
				}
				lcd_init ();
 800155e:	f7ff f8a1 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Press Start");
 8001562:	4811      	ldr	r0, [pc, #68]	; (80015a8 <menu_func+0x2f4>)
 8001564:	f7ff f8e0 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001568:	2100      	movs	r1, #0
 800156a:	2001      	movs	r0, #1
 800156c:	f7ff f87b 	bl	8000666 <lcd_put_cur>
				lcd_send_string(" Back");
 8001570:	480e      	ldr	r0, [pc, #56]	; (80015ac <menu_func+0x2f8>)
 8001572:	f7ff f8d9 	bl	8000728 <lcd_send_string>
				break;
 8001576:	e2c9      	b.n	8001b0c <menu_func+0x858>
 8001578:	2000009c 	.word	0x2000009c
 800157c:	20000090 	.word	0x20000090
 8001580:	20000098 	.word	0x20000098
 8001584:	20000094 	.word	0x20000094
 8001588:	080062b4 	.word	0x080062b4
 800158c:	080062c4 	.word	0x080062c4
 8001590:	080062d8 	.word	0x080062d8
 8001594:	080062ec 	.word	0x080062ec
 8001598:	080062f8 	.word	0x080062f8
 800159c:	08006304 	.word	0x08006304
 80015a0:	08006310 	.word	0x08006310
 80015a4:	0800631c 	.word	0x0800631c
 80015a8:	08006320 	.word	0x08006320
 80015ac:	08006330 	.word	0x08006330

			case 5:
				if(menu_click){
 80015b0:	4bac      	ldr	r3, [pc, #688]	; (8001864 <menu_func+0x5b0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00a      	beq.n	80015ce <menu_func+0x31a>
					current_page = 0;
 80015b8:	4bab      	ldr	r3, [pc, #684]	; (8001868 <menu_func+0x5b4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80015be:	4ba9      	ldr	r3, [pc, #676]	; (8001864 <menu_func+0x5b0>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80015c4:	2100      	movs	r1, #0
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff fe74 	bl	80012b4 <menu_func>
					break;
 80015cc:	e29e      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_down){
 80015ce:	4ba7      	ldr	r3, [pc, #668]	; (800186c <menu_func+0x5b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00a      	beq.n	80015ec <menu_func+0x338>
					current_page = 4;
 80015d6:	4ba4      	ldr	r3, [pc, #656]	; (8001868 <menu_func+0x5b4>)
 80015d8:	2204      	movs	r2, #4
 80015da:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80015dc:	4ba3      	ldr	r3, [pc, #652]	; (800186c <menu_func+0x5b8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80015e2:	2100      	movs	r1, #0
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fe65 	bl	80012b4 <menu_func>
					break;
 80015ea:	e28f      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_up){
 80015ec:	4ba0      	ldr	r3, [pc, #640]	; (8001870 <menu_func+0x5bc>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00a      	beq.n	800160a <menu_func+0x356>
					current_page = 4;
 80015f4:	4b9c      	ldr	r3, [pc, #624]	; (8001868 <menu_func+0x5b4>)
 80015f6:	2204      	movs	r2, #4
 80015f8:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80015fa:	4b9d      	ldr	r3, [pc, #628]	; (8001870 <menu_func+0x5bc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001600:	2100      	movs	r1, #0
 8001602:	2001      	movs	r0, #1
 8001604:	f7ff fe56 	bl	80012b4 <menu_func>
					break;
 8001608:	e280      	b.n	8001b0c <menu_func+0x858>
				}
				lcd_init ();
 800160a:	f7ff f84b 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Back");
 800160e:	4899      	ldr	r0, [pc, #612]	; (8001874 <menu_func+0x5c0>)
 8001610:	f7ff f88a 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001614:	2100      	movs	r1, #0
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff f825 	bl	8000666 <lcd_put_cur>
				lcd_send_string("");
 800161c:	4896      	ldr	r0, [pc, #600]	; (8001878 <menu_func+0x5c4>)
 800161e:	f7ff f883 	bl	8000728 <lcd_send_string>
				break;
 8001622:	e273      	b.n	8001b0c <menu_func+0x858>

			case 6:
				if(menu_click){
 8001624:	4b8f      	ldr	r3, [pc, #572]	; (8001864 <menu_func+0x5b0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00a      	beq.n	8001642 <menu_func+0x38e>
					current_page = 4;
 800162c:	4b8e      	ldr	r3, [pc, #568]	; (8001868 <menu_func+0x5b4>)
 800162e:	2204      	movs	r2, #4
 8001630:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001632:	4b8c      	ldr	r3, [pc, #560]	; (8001864 <menu_func+0x5b0>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001638:	2100      	movs	r1, #0
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff fe3a 	bl	80012b4 <menu_func>
					lcd_init ();
					lcd_send_string ("Watering");
					lcd_put_cur(1, 0);
					lcd_send_string("Now");
				}
				break;
 8001640:	e264      	b.n	8001b0c <menu_func+0x858>
					current_page = 6;
 8001642:	4b89      	ldr	r3, [pc, #548]	; (8001868 <menu_func+0x5b4>)
 8001644:	2206      	movs	r2, #6
 8001646:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001648:	4b89      	ldr	r3, [pc, #548]	; (8001870 <menu_func+0x5bc>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800164e:	4b87      	ldr	r3, [pc, #540]	; (800186c <menu_func+0x5b8>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
					lcd_init ();
 8001654:	f7ff f826 	bl	80006a4 <lcd_init>
					lcd_send_string ("Watering");
 8001658:	4888      	ldr	r0, [pc, #544]	; (800187c <menu_func+0x5c8>)
 800165a:	f7ff f865 	bl	8000728 <lcd_send_string>
					lcd_put_cur(1, 0);
 800165e:	2100      	movs	r1, #0
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff f800 	bl	8000666 <lcd_put_cur>
					lcd_send_string("Now");
 8001666:	4886      	ldr	r0, [pc, #536]	; (8001880 <menu_func+0x5cc>)
 8001668:	f7ff f85e 	bl	8000728 <lcd_send_string>
				break;
 800166c:	e24e      	b.n	8001b0c <menu_func+0x858>

			case 7:
				if(menu_click){
 800166e:	4b7d      	ldr	r3, [pc, #500]	; (8001864 <menu_func+0x5b0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00a      	beq.n	800168c <menu_func+0x3d8>
					current_page = 10;
 8001676:	4b7c      	ldr	r3, [pc, #496]	; (8001868 <menu_func+0x5b4>)
 8001678:	220a      	movs	r2, #10
 800167a:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800167c:	4b79      	ldr	r3, [pc, #484]	; (8001864 <menu_func+0x5b0>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001682:	2100      	movs	r1, #0
 8001684:	2001      	movs	r0, #1
 8001686:	f7ff fe15 	bl	80012b4 <menu_func>
					break;
 800168a:	e23f      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_down){
 800168c:	4b77      	ldr	r3, [pc, #476]	; (800186c <menu_func+0x5b8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00a      	beq.n	80016aa <menu_func+0x3f6>
					current_page = 8;
 8001694:	4b74      	ldr	r3, [pc, #464]	; (8001868 <menu_func+0x5b4>)
 8001696:	2208      	movs	r2, #8
 8001698:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800169a:	4b74      	ldr	r3, [pc, #464]	; (800186c <menu_func+0x5b8>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80016a0:	2100      	movs	r1, #0
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff fe06 	bl	80012b4 <menu_func>
					break;
 80016a8:	e230      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_up){
 80016aa:	4b71      	ldr	r3, [pc, #452]	; (8001870 <menu_func+0x5bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00a      	beq.n	80016c8 <menu_func+0x414>
					current_page = 13;
 80016b2:	4b6d      	ldr	r3, [pc, #436]	; (8001868 <menu_func+0x5b4>)
 80016b4:	220d      	movs	r2, #13
 80016b6:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80016b8:	4b6d      	ldr	r3, [pc, #436]	; (8001870 <menu_func+0x5bc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80016be:	2100      	movs	r1, #0
 80016c0:	2001      	movs	r0, #1
 80016c2:	f7ff fdf7 	bl	80012b4 <menu_func>
					break;
 80016c6:	e221      	b.n	8001b0c <menu_func+0x858>
				}
				lcd_init ();
 80016c8:	f7fe ffec 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Line 1");
 80016cc:	486d      	ldr	r0, [pc, #436]	; (8001884 <menu_func+0x5d0>)
 80016ce:	f7ff f82b 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 80016d2:	2100      	movs	r1, #0
 80016d4:	2001      	movs	r0, #1
 80016d6:	f7fe ffc6 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Line 2");
 80016da:	486b      	ldr	r0, [pc, #428]	; (8001888 <menu_func+0x5d4>)
 80016dc:	f7ff f824 	bl	8000728 <lcd_send_string>
				break;
 80016e0:	e214      	b.n	8001b0c <menu_func+0x858>

			case 8:
				if(menu_click){
 80016e2:	4b60      	ldr	r3, [pc, #384]	; (8001864 <menu_func+0x5b0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00a      	beq.n	8001700 <menu_func+0x44c>
					current_page = 10;
 80016ea:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <menu_func+0x5b4>)
 80016ec:	220a      	movs	r2, #10
 80016ee:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80016f0:	4b5c      	ldr	r3, [pc, #368]	; (8001864 <menu_func+0x5b0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80016f6:	2100      	movs	r1, #0
 80016f8:	2001      	movs	r0, #1
 80016fa:	f7ff fddb 	bl	80012b4 <menu_func>
					break;
 80016fe:	e205      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_down){
 8001700:	4b5a      	ldr	r3, [pc, #360]	; (800186c <menu_func+0x5b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00a      	beq.n	800171e <menu_func+0x46a>
					current_page = 9;
 8001708:	4b57      	ldr	r3, [pc, #348]	; (8001868 <menu_func+0x5b4>)
 800170a:	2209      	movs	r2, #9
 800170c:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800170e:	4b57      	ldr	r3, [pc, #348]	; (800186c <menu_func+0x5b8>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001714:	2100      	movs	r1, #0
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff fdcc 	bl	80012b4 <menu_func>
					break;
 800171c:	e1f6      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_up){
 800171e:	4b54      	ldr	r3, [pc, #336]	; (8001870 <menu_func+0x5bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00a      	beq.n	800173c <menu_func+0x488>
					current_page = 7;
 8001726:	4b50      	ldr	r3, [pc, #320]	; (8001868 <menu_func+0x5b4>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 800172c:	4b50      	ldr	r3, [pc, #320]	; (8001870 <menu_func+0x5bc>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001732:	2100      	movs	r1, #0
 8001734:	2001      	movs	r0, #1
 8001736:	f7ff fdbd 	bl	80012b4 <menu_func>
					break;
 800173a:	e1e7      	b.n	8001b0c <menu_func+0x858>
				}
				lcd_init ();
 800173c:	f7fe ffb2 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Line 2");
 8001740:	4852      	ldr	r0, [pc, #328]	; (800188c <menu_func+0x5d8>)
 8001742:	f7fe fff1 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001746:	2100      	movs	r1, #0
 8001748:	2001      	movs	r0, #1
 800174a:	f7fe ff8c 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Time");
 800174e:	4850      	ldr	r0, [pc, #320]	; (8001890 <menu_func+0x5dc>)
 8001750:	f7fe ffea 	bl	8000728 <lcd_send_string>
				break;
 8001754:	e1da      	b.n	8001b0c <menu_func+0x858>

			case 9:
				if(menu_click){
 8001756:	4b43      	ldr	r3, [pc, #268]	; (8001864 <menu_func+0x5b0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00a      	beq.n	8001774 <menu_func+0x4c0>
					current_page = 11;
 800175e:	4b42      	ldr	r3, [pc, #264]	; (8001868 <menu_func+0x5b4>)
 8001760:	220b      	movs	r2, #11
 8001762:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001764:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <menu_func+0x5b0>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800176a:	2100      	movs	r1, #0
 800176c:	2001      	movs	r0, #1
 800176e:	f7ff fda1 	bl	80012b4 <menu_func>
					break;
 8001772:	e1cb      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_down){
 8001774:	4b3d      	ldr	r3, [pc, #244]	; (800186c <menu_func+0x5b8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00a      	beq.n	8001792 <menu_func+0x4de>
					current_page = 12;
 800177c:	4b3a      	ldr	r3, [pc, #232]	; (8001868 <menu_func+0x5b4>)
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001782:	4b3a      	ldr	r3, [pc, #232]	; (800186c <menu_func+0x5b8>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001788:	2100      	movs	r1, #0
 800178a:	2001      	movs	r0, #1
 800178c:	f7ff fd92 	bl	80012b4 <menu_func>
					break;
 8001790:	e1bc      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_up){
 8001792:	4b37      	ldr	r3, [pc, #220]	; (8001870 <menu_func+0x5bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00a      	beq.n	80017b0 <menu_func+0x4fc>
					current_page = 8;
 800179a:	4b33      	ldr	r3, [pc, #204]	; (8001868 <menu_func+0x5b4>)
 800179c:	2208      	movs	r2, #8
 800179e:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80017a0:	4b33      	ldr	r3, [pc, #204]	; (8001870 <menu_func+0x5bc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80017a6:	2100      	movs	r1, #0
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7ff fd83 	bl	80012b4 <menu_func>
					break;
 80017ae:	e1ad      	b.n	8001b0c <menu_func+0x858>
				}
				lcd_init ();
 80017b0:	f7fe ff78 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Time");
 80017b4:	4837      	ldr	r0, [pc, #220]	; (8001894 <menu_func+0x5e0>)
 80017b6:	f7fe ffb7 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 80017ba:	2100      	movs	r1, #0
 80017bc:	2001      	movs	r0, #1
 80017be:	f7fe ff52 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Start");
 80017c2:	4835      	ldr	r0, [pc, #212]	; (8001898 <menu_func+0x5e4>)
 80017c4:	f7fe ffb0 	bl	8000728 <lcd_send_string>
				break;
 80017c8:	e1a0      	b.n	8001b0c <menu_func+0x858>

			case 10:
				if(menu_click){
 80017ca:	4b26      	ldr	r3, [pc, #152]	; (8001864 <menu_func+0x5b0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00a      	beq.n	80017e8 <menu_func+0x534>
					current_page = 7;
 80017d2:	4b25      	ldr	r3, [pc, #148]	; (8001868 <menu_func+0x5b4>)
 80017d4:	2207      	movs	r2, #7
 80017d6:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80017d8:	4b22      	ldr	r3, [pc, #136]	; (8001864 <menu_func+0x5b0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80017de:	2100      	movs	r1, #0
 80017e0:	2001      	movs	r0, #1
 80017e2:	f7ff fd67 	bl	80012b4 <menu_func>
					break;
 80017e6:	e191      	b.n	8001b0c <menu_func+0x858>
				}else{
					current_page = 10;
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <menu_func+0x5b4>)
 80017ea:	220a      	movs	r2, #10
 80017ec:	601a      	str	r2, [r3, #0]
					lcd_init ();
 80017ee:	f7fe ff59 	bl	80006a4 <lcd_init>
					lcd_send_string ("> 20");
 80017f2:	482a      	ldr	r0, [pc, #168]	; (800189c <menu_func+0x5e8>)
 80017f4:	f7fe ff98 	bl	8000728 <lcd_send_string>
					lcd_put_cur(1, 0);
 80017f8:	2100      	movs	r1, #0
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7fe ff33 	bl	8000666 <lcd_put_cur>
					lcd_send_string("  ");
 8001800:	4827      	ldr	r0, [pc, #156]	; (80018a0 <menu_func+0x5ec>)
 8001802:	f7fe ff91 	bl	8000728 <lcd_send_string>
				}
				break;
 8001806:	e181      	b.n	8001b0c <menu_func+0x858>

			case 11:
				if(menu_click){
 8001808:	4b16      	ldr	r3, [pc, #88]	; (8001864 <menu_func+0x5b0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00a      	beq.n	8001826 <menu_func+0x572>
					current_page = 9;
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <menu_func+0x5b4>)
 8001812:	2209      	movs	r2, #9
 8001814:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <menu_func+0x5b0>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800181c:	2100      	movs	r1, #0
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff fd48 	bl	80012b4 <menu_func>
					break;
 8001824:	e172      	b.n	8001b0c <menu_func+0x858>
				}else{
					current_page = 11;
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <menu_func+0x5b4>)
 8001828:	220b      	movs	r2, #11
 800182a:	601a      	str	r2, [r3, #0]
					lcd_init ();
 800182c:	f7fe ff3a 	bl	80006a4 <lcd_init>
					lcd_send_string ("> Saat Loopu");
 8001830:	481c      	ldr	r0, [pc, #112]	; (80018a4 <menu_func+0x5f0>)
 8001832:	f7fe ff79 	bl	8000728 <lcd_send_string>
					lcd_put_cur(1, 0);
 8001836:	2100      	movs	r1, #0
 8001838:	2001      	movs	r0, #1
 800183a:	f7fe ff14 	bl	8000666 <lcd_put_cur>
					lcd_send_string("  ");
 800183e:	4818      	ldr	r0, [pc, #96]	; (80018a0 <menu_func+0x5ec>)
 8001840:	f7fe ff72 	bl	8000728 <lcd_send_string>
				}
				break;
 8001844:	e162      	b.n	8001b0c <menu_func+0x858>

			case 12:
				if(menu_click){
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <menu_func+0x5b0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d02c      	beq.n	80018a8 <menu_func+0x5f4>
					current_page = 1;
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <menu_func+0x5b4>)
 8001850:	2201      	movs	r2, #1
 8001852:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <menu_func+0x5b0>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800185a:	2100      	movs	r1, #0
 800185c:	2001      	movs	r0, #1
 800185e:	f7ff fd29 	bl	80012b4 <menu_func>
					break;
 8001862:	e153      	b.n	8001b0c <menu_func+0x858>
 8001864:	20000090 	.word	0x20000090
 8001868:	2000009c 	.word	0x2000009c
 800186c:	20000098 	.word	0x20000098
 8001870:	20000094 	.word	0x20000094
 8001874:	08006338 	.word	0x08006338
 8001878:	08006340 	.word	0x08006340
 800187c:	08006344 	.word	0x08006344
 8001880:	08006350 	.word	0x08006350
 8001884:	08006354 	.word	0x08006354
 8001888:	08006360 	.word	0x08006360
 800188c:	0800636c 	.word	0x0800636c
 8001890:	08006378 	.word	0x08006378
 8001894:	08006380 	.word	0x08006380
 8001898:	08006388 	.word	0x08006388
 800189c:	08006390 	.word	0x08006390
 80018a0:	0800631c 	.word	0x0800631c
 80018a4:	08006398 	.word	0x08006398
				}else if(menu_down){
 80018a8:	4ba0      	ldr	r3, [pc, #640]	; (8001b2c <menu_func+0x878>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00a      	beq.n	80018c6 <menu_func+0x612>
					current_page = 13;
 80018b0:	4b9f      	ldr	r3, [pc, #636]	; (8001b30 <menu_func+0x87c>)
 80018b2:	220d      	movs	r2, #13
 80018b4:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80018b6:	4b9d      	ldr	r3, [pc, #628]	; (8001b2c <menu_func+0x878>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80018bc:	2100      	movs	r1, #0
 80018be:	2001      	movs	r0, #1
 80018c0:	f7ff fcf8 	bl	80012b4 <menu_func>
					break;
 80018c4:	e122      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_up){
 80018c6:	4b9b      	ldr	r3, [pc, #620]	; (8001b34 <menu_func+0x880>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <menu_func+0x630>
					current_page = 9;
 80018ce:	4b98      	ldr	r3, [pc, #608]	; (8001b30 <menu_func+0x87c>)
 80018d0:	2209      	movs	r2, #9
 80018d2:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80018d4:	4b97      	ldr	r3, [pc, #604]	; (8001b34 <menu_func+0x880>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80018da:	2100      	movs	r1, #0
 80018dc:	2001      	movs	r0, #1
 80018de:	f7ff fce9 	bl	80012b4 <menu_func>
					break;
 80018e2:	e113      	b.n	8001b0c <menu_func+0x858>
				}
				lcd_init ();
 80018e4:	f7fe fede 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Start");
 80018e8:	4893      	ldr	r0, [pc, #588]	; (8001b38 <menu_func+0x884>)
 80018ea:	f7fe ff1d 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 80018ee:	2100      	movs	r1, #0
 80018f0:	2001      	movs	r0, #1
 80018f2:	f7fe feb8 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Back");
 80018f6:	4891      	ldr	r0, [pc, #580]	; (8001b3c <menu_func+0x888>)
 80018f8:	f7fe ff16 	bl	8000728 <lcd_send_string>
				break;
 80018fc:	e106      	b.n	8001b0c <menu_func+0x858>

			case 13:
				if(menu_click){
 80018fe:	4b90      	ldr	r3, [pc, #576]	; (8001b40 <menu_func+0x88c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00a      	beq.n	800191c <menu_func+0x668>
					current_page = 1;
 8001906:	4b8a      	ldr	r3, [pc, #552]	; (8001b30 <menu_func+0x87c>)
 8001908:	2201      	movs	r2, #1
 800190a:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800190c:	4b8c      	ldr	r3, [pc, #560]	; (8001b40 <menu_func+0x88c>)
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001912:	2100      	movs	r1, #0
 8001914:	2001      	movs	r0, #1
 8001916:	f7ff fccd 	bl	80012b4 <menu_func>
					break;
 800191a:	e0f7      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_down){
 800191c:	4b83      	ldr	r3, [pc, #524]	; (8001b2c <menu_func+0x878>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00a      	beq.n	800193a <menu_func+0x686>
					current_page = 7;
 8001924:	4b82      	ldr	r3, [pc, #520]	; (8001b30 <menu_func+0x87c>)
 8001926:	2207      	movs	r2, #7
 8001928:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800192a:	4b80      	ldr	r3, [pc, #512]	; (8001b2c <menu_func+0x878>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001930:	2100      	movs	r1, #0
 8001932:	2001      	movs	r0, #1
 8001934:	f7ff fcbe 	bl	80012b4 <menu_func>
					break;
 8001938:	e0e8      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_up){
 800193a:	4b7e      	ldr	r3, [pc, #504]	; (8001b34 <menu_func+0x880>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00a      	beq.n	8001958 <menu_func+0x6a4>
					current_page = 12;
 8001942:	4b7b      	ldr	r3, [pc, #492]	; (8001b30 <menu_func+0x87c>)
 8001944:	220c      	movs	r2, #12
 8001946:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001948:	4b7a      	ldr	r3, [pc, #488]	; (8001b34 <menu_func+0x880>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800194e:	2100      	movs	r1, #0
 8001950:	2001      	movs	r0, #1
 8001952:	f7ff fcaf 	bl	80012b4 <menu_func>
					break;
 8001956:	e0d9      	b.n	8001b0c <menu_func+0x858>
				}
				lcd_init ();
 8001958:	f7fe fea4 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Back");
 800195c:	4879      	ldr	r0, [pc, #484]	; (8001b44 <menu_func+0x890>)
 800195e:	f7fe fee3 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001962:	2100      	movs	r1, #0
 8001964:	2001      	movs	r0, #1
 8001966:	f7fe fe7e 	bl	8000666 <lcd_put_cur>
				lcd_send_string(" ");
 800196a:	4877      	ldr	r0, [pc, #476]	; (8001b48 <menu_func+0x894>)
 800196c:	f7fe fedc 	bl	8000728 <lcd_send_string>
				break;
 8001970:	e0cc      	b.n	8001b0c <menu_func+0x858>

			case 14:
				if(menu_click){
 8001972:	4b73      	ldr	r3, [pc, #460]	; (8001b40 <menu_func+0x88c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00a      	beq.n	8001990 <menu_func+0x6dc>
					current_page = 2;
 800197a:	4b6d      	ldr	r3, [pc, #436]	; (8001b30 <menu_func+0x87c>)
 800197c:	2202      	movs	r2, #2
 800197e:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001980:	4b6f      	ldr	r3, [pc, #444]	; (8001b40 <menu_func+0x88c>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001986:	2100      	movs	r1, #0
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff fc93 	bl	80012b4 <menu_func>
					break;
 800198e:	e0bd      	b.n	8001b0c <menu_func+0x858>
				}else{
					current_page = 14;
 8001990:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <menu_func+0x87c>)
 8001992:	220e      	movs	r2, #14
 8001994:	601a      	str	r2, [r3, #0]
					lcd_init ();
 8001996:	f7fe fe85 	bl	80006a4 <lcd_init>
					lcd_send_string ("> INFO DISP");
 800199a:	486c      	ldr	r0, [pc, #432]	; (8001b4c <menu_func+0x898>)
 800199c:	f7fe fec4 	bl	8000728 <lcd_send_string>
					lcd_put_cur(1, 0);
 80019a0:	2100      	movs	r1, #0
 80019a2:	2001      	movs	r0, #1
 80019a4:	f7fe fe5f 	bl	8000666 <lcd_put_cur>
					lcd_send_string("  ");
 80019a8:	4869      	ldr	r0, [pc, #420]	; (8001b50 <menu_func+0x89c>)
 80019aa:	f7fe febd 	bl	8000728 <lcd_send_string>
				}
				break;
 80019ae:	e0ad      	b.n	8001b0c <menu_func+0x858>

			case 15:
				if(menu_click){
 80019b0:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <menu_func+0x88c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00a      	beq.n	80019ce <menu_func+0x71a>
					current_page = 11;
 80019b8:	4b5d      	ldr	r3, [pc, #372]	; (8001b30 <menu_func+0x87c>)
 80019ba:	220b      	movs	r2, #11
 80019bc:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80019be:	4b60      	ldr	r3, [pc, #384]	; (8001b40 <menu_func+0x88c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80019c4:	2100      	movs	r1, #0
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff fc74 	bl	80012b4 <menu_func>
					break;
 80019cc:	e09e      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_down){
 80019ce:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <menu_func+0x878>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <menu_func+0x738>
					current_page = 16;
 80019d6:	4b56      	ldr	r3, [pc, #344]	; (8001b30 <menu_func+0x87c>)
 80019d8:	2210      	movs	r2, #16
 80019da:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <menu_func+0x878>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80019e2:	2100      	movs	r1, #0
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff fc65 	bl	80012b4 <menu_func>
					break;
 80019ea:	e08f      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_up){
 80019ec:	4b51      	ldr	r3, [pc, #324]	; (8001b34 <menu_func+0x880>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00a      	beq.n	8001a0a <menu_func+0x756>
					current_page = 17;
 80019f4:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <menu_func+0x87c>)
 80019f6:	2211      	movs	r2, #17
 80019f8:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80019fa:	4b4e      	ldr	r3, [pc, #312]	; (8001b34 <menu_func+0x880>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001a00:	2100      	movs	r1, #0
 8001a02:	2001      	movs	r0, #1
 8001a04:	f7ff fc56 	bl	80012b4 <menu_func>
					break;
 8001a08:	e080      	b.n	8001b0c <menu_func+0x858>
				}
				lcd_init ();
 8001a0a:	f7fe fe4b 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Time S.");
 8001a0e:	4851      	ldr	r0, [pc, #324]	; (8001b54 <menu_func+0x8a0>)
 8001a10:	f7fe fe8a 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001a14:	2100      	movs	r1, #0
 8001a16:	2001      	movs	r0, #1
 8001a18:	f7fe fe25 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Bluetooth");
 8001a1c:	484e      	ldr	r0, [pc, #312]	; (8001b58 <menu_func+0x8a4>)
 8001a1e:	f7fe fe83 	bl	8000728 <lcd_send_string>
				break;
 8001a22:	e073      	b.n	8001b0c <menu_func+0x858>

			case 16:
				if(menu_click){
 8001a24:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <menu_func+0x88c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00a      	beq.n	8001a42 <menu_func+0x78e>
					current_page = 11;
 8001a2c:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <menu_func+0x87c>)
 8001a2e:	220b      	movs	r2, #11
 8001a30:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001a32:	4b43      	ldr	r3, [pc, #268]	; (8001b40 <menu_func+0x88c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff fc3a 	bl	80012b4 <menu_func>
					break;
 8001a40:	e064      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_down){
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <menu_func+0x878>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00a      	beq.n	8001a60 <menu_func+0x7ac>
					current_page = 17;
 8001a4a:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <menu_func+0x87c>)
 8001a4c:	2211      	movs	r2, #17
 8001a4e:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001a50:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <menu_func+0x878>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001a56:	2100      	movs	r1, #0
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7ff fc2b 	bl	80012b4 <menu_func>
					break;
 8001a5e:	e055      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_up){
 8001a60:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <menu_func+0x880>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00a      	beq.n	8001a7e <menu_func+0x7ca>
					current_page = 15;
 8001a68:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <menu_func+0x87c>)
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001a6e:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <menu_func+0x880>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001a74:	2100      	movs	r1, #0
 8001a76:	2001      	movs	r0, #1
 8001a78:	f7ff fc1c 	bl	80012b4 <menu_func>
					break;
 8001a7c:	e046      	b.n	8001b0c <menu_func+0x858>
				}
				lcd_init ();
 8001a7e:	f7fe fe11 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Bluetooth");
 8001a82:	4836      	ldr	r0, [pc, #216]	; (8001b5c <menu_func+0x8a8>)
 8001a84:	f7fe fe50 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7fe fdeb 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Back");
 8001a90:	482a      	ldr	r0, [pc, #168]	; (8001b3c <menu_func+0x888>)
 8001a92:	f7fe fe49 	bl	8000728 <lcd_send_string>
				break;
 8001a96:	e039      	b.n	8001b0c <menu_func+0x858>
			case 17:
				if(menu_click){
 8001a98:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <menu_func+0x88c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00a      	beq.n	8001ab6 <menu_func+0x802>
					current_page = 3;
 8001aa0:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <menu_func+0x87c>)
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <menu_func+0x88c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001aac:	2100      	movs	r1, #0
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7ff fc00 	bl	80012b4 <menu_func>
					break;
 8001ab4:	e02a      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_down){
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <menu_func+0x878>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00a      	beq.n	8001ad4 <menu_func+0x820>
					current_page = 15;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <menu_func+0x87c>)
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <menu_func+0x878>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001aca:	2100      	movs	r1, #0
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff fbf1 	bl	80012b4 <menu_func>
					break;
 8001ad2:	e01b      	b.n	8001b0c <menu_func+0x858>
				}else if(menu_up){
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <menu_func+0x880>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00a      	beq.n	8001af2 <menu_func+0x83e>
					current_page = 16;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <menu_func+0x87c>)
 8001ade:	2210      	movs	r2, #16
 8001ae0:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <menu_func+0x880>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2001      	movs	r0, #1
 8001aec:	f7ff fbe2 	bl	80012b4 <menu_func>
					break;
 8001af0:	e00c      	b.n	8001b0c <menu_func+0x858>
				}
				lcd_init ();
 8001af2:	f7fe fdd7 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Back");
 8001af6:	4813      	ldr	r0, [pc, #76]	; (8001b44 <menu_func+0x890>)
 8001af8:	f7fe fe16 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001afc:	2100      	movs	r1, #0
 8001afe:	2001      	movs	r0, #1
 8001b00:	f7fe fdb1 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  ");
 8001b04:	4812      	ldr	r0, [pc, #72]	; (8001b50 <menu_func+0x89c>)
 8001b06:	f7fe fe0f 	bl	8000728 <lcd_send_string>
				break;
 8001b0a:	bf00      	nop
		}
		menu_lcd_refresh = 0;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <menu_func+0x8ac>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
		menu_click= 0;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <menu_func+0x88c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
		menu_up = 0;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <menu_func+0x880>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
		menu_down = 0;
 8001b1e:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <menu_func+0x878>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
	}
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000098 	.word	0x20000098
 8001b30:	2000009c 	.word	0x2000009c
 8001b34:	20000094 	.word	0x20000094
 8001b38:	080063a8 	.word	0x080063a8
 8001b3c:	080063b0 	.word	0x080063b0
 8001b40:	20000090 	.word	0x20000090
 8001b44:	08006338 	.word	0x08006338
 8001b48:	080063b8 	.word	0x080063b8
 8001b4c:	080063bc 	.word	0x080063bc
 8001b50:	0800631c 	.word	0x0800631c
 8001b54:	080063c8 	.word	0x080063c8
 8001b58:	080063d4 	.word	0x080063d4
 8001b5c:	080063e0 	.word	0x080063e0
 8001b60:	2000008c 	.word	0x2000008c

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <Error_Handler+0x8>
	...

08001b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_MspInit+0x4c>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a32      	ldr	r2, [pc, #200]	; (8001ca8 <HAL_ADC_MspInit+0xe8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d15e      	bne.n	8001ca0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_ADC_MspInit+0xec>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a30      	ldr	r2, [pc, #192]	; (8001cac <HAL_ADC_MspInit+0xec>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_ADC_MspInit+0xec>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_ADC_MspInit+0xec>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a29      	ldr	r2, [pc, #164]	; (8001cac <HAL_ADC_MspInit+0xec>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b27      	ldr	r3, [pc, #156]	; (8001cac <HAL_ADC_MspInit+0xec>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = moisture_adc_sens0_Pin|moisture_adc_sens1_Pin|moisture_adc_sens2_Pin|moisture_adc_sens3_Pin
 8001c1a:	237f      	movs	r3, #127	; 0x7f
 8001c1c:	617b      	str	r3, [r7, #20]
                          |rain_adc_sens_Pin|waterlevel_adc_sens_Pin|waterflow_adc_sens_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4820      	ldr	r0, [pc, #128]	; (8001cb0 <HAL_ADC_MspInit+0xf0>)
 8001c2e:	f001 fbe3 	bl	80033f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c74:	480f      	ldr	r0, [pc, #60]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c76:	f001 f84f 	bl	8002d18 <HAL_DMA_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001c80:	f7ff ff70 	bl	8001b64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c88:	639a      	str	r2, [r3, #56]	; 0x38
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2012      	movs	r0, #18
 8001c96:	f001 f808 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c9a:	2012      	movs	r0, #18
 8001c9c:	f001 f821 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40012000 	.word	0x40012000
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	200001b4 	.word	0x200001b4
 8001cb8:	40026410 	.word	0x40026410

08001cbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <HAL_I2C_MspInit+0x84>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d12b      	bne.n	8001d36 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_I2C_MspInit+0x88>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <HAL_I2C_MspInit+0x88>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_I2C_MspInit+0x88>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_LCD_Pin|I2C1_SDA_LCD_Pin;
 8001cfa:	23c0      	movs	r3, #192	; 0xc0
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfe:	2312      	movs	r3, #18
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <HAL_I2C_MspInit+0x8c>)
 8001d16:	f001 fb6f 	bl	80033f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_I2C_MspInit+0x88>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <HAL_I2C_MspInit+0x88>)
 8001d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_I2C_MspInit+0x88>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40005400 	.word	0x40005400
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020400 	.word	0x40020400

08001d4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_RTC_MspInit+0x24>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d102      	bne.n	8001d64 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_RTC_MspInit+0x28>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40002800 	.word	0x40002800
 8001d74:	42470e3c 	.word	0x42470e3c

08001d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <HAL_TIM_Base_MspInit+0x3c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d10d      	bne.n	8001da6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_TIM_Base_MspInit+0x40>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_TIM_Base_MspInit+0x40>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <HAL_TIM_Base_MspInit+0x40>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40023800 	.word	0x40023800

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <NMI_Handler+0x4>

08001dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <HardFault_Handler+0x4>

08001dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <MemManage_Handler+0x4>

08001dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e08:	f000 f8f4 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f001 fca5 	bl	8003764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e22:	2002      	movs	r0, #2
 8001e24:	f001 fc9e 	bl	8003764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <ADC_IRQHandler+0x10>)
 8001e32:	f000 f966 	bl	8002102 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000014c 	.word	0x2000014c

08001e40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001e44:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e48:	f001 fc8c 	bl	8003764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001e4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e50:	f001 fc88 	bl	8003764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <DMA2_Stream0_IRQHandler+0x10>)
 8001e5e:	f001 f861 	bl	8002f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200001b4 	.word	0x200001b4

08001e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <_sbrk+0x5c>)
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <_sbrk+0x60>)
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <_sbrk+0x64>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <_sbrk+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d207      	bcs.n	8001eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e9c:	f003 fd86 	bl	80059ac <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e009      	b.n	8001ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <_sbrk+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20010000 	.word	0x20010000
 8001ecc:	00000400 	.word	0x00000400
 8001ed0:	200000c4 	.word	0x200000c4
 8001ed4:	200002e0 	.word	0x200002e0

08001ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <SystemInit+0x20>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <SystemInit+0x20>)
 8001ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f00:	480d      	ldr	r0, [pc, #52]	; (8001f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f02:	490e      	ldr	r1, [pc, #56]	; (8001f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f04:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f18:	4c0b      	ldr	r4, [pc, #44]	; (8001f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f26:	f7ff ffd7 	bl	8001ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f003 fd45 	bl	80059b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2e:	f7fe fc11 	bl	8000754 <main>
  bx  lr    
 8001f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f40:	08006458 	.word	0x08006458
  ldr r2, =_sbss
 8001f44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f48:	200002e0 	.word	0x200002e0

08001f4c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <DMA1_Stream0_IRQHandler>
	...

08001f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <HAL_Init+0x40>)
 8001f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_Init+0x40>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <HAL_Init+0x40>)
 8001f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_Init+0x40>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <HAL_Init+0x40>)
 8001f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f000 fe8b 	bl	8002c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f000 f808 	bl	8001f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f84:	f7ff fdf4 	bl	8001b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023c00 	.word	0x40023c00

08001f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_InitTick+0x54>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_InitTick+0x58>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fea3 	bl	8002cfe <HAL_SYSTICK_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00e      	b.n	8001fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d80a      	bhi.n	8001fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f000 fe6b 	bl	8002caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <HAL_InitTick+0x5c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000008 	.word	0x20000008
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x20>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x24>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_IncTick+0x24>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000008 	.word	0x20000008
 8002018:	200002cc 	.word	0x200002cc

0800201c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	200002cc 	.word	0x200002cc

08002034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff ffee 	bl	800201c <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d005      	beq.n	800205a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_Delay+0x44>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800205a:	bf00      	nop
 800205c:	f7ff ffde 	bl	800201c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f7      	bhi.n	800205c <HAL_Delay+0x28>
  {
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000008 	.word	0x20000008

0800207c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e033      	b.n	80020fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fd90 	bl	8001bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d118      	bne.n	80020ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020c2:	f023 0302 	bic.w	r3, r3, #2
 80020c6:	f043 0202 	orr.w	r2, r3, #2
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fb88 	bl	80027e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f023 0303 	bic.w	r3, r3, #3
 80020e2:	f043 0201 	orr.w	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
 80020ea:	e001      	b.n	80020f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b02      	cmp	r3, #2
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b20      	cmp	r3, #32
 8002134:	bf0c      	ite	eq
 8002136:	2301      	moveq	r3, #1
 8002138:	2300      	movne	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d049      	beq.n	80021d8 <HAL_ADC_IRQHandler+0xd6>
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d046      	beq.n	80021d8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d12b      	bne.n	80021c8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002174:	2b00      	cmp	r3, #0
 8002176:	d127      	bne.n	80021c8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002182:	2b00      	cmp	r3, #0
 8002184:	d006      	beq.n	8002194 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002190:	2b00      	cmp	r3, #0
 8002192:	d119      	bne.n	80021c8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0220 	bic.w	r2, r2, #32
 80021a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f043 0201 	orr.w	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7fe fe8f 	bl	8000eec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f06f 0212 	mvn.w	r2, #18
 80021d6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d057      	beq.n	80022ba <HAL_ADC_IRQHandler+0x1b8>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d054      	beq.n	80022ba <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d139      	bne.n	80022aa <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800224e:	2b00      	cmp	r3, #0
 8002250:	d12b      	bne.n	80022aa <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800225c:	2b00      	cmp	r3, #0
 800225e:	d124      	bne.n	80022aa <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800226a:	2b00      	cmp	r3, #0
 800226c:	d11d      	bne.n	80022aa <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002272:	2b00      	cmp	r3, #0
 8002274:	d119      	bne.n	80022aa <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002284:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d105      	bne.n	80022aa <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fc18 	bl	8002ae0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 020c 	mvn.w	r2, #12
 80022b8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b40      	cmp	r3, #64	; 0x40
 80022dc:	bf0c      	ite	eq
 80022de:	2301      	moveq	r3, #1
 80022e0:	2300      	movne	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d017      	beq.n	800231c <HAL_ADC_IRQHandler+0x21a>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d014      	beq.n	800231c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10d      	bne.n	800231c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f933 	bl	8002578 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f06f 0201 	mvn.w	r2, #1
 800231a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b20      	cmp	r3, #32
 8002328:	bf0c      	ite	eq
 800232a:	2301      	moveq	r3, #1
 800232c:	2300      	movne	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800233c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002340:	bf0c      	ite	eq
 8002342:	2301      	moveq	r3, #1
 8002344:	2300      	movne	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d015      	beq.n	800237c <HAL_ADC_IRQHandler+0x27a>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d012      	beq.n	800237c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f043 0202 	orr.w	r2, r3, #2
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f06f 0220 	mvn.w	r2, #32
 800236a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f90d 	bl	800258c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f06f 0220 	mvn.w	r2, #32
 800237a:	601a      	str	r2, [r3, #0]
  }
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Start_DMA+0x1e>
 800239e:	2302      	movs	r3, #2
 80023a0:	e0ce      	b.n	8002540 <HAL_ADC_Start_DMA+0x1bc>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d018      	beq.n	80023ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023c8:	4b5f      	ldr	r3, [pc, #380]	; (8002548 <HAL_ADC_Start_DMA+0x1c4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a5f      	ldr	r2, [pc, #380]	; (800254c <HAL_ADC_Start_DMA+0x1c8>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0c9a      	lsrs	r2, r3, #18
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023dc:	e002      	b.n	80023e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f9      	bne.n	80023de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f8:	d107      	bne.n	800240a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002408:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b01      	cmp	r3, #1
 8002416:	f040 8086 	bne.w	8002526 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002444:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002458:	d106      	bne.n	8002468 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f023 0206 	bic.w	r2, r3, #6
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
 8002466:	e002      	b.n	800246e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002476:	4b36      	ldr	r3, [pc, #216]	; (8002550 <HAL_ADC_Start_DMA+0x1cc>)
 8002478:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	4a35      	ldr	r2, [pc, #212]	; (8002554 <HAL_ADC_Start_DMA+0x1d0>)
 8002480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	4a34      	ldr	r2, [pc, #208]	; (8002558 <HAL_ADC_Start_DMA+0x1d4>)
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	4a33      	ldr	r2, [pc, #204]	; (800255c <HAL_ADC_Start_DMA+0x1d8>)
 8002490:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800249a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	334c      	adds	r3, #76	; 0x4c
 80024c6:	4619      	mov	r1, r3
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f000 fcd2 	bl	8002e74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10f      	bne.n	80024fc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d129      	bne.n	800253e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	e020      	b.n	800253e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a17      	ldr	r2, [pc, #92]	; (8002560 <HAL_ADC_Start_DMA+0x1dc>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d11b      	bne.n	800253e <HAL_ADC_Start_DMA+0x1ba>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d114      	bne.n	800253e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	e00b      	b.n	800253e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f043 0210 	orr.w	r2, r3, #16
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f043 0201 	orr.w	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000000 	.word	0x20000000
 800254c:	431bde83 	.word	0x431bde83
 8002550:	40012300 	.word	0x40012300
 8002554:	080029dd 	.word	0x080029dd
 8002558:	08002a97 	.word	0x08002a97
 800255c:	08002ab3 	.word	0x08002ab3
 8002560:	40012000 	.word	0x40012000

08002564 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1c>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e105      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x228>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b09      	cmp	r3, #9
 80025ca:	d925      	bls.n	8002618 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68d9      	ldr	r1, [r3, #12]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	3b1e      	subs	r3, #30
 80025e2:	2207      	movs	r2, #7
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43da      	mvns	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	400a      	ands	r2, r1
 80025f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68d9      	ldr	r1, [r3, #12]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	b29b      	uxth	r3, r3
 8002602:	4618      	mov	r0, r3
 8002604:	4603      	mov	r3, r0
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4403      	add	r3, r0
 800260a:	3b1e      	subs	r3, #30
 800260c:	409a      	lsls	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	e022      	b.n	800265e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6919      	ldr	r1, [r3, #16]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	2207      	movs	r2, #7
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	400a      	ands	r2, r1
 800263a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6919      	ldr	r1, [r3, #16]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	4618      	mov	r0, r3
 800264e:	4603      	mov	r3, r0
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4403      	add	r3, r0
 8002654:	409a      	lsls	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b06      	cmp	r3, #6
 8002664:	d824      	bhi.n	80026b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	3b05      	subs	r3, #5
 8002678:	221f      	movs	r2, #31
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	400a      	ands	r2, r1
 8002686:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	4618      	mov	r0, r3
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	3b05      	subs	r3, #5
 80026a2:	fa00 f203 	lsl.w	r2, r0, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	635a      	str	r2, [r3, #52]	; 0x34
 80026ae:	e04c      	b.n	800274a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b0c      	cmp	r3, #12
 80026b6:	d824      	bhi.n	8002702 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	3b23      	subs	r3, #35	; 0x23
 80026ca:	221f      	movs	r2, #31
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43da      	mvns	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	400a      	ands	r2, r1
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	3b23      	subs	r3, #35	; 0x23
 80026f4:	fa00 f203 	lsl.w	r2, r0, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002700:	e023      	b.n	800274a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	3b41      	subs	r3, #65	; 0x41
 8002714:	221f      	movs	r2, #31
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	400a      	ands	r2, r1
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	4618      	mov	r0, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	3b41      	subs	r3, #65	; 0x41
 800273e:	fa00 f203 	lsl.w	r2, r0, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_ADC_ConfigChannel+0x234>)
 800274c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a21      	ldr	r2, [pc, #132]	; (80027d8 <HAL_ADC_ConfigChannel+0x238>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d109      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1cc>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b12      	cmp	r3, #18
 800275e:	d105      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a19      	ldr	r2, [pc, #100]	; (80027d8 <HAL_ADC_ConfigChannel+0x238>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d123      	bne.n	80027be <HAL_ADC_ConfigChannel+0x21e>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b10      	cmp	r3, #16
 800277c:	d003      	beq.n	8002786 <HAL_ADC_ConfigChannel+0x1e6>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b11      	cmp	r3, #17
 8002784:	d11b      	bne.n	80027be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b10      	cmp	r3, #16
 8002798:	d111      	bne.n	80027be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_ADC_ConfigChannel+0x23c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a10      	ldr	r2, [pc, #64]	; (80027e0 <HAL_ADC_ConfigChannel+0x240>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	0c9a      	lsrs	r2, r3, #18
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027b0:	e002      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f9      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40012300 	.word	0x40012300
 80027d8:	40012000 	.word	0x40012000
 80027dc:	20000000 	.word	0x20000000
 80027e0:	431bde83 	.word	0x431bde83

080027e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ec:	4b79      	ldr	r3, [pc, #484]	; (80029d4 <ADC_Init+0x1f0>)
 80027ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	431a      	orrs	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002818:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	021a      	lsls	r2, r3, #8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800283c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800285e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6899      	ldr	r1, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	4a58      	ldr	r2, [pc, #352]	; (80029d8 <ADC_Init+0x1f4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d022      	beq.n	80028c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800288a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6899      	ldr	r1, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6899      	ldr	r1, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	e00f      	b.n	80028e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0202 	bic.w	r2, r2, #2
 80028f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6899      	ldr	r1, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7e1b      	ldrb	r3, [r3, #24]
 80028fc:	005a      	lsls	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01b      	beq.n	8002948 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800291e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800292e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6859      	ldr	r1, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	3b01      	subs	r3, #1
 800293c:	035a      	lsls	r2, r3, #13
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	e007      	b.n	8002958 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002956:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002966:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	3b01      	subs	r3, #1
 8002974:	051a      	lsls	r2, r3, #20
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800298c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6899      	ldr	r1, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800299a:	025a      	lsls	r2, r3, #9
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	029a      	lsls	r2, r3, #10
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	40012300 	.word	0x40012300
 80029d8:	0f000001 	.word	0x0f000001

080029dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d13c      	bne.n	8002a70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d12b      	bne.n	8002a68 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d127      	bne.n	8002a68 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d006      	beq.n	8002a34 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d119      	bne.n	8002a68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0220 	bic.w	r2, r2, #32
 8002a42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7fe fa3f 	bl	8000eec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a6e:	e00e      	b.n	8002a8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff fd85 	bl	800258c <HAL_ADC_ErrorCallback>
}
 8002a82:	e004      	b.n	8002a8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff fd5d 	bl	8002564 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2240      	movs	r2, #64	; 0x40
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f043 0204 	orr.w	r2, r3, #4
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7ff fd5a 	bl	800258c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b10:	4013      	ands	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b26:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	60d3      	str	r3, [r2, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <__NVIC_GetPriorityGrouping+0x18>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 0307 	and.w	r3, r3, #7
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	db0b      	blt.n	8002b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	4907      	ldr	r1, [pc, #28]	; (8002b90 <__NVIC_EnableIRQ+0x38>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2001      	movs	r0, #1
 8002b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000e100 	.word	0xe000e100

08002b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	db0a      	blt.n	8002bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	490c      	ldr	r1, [pc, #48]	; (8002be0 <__NVIC_SetPriority+0x4c>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bbc:	e00a      	b.n	8002bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4908      	ldr	r1, [pc, #32]	; (8002be4 <__NVIC_SetPriority+0x50>)
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	3b04      	subs	r3, #4
 8002bcc:	0112      	lsls	r2, r2, #4
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	761a      	strb	r2, [r3, #24]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000e100 	.word	0xe000e100
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	; 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f1c3 0307 	rsb	r3, r3, #7
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	bf28      	it	cs
 8002c06:	2304      	movcs	r3, #4
 8002c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d902      	bls.n	8002c18 <NVIC_EncodePriority+0x30>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3b03      	subs	r3, #3
 8002c16:	e000      	b.n	8002c1a <NVIC_EncodePriority+0x32>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c30:	f04f 31ff 	mov.w	r1, #4294967295
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	43d9      	mvns	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	4313      	orrs	r3, r2
         );
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3724      	adds	r7, #36	; 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c60:	d301      	bcc.n	8002c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00f      	b.n	8002c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <SysTick_Config+0x40>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6e:	210f      	movs	r1, #15
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f7ff ff8e 	bl	8002b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <SysTick_Config+0x40>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <SysTick_Config+0x40>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010

08002c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff29 	bl	8002af4 <__NVIC_SetPriorityGrouping>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cbc:	f7ff ff3e 	bl	8002b3c <__NVIC_GetPriorityGrouping>
 8002cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7ff ff8e 	bl	8002be8 <NVIC_EncodePriority>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff5d 	bl	8002b94 <__NVIC_SetPriority>
}
 8002cda:	bf00      	nop
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff31 	bl	8002b58 <__NVIC_EnableIRQ>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ffa2 	bl	8002c50 <SysTick_Config>
 8002d0c:	4603      	mov	r3, r0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff f97a 	bl	800201c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e099      	b.n	8002e68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d54:	e00f      	b.n	8002d76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d56:	f7ff f961 	bl	800201c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d908      	bls.n	8002d76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e078      	b.n	8002e68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1e8      	bne.n	8002d56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4b38      	ldr	r3, [pc, #224]	; (8002e70 <HAL_DMA_Init+0x158>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d107      	bne.n	8002de0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f023 0307 	bic.w	r3, r3, #7
 8002df6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d117      	bne.n	8002e3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00e      	beq.n	8002e3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fa6f 	bl	8003300 <DMA_CheckFifoParam>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2240      	movs	r2, #64	; 0x40
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e36:	2301      	movs	r3, #1
 8002e38:	e016      	b.n	8002e68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa26 	bl	8003294 <DMA_CalcBaseAndBitshift>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e50:	223f      	movs	r2, #63	; 0x3f
 8002e52:	409a      	lsls	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	f010803f 	.word	0xf010803f

08002e74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_DMA_Start_IT+0x26>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e040      	b.n	8002f1c <HAL_DMA_Start_IT+0xa8>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d12f      	bne.n	8002f0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f9b8 	bl	8003238 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	223f      	movs	r2, #63	; 0x3f
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0216 	orr.w	r2, r2, #22
 8002ee2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0208 	orr.w	r2, r2, #8
 8002efa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e005      	b.n	8002f1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
 8002f18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f30:	4b92      	ldr	r3, [pc, #584]	; (800317c <HAL_DMA_IRQHandler+0x258>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a92      	ldr	r2, [pc, #584]	; (8003180 <HAL_DMA_IRQHandler+0x25c>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	0a9b      	lsrs	r3, r3, #10
 8002f3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	2208      	movs	r2, #8
 8002f50:	409a      	lsls	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01a      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0204 	bic.w	r2, r2, #4
 8002f76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	f043 0201 	orr.w	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	2201      	movs	r2, #1
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d012      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	f043 0202 	orr.w	r2, r3, #2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fca:	2204      	movs	r2, #4
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d012      	beq.n	8002ffc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00b      	beq.n	8002ffc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	2204      	movs	r2, #4
 8002fea:	409a      	lsls	r2, r3
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff4:	f043 0204 	orr.w	r2, r3, #4
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003000:	2210      	movs	r2, #16
 8003002:	409a      	lsls	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d043      	beq.n	8003094 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d03c      	beq.n	8003094 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	2210      	movs	r2, #16
 8003020:	409a      	lsls	r2, r3
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d018      	beq.n	8003066 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d108      	bne.n	8003054 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d024      	beq.n	8003094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
 8003052:	e01f      	b.n	8003094 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01b      	beq.n	8003094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
 8003064:	e016      	b.n	8003094 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d107      	bne.n	8003084 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0208 	bic.w	r2, r2, #8
 8003082:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003098:	2220      	movs	r2, #32
 800309a:	409a      	lsls	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 808e 	beq.w	80031c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8086 	beq.w	80031c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	2220      	movs	r2, #32
 80030bc:	409a      	lsls	r2, r3
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b05      	cmp	r3, #5
 80030cc:	d136      	bne.n	800313c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0216 	bic.w	r2, r2, #22
 80030dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d103      	bne.n	80030fe <HAL_DMA_IRQHandler+0x1da>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d007      	beq.n	800310e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0208 	bic.w	r2, r2, #8
 800310c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	223f      	movs	r2, #63	; 0x3f
 8003114:	409a      	lsls	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312e:	2b00      	cmp	r3, #0
 8003130:	d07d      	beq.n	800322e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
        }
        return;
 800313a:	e078      	b.n	800322e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01c      	beq.n	8003184 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d108      	bne.n	800316a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315c:	2b00      	cmp	r3, #0
 800315e:	d030      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
 8003168:	e02b      	b.n	80031c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d027      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	4798      	blx	r3
 800317a:	e022      	b.n	80031c2 <HAL_DMA_IRQHandler+0x29e>
 800317c:	20000000 	.word	0x20000000
 8003180:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10f      	bne.n	80031b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0210 	bic.w	r2, r2, #16
 80031a0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d032      	beq.n	8003230 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d022      	beq.n	800321c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2205      	movs	r2, #5
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3301      	adds	r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d307      	bcc.n	800320a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f2      	bne.n	80031ee <HAL_DMA_IRQHandler+0x2ca>
 8003208:	e000      	b.n	800320c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800320a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	4798      	blx	r3
 800322c:	e000      	b.n	8003230 <HAL_DMA_IRQHandler+0x30c>
        return;
 800322e:	bf00      	nop
    }
  }
}
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop

08003238 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003254:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b40      	cmp	r3, #64	; 0x40
 8003264:	d108      	bne.n	8003278 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003276:	e007      	b.n	8003288 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	60da      	str	r2, [r3, #12]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	3b10      	subs	r3, #16
 80032a4:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <DMA_CalcBaseAndBitshift+0x64>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032ae:	4a13      	ldr	r2, [pc, #76]	; (80032fc <DMA_CalcBaseAndBitshift+0x68>)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d909      	bls.n	80032d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ca:	f023 0303 	bic.w	r3, r3, #3
 80032ce:	1d1a      	adds	r2, r3, #4
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	659a      	str	r2, [r3, #88]	; 0x58
 80032d4:	e007      	b.n	80032e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	aaaaaaab 	.word	0xaaaaaaab
 80032fc:	0800640c 	.word	0x0800640c

08003300 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11f      	bne.n	800335a <DMA_CheckFifoParam+0x5a>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d856      	bhi.n	80033ce <DMA_CheckFifoParam+0xce>
 8003320:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <DMA_CheckFifoParam+0x28>)
 8003322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003326:	bf00      	nop
 8003328:	08003339 	.word	0x08003339
 800332c:	0800334b 	.word	0x0800334b
 8003330:	08003339 	.word	0x08003339
 8003334:	080033cf 	.word	0x080033cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d046      	beq.n	80033d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003348:	e043      	b.n	80033d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003352:	d140      	bne.n	80033d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003358:	e03d      	b.n	80033d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003362:	d121      	bne.n	80033a8 <DMA_CheckFifoParam+0xa8>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b03      	cmp	r3, #3
 8003368:	d837      	bhi.n	80033da <DMA_CheckFifoParam+0xda>
 800336a:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <DMA_CheckFifoParam+0x70>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	08003381 	.word	0x08003381
 8003374:	08003387 	.word	0x08003387
 8003378:	08003381 	.word	0x08003381
 800337c:	08003399 	.word	0x08003399
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      break;
 8003384:	e030      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d025      	beq.n	80033de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003396:	e022      	b.n	80033de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033a0:	d11f      	bne.n	80033e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033a6:	e01c      	b.n	80033e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d903      	bls.n	80033b6 <DMA_CheckFifoParam+0xb6>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d003      	beq.n	80033bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033b4:	e018      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
      break;
 80033ba:	e015      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00e      	beq.n	80033e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
      break;
 80033cc:	e00b      	b.n	80033e6 <DMA_CheckFifoParam+0xe6>
      break;
 80033ce:	bf00      	nop
 80033d0:	e00a      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
 80033d4:	e008      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033d6:	bf00      	nop
 80033d8:	e006      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033da:	bf00      	nop
 80033dc:	e004      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033de:	bf00      	nop
 80033e0:	e002      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80033e2:	bf00      	nop
 80033e4:	e000      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033e6:	bf00      	nop
    }
  } 
  
  return status; 
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop

080033f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b089      	sub	sp, #36	; 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	e159      	b.n	80036c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003414:	2201      	movs	r2, #1
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	429a      	cmp	r2, r3
 800342e:	f040 8148 	bne.w	80036c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d005      	beq.n	800344a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003446:	2b02      	cmp	r3, #2
 8003448:	d130      	bne.n	80034ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2203      	movs	r2, #3
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003480:	2201      	movs	r2, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f003 0201 	and.w	r2, r3, #1
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d017      	beq.n	80034e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d123      	bne.n	800353c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	08da      	lsrs	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3208      	adds	r2, #8
 80034fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	220f      	movs	r2, #15
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	08da      	lsrs	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3208      	adds	r2, #8
 8003536:	69b9      	ldr	r1, [r7, #24]
 8003538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	2203      	movs	r2, #3
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0203 	and.w	r2, r3, #3
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80a2 	beq.w	80036c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	4b57      	ldr	r3, [pc, #348]	; (80036e0 <HAL_GPIO_Init+0x2e8>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	4a56      	ldr	r2, [pc, #344]	; (80036e0 <HAL_GPIO_Init+0x2e8>)
 8003588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800358c:	6453      	str	r3, [r2, #68]	; 0x44
 800358e:	4b54      	ldr	r3, [pc, #336]	; (80036e0 <HAL_GPIO_Init+0x2e8>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800359a:	4a52      	ldr	r2, [pc, #328]	; (80036e4 <HAL_GPIO_Init+0x2ec>)
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	3302      	adds	r3, #2
 80035a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	220f      	movs	r2, #15
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a49      	ldr	r2, [pc, #292]	; (80036e8 <HAL_GPIO_Init+0x2f0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d019      	beq.n	80035fa <HAL_GPIO_Init+0x202>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a48      	ldr	r2, [pc, #288]	; (80036ec <HAL_GPIO_Init+0x2f4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <HAL_GPIO_Init+0x1fe>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a47      	ldr	r2, [pc, #284]	; (80036f0 <HAL_GPIO_Init+0x2f8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00d      	beq.n	80035f2 <HAL_GPIO_Init+0x1fa>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a46      	ldr	r2, [pc, #280]	; (80036f4 <HAL_GPIO_Init+0x2fc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d007      	beq.n	80035ee <HAL_GPIO_Init+0x1f6>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a45      	ldr	r2, [pc, #276]	; (80036f8 <HAL_GPIO_Init+0x300>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <HAL_GPIO_Init+0x1f2>
 80035e6:	2304      	movs	r3, #4
 80035e8:	e008      	b.n	80035fc <HAL_GPIO_Init+0x204>
 80035ea:	2307      	movs	r3, #7
 80035ec:	e006      	b.n	80035fc <HAL_GPIO_Init+0x204>
 80035ee:	2303      	movs	r3, #3
 80035f0:	e004      	b.n	80035fc <HAL_GPIO_Init+0x204>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e002      	b.n	80035fc <HAL_GPIO_Init+0x204>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_GPIO_Init+0x204>
 80035fa:	2300      	movs	r3, #0
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	f002 0203 	and.w	r2, r2, #3
 8003602:	0092      	lsls	r2, r2, #2
 8003604:	4093      	lsls	r3, r2
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800360c:	4935      	ldr	r1, [pc, #212]	; (80036e4 <HAL_GPIO_Init+0x2ec>)
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	089b      	lsrs	r3, r3, #2
 8003612:	3302      	adds	r3, #2
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800361a:	4b38      	ldr	r3, [pc, #224]	; (80036fc <HAL_GPIO_Init+0x304>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800363e:	4a2f      	ldr	r2, [pc, #188]	; (80036fc <HAL_GPIO_Init+0x304>)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <HAL_GPIO_Init+0x304>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003668:	4a24      	ldr	r2, [pc, #144]	; (80036fc <HAL_GPIO_Init+0x304>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800366e:	4b23      	ldr	r3, [pc, #140]	; (80036fc <HAL_GPIO_Init+0x304>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003692:	4a1a      	ldr	r2, [pc, #104]	; (80036fc <HAL_GPIO_Init+0x304>)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003698:	4b18      	ldr	r3, [pc, #96]	; (80036fc <HAL_GPIO_Init+0x304>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036bc:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <HAL_GPIO_Init+0x304>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3301      	adds	r3, #1
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2b0f      	cmp	r3, #15
 80036cc:	f67f aea2 	bls.w	8003414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3724      	adds	r7, #36	; 0x24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40013800 	.word	0x40013800
 80036e8:	40020000 	.word	0x40020000
 80036ec:	40020400 	.word	0x40020400
 80036f0:	40020800 	.word	0x40020800
 80036f4:	40020c00 	.word	0x40020c00
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40013c00 	.word	0x40013c00

08003700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	e001      	b.n	8003722 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
 800373c:	4613      	mov	r3, r2
 800373e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003740:	787b      	ldrb	r3, [r7, #1]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800374c:	e003      	b.n	8003756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800374e:	887b      	ldrh	r3, [r7, #2]
 8003750:	041a      	lsls	r2, r3, #16
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	619a      	str	r2, [r3, #24]
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800376e:	4b08      	ldr	r3, [pc, #32]	; (8003790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	4013      	ands	r3, r2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800377a:	4a05      	ldr	r2, [pc, #20]	; (8003790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fd fc2a 	bl	8000fdc <HAL_GPIO_EXTI_Callback>
  }
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40013c00 	.word	0x40013c00

08003794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e12b      	b.n	80039fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fe fa7e 	bl	8001cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	; 0x24
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f8:	f001 f838 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 80037fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4a81      	ldr	r2, [pc, #516]	; (8003a08 <HAL_I2C_Init+0x274>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d807      	bhi.n	8003818 <HAL_I2C_Init+0x84>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4a80      	ldr	r2, [pc, #512]	; (8003a0c <HAL_I2C_Init+0x278>)
 800380c:	4293      	cmp	r3, r2
 800380e:	bf94      	ite	ls
 8003810:	2301      	movls	r3, #1
 8003812:	2300      	movhi	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	e006      	b.n	8003826 <HAL_I2C_Init+0x92>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a7d      	ldr	r2, [pc, #500]	; (8003a10 <HAL_I2C_Init+0x27c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	bf94      	ite	ls
 8003820:	2301      	movls	r3, #1
 8003822:	2300      	movhi	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0e7      	b.n	80039fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a78      	ldr	r2, [pc, #480]	; (8003a14 <HAL_I2C_Init+0x280>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	0c9b      	lsrs	r3, r3, #18
 8003838:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4a6a      	ldr	r2, [pc, #424]	; (8003a08 <HAL_I2C_Init+0x274>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d802      	bhi.n	8003868 <HAL_I2C_Init+0xd4>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	3301      	adds	r3, #1
 8003866:	e009      	b.n	800387c <HAL_I2C_Init+0xe8>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	4a69      	ldr	r2, [pc, #420]	; (8003a18 <HAL_I2C_Init+0x284>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	099b      	lsrs	r3, r3, #6
 800387a:	3301      	adds	r3, #1
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	430b      	orrs	r3, r1
 8003882:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800388e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	495c      	ldr	r1, [pc, #368]	; (8003a08 <HAL_I2C_Init+0x274>)
 8003898:	428b      	cmp	r3, r1
 800389a:	d819      	bhi.n	80038d0 <HAL_I2C_Init+0x13c>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e59      	subs	r1, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038aa:	1c59      	adds	r1, r3, #1
 80038ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038b0:	400b      	ands	r3, r1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_I2C_Init+0x138>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1e59      	subs	r1, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c4:	3301      	adds	r3, #1
 80038c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ca:	e051      	b.n	8003970 <HAL_I2C_Init+0x1dc>
 80038cc:	2304      	movs	r3, #4
 80038ce:	e04f      	b.n	8003970 <HAL_I2C_Init+0x1dc>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d111      	bne.n	80038fc <HAL_I2C_Init+0x168>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1e58      	subs	r0, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	440b      	add	r3, r1
 80038e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ea:	3301      	adds	r3, #1
 80038ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	e012      	b.n	8003922 <HAL_I2C_Init+0x18e>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1e58      	subs	r0, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	0099      	lsls	r1, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_Init+0x196>
 8003926:	2301      	movs	r3, #1
 8003928:	e022      	b.n	8003970 <HAL_I2C_Init+0x1dc>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10e      	bne.n	8003950 <HAL_I2C_Init+0x1bc>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1e58      	subs	r0, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6859      	ldr	r1, [r3, #4]
 800393a:	460b      	mov	r3, r1
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	440b      	add	r3, r1
 8003940:	fbb0 f3f3 	udiv	r3, r0, r3
 8003944:	3301      	adds	r3, #1
 8003946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800394e:	e00f      	b.n	8003970 <HAL_I2C_Init+0x1dc>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1e58      	subs	r0, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	0099      	lsls	r1, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	fbb0 f3f3 	udiv	r3, r0, r3
 8003966:	3301      	adds	r3, #1
 8003968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	6809      	ldr	r1, [r1, #0]
 8003974:	4313      	orrs	r3, r2
 8003976:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69da      	ldr	r2, [r3, #28]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800399e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6911      	ldr	r1, [r2, #16]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68d2      	ldr	r2, [r2, #12]
 80039aa:	4311      	orrs	r1, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	000186a0 	.word	0x000186a0
 8003a0c:	001e847f 	.word	0x001e847f
 8003a10:	003d08ff 	.word	0x003d08ff
 8003a14:	431bde83 	.word	0x431bde83
 8003a18:	10624dd3 	.word	0x10624dd3

08003a1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	461a      	mov	r2, r3
 8003a28:	460b      	mov	r3, r1
 8003a2a:	817b      	strh	r3, [r7, #10]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a30:	f7fe faf4 	bl	800201c <HAL_GetTick>
 8003a34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	f040 80e0 	bne.w	8003c04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2319      	movs	r3, #25
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4970      	ldr	r1, [pc, #448]	; (8003c10 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f964 	bl	8003d1c <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e0d3      	b.n	8003c06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_I2C_Master_Transmit+0x50>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e0cc      	b.n	8003c06 <HAL_I2C_Master_Transmit+0x1ea>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d007      	beq.n	8003a92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2221      	movs	r2, #33	; 0x21
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2210      	movs	r2, #16
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	893a      	ldrh	r2, [r7, #8]
 8003ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4a50      	ldr	r2, [pc, #320]	; (8003c14 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ad4:	8979      	ldrh	r1, [r7, #10]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	6a3a      	ldr	r2, [r7, #32]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f89c 	bl	8003c18 <I2C_MasterRequestWrite>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e08d      	b.n	8003c06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b00:	e066      	b.n	8003bd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	6a39      	ldr	r1, [r7, #32]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f9de 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00d      	beq.n	8003b2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d107      	bne.n	8003b2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e06b      	b.n	8003c06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	781a      	ldrb	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_I2C_Master_Transmit+0x188>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d017      	beq.n	8003ba4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	781a      	ldrb	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	6a39      	ldr	r1, [r7, #32]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f9ce 	bl	8003f4a <I2C_WaitOnBTFFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00d      	beq.n	8003bd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d107      	bne.n	8003bcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e01a      	b.n	8003c06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d194      	bne.n	8003b02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	e000      	b.n	8003c06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
  }
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	00100002 	.word	0x00100002
 8003c14:	ffff0000 	.word	0xffff0000

08003c18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	607a      	str	r2, [r7, #4]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	460b      	mov	r3, r1
 8003c26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d006      	beq.n	8003c42 <I2C_MasterRequestWrite+0x2a>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d003      	beq.n	8003c42 <I2C_MasterRequestWrite+0x2a>
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c40:	d108      	bne.n	8003c54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e00b      	b.n	8003c6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	2b12      	cmp	r3, #18
 8003c5a:	d107      	bne.n	8003c6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f84f 	bl	8003d1c <I2C_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00d      	beq.n	8003ca0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c92:	d103      	bne.n	8003c9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e035      	b.n	8003d0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca8:	d108      	bne.n	8003cbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003caa:	897b      	ldrh	r3, [r7, #10]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cb8:	611a      	str	r2, [r3, #16]
 8003cba:	e01b      	b.n	8003cf4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cbc:	897b      	ldrh	r3, [r7, #10]
 8003cbe:	11db      	asrs	r3, r3, #7
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f003 0306 	and.w	r3, r3, #6
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f063 030f 	orn	r3, r3, #15
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	490e      	ldr	r1, [pc, #56]	; (8003d14 <I2C_MasterRequestWrite+0xfc>)
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f875 	bl	8003dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e010      	b.n	8003d0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cea:	897b      	ldrh	r3, [r7, #10]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	4907      	ldr	r1, [pc, #28]	; (8003d18 <I2C_MasterRequestWrite+0x100>)
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f865 	bl	8003dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	00010008 	.word	0x00010008
 8003d18:	00010002 	.word	0x00010002

08003d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d2c:	e025      	b.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d021      	beq.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d36:	f7fe f971 	bl	800201c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d302      	bcc.n	8003d4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d116      	bne.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f043 0220 	orr.w	r2, r3, #32
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e023      	b.n	8003dc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d10d      	bne.n	8003da0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf0c      	ite	eq
 8003d96:	2301      	moveq	r3, #1
 8003d98:	2300      	movne	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	e00c      	b.n	8003dba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	43da      	mvns	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4013      	ands	r3, r2
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d0b6      	beq.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
 8003dd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dd8:	e051      	b.n	8003e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de8:	d123      	bne.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f043 0204 	orr.w	r2, r3, #4
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e046      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d021      	beq.n	8003e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3a:	f7fe f8ef 	bl	800201c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d302      	bcc.n	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d116      	bne.n	8003e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f043 0220 	orr.w	r2, r3, #32
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e020      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d10c      	bne.n	8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bf14      	ite	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	2300      	moveq	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	e00b      	b.n	8003eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	43da      	mvns	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	4013      	ands	r3, r2
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf14      	ite	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	2300      	moveq	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d18d      	bne.n	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ed4:	e02d      	b.n	8003f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f878 	bl	8003fcc <I2C_IsAcknowledgeFailed>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e02d      	b.n	8003f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d021      	beq.n	8003f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fe f895 	bl	800201c <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d116      	bne.n	8003f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f043 0220 	orr.w	r2, r3, #32
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e007      	b.n	8003f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	2b80      	cmp	r3, #128	; 0x80
 8003f3e:	d1ca      	bne.n	8003ed6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f56:	e02d      	b.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f837 	bl	8003fcc <I2C_IsAcknowledgeFailed>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e02d      	b.n	8003fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d021      	beq.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f70:	f7fe f854 	bl	800201c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d302      	bcc.n	8003f86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d116      	bne.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e007      	b.n	8003fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d1ca      	bne.n	8003f58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe2:	d11b      	bne.n	800401c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f043 0204 	orr.w	r2, r3, #4
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e264      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d075      	beq.n	8004136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800404a:	4ba3      	ldr	r3, [pc, #652]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b04      	cmp	r3, #4
 8004054:	d00c      	beq.n	8004070 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004056:	4ba0      	ldr	r3, [pc, #640]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800405e:	2b08      	cmp	r3, #8
 8004060:	d112      	bne.n	8004088 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004062:	4b9d      	ldr	r3, [pc, #628]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800406e:	d10b      	bne.n	8004088 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	4b99      	ldr	r3, [pc, #612]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d05b      	beq.n	8004134 <HAL_RCC_OscConfig+0x108>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d157      	bne.n	8004134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e23f      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004090:	d106      	bne.n	80040a0 <HAL_RCC_OscConfig+0x74>
 8004092:	4b91      	ldr	r3, [pc, #580]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a90      	ldr	r2, [pc, #576]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e01d      	b.n	80040dc <HAL_RCC_OscConfig+0xb0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x98>
 80040aa:	4b8b      	ldr	r3, [pc, #556]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a8a      	ldr	r2, [pc, #552]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b88      	ldr	r3, [pc, #544]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a87      	ldr	r2, [pc, #540]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0xb0>
 80040c4:	4b84      	ldr	r3, [pc, #528]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a83      	ldr	r2, [pc, #524]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	4b81      	ldr	r3, [pc, #516]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a80      	ldr	r2, [pc, #512]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fd ff9a 	bl	800201c <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fd ff96 	bl	800201c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	; 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e204      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0xc0>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410c:	f7fd ff86 	bl	800201c <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004114:	f7fd ff82 	bl	800201c <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	; 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e1f0      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	4b6c      	ldr	r3, [pc, #432]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0xe8>
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d063      	beq.n	800420a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004142:	4b65      	ldr	r3, [pc, #404]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414e:	4b62      	ldr	r3, [pc, #392]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004156:	2b08      	cmp	r3, #8
 8004158:	d11c      	bne.n	8004194 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415a:	4b5f      	ldr	r3, [pc, #380]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d116      	bne.n	8004194 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004166:	4b5c      	ldr	r3, [pc, #368]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_RCC_OscConfig+0x152>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d001      	beq.n	800417e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e1c4      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417e:	4b56      	ldr	r3, [pc, #344]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4952      	ldr	r1, [pc, #328]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004192:	e03a      	b.n	800420a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d020      	beq.n	80041de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800419c:	4b4f      	ldr	r3, [pc, #316]	; (80042dc <HAL_RCC_OscConfig+0x2b0>)
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7fd ff3b 	bl	800201c <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041aa:	f7fd ff37 	bl	800201c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e1a5      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041bc:	4b46      	ldr	r3, [pc, #280]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c8:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4940      	ldr	r1, [pc, #256]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	600b      	str	r3, [r1, #0]
 80041dc:	e015      	b.n	800420a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041de:	4b3f      	ldr	r3, [pc, #252]	; (80042dc <HAL_RCC_OscConfig+0x2b0>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fd ff1a 	bl	800201c <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ec:	f7fd ff16 	bl	800201c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e184      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fe:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d030      	beq.n	8004278 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800421e:	4b30      	ldr	r3, [pc, #192]	; (80042e0 <HAL_RCC_OscConfig+0x2b4>)
 8004220:	2201      	movs	r2, #1
 8004222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004224:	f7fd fefa 	bl	800201c <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800422c:	f7fd fef6 	bl	800201c <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e164      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423e:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0x200>
 800424a:	e015      	b.n	8004278 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800424c:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <HAL_RCC_OscConfig+0x2b4>)
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004252:	f7fd fee3 	bl	800201c <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425a:	f7fd fedf 	bl	800201c <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e14d      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800426c:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 800426e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f0      	bne.n	800425a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80a0 	beq.w	80043c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004286:	2300      	movs	r3, #0
 8004288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	4a0e      	ldr	r2, [pc, #56]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6413      	str	r3, [r2, #64]	; 0x40
 80042a6:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_OscConfig+0x2b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d121      	bne.n	8004306 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <HAL_RCC_OscConfig+0x2b8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a07      	ldr	r2, [pc, #28]	; (80042e4 <HAL_RCC_OscConfig+0x2b8>)
 80042c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ce:	f7fd fea5 	bl	800201c <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d4:	e011      	b.n	80042fa <HAL_RCC_OscConfig+0x2ce>
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
 80042dc:	42470000 	.word	0x42470000
 80042e0:	42470e80 	.word	0x42470e80
 80042e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fd fe98 	bl	800201c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e106      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fa:	4b85      	ldr	r3, [pc, #532]	; (8004510 <HAL_RCC_OscConfig+0x4e4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d106      	bne.n	800431c <HAL_RCC_OscConfig+0x2f0>
 800430e:	4b81      	ldr	r3, [pc, #516]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a80      	ldr	r2, [pc, #512]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
 800431a:	e01c      	b.n	8004356 <HAL_RCC_OscConfig+0x32a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b05      	cmp	r3, #5
 8004322:	d10c      	bne.n	800433e <HAL_RCC_OscConfig+0x312>
 8004324:	4b7b      	ldr	r3, [pc, #492]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	4a7a      	ldr	r2, [pc, #488]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 800432a:	f043 0304 	orr.w	r3, r3, #4
 800432e:	6713      	str	r3, [r2, #112]	; 0x70
 8004330:	4b78      	ldr	r3, [pc, #480]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	4a77      	ldr	r2, [pc, #476]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6713      	str	r3, [r2, #112]	; 0x70
 800433c:	e00b      	b.n	8004356 <HAL_RCC_OscConfig+0x32a>
 800433e:	4b75      	ldr	r3, [pc, #468]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	4a74      	ldr	r2, [pc, #464]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	6713      	str	r3, [r2, #112]	; 0x70
 800434a:	4b72      	ldr	r3, [pc, #456]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	4a71      	ldr	r2, [pc, #452]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 8004350:	f023 0304 	bic.w	r3, r3, #4
 8004354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d015      	beq.n	800438a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435e:	f7fd fe5d 	bl	800201c <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004364:	e00a      	b.n	800437c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fd fe59 	bl	800201c <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	; 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e0c5      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437c:	4b65      	ldr	r3, [pc, #404]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ee      	beq.n	8004366 <HAL_RCC_OscConfig+0x33a>
 8004388:	e014      	b.n	80043b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438a:	f7fd fe47 	bl	800201c <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004390:	e00a      	b.n	80043a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fd fe43 	bl	800201c <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e0af      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a8:	4b5a      	ldr	r3, [pc, #360]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ee      	bne.n	8004392 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d105      	bne.n	80043c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ba:	4b56      	ldr	r3, [pc, #344]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	4a55      	ldr	r2, [pc, #340]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 80043c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 809b 	beq.w	8004506 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d0:	4b50      	ldr	r3, [pc, #320]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d05c      	beq.n	8004496 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d141      	bne.n	8004468 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b4c      	ldr	r3, [pc, #304]	; (8004518 <HAL_RCC_OscConfig+0x4ec>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ea:	f7fd fe17 	bl	800201c <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f2:	f7fd fe13 	bl	800201c <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e081      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004404:	4b43      	ldr	r3, [pc, #268]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	019b      	lsls	r3, r3, #6
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	3b01      	subs	r3, #1
 800442a:	041b      	lsls	r3, r3, #16
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	061b      	lsls	r3, r3, #24
 8004434:	4937      	ldr	r1, [pc, #220]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800443a:	4b37      	ldr	r3, [pc, #220]	; (8004518 <HAL_RCC_OscConfig+0x4ec>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fd fdec 	bl	800201c <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004448:	f7fd fde8 	bl	800201c <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e056      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445a:	4b2e      	ldr	r3, [pc, #184]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x41c>
 8004466:	e04e      	b.n	8004506 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004468:	4b2b      	ldr	r3, [pc, #172]	; (8004518 <HAL_RCC_OscConfig+0x4ec>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fd fdd5 	bl	800201c <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004476:	f7fd fdd1 	bl	800201c <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e03f      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004488:	4b22      	ldr	r3, [pc, #136]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f0      	bne.n	8004476 <HAL_RCC_OscConfig+0x44a>
 8004494:	e037      	b.n	8004506 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e032      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044a2:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <HAL_RCC_OscConfig+0x4e8>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d028      	beq.n	8004502 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d121      	bne.n	8004502 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d11a      	bne.n	8004502 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044d2:	4013      	ands	r3, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044da:	4293      	cmp	r3, r2
 80044dc:	d111      	bne.n	8004502 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	3b01      	subs	r3, #1
 80044ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d001      	beq.n	8004506 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40007000 	.word	0x40007000
 8004514:	40023800 	.word	0x40023800
 8004518:	42470060 	.word	0x42470060

0800451c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0cc      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b68      	ldr	r3, [pc, #416]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d90c      	bls.n	8004558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b65      	ldr	r3, [pc, #404]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004546:	4b63      	ldr	r3, [pc, #396]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0b8      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d020      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004570:	4b59      	ldr	r3, [pc, #356]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4a58      	ldr	r2, [pc, #352]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800457a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004588:	4b53      	ldr	r3, [pc, #332]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a52      	ldr	r2, [pc, #328]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004594:	4b50      	ldr	r3, [pc, #320]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	494d      	ldr	r1, [pc, #308]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d044      	beq.n	800463c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d107      	bne.n	80045ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ba:	4b47      	ldr	r3, [pc, #284]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d119      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e07f      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d003      	beq.n	80045da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045da:	4b3f      	ldr	r3, [pc, #252]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e06f      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ea:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e067      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fa:	4b37      	ldr	r3, [pc, #220]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f023 0203 	bic.w	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4934      	ldr	r1, [pc, #208]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	4313      	orrs	r3, r2
 800460a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800460c:	f7fd fd06 	bl	800201c <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	e00a      	b.n	800462a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004614:	f7fd fd02 	bl	800201c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e04f      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 020c 	and.w	r2, r3, #12
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	429a      	cmp	r2, r3
 800463a:	d1eb      	bne.n	8004614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800463c:	4b25      	ldr	r3, [pc, #148]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d20c      	bcs.n	8004664 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e032      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4916      	ldr	r1, [pc, #88]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800468e:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	490e      	ldr	r1, [pc, #56]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046a2:	f000 f821 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 80046a6:	4602      	mov	r2, r0
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	490a      	ldr	r1, [pc, #40]	; (80046dc <HAL_RCC_ClockConfig+0x1c0>)
 80046b4:	5ccb      	ldrb	r3, [r1, r3]
 80046b6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ba:	4a09      	ldr	r2, [pc, #36]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046be:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <HAL_RCC_ClockConfig+0x1c8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fd fc66 	bl	8001f94 <HAL_InitTick>

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40023c00 	.word	0x40023c00
 80046d8:	40023800 	.word	0x40023800
 80046dc:	080063f4 	.word	0x080063f4
 80046e0:	20000000 	.word	0x20000000
 80046e4:	20000004 	.word	0x20000004

080046e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e8:	b5b0      	push	{r4, r5, r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046ee:	2100      	movs	r1, #0
 80046f0:	6079      	str	r1, [r7, #4]
 80046f2:	2100      	movs	r1, #0
 80046f4:	60f9      	str	r1, [r7, #12]
 80046f6:	2100      	movs	r1, #0
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046fa:	2100      	movs	r1, #0
 80046fc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046fe:	4952      	ldr	r1, [pc, #328]	; (8004848 <HAL_RCC_GetSysClockFreq+0x160>)
 8004700:	6889      	ldr	r1, [r1, #8]
 8004702:	f001 010c 	and.w	r1, r1, #12
 8004706:	2908      	cmp	r1, #8
 8004708:	d00d      	beq.n	8004726 <HAL_RCC_GetSysClockFreq+0x3e>
 800470a:	2908      	cmp	r1, #8
 800470c:	f200 8094 	bhi.w	8004838 <HAL_RCC_GetSysClockFreq+0x150>
 8004710:	2900      	cmp	r1, #0
 8004712:	d002      	beq.n	800471a <HAL_RCC_GetSysClockFreq+0x32>
 8004714:	2904      	cmp	r1, #4
 8004716:	d003      	beq.n	8004720 <HAL_RCC_GetSysClockFreq+0x38>
 8004718:	e08e      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800471a:	4b4c      	ldr	r3, [pc, #304]	; (800484c <HAL_RCC_GetSysClockFreq+0x164>)
 800471c:	60bb      	str	r3, [r7, #8]
       break;
 800471e:	e08e      	b.n	800483e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004720:	4b4b      	ldr	r3, [pc, #300]	; (8004850 <HAL_RCC_GetSysClockFreq+0x168>)
 8004722:	60bb      	str	r3, [r7, #8]
      break;
 8004724:	e08b      	b.n	800483e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004726:	4948      	ldr	r1, [pc, #288]	; (8004848 <HAL_RCC_GetSysClockFreq+0x160>)
 8004728:	6849      	ldr	r1, [r1, #4]
 800472a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800472e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004730:	4945      	ldr	r1, [pc, #276]	; (8004848 <HAL_RCC_GetSysClockFreq+0x160>)
 8004732:	6849      	ldr	r1, [r1, #4]
 8004734:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004738:	2900      	cmp	r1, #0
 800473a:	d024      	beq.n	8004786 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800473c:	4942      	ldr	r1, [pc, #264]	; (8004848 <HAL_RCC_GetSysClockFreq+0x160>)
 800473e:	6849      	ldr	r1, [r1, #4]
 8004740:	0989      	lsrs	r1, r1, #6
 8004742:	4608      	mov	r0, r1
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	f240 14ff 	movw	r4, #511	; 0x1ff
 800474c:	f04f 0500 	mov.w	r5, #0
 8004750:	ea00 0204 	and.w	r2, r0, r4
 8004754:	ea01 0305 	and.w	r3, r1, r5
 8004758:	493d      	ldr	r1, [pc, #244]	; (8004850 <HAL_RCC_GetSysClockFreq+0x168>)
 800475a:	fb01 f003 	mul.w	r0, r1, r3
 800475e:	2100      	movs	r1, #0
 8004760:	fb01 f102 	mul.w	r1, r1, r2
 8004764:	1844      	adds	r4, r0, r1
 8004766:	493a      	ldr	r1, [pc, #232]	; (8004850 <HAL_RCC_GetSysClockFreq+0x168>)
 8004768:	fba2 0101 	umull	r0, r1, r2, r1
 800476c:	1863      	adds	r3, r4, r1
 800476e:	4619      	mov	r1, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	461a      	mov	r2, r3
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	f7fb fd82 	bl	8000280 <__aeabi_uldivmod>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4613      	mov	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e04a      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004786:	4b30      	ldr	r3, [pc, #192]	; (8004848 <HAL_RCC_GetSysClockFreq+0x160>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	099b      	lsrs	r3, r3, #6
 800478c:	461a      	mov	r2, r3
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004796:	f04f 0100 	mov.w	r1, #0
 800479a:	ea02 0400 	and.w	r4, r2, r0
 800479e:	ea03 0501 	and.w	r5, r3, r1
 80047a2:	4620      	mov	r0, r4
 80047a4:	4629      	mov	r1, r5
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	014b      	lsls	r3, r1, #5
 80047b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047b4:	0142      	lsls	r2, r0, #5
 80047b6:	4610      	mov	r0, r2
 80047b8:	4619      	mov	r1, r3
 80047ba:	1b00      	subs	r0, r0, r4
 80047bc:	eb61 0105 	sbc.w	r1, r1, r5
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	018b      	lsls	r3, r1, #6
 80047ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047ce:	0182      	lsls	r2, r0, #6
 80047d0:	1a12      	subs	r2, r2, r0
 80047d2:	eb63 0301 	sbc.w	r3, r3, r1
 80047d6:	f04f 0000 	mov.w	r0, #0
 80047da:	f04f 0100 	mov.w	r1, #0
 80047de:	00d9      	lsls	r1, r3, #3
 80047e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047e4:	00d0      	lsls	r0, r2, #3
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	1912      	adds	r2, r2, r4
 80047ec:	eb45 0303 	adc.w	r3, r5, r3
 80047f0:	f04f 0000 	mov.w	r0, #0
 80047f4:	f04f 0100 	mov.w	r1, #0
 80047f8:	0299      	lsls	r1, r3, #10
 80047fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047fe:	0290      	lsls	r0, r2, #10
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	461a      	mov	r2, r3
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	f7fb fd36 	bl	8000280 <__aeabi_uldivmod>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4613      	mov	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <HAL_RCC_GetSysClockFreq+0x160>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	3301      	adds	r3, #1
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	fbb2 f3f3 	udiv	r3, r2, r3
 8004834:	60bb      	str	r3, [r7, #8]
      break;
 8004836:	e002      	b.n	800483e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <HAL_RCC_GetSysClockFreq+0x164>)
 800483a:	60bb      	str	r3, [r7, #8]
      break;
 800483c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800483e:	68bb      	ldr	r3, [r7, #8]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bdb0      	pop	{r4, r5, r7, pc}
 8004848:	40023800 	.word	0x40023800
 800484c:	00f42400 	.word	0x00f42400
 8004850:	017d7840 	.word	0x017d7840

08004854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004858:	4b03      	ldr	r3, [pc, #12]	; (8004868 <HAL_RCC_GetHCLKFreq+0x14>)
 800485a:	681b      	ldr	r3, [r3, #0]
}
 800485c:	4618      	mov	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000000 	.word	0x20000000

0800486c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004870:	f7ff fff0 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b05      	ldr	r3, [pc, #20]	; (800488c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	0a9b      	lsrs	r3, r3, #10
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4903      	ldr	r1, [pc, #12]	; (8004890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004888:	4618      	mov	r0, r3
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40023800 	.word	0x40023800
 8004890:	08006404 	.word	0x08006404

08004894 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d035      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048bc:	4b67      	ldr	r3, [pc, #412]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048c2:	f7fd fbab 	bl	800201c <HAL_GetTick>
 80048c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048ca:	f7fd fba7 	bl	800201c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e0ba      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048dc:	4b60      	ldr	r3, [pc, #384]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1f0      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	019a      	lsls	r2, r3, #6
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	071b      	lsls	r3, r3, #28
 80048f4:	495a      	ldr	r1, [pc, #360]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048fc:	4b57      	ldr	r3, [pc, #348]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80048fe:	2201      	movs	r2, #1
 8004900:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004902:	f7fd fb8b 	bl	800201c <HAL_GetTick>
 8004906:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004908:	e008      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800490a:	f7fd fb87 	bl	800201c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e09a      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800491c:	4b50      	ldr	r3, [pc, #320]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0f0      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8083 	beq.w	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	4b49      	ldr	r3, [pc, #292]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	4a48      	ldr	r2, [pc, #288]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004944:	6413      	str	r3, [r2, #64]	; 0x40
 8004946:	4b46      	ldr	r3, [pc, #280]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004952:	4b44      	ldr	r3, [pc, #272]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a43      	ldr	r2, [pc, #268]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800495e:	f7fd fb5d 	bl	800201c <HAL_GetTick>
 8004962:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004964:	e008      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004966:	f7fd fb59 	bl	800201c <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e06c      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004978:	4b3a      	ldr	r3, [pc, #232]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004984:	4b36      	ldr	r3, [pc, #216]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d02f      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d028      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049a2:	4b2f      	ldr	r3, [pc, #188]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049ac:	4b2e      	ldr	r3, [pc, #184]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049b2:	4b2d      	ldr	r3, [pc, #180]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80049b8:	4a29      	ldr	r2, [pc, #164]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049be:	4b28      	ldr	r3, [pc, #160]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d114      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80049ca:	f7fd fb27 	bl	800201c <HAL_GetTick>
 80049ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	e00a      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d2:	f7fd fb23 	bl	800201c <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e034      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e8:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ee      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a00:	d10d      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004a02:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a16:	4912      	ldr	r1, [pc, #72]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	608b      	str	r3, [r1, #8]
 8004a1c:	e005      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a1e:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	4a0f      	ldr	r2, [pc, #60]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a24:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a28:	6093      	str	r3, [r2, #8]
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a36:	490a      	ldr	r1, [pc, #40]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	7c1a      	ldrb	r2, [r3, #16]
 8004a4c:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a4e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	42470068 	.word	0x42470068
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40007000 	.word	0x40007000
 8004a68:	42470e40 	.word	0x42470e40
 8004a6c:	424711e0 	.word	0x424711e0

08004a70 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e083      	b.n	8004b8a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	7f5b      	ldrb	r3, [r3, #29]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d105      	bne.n	8004a98 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fd f95a 	bl	8001d4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	22ca      	movs	r2, #202	; 0xca
 8004aa4:	625a      	str	r2, [r3, #36]	; 0x24
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2253      	movs	r2, #83	; 0x53
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fbc0 	bl	8005234 <RTC_EnterInitMode>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d008      	beq.n	8004acc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	22ff      	movs	r2, #255	; 0xff
 8004ac0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e05e      	b.n	8004b8a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ade:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6899      	ldr	r1, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	68d2      	ldr	r2, [r2, #12]
 8004b06:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6919      	ldr	r1, [r3, #16]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	041a      	lsls	r2, r3, #16
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b2a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10e      	bne.n	8004b58 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fb52 	bl	80051e4 <HAL_RTC_WaitForSynchro>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	22ff      	movs	r2, #255	; 0xff
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2204      	movs	r2, #4
 8004b52:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e018      	b.n	8004b8a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	22ff      	movs	r2, #255	; 0xff
 8004b80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004b88:	2300      	movs	r3, #0
  }
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b92:	b590      	push	{r4, r7, lr}
 8004b94:	b087      	sub	sp, #28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	7f1b      	ldrb	r3, [r3, #28]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_RTC_SetTime+0x1c>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e0aa      	b.n	8004d04 <HAL_RTC_SetTime+0x172>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d126      	bne.n	8004c0e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fb57 	bl	800528c <RTC_ByteToBcd2>
 8004bde:	4603      	mov	r3, r0
 8004be0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fb50 	bl	800528c <RTC_ByteToBcd2>
 8004bec:	4603      	mov	r3, r0
 8004bee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004bf0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	789b      	ldrb	r3, [r3, #2]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fb48 	bl	800528c <RTC_ByteToBcd2>
 8004bfc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004bfe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	78db      	ldrb	r3, [r3, #3]
 8004c06:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	e018      	b.n	8004c40 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d102      	bne.n	8004c22 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c2e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004c34:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	78db      	ldrb	r3, [r3, #3]
 8004c3a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	22ca      	movs	r2, #202	; 0xca
 8004c46:	625a      	str	r2, [r3, #36]	; 0x24
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2253      	movs	r2, #83	; 0x53
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 faef 	bl	8005234 <RTC_EnterInitMode>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	22ff      	movs	r2, #255	; 0xff
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2204      	movs	r2, #4
 8004c68:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e047      	b.n	8004d04 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004c7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c82:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c92:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6899      	ldr	r1, [r3, #8]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d111      	bne.n	8004cee <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 fa8a 	bl	80051e4 <HAL_RTC_WaitForSynchro>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	22ff      	movs	r2, #255	; 0xff
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e00a      	b.n	8004d04 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	22ff      	movs	r2, #255	; 0xff
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004d02:	2300      	movs	r3, #0
  }
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd90      	pop	{r4, r7, pc}

08004d0c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d3e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	0c1b      	lsrs	r3, r3, #16
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d11a      	bne.n	8004dbe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fa9b 	bl	80052c8 <RTC_Bcd2ToByte>
 8004d92:	4603      	mov	r3, r0
 8004d94:	461a      	mov	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fa92 	bl	80052c8 <RTC_Bcd2ToByte>
 8004da4:	4603      	mov	r3, r0
 8004da6:	461a      	mov	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	789b      	ldrb	r3, [r3, #2]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fa89 	bl	80052c8 <RTC_Bcd2ToByte>
 8004db6:	4603      	mov	r3, r0
 8004db8:	461a      	mov	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	7f1b      	ldrb	r3, [r3, #28]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_RTC_SetDate+0x1c>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e094      	b.n	8004f0e <HAL_RTC_SetDate+0x146>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2202      	movs	r2, #2
 8004dee:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10e      	bne.n	8004e14 <HAL_RTC_SetDate+0x4c>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	785b      	ldrb	r3, [r3, #1]
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	f023 0310 	bic.w	r3, r3, #16
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	330a      	adds	r3, #10
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d11c      	bne.n	8004e54 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	78db      	ldrb	r3, [r3, #3]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa34 	bl	800528c <RTC_ByteToBcd2>
 8004e24:	4603      	mov	r3, r0
 8004e26:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fa2d 	bl	800528c <RTC_ByteToBcd2>
 8004e32:	4603      	mov	r3, r0
 8004e34:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e36:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	789b      	ldrb	r3, [r3, #2]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fa25 	bl	800528c <RTC_ByteToBcd2>
 8004e42:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004e44:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e00e      	b.n	8004e72 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	78db      	ldrb	r3, [r3, #3]
 8004e58:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e60:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004e66:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	22ca      	movs	r2, #202	; 0xca
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2253      	movs	r2, #83	; 0x53
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f9d6 	bl	8005234 <RTC_EnterInitMode>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	22ff      	movs	r2, #255	; 0xff
 8004e94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2204      	movs	r2, #4
 8004e9a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e033      	b.n	8004f0e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004eb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004eb4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ec4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d111      	bne.n	8004ef8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f985 	bl	80051e4 <HAL_RTC_WaitForSynchro>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00b      	beq.n	8004ef8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	22ff      	movs	r2, #255	; 0xff
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2204      	movs	r2, #4
 8004eec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e00a      	b.n	8004f0e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	22ff      	movs	r2, #255	; 0xff
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
  }
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd90      	pop	{r4, r7, pc}

08004f16 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b086      	sub	sp, #24
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f34:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	0a1b      	lsrs	r3, r3, #8
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	0b5b      	lsrs	r3, r3, #13
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d11a      	bne.n	8004faa <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	78db      	ldrb	r3, [r3, #3]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 f9a5 	bl	80052c8 <RTC_Bcd2ToByte>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f99c 	bl	80052c8 <RTC_Bcd2ToByte>
 8004f90:	4603      	mov	r3, r0
 8004f92:	461a      	mov	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	789b      	ldrb	r3, [r3, #2]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 f993 	bl	80052c8 <RTC_Bcd2ToByte>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004fb4:	b590      	push	{r4, r7, lr}
 8004fb6:	b089      	sub	sp, #36	; 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61fb      	str	r3, [r7, #28]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	7f1b      	ldrb	r3, [r3, #28]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RTC_SetAlarm+0x24>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e101      	b.n	80051dc <HAL_RTC_SetAlarm+0x228>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d137      	bne.n	800505a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f942 	bl	800528c <RTC_ByteToBcd2>
 8005008:	4603      	mov	r3, r0
 800500a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	4618      	mov	r0, r3
 8005012:	f000 f93b 	bl	800528c <RTC_ByteToBcd2>
 8005016:	4603      	mov	r3, r0
 8005018:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800501a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	789b      	ldrb	r3, [r3, #2]
 8005020:	4618      	mov	r0, r3
 8005022:	f000 f933 	bl	800528c <RTC_ByteToBcd2>
 8005026:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005028:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	78db      	ldrb	r3, [r3, #3]
 8005030:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005032:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 f925 	bl	800528c <RTC_ByteToBcd2>
 8005042:	4603      	mov	r3, r0
 8005044:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005046:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800504e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005054:	4313      	orrs	r3, r2
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	e023      	b.n	80050a2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2200      	movs	r2, #0
 800506c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800507a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005080:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	78db      	ldrb	r3, [r3, #3]
 8005086:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005088:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005090:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005092:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005098:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800509e:	4313      	orrs	r3, r2
 80050a0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	22ca      	movs	r2, #202	; 0xca
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2253      	movs	r2, #83	; 0x53
 80050bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c6:	d13f      	bne.n	8005148 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050d6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050e6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050e8:	f7fc ff98 	bl	800201c <HAL_GetTick>
 80050ec:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80050ee:	e013      	b.n	8005118 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80050f0:	f7fc ff94 	bl	800201c <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050fe:	d90b      	bls.n	8005118 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	22ff      	movs	r2, #255	; 0xff
 8005106:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2203      	movs	r2, #3
 800510c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e061      	b.n	80051dc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0e4      	beq.n	80050f0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005144:	609a      	str	r2, [r3, #8]
 8005146:	e03e      	b.n	80051c6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005156:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005166:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005168:	f7fc ff58 	bl	800201c <HAL_GetTick>
 800516c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800516e:	e013      	b.n	8005198 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005170:	f7fc ff54 	bl	800201c <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800517e:	d90b      	bls.n	8005198 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	22ff      	movs	r2, #255	; 0xff
 8005186:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2203      	movs	r2, #3
 800518c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e021      	b.n	80051dc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0e4      	beq.n	8005170 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	22ff      	movs	r2, #255	; 0xff
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3724      	adds	r7, #36	; 0x24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd90      	pop	{r4, r7, pc}

080051e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005200:	f7fc ff0c 	bl	800201c <HAL_GetTick>
 8005204:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005206:	e009      	b.n	800521c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005208:	f7fc ff08 	bl	800201c <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005216:	d901      	bls.n	800521c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e007      	b.n	800522c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0ee      	beq.n	8005208 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d119      	bne.n	8005282 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f04f 32ff 	mov.w	r2, #4294967295
 8005256:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005258:	f7fc fee0 	bl	800201c <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800525e:	e009      	b.n	8005274 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005260:	f7fc fedc 	bl	800201c <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800526e:	d901      	bls.n	8005274 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e007      	b.n	8005284 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0ee      	beq.n	8005260 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800529a:	e005      	b.n	80052a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	3b0a      	subs	r3, #10
 80052a6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	2b09      	cmp	r3, #9
 80052ac:	d8f6      	bhi.n	800529c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	b2db      	uxtb	r3, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	091b      	lsrs	r3, r3, #4
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	4413      	add	r3, r2
 80052f6:	b2db      	uxtb	r3, r3
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmouthCalibMinusPulsesValue must be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmouthCalibMinusPulsesValue)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmouthCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	7f1b      	ldrb	r3, [r3, #28]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <HAL_RTCEx_SetSmoothCalib+0x1e>
 800531e:	2302      	movs	r3, #2
 8005320:	e047      	b.n	80053b2 <HAL_RTCEx_SetSmoothCalib+0xae>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2202      	movs	r2, #2
 800532c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	22ca      	movs	r2, #202	; 0xca
 8005334:	625a      	str	r2, [r3, #36]	; 0x24
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2253      	movs	r2, #83	; 0x53
 800533c:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01e      	beq.n	800538a <HAL_RTCEx_SetSmoothCalib+0x86>
  {
  /* Get tick */
  tickstart = HAL_GetTick();
 800534c:	f7fc fe66 	bl	800201c <HAL_GetTick>
 8005350:	6178      	str	r0, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8005352:	e013      	b.n	800537c <HAL_RTCEx_SetSmoothCalib+0x78>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005354:	f7fc fe62 	bl	800201c <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005362:	d90b      	bls.n	800537c <HAL_RTCEx_SetSmoothCalib+0x78>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	22ff      	movs	r2, #255	; 0xff
 800536a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2203      	movs	r2, #3
 8005370:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e01a      	b.n	80053b2 <HAL_RTCEx_SetSmoothCalib+0xae>
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e4      	bne.n	8005354 <HAL_RTCEx_SetSmoothCalib+0x50>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmouthCalibMinusPulsesValue);
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	ea42 0103 	orr.w	r1, r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	22ff      	movs	r2, #255	; 0xff
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e041      	b.n	8005450 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d106      	bne.n	80053e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fc fcc9 	bl	8001d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3304      	adds	r3, #4
 80053f6:	4619      	mov	r1, r3
 80053f8:	4610      	mov	r0, r2
 80053fa:	f000 f94f 	bl	800569c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d001      	beq.n	8005470 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e03c      	b.n	80054ea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1e      	ldr	r2, [pc, #120]	; (80054f8 <HAL_TIM_Base_Start+0xa0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d018      	beq.n	80054b4 <HAL_TIM_Base_Start+0x5c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d013      	beq.n	80054b4 <HAL_TIM_Base_Start+0x5c>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1a      	ldr	r2, [pc, #104]	; (80054fc <HAL_TIM_Base_Start+0xa4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00e      	beq.n	80054b4 <HAL_TIM_Base_Start+0x5c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a19      	ldr	r2, [pc, #100]	; (8005500 <HAL_TIM_Base_Start+0xa8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d009      	beq.n	80054b4 <HAL_TIM_Base_Start+0x5c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a17      	ldr	r2, [pc, #92]	; (8005504 <HAL_TIM_Base_Start+0xac>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <HAL_TIM_Base_Start+0x5c>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a16      	ldr	r2, [pc, #88]	; (8005508 <HAL_TIM_Base_Start+0xb0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d111      	bne.n	80054d8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b06      	cmp	r3, #6
 80054c4:	d010      	beq.n	80054e8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0201 	orr.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d6:	e007      	b.n	80054e8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40000400 	.word	0x40000400
 8005500:	40000800 	.word	0x40000800
 8005504:	40000c00 	.word	0x40000c00
 8005508:	40014000 	.word	0x40014000

0800550c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_TIM_ConfigClockSource+0x1c>
 8005524:	2302      	movs	r3, #2
 8005526:	e0b4      	b.n	8005692 <HAL_TIM_ConfigClockSource+0x186>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800554e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005560:	d03e      	beq.n	80055e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005566:	f200 8087 	bhi.w	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 800556a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800556e:	f000 8086 	beq.w	800567e <HAL_TIM_ConfigClockSource+0x172>
 8005572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005576:	d87f      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 8005578:	2b70      	cmp	r3, #112	; 0x70
 800557a:	d01a      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0xa6>
 800557c:	2b70      	cmp	r3, #112	; 0x70
 800557e:	d87b      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 8005580:	2b60      	cmp	r3, #96	; 0x60
 8005582:	d050      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0x11a>
 8005584:	2b60      	cmp	r3, #96	; 0x60
 8005586:	d877      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 8005588:	2b50      	cmp	r3, #80	; 0x50
 800558a:	d03c      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0xfa>
 800558c:	2b50      	cmp	r3, #80	; 0x50
 800558e:	d873      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d058      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x13a>
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	d86f      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 8005598:	2b30      	cmp	r3, #48	; 0x30
 800559a:	d064      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x15a>
 800559c:	2b30      	cmp	r3, #48	; 0x30
 800559e:	d86b      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d060      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x15a>
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	d867      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d05c      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x15a>
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d05a      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x15a>
 80055b0:	e062      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	6899      	ldr	r1, [r3, #8]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f000 f965 	bl	8005890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	609a      	str	r2, [r3, #8]
      break;
 80055de:	e04f      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6899      	ldr	r1, [r3, #8]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f000 f94e 	bl	8005890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005602:	609a      	str	r2, [r3, #8]
      break;
 8005604:	e03c      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6859      	ldr	r1, [r3, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	461a      	mov	r2, r3
 8005614:	f000 f8c2 	bl	800579c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2150      	movs	r1, #80	; 0x50
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f91b 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8005624:	e02c      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6859      	ldr	r1, [r3, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	461a      	mov	r2, r3
 8005634:	f000 f8e1 	bl	80057fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2160      	movs	r1, #96	; 0x60
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f90b 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8005644:	e01c      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6859      	ldr	r1, [r3, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	461a      	mov	r2, r3
 8005654:	f000 f8a2 	bl	800579c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2140      	movs	r1, #64	; 0x40
 800565e:	4618      	mov	r0, r3
 8005660:	f000 f8fb 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8005664:	e00c      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f000 f8f2 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8005676:	e003      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	73fb      	strb	r3, [r7, #15]
      break;
 800567c:	e000      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800567e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005690:	7bfb      	ldrb	r3, [r7, #15]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a34      	ldr	r2, [pc, #208]	; (8005780 <TIM_Base_SetConfig+0xe4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00f      	beq.n	80056d4 <TIM_Base_SetConfig+0x38>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ba:	d00b      	beq.n	80056d4 <TIM_Base_SetConfig+0x38>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a31      	ldr	r2, [pc, #196]	; (8005784 <TIM_Base_SetConfig+0xe8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d007      	beq.n	80056d4 <TIM_Base_SetConfig+0x38>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a30      	ldr	r2, [pc, #192]	; (8005788 <TIM_Base_SetConfig+0xec>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_Base_SetConfig+0x38>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a2f      	ldr	r2, [pc, #188]	; (800578c <TIM_Base_SetConfig+0xf0>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d108      	bne.n	80056e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a25      	ldr	r2, [pc, #148]	; (8005780 <TIM_Base_SetConfig+0xe4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01b      	beq.n	8005726 <TIM_Base_SetConfig+0x8a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f4:	d017      	beq.n	8005726 <TIM_Base_SetConfig+0x8a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a22      	ldr	r2, [pc, #136]	; (8005784 <TIM_Base_SetConfig+0xe8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d013      	beq.n	8005726 <TIM_Base_SetConfig+0x8a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a21      	ldr	r2, [pc, #132]	; (8005788 <TIM_Base_SetConfig+0xec>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00f      	beq.n	8005726 <TIM_Base_SetConfig+0x8a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a20      	ldr	r2, [pc, #128]	; (800578c <TIM_Base_SetConfig+0xf0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00b      	beq.n	8005726 <TIM_Base_SetConfig+0x8a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1f      	ldr	r2, [pc, #124]	; (8005790 <TIM_Base_SetConfig+0xf4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <TIM_Base_SetConfig+0x8a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a1e      	ldr	r2, [pc, #120]	; (8005794 <TIM_Base_SetConfig+0xf8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <TIM_Base_SetConfig+0x8a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a1d      	ldr	r2, [pc, #116]	; (8005798 <TIM_Base_SetConfig+0xfc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d108      	bne.n	8005738 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a08      	ldr	r2, [pc, #32]	; (8005780 <TIM_Base_SetConfig+0xe4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d103      	bne.n	800576c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	615a      	str	r2, [r3, #20]
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40010000 	.word	0x40010000
 8005784:	40000400 	.word	0x40000400
 8005788:	40000800 	.word	0x40000800
 800578c:	40000c00 	.word	0x40000c00
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400
 8005798:	40014800 	.word	0x40014800

0800579c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f023 0201 	bic.w	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f023 030a 	bic.w	r3, r3, #10
 80057d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	621a      	str	r2, [r3, #32]
}
 80057ee:	bf00      	nop
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b087      	sub	sp, #28
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	f023 0210 	bic.w	r2, r3, #16
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005824:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	031b      	lsls	r3, r3, #12
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005836:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	f043 0307 	orr.w	r3, r3, #7
 800587c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	609a      	str	r2, [r3, #8]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	021a      	lsls	r2, r3, #8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e050      	b.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a1c      	ldr	r2, [pc, #112]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d018      	beq.n	800595e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005934:	d013      	beq.n	800595e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a18      	ldr	r2, [pc, #96]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00e      	beq.n	800595e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a16      	ldr	r2, [pc, #88]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d009      	beq.n	800595e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d004      	beq.n	800595e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a13      	ldr	r2, [pc, #76]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d10c      	bne.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	4313      	orrs	r3, r2
 800596e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40010000 	.word	0x40010000
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40000c00 	.word	0x40000c00
 80059a8:	40014000 	.word	0x40014000

080059ac <__errno>:
 80059ac:	4b01      	ldr	r3, [pc, #4]	; (80059b4 <__errno+0x8>)
 80059ae:	6818      	ldr	r0, [r3, #0]
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	2000000c 	.word	0x2000000c

080059b8 <__libc_init_array>:
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	4d0d      	ldr	r5, [pc, #52]	; (80059f0 <__libc_init_array+0x38>)
 80059bc:	4c0d      	ldr	r4, [pc, #52]	; (80059f4 <__libc_init_array+0x3c>)
 80059be:	1b64      	subs	r4, r4, r5
 80059c0:	10a4      	asrs	r4, r4, #2
 80059c2:	2600      	movs	r6, #0
 80059c4:	42a6      	cmp	r6, r4
 80059c6:	d109      	bne.n	80059dc <__libc_init_array+0x24>
 80059c8:	4d0b      	ldr	r5, [pc, #44]	; (80059f8 <__libc_init_array+0x40>)
 80059ca:	4c0c      	ldr	r4, [pc, #48]	; (80059fc <__libc_init_array+0x44>)
 80059cc:	f000 fc4e 	bl	800626c <_init>
 80059d0:	1b64      	subs	r4, r4, r5
 80059d2:	10a4      	asrs	r4, r4, #2
 80059d4:	2600      	movs	r6, #0
 80059d6:	42a6      	cmp	r6, r4
 80059d8:	d105      	bne.n	80059e6 <__libc_init_array+0x2e>
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e0:	4798      	blx	r3
 80059e2:	3601      	adds	r6, #1
 80059e4:	e7ee      	b.n	80059c4 <__libc_init_array+0xc>
 80059e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ea:	4798      	blx	r3
 80059ec:	3601      	adds	r6, #1
 80059ee:	e7f2      	b.n	80059d6 <__libc_init_array+0x1e>
 80059f0:	08006450 	.word	0x08006450
 80059f4:	08006450 	.word	0x08006450
 80059f8:	08006450 	.word	0x08006450
 80059fc:	08006454 	.word	0x08006454

08005a00 <memset>:
 8005a00:	4402      	add	r2, r0
 8005a02:	4603      	mov	r3, r0
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d100      	bne.n	8005a0a <memset+0xa>
 8005a08:	4770      	bx	lr
 8005a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a0e:	e7f9      	b.n	8005a04 <memset+0x4>

08005a10 <siprintf>:
 8005a10:	b40e      	push	{r1, r2, r3}
 8005a12:	b500      	push	{lr}
 8005a14:	b09c      	sub	sp, #112	; 0x70
 8005a16:	ab1d      	add	r3, sp, #116	; 0x74
 8005a18:	9002      	str	r0, [sp, #8]
 8005a1a:	9006      	str	r0, [sp, #24]
 8005a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a20:	4809      	ldr	r0, [pc, #36]	; (8005a48 <siprintf+0x38>)
 8005a22:	9107      	str	r1, [sp, #28]
 8005a24:	9104      	str	r1, [sp, #16]
 8005a26:	4909      	ldr	r1, [pc, #36]	; (8005a4c <siprintf+0x3c>)
 8005a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a2c:	9105      	str	r1, [sp, #20]
 8005a2e:	6800      	ldr	r0, [r0, #0]
 8005a30:	9301      	str	r3, [sp, #4]
 8005a32:	a902      	add	r1, sp, #8
 8005a34:	f000 f868 	bl	8005b08 <_svfiprintf_r>
 8005a38:	9b02      	ldr	r3, [sp, #8]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	b01c      	add	sp, #112	; 0x70
 8005a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a44:	b003      	add	sp, #12
 8005a46:	4770      	bx	lr
 8005a48:	2000000c 	.word	0x2000000c
 8005a4c:	ffff0208 	.word	0xffff0208

08005a50 <__ssputs_r>:
 8005a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a54:	688e      	ldr	r6, [r1, #8]
 8005a56:	429e      	cmp	r6, r3
 8005a58:	4682      	mov	sl, r0
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	4690      	mov	r8, r2
 8005a5e:	461f      	mov	r7, r3
 8005a60:	d838      	bhi.n	8005ad4 <__ssputs_r+0x84>
 8005a62:	898a      	ldrh	r2, [r1, #12]
 8005a64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a68:	d032      	beq.n	8005ad0 <__ssputs_r+0x80>
 8005a6a:	6825      	ldr	r5, [r4, #0]
 8005a6c:	6909      	ldr	r1, [r1, #16]
 8005a6e:	eba5 0901 	sub.w	r9, r5, r1
 8005a72:	6965      	ldr	r5, [r4, #20]
 8005a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	444b      	add	r3, r9
 8005a80:	106d      	asrs	r5, r5, #1
 8005a82:	429d      	cmp	r5, r3
 8005a84:	bf38      	it	cc
 8005a86:	461d      	movcc	r5, r3
 8005a88:	0553      	lsls	r3, r2, #21
 8005a8a:	d531      	bpl.n	8005af0 <__ssputs_r+0xa0>
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	f000 fb47 	bl	8006120 <_malloc_r>
 8005a92:	4606      	mov	r6, r0
 8005a94:	b950      	cbnz	r0, 8005aac <__ssputs_r+0x5c>
 8005a96:	230c      	movs	r3, #12
 8005a98:	f8ca 3000 	str.w	r3, [sl]
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aac:	6921      	ldr	r1, [r4, #16]
 8005aae:	464a      	mov	r2, r9
 8005ab0:	f000 fabe 	bl	8006030 <memcpy>
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	6126      	str	r6, [r4, #16]
 8005ac2:	6165      	str	r5, [r4, #20]
 8005ac4:	444e      	add	r6, r9
 8005ac6:	eba5 0509 	sub.w	r5, r5, r9
 8005aca:	6026      	str	r6, [r4, #0]
 8005acc:	60a5      	str	r5, [r4, #8]
 8005ace:	463e      	mov	r6, r7
 8005ad0:	42be      	cmp	r6, r7
 8005ad2:	d900      	bls.n	8005ad6 <__ssputs_r+0x86>
 8005ad4:	463e      	mov	r6, r7
 8005ad6:	4632      	mov	r2, r6
 8005ad8:	6820      	ldr	r0, [r4, #0]
 8005ada:	4641      	mov	r1, r8
 8005adc:	f000 fab6 	bl	800604c <memmove>
 8005ae0:	68a3      	ldr	r3, [r4, #8]
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	1b9b      	subs	r3, r3, r6
 8005ae6:	4432      	add	r2, r6
 8005ae8:	60a3      	str	r3, [r4, #8]
 8005aea:	6022      	str	r2, [r4, #0]
 8005aec:	2000      	movs	r0, #0
 8005aee:	e7db      	b.n	8005aa8 <__ssputs_r+0x58>
 8005af0:	462a      	mov	r2, r5
 8005af2:	f000 fb6f 	bl	80061d4 <_realloc_r>
 8005af6:	4606      	mov	r6, r0
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d1e1      	bne.n	8005ac0 <__ssputs_r+0x70>
 8005afc:	6921      	ldr	r1, [r4, #16]
 8005afe:	4650      	mov	r0, sl
 8005b00:	f000 fabe 	bl	8006080 <_free_r>
 8005b04:	e7c7      	b.n	8005a96 <__ssputs_r+0x46>
	...

08005b08 <_svfiprintf_r>:
 8005b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	4698      	mov	r8, r3
 8005b0e:	898b      	ldrh	r3, [r1, #12]
 8005b10:	061b      	lsls	r3, r3, #24
 8005b12:	b09d      	sub	sp, #116	; 0x74
 8005b14:	4607      	mov	r7, r0
 8005b16:	460d      	mov	r5, r1
 8005b18:	4614      	mov	r4, r2
 8005b1a:	d50e      	bpl.n	8005b3a <_svfiprintf_r+0x32>
 8005b1c:	690b      	ldr	r3, [r1, #16]
 8005b1e:	b963      	cbnz	r3, 8005b3a <_svfiprintf_r+0x32>
 8005b20:	2140      	movs	r1, #64	; 0x40
 8005b22:	f000 fafd 	bl	8006120 <_malloc_r>
 8005b26:	6028      	str	r0, [r5, #0]
 8005b28:	6128      	str	r0, [r5, #16]
 8005b2a:	b920      	cbnz	r0, 8005b36 <_svfiprintf_r+0x2e>
 8005b2c:	230c      	movs	r3, #12
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	e0d1      	b.n	8005cda <_svfiprintf_r+0x1d2>
 8005b36:	2340      	movs	r3, #64	; 0x40
 8005b38:	616b      	str	r3, [r5, #20]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b3e:	2320      	movs	r3, #32
 8005b40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b44:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b48:	2330      	movs	r3, #48	; 0x30
 8005b4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005cf4 <_svfiprintf_r+0x1ec>
 8005b4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b52:	f04f 0901 	mov.w	r9, #1
 8005b56:	4623      	mov	r3, r4
 8005b58:	469a      	mov	sl, r3
 8005b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b5e:	b10a      	cbz	r2, 8005b64 <_svfiprintf_r+0x5c>
 8005b60:	2a25      	cmp	r2, #37	; 0x25
 8005b62:	d1f9      	bne.n	8005b58 <_svfiprintf_r+0x50>
 8005b64:	ebba 0b04 	subs.w	fp, sl, r4
 8005b68:	d00b      	beq.n	8005b82 <_svfiprintf_r+0x7a>
 8005b6a:	465b      	mov	r3, fp
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	4629      	mov	r1, r5
 8005b70:	4638      	mov	r0, r7
 8005b72:	f7ff ff6d 	bl	8005a50 <__ssputs_r>
 8005b76:	3001      	adds	r0, #1
 8005b78:	f000 80aa 	beq.w	8005cd0 <_svfiprintf_r+0x1c8>
 8005b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b7e:	445a      	add	r2, fp
 8005b80:	9209      	str	r2, [sp, #36]	; 0x24
 8005b82:	f89a 3000 	ldrb.w	r3, [sl]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 80a2 	beq.w	8005cd0 <_svfiprintf_r+0x1c8>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b96:	f10a 0a01 	add.w	sl, sl, #1
 8005b9a:	9304      	str	r3, [sp, #16]
 8005b9c:	9307      	str	r3, [sp, #28]
 8005b9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ba2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ba4:	4654      	mov	r4, sl
 8005ba6:	2205      	movs	r2, #5
 8005ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bac:	4851      	ldr	r0, [pc, #324]	; (8005cf4 <_svfiprintf_r+0x1ec>)
 8005bae:	f7fa fb17 	bl	80001e0 <memchr>
 8005bb2:	9a04      	ldr	r2, [sp, #16]
 8005bb4:	b9d8      	cbnz	r0, 8005bee <_svfiprintf_r+0xe6>
 8005bb6:	06d0      	lsls	r0, r2, #27
 8005bb8:	bf44      	itt	mi
 8005bba:	2320      	movmi	r3, #32
 8005bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bc0:	0711      	lsls	r1, r2, #28
 8005bc2:	bf44      	itt	mi
 8005bc4:	232b      	movmi	r3, #43	; 0x2b
 8005bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bca:	f89a 3000 	ldrb.w	r3, [sl]
 8005bce:	2b2a      	cmp	r3, #42	; 0x2a
 8005bd0:	d015      	beq.n	8005bfe <_svfiprintf_r+0xf6>
 8005bd2:	9a07      	ldr	r2, [sp, #28]
 8005bd4:	4654      	mov	r4, sl
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	f04f 0c0a 	mov.w	ip, #10
 8005bdc:	4621      	mov	r1, r4
 8005bde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005be2:	3b30      	subs	r3, #48	; 0x30
 8005be4:	2b09      	cmp	r3, #9
 8005be6:	d94e      	bls.n	8005c86 <_svfiprintf_r+0x17e>
 8005be8:	b1b0      	cbz	r0, 8005c18 <_svfiprintf_r+0x110>
 8005bea:	9207      	str	r2, [sp, #28]
 8005bec:	e014      	b.n	8005c18 <_svfiprintf_r+0x110>
 8005bee:	eba0 0308 	sub.w	r3, r0, r8
 8005bf2:	fa09 f303 	lsl.w	r3, r9, r3
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	9304      	str	r3, [sp, #16]
 8005bfa:	46a2      	mov	sl, r4
 8005bfc:	e7d2      	b.n	8005ba4 <_svfiprintf_r+0x9c>
 8005bfe:	9b03      	ldr	r3, [sp, #12]
 8005c00:	1d19      	adds	r1, r3, #4
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	9103      	str	r1, [sp, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	bfbb      	ittet	lt
 8005c0a:	425b      	neglt	r3, r3
 8005c0c:	f042 0202 	orrlt.w	r2, r2, #2
 8005c10:	9307      	strge	r3, [sp, #28]
 8005c12:	9307      	strlt	r3, [sp, #28]
 8005c14:	bfb8      	it	lt
 8005c16:	9204      	strlt	r2, [sp, #16]
 8005c18:	7823      	ldrb	r3, [r4, #0]
 8005c1a:	2b2e      	cmp	r3, #46	; 0x2e
 8005c1c:	d10c      	bne.n	8005c38 <_svfiprintf_r+0x130>
 8005c1e:	7863      	ldrb	r3, [r4, #1]
 8005c20:	2b2a      	cmp	r3, #42	; 0x2a
 8005c22:	d135      	bne.n	8005c90 <_svfiprintf_r+0x188>
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	1d1a      	adds	r2, r3, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	9203      	str	r2, [sp, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	bfb8      	it	lt
 8005c30:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c34:	3402      	adds	r4, #2
 8005c36:	9305      	str	r3, [sp, #20]
 8005c38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d04 <_svfiprintf_r+0x1fc>
 8005c3c:	7821      	ldrb	r1, [r4, #0]
 8005c3e:	2203      	movs	r2, #3
 8005c40:	4650      	mov	r0, sl
 8005c42:	f7fa facd 	bl	80001e0 <memchr>
 8005c46:	b140      	cbz	r0, 8005c5a <_svfiprintf_r+0x152>
 8005c48:	2340      	movs	r3, #64	; 0x40
 8005c4a:	eba0 000a 	sub.w	r0, r0, sl
 8005c4e:	fa03 f000 	lsl.w	r0, r3, r0
 8005c52:	9b04      	ldr	r3, [sp, #16]
 8005c54:	4303      	orrs	r3, r0
 8005c56:	3401      	adds	r4, #1
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c5e:	4826      	ldr	r0, [pc, #152]	; (8005cf8 <_svfiprintf_r+0x1f0>)
 8005c60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c64:	2206      	movs	r2, #6
 8005c66:	f7fa fabb 	bl	80001e0 <memchr>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d038      	beq.n	8005ce0 <_svfiprintf_r+0x1d8>
 8005c6e:	4b23      	ldr	r3, [pc, #140]	; (8005cfc <_svfiprintf_r+0x1f4>)
 8005c70:	bb1b      	cbnz	r3, 8005cba <_svfiprintf_r+0x1b2>
 8005c72:	9b03      	ldr	r3, [sp, #12]
 8005c74:	3307      	adds	r3, #7
 8005c76:	f023 0307 	bic.w	r3, r3, #7
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	9303      	str	r3, [sp, #12]
 8005c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c80:	4433      	add	r3, r6
 8005c82:	9309      	str	r3, [sp, #36]	; 0x24
 8005c84:	e767      	b.n	8005b56 <_svfiprintf_r+0x4e>
 8005c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	e7a5      	b.n	8005bdc <_svfiprintf_r+0xd4>
 8005c90:	2300      	movs	r3, #0
 8005c92:	3401      	adds	r4, #1
 8005c94:	9305      	str	r3, [sp, #20]
 8005c96:	4619      	mov	r1, r3
 8005c98:	f04f 0c0a 	mov.w	ip, #10
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ca2:	3a30      	subs	r2, #48	; 0x30
 8005ca4:	2a09      	cmp	r2, #9
 8005ca6:	d903      	bls.n	8005cb0 <_svfiprintf_r+0x1a8>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0c5      	beq.n	8005c38 <_svfiprintf_r+0x130>
 8005cac:	9105      	str	r1, [sp, #20]
 8005cae:	e7c3      	b.n	8005c38 <_svfiprintf_r+0x130>
 8005cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e7f0      	b.n	8005c9c <_svfiprintf_r+0x194>
 8005cba:	ab03      	add	r3, sp, #12
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	462a      	mov	r2, r5
 8005cc0:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <_svfiprintf_r+0x1f8>)
 8005cc2:	a904      	add	r1, sp, #16
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	f3af 8000 	nop.w
 8005cca:	1c42      	adds	r2, r0, #1
 8005ccc:	4606      	mov	r6, r0
 8005cce:	d1d6      	bne.n	8005c7e <_svfiprintf_r+0x176>
 8005cd0:	89ab      	ldrh	r3, [r5, #12]
 8005cd2:	065b      	lsls	r3, r3, #25
 8005cd4:	f53f af2c 	bmi.w	8005b30 <_svfiprintf_r+0x28>
 8005cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cda:	b01d      	add	sp, #116	; 0x74
 8005cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce0:	ab03      	add	r3, sp, #12
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	462a      	mov	r2, r5
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <_svfiprintf_r+0x1f8>)
 8005ce8:	a904      	add	r1, sp, #16
 8005cea:	4638      	mov	r0, r7
 8005cec:	f000 f87a 	bl	8005de4 <_printf_i>
 8005cf0:	e7eb      	b.n	8005cca <_svfiprintf_r+0x1c2>
 8005cf2:	bf00      	nop
 8005cf4:	08006414 	.word	0x08006414
 8005cf8:	0800641e 	.word	0x0800641e
 8005cfc:	00000000 	.word	0x00000000
 8005d00:	08005a51 	.word	0x08005a51
 8005d04:	0800641a 	.word	0x0800641a

08005d08 <_printf_common>:
 8005d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	4699      	mov	r9, r3
 8005d10:	688a      	ldr	r2, [r1, #8]
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	bfb8      	it	lt
 8005d1c:	4613      	movlt	r3, r2
 8005d1e:	6033      	str	r3, [r6, #0]
 8005d20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d24:	4607      	mov	r7, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	b10a      	cbz	r2, 8005d2e <_printf_common+0x26>
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	6033      	str	r3, [r6, #0]
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	0699      	lsls	r1, r3, #26
 8005d32:	bf42      	ittt	mi
 8005d34:	6833      	ldrmi	r3, [r6, #0]
 8005d36:	3302      	addmi	r3, #2
 8005d38:	6033      	strmi	r3, [r6, #0]
 8005d3a:	6825      	ldr	r5, [r4, #0]
 8005d3c:	f015 0506 	ands.w	r5, r5, #6
 8005d40:	d106      	bne.n	8005d50 <_printf_common+0x48>
 8005d42:	f104 0a19 	add.w	sl, r4, #25
 8005d46:	68e3      	ldr	r3, [r4, #12]
 8005d48:	6832      	ldr	r2, [r6, #0]
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	42ab      	cmp	r3, r5
 8005d4e:	dc26      	bgt.n	8005d9e <_printf_common+0x96>
 8005d50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d54:	1e13      	subs	r3, r2, #0
 8005d56:	6822      	ldr	r2, [r4, #0]
 8005d58:	bf18      	it	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	0692      	lsls	r2, r2, #26
 8005d5e:	d42b      	bmi.n	8005db8 <_printf_common+0xb0>
 8005d60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d64:	4649      	mov	r1, r9
 8005d66:	4638      	mov	r0, r7
 8005d68:	47c0      	blx	r8
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d01e      	beq.n	8005dac <_printf_common+0xa4>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	68e5      	ldr	r5, [r4, #12]
 8005d72:	6832      	ldr	r2, [r6, #0]
 8005d74:	f003 0306 	and.w	r3, r3, #6
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	bf08      	it	eq
 8005d7c:	1aad      	subeq	r5, r5, r2
 8005d7e:	68a3      	ldr	r3, [r4, #8]
 8005d80:	6922      	ldr	r2, [r4, #16]
 8005d82:	bf0c      	ite	eq
 8005d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d88:	2500      	movne	r5, #0
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	bfc4      	itt	gt
 8005d8e:	1a9b      	subgt	r3, r3, r2
 8005d90:	18ed      	addgt	r5, r5, r3
 8005d92:	2600      	movs	r6, #0
 8005d94:	341a      	adds	r4, #26
 8005d96:	42b5      	cmp	r5, r6
 8005d98:	d11a      	bne.n	8005dd0 <_printf_common+0xc8>
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	e008      	b.n	8005db0 <_printf_common+0xa8>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	4652      	mov	r2, sl
 8005da2:	4649      	mov	r1, r9
 8005da4:	4638      	mov	r0, r7
 8005da6:	47c0      	blx	r8
 8005da8:	3001      	adds	r0, #1
 8005daa:	d103      	bne.n	8005db4 <_printf_common+0xac>
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295
 8005db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db4:	3501      	adds	r5, #1
 8005db6:	e7c6      	b.n	8005d46 <_printf_common+0x3e>
 8005db8:	18e1      	adds	r1, r4, r3
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	2030      	movs	r0, #48	; 0x30
 8005dbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dc2:	4422      	add	r2, r4
 8005dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dcc:	3302      	adds	r3, #2
 8005dce:	e7c7      	b.n	8005d60 <_printf_common+0x58>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4622      	mov	r2, r4
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	47c0      	blx	r8
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d0e6      	beq.n	8005dac <_printf_common+0xa4>
 8005dde:	3601      	adds	r6, #1
 8005de0:	e7d9      	b.n	8005d96 <_printf_common+0x8e>
	...

08005de4 <_printf_i>:
 8005de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de8:	460c      	mov	r4, r1
 8005dea:	4691      	mov	r9, r2
 8005dec:	7e27      	ldrb	r7, [r4, #24]
 8005dee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005df0:	2f78      	cmp	r7, #120	; 0x78
 8005df2:	4680      	mov	r8, r0
 8005df4:	469a      	mov	sl, r3
 8005df6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dfa:	d807      	bhi.n	8005e0c <_printf_i+0x28>
 8005dfc:	2f62      	cmp	r7, #98	; 0x62
 8005dfe:	d80a      	bhi.n	8005e16 <_printf_i+0x32>
 8005e00:	2f00      	cmp	r7, #0
 8005e02:	f000 80d8 	beq.w	8005fb6 <_printf_i+0x1d2>
 8005e06:	2f58      	cmp	r7, #88	; 0x58
 8005e08:	f000 80a3 	beq.w	8005f52 <_printf_i+0x16e>
 8005e0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e14:	e03a      	b.n	8005e8c <_printf_i+0xa8>
 8005e16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e1a:	2b15      	cmp	r3, #21
 8005e1c:	d8f6      	bhi.n	8005e0c <_printf_i+0x28>
 8005e1e:	a001      	add	r0, pc, #4	; (adr r0, 8005e24 <_printf_i+0x40>)
 8005e20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e24:	08005e7d 	.word	0x08005e7d
 8005e28:	08005e91 	.word	0x08005e91
 8005e2c:	08005e0d 	.word	0x08005e0d
 8005e30:	08005e0d 	.word	0x08005e0d
 8005e34:	08005e0d 	.word	0x08005e0d
 8005e38:	08005e0d 	.word	0x08005e0d
 8005e3c:	08005e91 	.word	0x08005e91
 8005e40:	08005e0d 	.word	0x08005e0d
 8005e44:	08005e0d 	.word	0x08005e0d
 8005e48:	08005e0d 	.word	0x08005e0d
 8005e4c:	08005e0d 	.word	0x08005e0d
 8005e50:	08005f9d 	.word	0x08005f9d
 8005e54:	08005ec1 	.word	0x08005ec1
 8005e58:	08005f7f 	.word	0x08005f7f
 8005e5c:	08005e0d 	.word	0x08005e0d
 8005e60:	08005e0d 	.word	0x08005e0d
 8005e64:	08005fbf 	.word	0x08005fbf
 8005e68:	08005e0d 	.word	0x08005e0d
 8005e6c:	08005ec1 	.word	0x08005ec1
 8005e70:	08005e0d 	.word	0x08005e0d
 8005e74:	08005e0d 	.word	0x08005e0d
 8005e78:	08005f87 	.word	0x08005f87
 8005e7c:	680b      	ldr	r3, [r1, #0]
 8005e7e:	1d1a      	adds	r2, r3, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	600a      	str	r2, [r1, #0]
 8005e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e0a3      	b.n	8005fd8 <_printf_i+0x1f4>
 8005e90:	6825      	ldr	r5, [r4, #0]
 8005e92:	6808      	ldr	r0, [r1, #0]
 8005e94:	062e      	lsls	r6, r5, #24
 8005e96:	f100 0304 	add.w	r3, r0, #4
 8005e9a:	d50a      	bpl.n	8005eb2 <_printf_i+0xce>
 8005e9c:	6805      	ldr	r5, [r0, #0]
 8005e9e:	600b      	str	r3, [r1, #0]
 8005ea0:	2d00      	cmp	r5, #0
 8005ea2:	da03      	bge.n	8005eac <_printf_i+0xc8>
 8005ea4:	232d      	movs	r3, #45	; 0x2d
 8005ea6:	426d      	negs	r5, r5
 8005ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eac:	485e      	ldr	r0, [pc, #376]	; (8006028 <_printf_i+0x244>)
 8005eae:	230a      	movs	r3, #10
 8005eb0:	e019      	b.n	8005ee6 <_printf_i+0x102>
 8005eb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005eb6:	6805      	ldr	r5, [r0, #0]
 8005eb8:	600b      	str	r3, [r1, #0]
 8005eba:	bf18      	it	ne
 8005ebc:	b22d      	sxthne	r5, r5
 8005ebe:	e7ef      	b.n	8005ea0 <_printf_i+0xbc>
 8005ec0:	680b      	ldr	r3, [r1, #0]
 8005ec2:	6825      	ldr	r5, [r4, #0]
 8005ec4:	1d18      	adds	r0, r3, #4
 8005ec6:	6008      	str	r0, [r1, #0]
 8005ec8:	0628      	lsls	r0, r5, #24
 8005eca:	d501      	bpl.n	8005ed0 <_printf_i+0xec>
 8005ecc:	681d      	ldr	r5, [r3, #0]
 8005ece:	e002      	b.n	8005ed6 <_printf_i+0xf2>
 8005ed0:	0669      	lsls	r1, r5, #25
 8005ed2:	d5fb      	bpl.n	8005ecc <_printf_i+0xe8>
 8005ed4:	881d      	ldrh	r5, [r3, #0]
 8005ed6:	4854      	ldr	r0, [pc, #336]	; (8006028 <_printf_i+0x244>)
 8005ed8:	2f6f      	cmp	r7, #111	; 0x6f
 8005eda:	bf0c      	ite	eq
 8005edc:	2308      	moveq	r3, #8
 8005ede:	230a      	movne	r3, #10
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ee6:	6866      	ldr	r6, [r4, #4]
 8005ee8:	60a6      	str	r6, [r4, #8]
 8005eea:	2e00      	cmp	r6, #0
 8005eec:	bfa2      	ittt	ge
 8005eee:	6821      	ldrge	r1, [r4, #0]
 8005ef0:	f021 0104 	bicge.w	r1, r1, #4
 8005ef4:	6021      	strge	r1, [r4, #0]
 8005ef6:	b90d      	cbnz	r5, 8005efc <_printf_i+0x118>
 8005ef8:	2e00      	cmp	r6, #0
 8005efa:	d04d      	beq.n	8005f98 <_printf_i+0x1b4>
 8005efc:	4616      	mov	r6, r2
 8005efe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f02:	fb03 5711 	mls	r7, r3, r1, r5
 8005f06:	5dc7      	ldrb	r7, [r0, r7]
 8005f08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f0c:	462f      	mov	r7, r5
 8005f0e:	42bb      	cmp	r3, r7
 8005f10:	460d      	mov	r5, r1
 8005f12:	d9f4      	bls.n	8005efe <_printf_i+0x11a>
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d10b      	bne.n	8005f30 <_printf_i+0x14c>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	07df      	lsls	r7, r3, #31
 8005f1c:	d508      	bpl.n	8005f30 <_printf_i+0x14c>
 8005f1e:	6923      	ldr	r3, [r4, #16]
 8005f20:	6861      	ldr	r1, [r4, #4]
 8005f22:	4299      	cmp	r1, r3
 8005f24:	bfde      	ittt	le
 8005f26:	2330      	movle	r3, #48	; 0x30
 8005f28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f30:	1b92      	subs	r2, r2, r6
 8005f32:	6122      	str	r2, [r4, #16]
 8005f34:	f8cd a000 	str.w	sl, [sp]
 8005f38:	464b      	mov	r3, r9
 8005f3a:	aa03      	add	r2, sp, #12
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4640      	mov	r0, r8
 8005f40:	f7ff fee2 	bl	8005d08 <_printf_common>
 8005f44:	3001      	adds	r0, #1
 8005f46:	d14c      	bne.n	8005fe2 <_printf_i+0x1fe>
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	b004      	add	sp, #16
 8005f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f52:	4835      	ldr	r0, [pc, #212]	; (8006028 <_printf_i+0x244>)
 8005f54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	680e      	ldr	r6, [r1, #0]
 8005f5c:	061f      	lsls	r7, r3, #24
 8005f5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f62:	600e      	str	r6, [r1, #0]
 8005f64:	d514      	bpl.n	8005f90 <_printf_i+0x1ac>
 8005f66:	07d9      	lsls	r1, r3, #31
 8005f68:	bf44      	itt	mi
 8005f6a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f6e:	6023      	strmi	r3, [r4, #0]
 8005f70:	b91d      	cbnz	r5, 8005f7a <_printf_i+0x196>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	f023 0320 	bic.w	r3, r3, #32
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	2310      	movs	r3, #16
 8005f7c:	e7b0      	b.n	8005ee0 <_printf_i+0xfc>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	f043 0320 	orr.w	r3, r3, #32
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	2378      	movs	r3, #120	; 0x78
 8005f88:	4828      	ldr	r0, [pc, #160]	; (800602c <_printf_i+0x248>)
 8005f8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f8e:	e7e3      	b.n	8005f58 <_printf_i+0x174>
 8005f90:	065e      	lsls	r6, r3, #25
 8005f92:	bf48      	it	mi
 8005f94:	b2ad      	uxthmi	r5, r5
 8005f96:	e7e6      	b.n	8005f66 <_printf_i+0x182>
 8005f98:	4616      	mov	r6, r2
 8005f9a:	e7bb      	b.n	8005f14 <_printf_i+0x130>
 8005f9c:	680b      	ldr	r3, [r1, #0]
 8005f9e:	6826      	ldr	r6, [r4, #0]
 8005fa0:	6960      	ldr	r0, [r4, #20]
 8005fa2:	1d1d      	adds	r5, r3, #4
 8005fa4:	600d      	str	r5, [r1, #0]
 8005fa6:	0635      	lsls	r5, r6, #24
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	d501      	bpl.n	8005fb0 <_printf_i+0x1cc>
 8005fac:	6018      	str	r0, [r3, #0]
 8005fae:	e002      	b.n	8005fb6 <_printf_i+0x1d2>
 8005fb0:	0671      	lsls	r1, r6, #25
 8005fb2:	d5fb      	bpl.n	8005fac <_printf_i+0x1c8>
 8005fb4:	8018      	strh	r0, [r3, #0]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	6123      	str	r3, [r4, #16]
 8005fba:	4616      	mov	r6, r2
 8005fbc:	e7ba      	b.n	8005f34 <_printf_i+0x150>
 8005fbe:	680b      	ldr	r3, [r1, #0]
 8005fc0:	1d1a      	adds	r2, r3, #4
 8005fc2:	600a      	str	r2, [r1, #0]
 8005fc4:	681e      	ldr	r6, [r3, #0]
 8005fc6:	6862      	ldr	r2, [r4, #4]
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7fa f908 	bl	80001e0 <memchr>
 8005fd0:	b108      	cbz	r0, 8005fd6 <_printf_i+0x1f2>
 8005fd2:	1b80      	subs	r0, r0, r6
 8005fd4:	6060      	str	r0, [r4, #4]
 8005fd6:	6863      	ldr	r3, [r4, #4]
 8005fd8:	6123      	str	r3, [r4, #16]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe0:	e7a8      	b.n	8005f34 <_printf_i+0x150>
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4640      	mov	r0, r8
 8005fea:	47d0      	blx	sl
 8005fec:	3001      	adds	r0, #1
 8005fee:	d0ab      	beq.n	8005f48 <_printf_i+0x164>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	079b      	lsls	r3, r3, #30
 8005ff4:	d413      	bmi.n	800601e <_printf_i+0x23a>
 8005ff6:	68e0      	ldr	r0, [r4, #12]
 8005ff8:	9b03      	ldr	r3, [sp, #12]
 8005ffa:	4298      	cmp	r0, r3
 8005ffc:	bfb8      	it	lt
 8005ffe:	4618      	movlt	r0, r3
 8006000:	e7a4      	b.n	8005f4c <_printf_i+0x168>
 8006002:	2301      	movs	r3, #1
 8006004:	4632      	mov	r2, r6
 8006006:	4649      	mov	r1, r9
 8006008:	4640      	mov	r0, r8
 800600a:	47d0      	blx	sl
 800600c:	3001      	adds	r0, #1
 800600e:	d09b      	beq.n	8005f48 <_printf_i+0x164>
 8006010:	3501      	adds	r5, #1
 8006012:	68e3      	ldr	r3, [r4, #12]
 8006014:	9903      	ldr	r1, [sp, #12]
 8006016:	1a5b      	subs	r3, r3, r1
 8006018:	42ab      	cmp	r3, r5
 800601a:	dcf2      	bgt.n	8006002 <_printf_i+0x21e>
 800601c:	e7eb      	b.n	8005ff6 <_printf_i+0x212>
 800601e:	2500      	movs	r5, #0
 8006020:	f104 0619 	add.w	r6, r4, #25
 8006024:	e7f5      	b.n	8006012 <_printf_i+0x22e>
 8006026:	bf00      	nop
 8006028:	08006425 	.word	0x08006425
 800602c:	08006436 	.word	0x08006436

08006030 <memcpy>:
 8006030:	440a      	add	r2, r1
 8006032:	4291      	cmp	r1, r2
 8006034:	f100 33ff 	add.w	r3, r0, #4294967295
 8006038:	d100      	bne.n	800603c <memcpy+0xc>
 800603a:	4770      	bx	lr
 800603c:	b510      	push	{r4, lr}
 800603e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006042:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006046:	4291      	cmp	r1, r2
 8006048:	d1f9      	bne.n	800603e <memcpy+0xe>
 800604a:	bd10      	pop	{r4, pc}

0800604c <memmove>:
 800604c:	4288      	cmp	r0, r1
 800604e:	b510      	push	{r4, lr}
 8006050:	eb01 0402 	add.w	r4, r1, r2
 8006054:	d902      	bls.n	800605c <memmove+0x10>
 8006056:	4284      	cmp	r4, r0
 8006058:	4623      	mov	r3, r4
 800605a:	d807      	bhi.n	800606c <memmove+0x20>
 800605c:	1e43      	subs	r3, r0, #1
 800605e:	42a1      	cmp	r1, r4
 8006060:	d008      	beq.n	8006074 <memmove+0x28>
 8006062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800606a:	e7f8      	b.n	800605e <memmove+0x12>
 800606c:	4402      	add	r2, r0
 800606e:	4601      	mov	r1, r0
 8006070:	428a      	cmp	r2, r1
 8006072:	d100      	bne.n	8006076 <memmove+0x2a>
 8006074:	bd10      	pop	{r4, pc}
 8006076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800607a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800607e:	e7f7      	b.n	8006070 <memmove+0x24>

08006080 <_free_r>:
 8006080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006082:	2900      	cmp	r1, #0
 8006084:	d048      	beq.n	8006118 <_free_r+0x98>
 8006086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800608a:	9001      	str	r0, [sp, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	f1a1 0404 	sub.w	r4, r1, #4
 8006092:	bfb8      	it	lt
 8006094:	18e4      	addlt	r4, r4, r3
 8006096:	f000 f8d3 	bl	8006240 <__malloc_lock>
 800609a:	4a20      	ldr	r2, [pc, #128]	; (800611c <_free_r+0x9c>)
 800609c:	9801      	ldr	r0, [sp, #4]
 800609e:	6813      	ldr	r3, [r2, #0]
 80060a0:	4615      	mov	r5, r2
 80060a2:	b933      	cbnz	r3, 80060b2 <_free_r+0x32>
 80060a4:	6063      	str	r3, [r4, #4]
 80060a6:	6014      	str	r4, [r2, #0]
 80060a8:	b003      	add	sp, #12
 80060aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060ae:	f000 b8cd 	b.w	800624c <__malloc_unlock>
 80060b2:	42a3      	cmp	r3, r4
 80060b4:	d90b      	bls.n	80060ce <_free_r+0x4e>
 80060b6:	6821      	ldr	r1, [r4, #0]
 80060b8:	1862      	adds	r2, r4, r1
 80060ba:	4293      	cmp	r3, r2
 80060bc:	bf04      	itt	eq
 80060be:	681a      	ldreq	r2, [r3, #0]
 80060c0:	685b      	ldreq	r3, [r3, #4]
 80060c2:	6063      	str	r3, [r4, #4]
 80060c4:	bf04      	itt	eq
 80060c6:	1852      	addeq	r2, r2, r1
 80060c8:	6022      	streq	r2, [r4, #0]
 80060ca:	602c      	str	r4, [r5, #0]
 80060cc:	e7ec      	b.n	80060a8 <_free_r+0x28>
 80060ce:	461a      	mov	r2, r3
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	b10b      	cbz	r3, 80060d8 <_free_r+0x58>
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	d9fa      	bls.n	80060ce <_free_r+0x4e>
 80060d8:	6811      	ldr	r1, [r2, #0]
 80060da:	1855      	adds	r5, r2, r1
 80060dc:	42a5      	cmp	r5, r4
 80060de:	d10b      	bne.n	80060f8 <_free_r+0x78>
 80060e0:	6824      	ldr	r4, [r4, #0]
 80060e2:	4421      	add	r1, r4
 80060e4:	1854      	adds	r4, r2, r1
 80060e6:	42a3      	cmp	r3, r4
 80060e8:	6011      	str	r1, [r2, #0]
 80060ea:	d1dd      	bne.n	80060a8 <_free_r+0x28>
 80060ec:	681c      	ldr	r4, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	6053      	str	r3, [r2, #4]
 80060f2:	4421      	add	r1, r4
 80060f4:	6011      	str	r1, [r2, #0]
 80060f6:	e7d7      	b.n	80060a8 <_free_r+0x28>
 80060f8:	d902      	bls.n	8006100 <_free_r+0x80>
 80060fa:	230c      	movs	r3, #12
 80060fc:	6003      	str	r3, [r0, #0]
 80060fe:	e7d3      	b.n	80060a8 <_free_r+0x28>
 8006100:	6825      	ldr	r5, [r4, #0]
 8006102:	1961      	adds	r1, r4, r5
 8006104:	428b      	cmp	r3, r1
 8006106:	bf04      	itt	eq
 8006108:	6819      	ldreq	r1, [r3, #0]
 800610a:	685b      	ldreq	r3, [r3, #4]
 800610c:	6063      	str	r3, [r4, #4]
 800610e:	bf04      	itt	eq
 8006110:	1949      	addeq	r1, r1, r5
 8006112:	6021      	streq	r1, [r4, #0]
 8006114:	6054      	str	r4, [r2, #4]
 8006116:	e7c7      	b.n	80060a8 <_free_r+0x28>
 8006118:	b003      	add	sp, #12
 800611a:	bd30      	pop	{r4, r5, pc}
 800611c:	200000c8 	.word	0x200000c8

08006120 <_malloc_r>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	1ccd      	adds	r5, r1, #3
 8006124:	f025 0503 	bic.w	r5, r5, #3
 8006128:	3508      	adds	r5, #8
 800612a:	2d0c      	cmp	r5, #12
 800612c:	bf38      	it	cc
 800612e:	250c      	movcc	r5, #12
 8006130:	2d00      	cmp	r5, #0
 8006132:	4606      	mov	r6, r0
 8006134:	db01      	blt.n	800613a <_malloc_r+0x1a>
 8006136:	42a9      	cmp	r1, r5
 8006138:	d903      	bls.n	8006142 <_malloc_r+0x22>
 800613a:	230c      	movs	r3, #12
 800613c:	6033      	str	r3, [r6, #0]
 800613e:	2000      	movs	r0, #0
 8006140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006142:	f000 f87d 	bl	8006240 <__malloc_lock>
 8006146:	4921      	ldr	r1, [pc, #132]	; (80061cc <_malloc_r+0xac>)
 8006148:	680a      	ldr	r2, [r1, #0]
 800614a:	4614      	mov	r4, r2
 800614c:	b99c      	cbnz	r4, 8006176 <_malloc_r+0x56>
 800614e:	4f20      	ldr	r7, [pc, #128]	; (80061d0 <_malloc_r+0xb0>)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	b923      	cbnz	r3, 800615e <_malloc_r+0x3e>
 8006154:	4621      	mov	r1, r4
 8006156:	4630      	mov	r0, r6
 8006158:	f000 f862 	bl	8006220 <_sbrk_r>
 800615c:	6038      	str	r0, [r7, #0]
 800615e:	4629      	mov	r1, r5
 8006160:	4630      	mov	r0, r6
 8006162:	f000 f85d 	bl	8006220 <_sbrk_r>
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	d123      	bne.n	80061b2 <_malloc_r+0x92>
 800616a:	230c      	movs	r3, #12
 800616c:	6033      	str	r3, [r6, #0]
 800616e:	4630      	mov	r0, r6
 8006170:	f000 f86c 	bl	800624c <__malloc_unlock>
 8006174:	e7e3      	b.n	800613e <_malloc_r+0x1e>
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	1b5b      	subs	r3, r3, r5
 800617a:	d417      	bmi.n	80061ac <_malloc_r+0x8c>
 800617c:	2b0b      	cmp	r3, #11
 800617e:	d903      	bls.n	8006188 <_malloc_r+0x68>
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	441c      	add	r4, r3
 8006184:	6025      	str	r5, [r4, #0]
 8006186:	e004      	b.n	8006192 <_malloc_r+0x72>
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	42a2      	cmp	r2, r4
 800618c:	bf0c      	ite	eq
 800618e:	600b      	streq	r3, [r1, #0]
 8006190:	6053      	strne	r3, [r2, #4]
 8006192:	4630      	mov	r0, r6
 8006194:	f000 f85a 	bl	800624c <__malloc_unlock>
 8006198:	f104 000b 	add.w	r0, r4, #11
 800619c:	1d23      	adds	r3, r4, #4
 800619e:	f020 0007 	bic.w	r0, r0, #7
 80061a2:	1ac2      	subs	r2, r0, r3
 80061a4:	d0cc      	beq.n	8006140 <_malloc_r+0x20>
 80061a6:	1a1b      	subs	r3, r3, r0
 80061a8:	50a3      	str	r3, [r4, r2]
 80061aa:	e7c9      	b.n	8006140 <_malloc_r+0x20>
 80061ac:	4622      	mov	r2, r4
 80061ae:	6864      	ldr	r4, [r4, #4]
 80061b0:	e7cc      	b.n	800614c <_malloc_r+0x2c>
 80061b2:	1cc4      	adds	r4, r0, #3
 80061b4:	f024 0403 	bic.w	r4, r4, #3
 80061b8:	42a0      	cmp	r0, r4
 80061ba:	d0e3      	beq.n	8006184 <_malloc_r+0x64>
 80061bc:	1a21      	subs	r1, r4, r0
 80061be:	4630      	mov	r0, r6
 80061c0:	f000 f82e 	bl	8006220 <_sbrk_r>
 80061c4:	3001      	adds	r0, #1
 80061c6:	d1dd      	bne.n	8006184 <_malloc_r+0x64>
 80061c8:	e7cf      	b.n	800616a <_malloc_r+0x4a>
 80061ca:	bf00      	nop
 80061cc:	200000c8 	.word	0x200000c8
 80061d0:	200000cc 	.word	0x200000cc

080061d4 <_realloc_r>:
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	4607      	mov	r7, r0
 80061d8:	4614      	mov	r4, r2
 80061da:	460e      	mov	r6, r1
 80061dc:	b921      	cbnz	r1, 80061e8 <_realloc_r+0x14>
 80061de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80061e2:	4611      	mov	r1, r2
 80061e4:	f7ff bf9c 	b.w	8006120 <_malloc_r>
 80061e8:	b922      	cbnz	r2, 80061f4 <_realloc_r+0x20>
 80061ea:	f7ff ff49 	bl	8006080 <_free_r>
 80061ee:	4625      	mov	r5, r4
 80061f0:	4628      	mov	r0, r5
 80061f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061f4:	f000 f830 	bl	8006258 <_malloc_usable_size_r>
 80061f8:	42a0      	cmp	r0, r4
 80061fa:	d20f      	bcs.n	800621c <_realloc_r+0x48>
 80061fc:	4621      	mov	r1, r4
 80061fe:	4638      	mov	r0, r7
 8006200:	f7ff ff8e 	bl	8006120 <_malloc_r>
 8006204:	4605      	mov	r5, r0
 8006206:	2800      	cmp	r0, #0
 8006208:	d0f2      	beq.n	80061f0 <_realloc_r+0x1c>
 800620a:	4631      	mov	r1, r6
 800620c:	4622      	mov	r2, r4
 800620e:	f7ff ff0f 	bl	8006030 <memcpy>
 8006212:	4631      	mov	r1, r6
 8006214:	4638      	mov	r0, r7
 8006216:	f7ff ff33 	bl	8006080 <_free_r>
 800621a:	e7e9      	b.n	80061f0 <_realloc_r+0x1c>
 800621c:	4635      	mov	r5, r6
 800621e:	e7e7      	b.n	80061f0 <_realloc_r+0x1c>

08006220 <_sbrk_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4d06      	ldr	r5, [pc, #24]	; (800623c <_sbrk_r+0x1c>)
 8006224:	2300      	movs	r3, #0
 8006226:	4604      	mov	r4, r0
 8006228:	4608      	mov	r0, r1
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	f7fb fe1e 	bl	8001e6c <_sbrk>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_sbrk_r+0x1a>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_sbrk_r+0x1a>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	200002d0 	.word	0x200002d0

08006240 <__malloc_lock>:
 8006240:	4801      	ldr	r0, [pc, #4]	; (8006248 <__malloc_lock+0x8>)
 8006242:	f000 b811 	b.w	8006268 <__retarget_lock_acquire_recursive>
 8006246:	bf00      	nop
 8006248:	200002d8 	.word	0x200002d8

0800624c <__malloc_unlock>:
 800624c:	4801      	ldr	r0, [pc, #4]	; (8006254 <__malloc_unlock+0x8>)
 800624e:	f000 b80c 	b.w	800626a <__retarget_lock_release_recursive>
 8006252:	bf00      	nop
 8006254:	200002d8 	.word	0x200002d8

08006258 <_malloc_usable_size_r>:
 8006258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800625c:	1f18      	subs	r0, r3, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	bfbc      	itt	lt
 8006262:	580b      	ldrlt	r3, [r1, r0]
 8006264:	18c0      	addlt	r0, r0, r3
 8006266:	4770      	bx	lr

08006268 <__retarget_lock_acquire_recursive>:
 8006268:	4770      	bx	lr

0800626a <__retarget_lock_release_recursive>:
 800626a:	4770      	bx	lr

0800626c <_init>:
 800626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626e:	bf00      	nop
 8006270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006272:	bc08      	pop	{r3}
 8006274:	469e      	mov	lr, r3
 8006276:	4770      	bx	lr

08006278 <_fini>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	bf00      	nop
 800627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627e:	bc08      	pop	{r3}
 8006280:	469e      	mov	lr, r3
 8006282:	4770      	bx	lr
