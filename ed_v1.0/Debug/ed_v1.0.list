
ed_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000686c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c10  08006c10  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006c10  08006c10  00016c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c18  08006c18  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c1c  08006c1c  00016c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000084  08006ca4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08006ca4  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143a5  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002996  00000000  00000000  00034459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00036df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  00038018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001872f  00000000  00000000  00039130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bd1  00000000  00000000  0005185f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a09c9  00000000  00000000  00067430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107df9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000517c  00000000  00000000  00107e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080069f4 	.word	0x080069f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080069f4 	.word	0x080069f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f023 030f 	bic.w	r3, r3, #15
 8000588:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	f043 030c 	orr.w	r3, r3, #12
 8000596:	b2db      	uxtb	r3, r3
 8000598:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005a4:	7bbb      	ldrb	r3, [r7, #14]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005ae:	7bbb      	ldrb	r3, [r7, #14]
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005b8:	f107 0208 	add.w	r2, r7, #8
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2304      	movs	r3, #4
 80005c2:	214e      	movs	r1, #78	; 0x4e
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <lcd_send_cmd+0x5c>)
 80005c6:	f003 fd21 	bl	800400c <HAL_I2C_Master_Transmit>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000110 	.word	0x20000110

080005d8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af02      	add	r7, sp, #8
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f023 030f 	bic.w	r3, r3, #15
 80005e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	f043 030d 	orr.w	r3, r3, #13
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	f043 0309 	orr.w	r3, r3, #9
 8000600:	b2db      	uxtb	r3, r3
 8000602:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000604:	7bbb      	ldrb	r3, [r7, #14]
 8000606:	f043 030d 	orr.w	r3, r3, #13
 800060a:	b2db      	uxtb	r3, r3
 800060c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	f043 0309 	orr.w	r3, r3, #9
 8000614:	b2db      	uxtb	r3, r3
 8000616:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000618:	f107 0208 	add.w	r2, r7, #8
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2304      	movs	r3, #4
 8000622:	214e      	movs	r1, #78	; 0x4e
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <lcd_send_data+0x5c>)
 8000626:	f003 fcf1 	bl	800400c <HAL_I2C_Master_Transmit>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000110 	.word	0x20000110

08000638 <lcd_clear>:

void lcd_clear (void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	f7ff ff9a 	bl	8000578 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	e005      	b.n	8000656 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800064a:	2020      	movs	r0, #32
 800064c:	f7ff ffc4 	bl	80005d8 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3301      	adds	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b45      	cmp	r3, #69	; 0x45
 800065a:	ddf6      	ble.n	800064a <lcd_clear+0x12>
	}
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <lcd_put_cur+0x18>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d005      	beq.n	8000688 <lcd_put_cur+0x22>
 800067c:	e009      	b.n	8000692 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	603b      	str	r3, [r7, #0]
            break;
 8000686:	e004      	b.n	8000692 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800068e:	603b      	str	r3, [r7, #0]
            break;
 8000690:	bf00      	nop
    };
    lcd_send_cmd (col);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff6e 	bl	8000578 <lcd_send_cmd>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <lcd_init>:


void lcd_init (void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	delay_us(60000);  // wait for >40ms
 80006a8:	f64e 2060 	movw	r0, #60000	; 0xea60
 80006ac:	f000 fbee 	bl	8000e8c <delay_us>
	lcd_send_cmd (0x30);
 80006b0:	2030      	movs	r0, #48	; 0x30
 80006b2:	f7ff ff61 	bl	8000578 <lcd_send_cmd>
	delay_us(6000);  // wait for >4.1ms
 80006b6:	f241 7070 	movw	r0, #6000	; 0x1770
 80006ba:	f000 fbe7 	bl	8000e8c <delay_us>
	lcd_send_cmd (0x30);
 80006be:	2030      	movs	r0, #48	; 0x30
 80006c0:	f7ff ff5a 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);  // wait for >100us
 80006c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c8:	f000 fbe0 	bl	8000e8c <delay_us>
	lcd_send_cmd (0x30);
 80006cc:	2030      	movs	r0, #48	; 0x30
 80006ce:	f7ff ff53 	bl	8000578 <lcd_send_cmd>
	delay_us(200);
 80006d2:	20c8      	movs	r0, #200	; 0xc8
 80006d4:	f000 fbda 	bl	8000e8c <delay_us>
	lcd_send_cmd (0x20);  // 4bit mode
 80006d8:	2020      	movs	r0, #32
 80006da:	f7ff ff4d 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);
 80006de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006e2:	f000 fbd3 	bl	8000e8c <delay_us>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006e6:	2028      	movs	r0, #40	; 0x28
 80006e8:	f7ff ff46 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);
 80006ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f0:	f000 fbcc 	bl	8000e8c <delay_us>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006f4:	2008      	movs	r0, #8
 80006f6:	f7ff ff3f 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);
 80006fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006fe:	f000 fbc5 	bl	8000e8c <delay_us>
	lcd_send_cmd (0x01);  // clear display
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff ff38 	bl	8000578 <lcd_send_cmd>
	delay_us(4000);
 8000708:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800070c:	f000 fbbe 	bl	8000e8c <delay_us>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000710:	2006      	movs	r0, #6
 8000712:	f7ff ff31 	bl	8000578 <lcd_send_cmd>
	delay_us(2000);
 8000716:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800071a:	f000 fbb7 	bl	8000e8c <delay_us>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800071e:	200c      	movs	r0, #12
 8000720:	f7ff ff2a 	bl	8000578 <lcd_send_cmd>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000730:	e006      	b.n	8000740 <lcd_send_string+0x18>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff4c 	bl	80005d8 <lcd_send_data>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f4      	bne.n	8000732 <lcd_send_string+0xa>
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f001 fef1 	bl	8002540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f86b 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 fac1 	bl	8000ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000766:	f000 fa9f 	bl	8000ca8 <MX_DMA_Init>
  MX_RTC_Init();
 800076a:	f000 f9bd 	bl	8000ae8 <MX_RTC_Init>
  MX_I2C1_Init();
 800076e:	f000 f98d 	bl	8000a8c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000772:	f000 fa49 	bl	8000c08 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000776:	f000 f8e3 	bl	8000940 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, -511);
 800077a:	f46f 73ff 	mvn.w	r3, #510	; 0x1fe
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	4825      	ldr	r0, [pc, #148]	; (8000818 <main+0xc4>)
 8000784:	f005 f91c 	bl	80059c0 <HAL_RTCEx_SetSmoothCalib>
  HAL_TIM_Base_Start(&htim1);
 8000788:	4824      	ldr	r0, [pc, #144]	; (800081c <main+0xc8>)
 800078a:	f005 f9cd 	bl	8005b28 <HAL_TIM_Base_Start>
  lcd_initial_message();
 800078e:	f000 ffbb 	bl	8001708 <lcd_initial_message>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(300);
 8000792:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000796:	f001 ff45 	bl	8002624 <HAL_Delay>
	  DHT11_get_value();
 800079a:	f000 fda9 	bl	80012f0 <DHT11_get_value>
	  HAL_Delay(300);
 800079e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007a2:	f001 ff3f 	bl	8002624 <HAL_Delay>
	  get_time();
 80007a6:	f000 ff73 	bl	8001690 <get_time>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_dma, adc_channel_lenght);
 80007aa:	2307      	movs	r3, #7
 80007ac:	461a      	mov	r2, r3
 80007ae:	491c      	ldr	r1, [pc, #112]	; (8000820 <main+0xcc>)
 80007b0:	481c      	ldr	r0, [pc, #112]	; (8000824 <main+0xd0>)
 80007b2:	f002 f8df 	bl	8002974 <HAL_ADC_Start_DMA>
	  if(menu_refresher == 10){
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <main+0xd4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b0a      	cmp	r3, #10
 80007bc:	d106      	bne.n	80007cc <main+0x78>
		  menu_lcd_refresh = 1;
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <main+0xd8>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	601a      	str	r2, [r3, #0]
		  menu_refresher = 0;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <main+0xd4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	e004      	b.n	80007d6 <main+0x82>
	  }else{
		  menu_refresher++;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <main+0xd4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a15      	ldr	r2, [pc, #84]	; (8000828 <main+0xd4>)
 80007d4:	6013      	str	r3, [r2, #0]
	  }

	  mode_planner(0,global_planner_start);
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <main+0xdc>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 fe27 	bl	8001430 <mode_planner>
	  menu_func(menu_lcd_refresh, 0);
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <main+0xd8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 ffbb 	bl	8001764 <menu_func>
	  HAL_Delay(100);
 80007ee:	2064      	movs	r0, #100	; 0x64
 80007f0:	f001 ff18 	bl	8002624 <HAL_Delay>
	  if(nextday_dummy){
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <main+0xe0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d0ca      	beq.n	8000792 <main+0x3e>
		  set_time (0,0,0,0,0,0,0);
 80007fc:	2300      	movs	r3, #0
 80007fe:	9302      	str	r3, [sp, #8]
 8000800:	2300      	movs	r3, #0
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	2300      	movs	r3, #0
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2300      	movs	r3, #0
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2000      	movs	r0, #0
 8000810:	f000 fecc 	bl	80015ac <set_time>
	  HAL_Delay(300);
 8000814:	e7bd      	b.n	8000792 <main+0x3e>
 8000816:	bf00      	nop
 8000818:	20000248 	.word	0x20000248
 800081c:	20000288 	.word	0x20000288
 8000820:	20000100 	.word	0x20000100
 8000824:	20000170 	.word	0x20000170
 8000828:	200000c0 	.word	0x200000c0
 800082c:	200000ac 	.word	0x200000ac
 8000830:	200000c8 	.word	0x200000c8
 8000834:	200000f0 	.word	0x200000f0

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b098      	sub	sp, #96	; 0x60
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000842:	2230      	movs	r2, #48	; 0x30
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f005 fc5c 	bl	8006104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <SystemClock_Config+0x100>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	4a30      	ldr	r2, [pc, #192]	; (8000938 <SystemClock_Config+0x100>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	; 0x40
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <SystemClock_Config+0x100>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000888:	2300      	movs	r3, #0
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <SystemClock_Config+0x104>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000894:	4a29      	ldr	r2, [pc, #164]	; (800093c <SystemClock_Config+0x104>)
 8000896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	4b27      	ldr	r3, [pc, #156]	; (800093c <SystemClock_Config+0x104>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008a8:	230a      	movs	r3, #10
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ac:	2301      	movs	r3, #1
 80008ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b0:	2310      	movs	r3, #16
 80008b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	2302      	movs	r3, #2
 80008ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008bc:	2300      	movs	r3, #0
 80008be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c0:	2308      	movs	r3, #8
 80008c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 84;
 80008c4:	2354      	movs	r3, #84	; 0x54
 80008c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 fea1 	bl	800461c <HAL_RCC_OscConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008e0:	f001 fc28 	bl	8002134 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e4:	230f      	movs	r3, #15
 80008e6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	2102      	movs	r1, #2
 8000900:	4618      	mov	r0, r3
 8000902:	f004 f903 	bl	8004b0c <HAL_RCC_ClockConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800090c:	f001 fc12 	bl	8002134 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000910:	2302      	movs	r3, #2
 8000912:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000918:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	4618      	mov	r0, r3
 8000920:	f004 fab0 	bl	8004e84 <HAL_RCCEx_PeriphCLKConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800092a:	f001 fc03 	bl	8002134 <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3760      	adds	r7, #96	; 0x60
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000952:	4b4b      	ldr	r3, [pc, #300]	; (8000a80 <MX_ADC1_Init+0x140>)
 8000954:	4a4b      	ldr	r2, [pc, #300]	; (8000a84 <MX_ADC1_Init+0x144>)
 8000956:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000958:	4b49      	ldr	r3, [pc, #292]	; (8000a80 <MX_ADC1_Init+0x140>)
 800095a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800095e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000960:	4b47      	ldr	r3, [pc, #284]	; (8000a80 <MX_ADC1_Init+0x140>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000966:	4b46      	ldr	r3, [pc, #280]	; (8000a80 <MX_ADC1_Init+0x140>)
 8000968:	2201      	movs	r2, #1
 800096a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800096c:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <MX_ADC1_Init+0x140>)
 800096e:	2200      	movs	r2, #0
 8000970:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000972:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <MX_ADC1_Init+0x140>)
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800097a:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <MX_ADC1_Init+0x140>)
 800097c:	2200      	movs	r2, #0
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000980:	4b3f      	ldr	r3, [pc, #252]	; (8000a80 <MX_ADC1_Init+0x140>)
 8000982:	4a41      	ldr	r2, [pc, #260]	; (8000a88 <MX_ADC1_Init+0x148>)
 8000984:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <MX_ADC1_Init+0x140>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 800098c:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <MX_ADC1_Init+0x140>)
 800098e:	2207      	movs	r2, #7
 8000990:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000992:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <MX_ADC1_Init+0x140>)
 8000994:	2201      	movs	r2, #1
 8000996:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800099a:	4b39      	ldr	r3, [pc, #228]	; (8000a80 <MX_ADC1_Init+0x140>)
 800099c:	2201      	movs	r2, #1
 800099e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a0:	4837      	ldr	r0, [pc, #220]	; (8000a80 <MX_ADC1_Init+0x140>)
 80009a2:	f001 fe63 	bl	800266c <HAL_ADC_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009ac:	f001 fbc2 	bl	8002134 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009b4:	2301      	movs	r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80009b8:	2301      	movs	r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	4619      	mov	r1, r3
 80009c0:	482f      	ldr	r0, [pc, #188]	; (8000a80 <MX_ADC1_Init+0x140>)
 80009c2:	f002 f8e5 	bl	8002b90 <HAL_ADC_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009cc:	f001 fbb2 	bl	8002134 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4828      	ldr	r0, [pc, #160]	; (8000a80 <MX_ADC1_Init+0x140>)
 80009de:	f002 f8d7 	bl	8002b90 <HAL_ADC_ConfigChannel>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009e8:	f001 fba4 	bl	8002134 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009f0:	2303      	movs	r3, #3
 80009f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	4821      	ldr	r0, [pc, #132]	; (8000a80 <MX_ADC1_Init+0x140>)
 80009fa:	f002 f8c9 	bl	8002b90 <HAL_ADC_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a04:	f001 fb96 	bl	8002134 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	481a      	ldr	r0, [pc, #104]	; (8000a80 <MX_ADC1_Init+0x140>)
 8000a16:	f002 f8bb 	bl	8002b90 <HAL_ADC_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a20:	f001 fb88 	bl	8002134 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a24:	2304      	movs	r3, #4
 8000a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000a28:	2305      	movs	r3, #5
 8000a2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4813      	ldr	r0, [pc, #76]	; (8000a80 <MX_ADC1_Init+0x140>)
 8000a32:	f002 f8ad 	bl	8002b90 <HAL_ADC_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000a3c:	f001 fb7a 	bl	8002134 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a40:	2305      	movs	r3, #5
 8000a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000a44:	2306      	movs	r3, #6
 8000a46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <MX_ADC1_Init+0x140>)
 8000a4e:	f002 f89f 	bl	8002b90 <HAL_ADC_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000a58:	f001 fb6c 	bl	8002134 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000a60:	2307      	movs	r3, #7
 8000a62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_ADC1_Init+0x140>)
 8000a6a:	f002 f891 	bl	8002b90 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000a74:	f001 fb5e 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000170 	.word	0x20000170
 8000a84:	40012000 	.word	0x40012000
 8000a88:	0f000001 	.word	0x0f000001

08000a8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_I2C1_Init+0x50>)
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <MX_I2C1_Init+0x54>)
 8000a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_I2C1_Init+0x50>)
 8000a98:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_I2C1_Init+0x58>)
 8000a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_I2C1_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_I2C1_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_I2C1_Init+0x50>)
 8000aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <MX_I2C1_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_I2C1_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <MX_I2C1_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_I2C1_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_I2C1_Init+0x50>)
 8000aca:	f003 f95b 	bl	8003d84 <HAL_I2C_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ad4:	f001 fb2e 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000110 	.word	0x20000110
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	00061a80 	.word	0x00061a80

08000ae8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b090      	sub	sp, #64	; 0x40
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000b02:	463b      	mov	r3, r7
 8000b04:	2228      	movs	r2, #40	; 0x28
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 fafb 	bl	8006104 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b0e:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <MX_RTC_Init+0x118>)
 8000b10:	4a3c      	ldr	r2, [pc, #240]	; (8000c04 <MX_RTC_Init+0x11c>)
 8000b12:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b14:	4b3a      	ldr	r3, [pc, #232]	; (8000c00 <MX_RTC_Init+0x118>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b1a:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <MX_RTC_Init+0x118>)
 8000b1c:	227f      	movs	r2, #127	; 0x7f
 8000b1e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 285;
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <MX_RTC_Init+0x118>)
 8000b22:	f240 121d 	movw	r2, #285	; 0x11d
 8000b26:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b28:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <MX_RTC_Init+0x118>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b2e:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <MX_RTC_Init+0x118>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b34:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <MX_RTC_Init+0x118>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b3a:	4831      	ldr	r0, [pc, #196]	; (8000c00 <MX_RTC_Init+0x118>)
 8000b3c:	f004 fa90 	bl	8005060 <HAL_RTC_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000b46:	f001 faf5 	bl	8002134 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x17;
 8000b4a:	2317      	movs	r3, #23
 8000b4c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x26;
 8000b50:	2326      	movs	r3, #38	; 0x26
 8000b52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x10;
 8000b56:	2310      	movs	r3, #16
 8000b58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4824      	ldr	r0, [pc, #144]	; (8000c00 <MX_RTC_Init+0x118>)
 8000b6e:	f004 fb08 	bl	8005182 <HAL_RTC_SetTime>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000b78:	f001 fadc 	bl	8002134 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_MAY;
 8000b82:	2305      	movs	r3, #5
 8000b84:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x23;
 8000b88:	2323      	movs	r3, #35	; 0x23
 8000b8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x22;
 8000b8e:	2322      	movs	r3, #34	; 0x22
 8000b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4818      	ldr	r0, [pc, #96]	; (8000c00 <MX_RTC_Init+0x118>)
 8000b9e:	f004 fc0b 	bl	80053b8 <HAL_RTC_SetDate>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000ba8:	f001 fac4 	bl	8002134 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x17;
 8000bac:	2317      	movs	r3, #23
 8000bae:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x26;
 8000bb0:	2326      	movs	r3, #38	; 0x26
 8000bb2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x55;
 8000bb4:	2355      	movs	r3, #85	; 0x55
 8000bb6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000bc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000bc8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8000bce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_SATURDAY;
 8000bd4:	2306      	movs	r3, #6
 8000bd6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_RTC_Init+0x118>)
 8000be8:	f004 fcdc 	bl	80055a4 <HAL_RTC_SetAlarm_IT>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000bf2:	f001 fa9f 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	3740      	adds	r7, #64	; 0x40
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000248 	.word	0x20000248
 8000c04:	40002800 	.word	0x40002800

08000c08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c26:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <MX_TIM1_Init+0x9c>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c2c:	2253      	movs	r2, #83	; 0x53
 8000c2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c50:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c52:	f004 ff1a 	bl	8005a8a <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c5c:	f001 fa6a 	bl	8002134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c6e:	f004 ffb5 	bl	8005bdc <HAL_TIM_ConfigClockSource>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c78:	f001 fa5c 	bl	8002134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c84:	463b      	mov	r3, r7
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c8a:	f005 f989 	bl	8005fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c94:	f001 fa4e 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000288 	.word	0x20000288
 8000ca4:	40010000 	.word	0x40010000

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_DMA_Init+0x3c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <MX_DMA_Init+0x3c>)
 8000cb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_DMA_Init+0x3c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2038      	movs	r0, #56	; 0x38
 8000cd0:	f002 fae3 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cd4:	2038      	movs	r0, #56	; 0x38
 8000cd6:	f002 fafc 	bl	80032d2 <HAL_NVIC_EnableIRQ>

}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b5e      	ldr	r3, [pc, #376]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a5d      	ldr	r2, [pc, #372]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b5b      	ldr	r3, [pc, #364]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b57      	ldr	r3, [pc, #348]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a56      	ldr	r2, [pc, #344]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b54      	ldr	r3, [pc, #336]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b50      	ldr	r3, [pc, #320]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a4f      	ldr	r2, [pc, #316]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b4d      	ldr	r3, [pc, #308]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b49      	ldr	r3, [pc, #292]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a48      	ldr	r2, [pc, #288]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin|line1_relay_Pin|line0_relay_Pin, GPIO_PIN_SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d74:	4842      	ldr	r0, [pc, #264]	; (8000e80 <MX_GPIO_Init+0x198>)
 8000d76:	f002 ffd3 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(wellmotor_relay_GPIO_Port, wellmotor_relay_Pin, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	4841      	ldr	r0, [pc, #260]	; (8000e84 <MX_GPIO_Init+0x19c>)
 8000d80:	f002 ffce 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : tankmotor_relay_Pin line1_relay_Pin line0_relay_Pin */
  GPIO_InitStruct.Pin = tankmotor_relay_Pin|line1_relay_Pin|line0_relay_Pin;
 8000d84:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4838      	ldr	r0, [pc, #224]	; (8000e80 <MX_GPIO_Init+0x198>)
 8000d9e:	f002 fe23 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : light_exti_sens_Pin */
  GPIO_InitStruct.Pin = light_exti_sens_Pin;
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(light_exti_sens_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4834      	ldr	r0, [pc, #208]	; (8000e88 <MX_GPIO_Init+0x1a0>)
 8000db8:	f002 fe16 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : button_up_Pin button_down_Pin */
  GPIO_InitStruct.Pin = button_up_Pin|button_down_Pin;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	482c      	ldr	r0, [pc, #176]	; (8000e84 <MX_GPIO_Init+0x19c>)
 8000dd2:	f002 fe09 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : wellmotor_relay_Pin */
  GPIO_InitStruct.Pin = wellmotor_relay_Pin;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(wellmotor_relay_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4825      	ldr	r0, [pc, #148]	; (8000e84 <MX_GPIO_Init+0x19c>)
 8000dee:	f002 fdfb 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ac_source_Pin */
  GPIO_InitStruct.Pin = ac_source_Pin;
 8000df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ac_source_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	481e      	ldr	r0, [pc, #120]	; (8000e84 <MX_GPIO_Init+0x19c>)
 8000e0a:	f002 fded 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_press_Pin */
  GPIO_InitStruct.Pin = button_press_Pin;
 8000e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_press_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4818      	ldr	r0, [pc, #96]	; (8000e88 <MX_GPIO_Init+0x1a0>)
 8000e26:	f002 fddf 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : dht_in_Pin */
  GPIO_InitStruct.Pin = dht_in_Pin;
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(dht_in_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4811      	ldr	r0, [pc, #68]	; (8000e84 <MX_GPIO_Init+0x19c>)
 8000e3e:	f002 fdd3 	bl	80039e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2006      	movs	r0, #6
 8000e48:	f002 fa27 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e4c:	2006      	movs	r0, #6
 8000e4e:	f002 fa40 	bl	80032d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	2007      	movs	r0, #7
 8000e58:	f002 fa1f 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e5c:	2007      	movs	r0, #7
 8000e5e:	f002 fa38 	bl	80032d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2028      	movs	r0, #40	; 0x28
 8000e68:	f002 fa17 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e6c:	2028      	movs	r0, #40	; 0x28
 8000e6e:	f002 fa30 	bl	80032d2 <HAL_NVIC_EnableIRQ>

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020400 	.word	0x40020400
 8000e88:	40020000 	.word	0x40020000

08000e8c <delay_us>:

/* USER CODE BEGIN 4 */

void delay_us (uint16_t us)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <delay_us+0x30>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000e9e:	bf00      	nop
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <delay_us+0x30>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d3f9      	bcc.n	8000ea0 <delay_us+0x14>
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000288 	.word	0x20000288

08000ec0 <HAL_ADC_ConvCpltCallback>:


/*-----------------INTERRUPTS BEGIN-----------------------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a71      	ldr	r2, [pc, #452]	; (8001090 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	f040 80da 	bne.w	8001086 <HAL_ADC_ConvCpltCallback+0x1c6>
		for(int x =0; x<adc_moist_number-1; x++){
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e042      	b.n	8000f5e <HAL_ADC_ConvCpltCallback+0x9e>
			adc_result_dma[x] = (adc_result_dma[x]> 2730) ? 2730:adc_result_dma[x];
 8000ed8:	4a6e      	ldr	r2, [pc, #440]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d805      	bhi.n	8000ef6 <HAL_ADC_ConvCpltCallback+0x36>
 8000eea:	4a6a      	ldr	r2, [pc, #424]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	e001      	b.n	8000efa <HAL_ADC_ConvCpltCallback+0x3a>
 8000ef6:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8000efa:	4966      	ldr	r1, [pc, #408]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_result_dma[x] = (adc_result_dma[x]< 1260) ? 1260:adc_result_dma[x];
 8000f02:	4a64      	ldr	r2, [pc, #400]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	f240 42eb 	movw	r2, #1259	; 0x4eb
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d905      	bls.n	8000f20 <HAL_ADC_ConvCpltCallback+0x60>
 8000f14:	4a5f      	ldr	r2, [pc, #380]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	e001      	b.n	8000f24 <HAL_ADC_ConvCpltCallback+0x64>
 8000f20:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8000f24:	495b      	ldr	r1, [pc, #364]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_result_percentage[x] = 100-((adc_result_dma[x]-1260)*100/1470);
 8000f2c:	4a59      	ldr	r2, [pc, #356]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8000f3a:	2264      	movs	r2, #100	; 0x64
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	4a55      	ldr	r2, [pc, #340]	; (8001098 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000f42:	fb82 1203 	smull	r1, r2, r2, r3
 8000f46:	11d2      	asrs	r2, r2, #7
 8000f48:	17db      	asrs	r3, r3, #31
 8000f4a:	1a9b      	subs	r3, r3, r2
 8000f4c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000f50:	4952      	ldr	r1, [pc, #328]	; (800109c <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int x =0; x<adc_moist_number-1; x++){
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	2304      	movs	r3, #4
 8000f60:	3b01      	subs	r3, #1
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dbb7      	blt.n	8000ed8 <HAL_ADC_ConvCpltCallback+0x18>
		}
		//Different Moisture Sensor
		adc_result_dma[3] = (adc_result_dma[3]> 3800) ? 3800:adc_result_dma[3];
 8000f68:	4b4a      	ldr	r3, [pc, #296]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000f6a:	88db      	ldrh	r3, [r3, #6]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	f640 62d8 	movw	r2, #3800	; 0xed8
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d803      	bhi.n	8000f7e <HAL_ADC_ConvCpltCallback+0xbe>
 8000f76:	4b47      	ldr	r3, [pc, #284]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000f78:	88db      	ldrh	r3, [r3, #6]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	e001      	b.n	8000f82 <HAL_ADC_ConvCpltCallback+0xc2>
 8000f7e:	f640 63d8 	movw	r3, #3800	; 0xed8
 8000f82:	4a44      	ldr	r2, [pc, #272]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000f84:	80d3      	strh	r3, [r2, #6]
		adc_result_dma[3] = (adc_result_dma[3]< 900) ? 900:adc_result_dma[3];
 8000f86:	4b43      	ldr	r3, [pc, #268]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000f88:	88db      	ldrh	r3, [r3, #6]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000f90:	d303      	bcc.n	8000f9a <HAL_ADC_ConvCpltCallback+0xda>
 8000f92:	4b40      	ldr	r3, [pc, #256]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000f94:	88db      	ldrh	r3, [r3, #6]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	e001      	b.n	8000f9e <HAL_ADC_ConvCpltCallback+0xde>
 8000f9a:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000f9e:	4a3d      	ldr	r2, [pc, #244]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000fa0:	80d3      	strh	r3, [r2, #6]
		adc_result_percentage[3] = 100-((adc_result_dma[3]-900)*100/2900);
 8000fa2:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000fa4:	88db      	ldrh	r3, [r3, #6]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8000fac:	4a3c      	ldr	r2, [pc, #240]	; (80010a0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8000fae:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb2:	441a      	add	r2, r3
 8000fb4:	1112      	asrs	r2, r2, #4
 8000fb6:	17db      	asrs	r3, r3, #31
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	3364      	adds	r3, #100	; 0x64
 8000fbc:	4a37      	ldr	r2, [pc, #220]	; (800109c <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000fbe:	60d3      	str	r3, [r2, #12]

		//Water Tank Refill Algorithm
		if(adc_result_dma[5] < 3000){
 8000fc0:	4b34      	ldr	r3, [pc, #208]	; (8001094 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000fc2:	895b      	ldrh	r3, [r3, #10]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d805      	bhi.n	8000fda <HAL_ADC_ConvCpltCallback+0x11a>
			HAL_GPIO_WritePin(GPIOA, wellmotor_relay_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4834      	ldr	r0, [pc, #208]	; (80010a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000fd4:	f002 fea4 	bl	8003d20 <HAL_GPIO_WritePin>
 8000fd8:	e004      	b.n	8000fe4 <HAL_ADC_ConvCpltCallback+0x124>
		}else{
			HAL_GPIO_WritePin(GPIOA, wellmotor_relay_Pin, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2104      	movs	r1, #4
 8000fde:	4831      	ldr	r0, [pc, #196]	; (80010a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000fe0:	f002 fe9e 	bl	8003d20 <HAL_GPIO_WritePin>
		}

		//Produces Line and Total Average : adc_line_avg and adc_total_moist_avg
		adc_total_moist_avg = 0;
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
		int y =0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
		int per_line_offset = moist_per_line[0];
 8000fee:	2302      	movs	r3, #2
 8000ff0:	60fb      	str	r3, [r7, #12]
		for(int x = 0; x < adc_line_number; x++){
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	e03b      	b.n	8001070 <HAL_ADC_ConvCpltCallback+0x1b0>
			adc_line_avg[x] = 0;
 8000ff8:	4a2c      	ldr	r2, [pc, #176]	; (80010ac <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(; y < per_line_offset; y++){
 8001002:	e00f      	b.n	8001024 <HAL_ADC_ConvCpltCallback+0x164>
				adc_line_avg[x] += adc_result_percentage[y];
 8001004:	4a29      	ldr	r2, [pc, #164]	; (80010ac <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800100c:	4923      	ldr	r1, [pc, #140]	; (800109c <HAL_ADC_ConvCpltCallback+0x1dc>)
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001014:	441a      	add	r2, r3
 8001016:	4925      	ldr	r1, [pc, #148]	; (80010ac <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(; y < per_line_offset; y++){
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	3301      	adds	r3, #1
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbeb      	blt.n	8001004 <HAL_ADC_ConvCpltCallback+0x144>
			}
			adc_line_avg[x] /= moist_per_line[x];
 800102c:	4a1f      	ldr	r2, [pc, #124]	; (80010ac <HAL_ADC_ConvCpltCallback+0x1ec>)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001034:	491e      	ldr	r1, [pc, #120]	; (80010b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800103c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001040:	491a      	ldr	r1, [pc, #104]	; (80010ac <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		   per_line_offset += moist_per_line[x+1];
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	3301      	adds	r3, #1
 800104c:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	4413      	add	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
		   adc_total_moist_avg += adc_line_avg[x];
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <HAL_ADC_ConvCpltCallback+0x1ec>)
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4413      	add	r3, r2
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001068:	6013      	str	r3, [r2, #0]
		for(int x = 0; x < adc_line_number; x++){
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3301      	adds	r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	2202      	movs	r2, #2
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	4293      	cmp	r3, r2
 8001076:	dbbf      	blt.n	8000ff8 <HAL_ADC_ConvCpltCallback+0x138>
		}
		adc_total_moist_avg /= adc_line_number;
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2202      	movs	r2, #2
 800107e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001082:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001084:	6013      	str	r3, [r2, #0]
	}
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000170 	.word	0x20000170
 8001094:	20000100 	.word	0x20000100
 8001098:	164a893b 	.word	0x164a893b
 800109c:	200001cc 	.word	0x200001cc
 80010a0:	8d3dcb09 	.word	0x8d3dcb09
 80010a4:	40020000 	.word	0x40020000
 80010a8:	200000a8 	.word	0x200000a8
 80010ac:	200000a0 	.word	0x200000a0
 80010b0:	08006b90 	.word	0x08006b90

080010b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
	menu_lcd_refresh = 1;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_GPIO_EXTI_Callback+0x48>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
    if(GPIO_Pin == button_up_Pin){
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d103      	bne.n	80010d2 <HAL_GPIO_EXTI_Callback+0x1e>
    	menu_up = 1;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_GPIO_EXTI_Callback+0x4c>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
    }else if(GPIO_Pin == button_down_Pin){
    	menu_down = 1;
    }else if(GPIO_Pin == button_press_Pin){
    	menu_click = 1;
    }
}
 80010d0:	e00d      	b.n	80010ee <HAL_GPIO_EXTI_Callback+0x3a>
    }else if(GPIO_Pin == button_down_Pin){
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d103      	bne.n	80010e0 <HAL_GPIO_EXTI_Callback+0x2c>
    	menu_down = 1;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_GPIO_EXTI_Callback+0x50>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]
}
 80010de:	e006      	b.n	80010ee <HAL_GPIO_EXTI_Callback+0x3a>
    }else if(GPIO_Pin == button_press_Pin){
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e6:	d102      	bne.n	80010ee <HAL_GPIO_EXTI_Callback+0x3a>
    	menu_click = 1;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_GPIO_EXTI_Callback+0x54>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200000ac 	.word	0x200000ac
 8001100:	200000b4 	.word	0x200000b4
 8001104:	200000b8 	.word	0x200000b8
 8001108:	200000b0 	.word	0x200000b0

0800110c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	if(global_planner_active){
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_RTC_AlarmAEventCallback+0x38>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00e      	beq.n	800113a <HAL_RTC_AlarmAEventCallback+0x2e>
		global_planner_start = 1;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_RTC_AlarmAEventCallback+0x3c>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]
		mode_planner(0, global_planner_start);
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4619      	mov	r1, r3
 8001128:	2000      	movs	r0, #0
 800112a:	f000 f981 	bl	8001430 <mode_planner>
		set_alarm(0,0,0,0);
 800112e:	2300      	movs	r3, #0
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2000      	movs	r0, #0
 8001136:	f000 fa71 	bl	800161c <set_alarm>
	}
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000010 	.word	0x20000010
 8001148:	200000c8 	.word	0x200000c8

0800114c <Set_Pin_Output>:
/*-----------------INTERRUPTS END-----------------------*/


/*-----------------DHT11 BEGIN--------------------------*/
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4619      	mov	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f002 fc34 	bl	80039e8 <HAL_GPIO_Init>
}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80011a4:	887b      	ldrh	r3, [r7, #2]
 80011a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4619      	mov	r1, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f002 fc16 	bl	80039e8 <HAL_GPIO_Init>
}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <DHT11_Start>:

void DHT11_Start (void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80011c8:	2120      	movs	r1, #32
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <DHT11_Start+0x3c>)
 80011cc:	f7ff ffbe 	bl	800114c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80011d0:	2200      	movs	r2, #0
 80011d2:	2120      	movs	r1, #32
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <DHT11_Start+0x3c>)
 80011d6:	f002 fda3 	bl	8003d20 <HAL_GPIO_WritePin>
	delay_us (18000);   // wait for 18ms
 80011da:	f244 6050 	movw	r0, #18000	; 0x4650
 80011de:	f7ff fe55 	bl	8000e8c <delay_us>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80011e2:	2201      	movs	r2, #1
 80011e4:	2120      	movs	r1, #32
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <DHT11_Start+0x3c>)
 80011e8:	f002 fd9a 	bl	8003d20 <HAL_GPIO_WritePin>
    delay_us (20);   // wait for 20us
 80011ec:	2014      	movs	r0, #20
 80011ee:	f7ff fe4d 	bl	8000e8c <delay_us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80011f2:	2120      	movs	r1, #32
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <DHT11_Start+0x3c>)
 80011f6:	f7ff ffc7 	bl	8001188 <Set_Pin_Input>
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40020400 	.word	0x40020400

08001204 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	71fb      	strb	r3, [r7, #7]
	delay_us (40);
 800120e:	2028      	movs	r0, #40	; 0x28
 8001210:	f7ff fe3c 	bl	8000e8c <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001214:	2120      	movs	r1, #32
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <DHT11_Check_Response+0x58>)
 8001218:	f002 fd6a 	bl	8003cf0 <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10e      	bne.n	8001240 <DHT11_Check_Response+0x3c>
	{
		delay_us (80);
 8001222:	2050      	movs	r0, #80	; 0x50
 8001224:	f7ff fe32 	bl	8000e8c <delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001228:	2120      	movs	r1, #32
 800122a:	480c      	ldr	r0, [pc, #48]	; (800125c <DHT11_Check_Response+0x58>)
 800122c:	f002 fd60 	bl	8003cf0 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <DHT11_Check_Response+0x38>
 8001236:	2301      	movs	r3, #1
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	e001      	b.n	8001240 <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 800123c:	23ff      	movs	r3, #255	; 0xff
 800123e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8001240:	bf00      	nop
 8001242:	2120      	movs	r1, #32
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <DHT11_Check_Response+0x58>)
 8001246:	f002 fd53 	bl	8003cf0 <HAL_GPIO_ReadPin>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f8      	bne.n	8001242 <DHT11_Check_Response+0x3e>

	return Response;
 8001250:	79fb      	ldrb	r3, [r7, #7]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020400 	.word	0x40020400

08001260 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001266:	2300      	movs	r3, #0
 8001268:	71bb      	strb	r3, [r7, #6]
 800126a:	e037      	b.n	80012dc <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 800126c:	bf00      	nop
 800126e:	2120      	movs	r1, #32
 8001270:	481e      	ldr	r0, [pc, #120]	; (80012ec <DHT11_Read+0x8c>)
 8001272:	f002 fd3d 	bl	8003cf0 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f8      	beq.n	800126e <DHT11_Read+0xe>
		delay_us (40);   // wait for 40 us
 800127c:	2028      	movs	r0, #40	; 0x28
 800127e:	f7ff fe05 	bl	8000e8c <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001282:	2120      	movs	r1, #32
 8001284:	4819      	ldr	r0, [pc, #100]	; (80012ec <DHT11_Read+0x8c>)
 8001286:	f002 fd33 	bl	8003cf0 <HAL_GPIO_ReadPin>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10e      	bne.n	80012ae <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2201      	movs	r2, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	b25b      	sxtb	r3, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	b25a      	sxtb	r2, r3
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	4013      	ands	r3, r2
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	e00b      	b.n	80012c6 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	f1c3 0307 	rsb	r3, r3, #7
 80012b4:	2201      	movs	r2, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	b25a      	sxtb	r2, r3
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80012c6:	bf00      	nop
 80012c8:	2120      	movs	r1, #32
 80012ca:	4808      	ldr	r0, [pc, #32]	; (80012ec <DHT11_Read+0x8c>)
 80012cc:	f002 fd10 	bl	8003cf0 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f8      	bne.n	80012c8 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	3301      	adds	r3, #1
 80012da:	71bb      	strb	r3, [r7, #6]
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	2b07      	cmp	r3, #7
 80012e0:	d9c4      	bls.n	800126c <DHT11_Read+0xc>
	}
	return i;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40020400 	.word	0x40020400

080012f0 <DHT11_get_value>:

void DHT11_get_value(){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	DHT11_Start();
 80012f4:	f7ff ff66 	bl	80011c4 <DHT11_Start>
	Presence = DHT11_Check_Response();
 80012f8:	f7ff ff84 	bl	8001204 <DHT11_Check_Response>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <DHT11_get_value+0x8c>)
 8001302:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read ();
 8001304:	f7ff ffac 	bl	8001260 <DHT11_Read>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <DHT11_get_value+0x90>)
 800130e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read ();
 8001310:	f7ff ffa6 	bl	8001260 <DHT11_Read>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <DHT11_get_value+0x94>)
 800131a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read ();
 800131c:	f7ff ffa0 	bl	8001260 <DHT11_Read>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <DHT11_get_value+0x98>)
 8001326:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read ();
 8001328:	f7ff ff9a 	bl	8001260 <DHT11_Read>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <DHT11_get_value+0x9c>)
 8001332:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 8001334:	f7ff ff94 	bl	8001260 <DHT11_Read>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <DHT11_get_value+0xa0>)
 800133e:	801a      	strh	r2, [r3, #0]
	TEMP = Temp_byte1;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <DHT11_get_value+0x98>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <DHT11_get_value+0xa4>)
 8001348:	801a      	strh	r2, [r3, #0]
	RH = Rh_byte1;
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <DHT11_get_value+0x90>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b29a      	uxth	r2, r3
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <DHT11_get_value+0xa8>)
 8001352:	801a      	strh	r2, [r3, #0]
	inst_temperature = (float) TEMP;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <DHT11_get_value+0xa4>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <DHT11_get_value+0xac>)
 8001362:	edc3 7a00 	vstr	s15, [r3]
	inst_humidity = (float) RH;
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <DHT11_get_value+0xa8>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <DHT11_get_value+0xb0>)
 8001374:	edc3 7a00 	vstr	s15, [r3]
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200000ec 	.word	0x200000ec
 8001380:	20000164 	.word	0x20000164
 8001384:	20000284 	.word	0x20000284
 8001388:	200001b8 	.word	0x200001b8
 800138c:	20000308 	.word	0x20000308
 8001390:	20000302 	.word	0x20000302
 8001394:	2000016e 	.word	0x2000016e
 8001398:	20000166 	.word	0x20000166
 800139c:	200000e4 	.word	0x200000e4
 80013a0:	200000e8 	.word	0x200000e8

080013a4 <mode_manual>:

/*-----------------DHT11 END----------------------------*/

/*-----------------MODE FUNCTIONS BEGIN-----------------*/
void mode_manual(int start){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	if(start){
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d01b      	beq.n	80013ea <mode_manual+0x46>
		  HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b8:	481b      	ldr	r0, [pc, #108]	; (8001428 <mode_manual+0x84>)
 80013ba:	f002 fcb1 	bl	8003d20 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, wellmotor_relay_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2104      	movs	r1, #4
 80013c2:	481a      	ldr	r0, [pc, #104]	; (800142c <mode_manual+0x88>)
 80013c4:	f002 fcac 	bl	8003d20 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80013c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013cc:	f001 f92a 	bl	8002624 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, line0_relay_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <mode_manual+0x84>)
 80013d8:	f002 fca2 	bl	8003d20 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, line1_relay_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e2:	4811      	ldr	r0, [pc, #68]	; (8001428 <mode_manual+0x84>)
 80013e4:	f002 fc9c 	bl	8003d20 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, wellmotor_relay_Pin, GPIO_PIN_SET);
		  HAL_Delay(1000);
		  HAL_GPIO_WritePin(GPIOC, line0_relay_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOC, line1_relay_Pin, GPIO_PIN_SET);
	}
}
 80013e8:	e01a      	b.n	8001420 <mode_manual+0x7c>
		  HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f0:	480d      	ldr	r0, [pc, #52]	; (8001428 <mode_manual+0x84>)
 80013f2:	f002 fc95 	bl	8003d20 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, wellmotor_relay_Pin, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2104      	movs	r1, #4
 80013fa:	480c      	ldr	r0, [pc, #48]	; (800142c <mode_manual+0x88>)
 80013fc:	f002 fc90 	bl	8003d20 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8001400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001404:	f001 f90e 	bl	8002624 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, line0_relay_Pin, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <mode_manual+0x84>)
 8001410:	f002 fc86 	bl	8003d20 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, line1_relay_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <mode_manual+0x84>)
 800141c:	f002 fc80 	bl	8003d20 <HAL_GPIO_WritePin>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40020800 	.word	0x40020800
 800142c:	40020400 	.word	0x40020400

08001430 <mode_planner>:

void mode_planner(int auto_mode_flag, int start){
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	if(auto_mode_flag == 0 && start == 1){
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	f040 80a1 	bne.w	8001584 <mode_planner+0x154>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	f040 809d 	bne.w	8001584 <mode_planner+0x154>
		HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001450:	484e      	ldr	r0, [pc, #312]	; (800158c <mode_planner+0x15c>)
 8001452:	f002 fc65 	bl	8003d20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, wellmotor_relay_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2104      	movs	r1, #4
 800145a:	484d      	ldr	r0, [pc, #308]	; (8001590 <mode_planner+0x160>)
 800145c:	f002 fc60 	bl	8003d20 <HAL_GPIO_WritePin>
		delay_us(1000);
 8001460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001464:	f7ff fd12 	bl	8000e8c <delay_us>
		HAL_GPIO_WritePin(GPIOC, line0_relay_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800146e:	4847      	ldr	r0, [pc, #284]	; (800158c <mode_planner+0x15c>)
 8001470:	f002 fc56 	bl	8003d20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, line1_relay_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800147a:	4844      	ldr	r0, [pc, #272]	; (800158c <mode_planner+0x15c>)
 800147c:	f002 fc50 	bl	8003d20 <HAL_GPIO_WritePin>
		for(int x = 0; x < adc_line_number; x++){
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	e041      	b.n	800150a <mode_planner+0xda>
			//for(int x = 0; x < moist_per_line[a]; x++){
			if(adc_line_avg[x] >= planner_line_compare[x]){
 8001486:	4a43      	ldr	r2, [pc, #268]	; (8001594 <mode_planner+0x164>)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800148e:	4942      	ldr	r1, [pc, #264]	; (8001598 <mode_planner+0x168>)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001496:	429a      	cmp	r2, r3
 8001498:	db1a      	blt.n	80014d0 <mode_planner+0xa0>
				relay_set[x] = 1;	//Debug
 800149a:	4a40      	ldr	r2, [pc, #256]	; (800159c <mode_planner+0x16c>)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2101      	movs	r1, #1
 80014a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				relay_end_flag = (relay_end_flag == 2) ? 2:relay_end_flag+1;
 80014a4:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <mode_planner+0x170>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d003      	beq.n	80014b4 <mode_planner+0x84>
 80014ac:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <mode_planner+0x170>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	e000      	b.n	80014b6 <mode_planner+0x86>
 80014b4:	2302      	movs	r3, #2
 80014b6:	4a3a      	ldr	r2, [pc, #232]	; (80015a0 <mode_planner+0x170>)
 80014b8:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOC, line_relays[x], GPIO_PIN_SET);
 80014ba:	4a3a      	ldr	r2, [pc, #232]	; (80015a4 <mode_planner+0x174>)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	2201      	movs	r2, #1
 80014c6:	4619      	mov	r1, r3
 80014c8:	4830      	ldr	r0, [pc, #192]	; (800158c <mode_planner+0x15c>)
 80014ca:	f002 fc29 	bl	8003d20 <HAL_GPIO_WritePin>
 80014ce:	e019      	b.n	8001504 <mode_planner+0xd4>
			}else{
				relay_set[x] = 0;	//Debug
 80014d0:	4a32      	ldr	r2, [pc, #200]	; (800159c <mode_planner+0x16c>)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2100      	movs	r1, #0
 80014d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				relay_end_flag = (relay_end_flag) ? relay_end_flag-1:0;
 80014da:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <mode_planner+0x170>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <mode_planner+0xba>
 80014e2:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <mode_planner+0x170>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	e000      	b.n	80014ec <mode_planner+0xbc>
 80014ea:	2300      	movs	r3, #0
 80014ec:	4a2c      	ldr	r2, [pc, #176]	; (80015a0 <mode_planner+0x170>)
 80014ee:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOC, line_relays[x], GPIO_PIN_RESET);
 80014f0:	4a2c      	ldr	r2, [pc, #176]	; (80015a4 <mode_planner+0x174>)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2200      	movs	r2, #0
 80014fc:	4619      	mov	r1, r3
 80014fe:	4823      	ldr	r0, [pc, #140]	; (800158c <mode_planner+0x15c>)
 8001500:	f002 fc0e 	bl	8003d20 <HAL_GPIO_WritePin>
		for(int x = 0; x < adc_line_number; x++){
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3301      	adds	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	2202      	movs	r2, #2
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4293      	cmp	r3, r2
 8001510:	dbb9      	blt.n	8001486 <mode_planner+0x56>
			}
			//}
		}
		if(relay_end_flag == 2){
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <mode_planner+0x170>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d134      	bne.n	8001584 <mode_planner+0x154>
			for(int a = 0; a < 2; a++){
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	e007      	b.n	8001530 <mode_planner+0x100>
				relay_set[a] = 0;	//Debug
 8001520:	4a1e      	ldr	r2, [pc, #120]	; (800159c <mode_planner+0x16c>)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2100      	movs	r1, #0
 8001526:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int a = 0; a < 2; a++){
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3301      	adds	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b01      	cmp	r3, #1
 8001534:	ddf4      	ble.n	8001520 <mode_planner+0xf0>
			}
			global_planner_start = 0;
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <mode_planner+0x178>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
			relay_end_flag = 0;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <mode_planner+0x170>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, tankmotor_relay_Pin, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001548:	4810      	ldr	r0, [pc, #64]	; (800158c <mode_planner+0x15c>)
 800154a:	f002 fbe9 	bl	8003d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, wellmotor_relay_Pin, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	2104      	movs	r1, #4
 8001552:	480f      	ldr	r0, [pc, #60]	; (8001590 <mode_planner+0x160>)
 8001554:	f002 fbe4 	bl	8003d20 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001558:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800155c:	f001 f862 	bl	8002624 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, line0_relay_Pin, GPIO_PIN_SET);
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001566:	4809      	ldr	r0, [pc, #36]	; (800158c <mode_planner+0x15c>)
 8001568:	f002 fbda 	bl	8003d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, line1_relay_Pin, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <mode_planner+0x15c>)
 8001574:	f002 fbd4 	bl	8003d20 <HAL_GPIO_WritePin>

			//Alarm for the Next Day
			set_alarm(0,0,0,0);
 8001578:	2300      	movs	r3, #0
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2000      	movs	r0, #0
 8001580:	f000 f84c 	bl	800161c <set_alarm>

		}
	}
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40020800 	.word	0x40020800
 8001590:	40020400 	.word	0x40020400
 8001594:	200000a0 	.word	0x200000a0
 8001598:	20000000 	.word	0x20000000
 800159c:	20000268 	.word	0x20000268
 80015a0:	200000c4 	.word	0x200000c4
 80015a4:	20000008 	.word	0x20000008
 80015a8:	200000c8 	.word	0x200000c8

080015ac <set_time>:
/*-----------------MODE FUNCTIONS END-----------------*/


/*-----------------RTC FUNCTIONS BEGIN-----------------*/

void set_time (int set_hours, int set_minutes, int set_seconds, int set_weekday, int set_month, int set_date, int set_year){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
	RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
	sTime.Hours = 0x17;
 80015ba:	2317      	movs	r3, #23
 80015bc:	753b      	strb	r3, [r7, #20]
	  sTime.Minutes = 0x26;
 80015be:	2326      	movs	r3, #38	; 0x26
 80015c0:	757b      	strb	r3, [r7, #21]
	  sTime.Seconds = 0x30;
 80015c2:	2330      	movs	r3, #48	; 0x30
 80015c4:	75bb      	strb	r3, [r7, #22]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	2201      	movs	r2, #1
 80015d4:	4619      	mov	r1, r3
 80015d6:	4810      	ldr	r0, [pc, #64]	; (8001618 <set_time+0x6c>)
 80015d8:	f003 fdd3 	bl	8005182 <HAL_RTC_SetTime>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <set_time+0x3a>
	  {
	    Error_Handler();
 80015e2:	f000 fda7 	bl	8002134 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80015e6:	2302      	movs	r3, #2
 80015e8:	743b      	strb	r3, [r7, #16]
	  sDate.Month = RTC_MONTH_MAY;
 80015ea:	2305      	movs	r3, #5
 80015ec:	747b      	strb	r3, [r7, #17]
	  sDate.Date = 0x24;
 80015ee:	2324      	movs	r3, #36	; 0x24
 80015f0:	74bb      	strb	r3, [r7, #18]
	  sDate.Year = 0x22;
 80015f2:	2322      	movs	r3, #34	; 0x22
 80015f4:	74fb      	strb	r3, [r7, #19]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	2201      	movs	r2, #1
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <set_time+0x6c>)
 8001600:	f003 feda 	bl	80053b8 <HAL_RTC_SetDate>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <set_time+0x62>
	  {
	    Error_Handler();
 800160a:	f000 fd93 	bl	8002134 <Error_Handler>
  sDate.Date = set_date;
  sDate.Year = set_year;
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK){}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
  */
}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000248 	.word	0x20000248

0800161c <set_alarm>:

void set_alarm(int alarm, int hours_hex, int mins_hex, int sec_hex){
 800161c:	b580      	push	{r7, lr}
 800161e:	b08e      	sub	sp, #56	; 0x38
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
	RTC_AlarmTypeDef sAlarm = {0};
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	2228      	movs	r2, #40	; 0x28
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fd66 	bl	8006104 <memset>
	/*
	sAlarm.AlarmTime.Hours = hours_hex;
	sAlarm.AlarmTime.Minutes = mins_hex;
	sAlarm.AlarmTime.Seconds = sec_hex;
	*/
	sAlarm.AlarmTime.Hours = 0x17;
 8001638:	2317      	movs	r3, #23
 800163a:	743b      	strb	r3, [r7, #16]
	sAlarm.AlarmTime.Minutes = 0x26;
 800163c:	2326      	movs	r3, #38	; 0x26
 800163e:	747b      	strb	r3, [r7, #17]
	sAlarm.AlarmTime.Seconds = 0x45;
 8001640:	2345      	movs	r3, #69	; 0x45
 8001642:	74bb      	strb	r3, [r7, #18]

	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001650:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001656:	2300      	movs	r3, #0
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800165a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_SATURDAY;
 8001660:	2306      	movs	r3, #6
 8001662:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sAlarm.Alarm = RTC_ALARM_A;
 8001666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	2201      	movs	r2, #1
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <set_alarm+0x70>)
 8001676:	f003 ff95 	bl	80055a4 <HAL_RTC_SetAlarm_IT>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <set_alarm+0x68>
	{
	Error_Handler();
 8001680:	f000 fd58 	bl	8002134 <Error_Handler>
	}
}
 8001684:	bf00      	nop
 8001686:	3738      	adds	r7, #56	; 0x38
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000248 	.word	0x20000248

08001690 <get_time>:

void get_time(){
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8001696:	2200      	movs	r2, #0
 8001698:	4914      	ldr	r1, [pc, #80]	; (80016ec <get_time+0x5c>)
 800169a:	4815      	ldr	r0, [pc, #84]	; (80016f0 <get_time+0x60>)
 800169c:	f003 fe2e 	bl	80052fc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 80016a0:	2200      	movs	r2, #0
 80016a2:	4914      	ldr	r1, [pc, #80]	; (80016f4 <get_time+0x64>)
 80016a4:	4812      	ldr	r0, [pc, #72]	; (80016f0 <get_time+0x60>)
 80016a6:	f003 ff2e 	bl	8005506 <HAL_RTC_GetDate>
	sprintf(timeBuff,"%d,%d.%d", currTime.Hours, currTime.Minutes, currTime.Seconds);
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <get_time+0x5c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <get_time+0x5c>)
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	4619      	mov	r1, r3
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <get_time+0x5c>)
 80016b8:	789b      	ldrb	r3, [r3, #2]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	460b      	mov	r3, r1
 80016be:	490e      	ldr	r1, [pc, #56]	; (80016f8 <get_time+0x68>)
 80016c0:	480e      	ldr	r0, [pc, #56]	; (80016fc <get_time+0x6c>)
 80016c2:	f004 fd27 	bl	8006114 <siprintf>
	sprintf(dateBuff,"%02d-%02d-%2d",currDate.Date, currDate.Month, 2000 + currDate.Year);
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <get_time+0x64>)
 80016c8:	789b      	ldrb	r3, [r3, #2]
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <get_time+0x64>)
 80016ce:	785b      	ldrb	r3, [r3, #1]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <get_time+0x64>)
 80016d4:	78db      	ldrb	r3, [r3, #3]
 80016d6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	460b      	mov	r3, r1
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <get_time+0x70>)
 80016e0:	4808      	ldr	r0, [pc, #32]	; (8001704 <get_time+0x74>)
 80016e2:	f004 fd17 	bl	8006114 <siprintf>
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200000cc 	.word	0x200000cc
 80016f0:	20000248 	.word	0x20000248
 80016f4:	200000e0 	.word	0x200000e0
 80016f8:	08006a0c 	.word	0x08006a0c
 80016fc:	200002e8 	.word	0x200002e8
 8001700:	08006a18 	.word	0x08006a18
 8001704:	20000270 	.word	0x20000270

08001708 <lcd_initial_message>:

/*-----------------RTC FUNCTIONS END-----------------*/

/*-----------------MENU BEGIN-------------------------*/
void lcd_initial_message(){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	lcd_init ();
 800170c:	f7fe ffca 	bl	80006a4 <lcd_init>
	lcd_send_string ("ECODROP");
 8001710:	4811      	ldr	r0, [pc, #68]	; (8001758 <lcd_initial_message+0x50>)
 8001712:	f7ff f809 	bl	8000728 <lcd_send_string>
	HAL_Delay(500);
 8001716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800171a:	f000 ff83 	bl	8002624 <HAL_Delay>
	lcd_put_cur(1, 0);
 800171e:	2100      	movs	r1, #0
 8001720:	2001      	movs	r0, #1
 8001722:	f7fe ffa0 	bl	8000666 <lcd_put_cur>
	lcd_send_string("Irrigation");
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <lcd_initial_message+0x54>)
 8001728:	f7fe fffe 	bl	8000728 <lcd_send_string>
	HAL_Delay(1000);
 800172c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001730:	f000 ff78 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x01);
 8001734:	2001      	movs	r0, #1
 8001736:	f7fe ff1f 	bl	8000578 <lcd_send_cmd>
	HAL_Delay(100);
 800173a:	2064      	movs	r0, #100	; 0x64
 800173c:	f000 ff72 	bl	8002624 <HAL_Delay>
	lcd_init ();
 8001740:	f7fe ffb0 	bl	80006a4 <lcd_init>

	lcd_put_cur(1, 0);
 8001744:	2100      	movs	r1, #0
 8001746:	2001      	movs	r0, #1
 8001748:	f7fe ff8d 	bl	8000666 <lcd_put_cur>
	lcd_send_string("  Planner Mode  ");
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <lcd_initial_message+0x58>)
 800174e:	f7fe ffeb 	bl	8000728 <lcd_send_string>

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	08006a28 	.word	0x08006a28
 800175c:	08006a30 	.word	0x08006a30
 8001760:	08006a3c 	.word	0x08006a3c

08001764 <menu_func>:

void menu_func(int refresh, int reset){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	if(refresh){
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 84cd 	beq.w	8002110 <menu_func+0x9ac>
		current_page = (reset) ? 0:current_page;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <menu_func+0x1e>
 800177c:	4bb0      	ldr	r3, [pc, #704]	; (8001a40 <menu_func+0x2dc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	e000      	b.n	8001784 <menu_func+0x20>
 8001782:	2300      	movs	r3, #0
 8001784:	4aae      	ldr	r2, [pc, #696]	; (8001a40 <menu_func+0x2dc>)
 8001786:	6013      	str	r3, [r2, #0]
		lcd_clear();
 8001788:	f7fe ff56 	bl	8000638 <lcd_clear>
		switch(current_page){
 800178c:	4bac      	ldr	r3, [pc, #688]	; (8001a40 <menu_func+0x2dc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b11      	cmp	r3, #17
 8001792:	f200 84b1 	bhi.w	80020f8 <menu_func+0x994>
 8001796:	a201      	add	r2, pc, #4	; (adr r2, 800179c <menu_func+0x38>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	080017e5 	.word	0x080017e5
 80017a0:	08001861 	.word	0x08001861
 80017a4:	080018dd 	.word	0x080018dd
 80017a8:	08001951 	.word	0x08001951
 80017ac:	080019c5 	.word	0x080019c5
 80017b0:	08001a79 	.word	0x08001a79
 80017b4:	08001aed 	.word	0x08001aed
 80017b8:	08001b3d 	.word	0x08001b3d
 80017bc:	08001bb1 	.word	0x08001bb1
 80017c0:	08001c25 	.word	0x08001c25
 80017c4:	08001c99 	.word	0x08001c99
 80017c8:	08001cd7 	.word	0x08001cd7
 80017cc:	08001d59 	.word	0x08001d59
 80017d0:	08001ddf 	.word	0x08001ddf
 80017d4:	08001e53 	.word	0x08001e53
 80017d8:	08001f31 	.word	0x08001f31
 80017dc:	08001fa5 	.word	0x08001fa5
 80017e0:	08002085 	.word	0x08002085
			case 0:
				if(menu_click){
 80017e4:	4b97      	ldr	r3, [pc, #604]	; (8001a44 <menu_func+0x2e0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00b      	beq.n	8001804 <menu_func+0xa0>
					current_page = 4;
 80017ec:	4b94      	ldr	r3, [pc, #592]	; (8001a40 <menu_func+0x2dc>)
 80017ee:	2204      	movs	r2, #4
 80017f0:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80017f2:	4b94      	ldr	r3, [pc, #592]	; (8001a44 <menu_func+0x2e0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80017f8:	2100      	movs	r1, #0
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7ff ffb2 	bl	8001764 <menu_func>
					break;
 8001800:	f000 bc7a 	b.w	80020f8 <menu_func+0x994>
				  }else if(menu_down){
 8001804:	4b90      	ldr	r3, [pc, #576]	; (8001a48 <menu_func+0x2e4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00b      	beq.n	8001824 <menu_func+0xc0>
					 current_page = 1;
 800180c:	4b8c      	ldr	r3, [pc, #560]	; (8001a40 <menu_func+0x2dc>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]
					 menu_down=0;
 8001812:	4b8d      	ldr	r3, [pc, #564]	; (8001a48 <menu_func+0x2e4>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
					 menu_func(1, 0);
 8001818:	2100      	movs	r1, #0
 800181a:	2001      	movs	r0, #1
 800181c:	f7ff ffa2 	bl	8001764 <menu_func>
					 break;
 8001820:	f000 bc6a 	b.w	80020f8 <menu_func+0x994>
				  }else if(menu_up){
 8001824:	4b89      	ldr	r3, [pc, #548]	; (8001a4c <menu_func+0x2e8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00b      	beq.n	8001844 <menu_func+0xe0>
					 current_page = 3;
 800182c:	4b84      	ldr	r3, [pc, #528]	; (8001a40 <menu_func+0x2dc>)
 800182e:	2203      	movs	r2, #3
 8001830:	601a      	str	r2, [r3, #0]
					 menu_up =0;
 8001832:	4b86      	ldr	r3, [pc, #536]	; (8001a4c <menu_func+0x2e8>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
					 menu_func(1, 0);
 8001838:	2100      	movs	r1, #0
 800183a:	2001      	movs	r0, #1
 800183c:	f7ff ff92 	bl	8001764 <menu_func>
					 break;
 8001840:	f000 bc5a 	b.w	80020f8 <menu_func+0x994>
				  }
				lcd_init ();
 8001844:	f7fe ff2e 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Manual Mode");
 8001848:	4881      	ldr	r0, [pc, #516]	; (8001a50 <menu_func+0x2ec>)
 800184a:	f7fe ff6d 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 800184e:	2100      	movs	r1, #0
 8001850:	2001      	movs	r0, #1
 8001852:	f7fe ff08 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Planner Mode  ");
 8001856:	487f      	ldr	r0, [pc, #508]	; (8001a54 <menu_func+0x2f0>)
 8001858:	f7fe ff66 	bl	8000728 <lcd_send_string>
				break;
 800185c:	f000 bc4c 	b.w	80020f8 <menu_func+0x994>

			case 1:
				if(menu_click){
 8001860:	4b78      	ldr	r3, [pc, #480]	; (8001a44 <menu_func+0x2e0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <menu_func+0x11c>
					current_page = 7;
 8001868:	4b75      	ldr	r3, [pc, #468]	; (8001a40 <menu_func+0x2dc>)
 800186a:	2207      	movs	r2, #7
 800186c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800186e:	4b75      	ldr	r3, [pc, #468]	; (8001a44 <menu_func+0x2e0>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001874:	2100      	movs	r1, #0
 8001876:	2001      	movs	r0, #1
 8001878:	f7ff ff74 	bl	8001764 <menu_func>
					break;
 800187c:	f000 bc3c 	b.w	80020f8 <menu_func+0x994>
				}else if(menu_down){
 8001880:	4b71      	ldr	r3, [pc, #452]	; (8001a48 <menu_func+0x2e4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00b      	beq.n	80018a0 <menu_func+0x13c>
					current_page = 2;
 8001888:	4b6d      	ldr	r3, [pc, #436]	; (8001a40 <menu_func+0x2dc>)
 800188a:	2202      	movs	r2, #2
 800188c:	601a      	str	r2, [r3, #0]
					menu_down =0;
 800188e:	4b6e      	ldr	r3, [pc, #440]	; (8001a48 <menu_func+0x2e4>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001894:	2100      	movs	r1, #0
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff ff64 	bl	8001764 <menu_func>
					break;
 800189c:	f000 bc2c 	b.w	80020f8 <menu_func+0x994>
				}else if(menu_up){
 80018a0:	4b6a      	ldr	r3, [pc, #424]	; (8001a4c <menu_func+0x2e8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00b      	beq.n	80018c0 <menu_func+0x15c>
					current_page = 0;
 80018a8:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <menu_func+0x2dc>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
					menu_up =0;
 80018ae:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <menu_func+0x2e8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80018b4:	2100      	movs	r1, #0
 80018b6:	2001      	movs	r0, #1
 80018b8:	f7ff ff54 	bl	8001764 <menu_func>
					break;
 80018bc:	f000 bc1c 	b.w	80020f8 <menu_func+0x994>
				}
				lcd_init ();
 80018c0:	f7fe fef0 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Planner Mode  ");
 80018c4:	4864      	ldr	r0, [pc, #400]	; (8001a58 <menu_func+0x2f4>)
 80018c6:	f7fe ff2f 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 80018ca:	2100      	movs	r1, #0
 80018cc:	2001      	movs	r0, #1
 80018ce:	f7fe feca 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Auto Mode");
 80018d2:	4862      	ldr	r0, [pc, #392]	; (8001a5c <menu_func+0x2f8>)
 80018d4:	f7fe ff28 	bl	8000728 <lcd_send_string>
				break;
 80018d8:	f000 bc0e 	b.w	80020f8 <menu_func+0x994>

			case 2:
				if(menu_click){
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <menu_func+0x2e0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00a      	beq.n	80018fa <menu_func+0x196>
					current_page = 14;
 80018e4:	4b56      	ldr	r3, [pc, #344]	; (8001a40 <menu_func+0x2dc>)
 80018e6:	220e      	movs	r2, #14
 80018e8:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80018ea:	4b56      	ldr	r3, [pc, #344]	; (8001a44 <menu_func+0x2e0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80018f0:	2100      	movs	r1, #0
 80018f2:	2001      	movs	r0, #1
 80018f4:	f7ff ff36 	bl	8001764 <menu_func>
					break;
 80018f8:	e3fe      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_down){
 80018fa:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <menu_func+0x2e4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <menu_func+0x1b4>
					current_page = 3;
 8001902:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <menu_func+0x2dc>)
 8001904:	2203      	movs	r2, #3
 8001906:	601a      	str	r2, [r3, #0]
					menu_down =0;
 8001908:	4b4f      	ldr	r3, [pc, #316]	; (8001a48 <menu_func+0x2e4>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800190e:	2100      	movs	r1, #0
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff ff27 	bl	8001764 <menu_func>
					break;
 8001916:	e3ef      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_up){
 8001918:	4b4c      	ldr	r3, [pc, #304]	; (8001a4c <menu_func+0x2e8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00a      	beq.n	8001936 <menu_func+0x1d2>
					current_page = 1;
 8001920:	4b47      	ldr	r3, [pc, #284]	; (8001a40 <menu_func+0x2dc>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]
					menu_up =0;
 8001926:	4b49      	ldr	r3, [pc, #292]	; (8001a4c <menu_func+0x2e8>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 800192c:	2100      	movs	r1, #0
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff ff18 	bl	8001764 <menu_func>
					break;
 8001934:	e3e0      	b.n	80020f8 <menu_func+0x994>
				}
				lcd_init ();
 8001936:	f7fe feb5 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Auto Mode");
 800193a:	4849      	ldr	r0, [pc, #292]	; (8001a60 <menu_func+0x2fc>)
 800193c:	f7fe fef4 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001940:	2100      	movs	r1, #0
 8001942:	2001      	movs	r0, #1
 8001944:	f7fe fe8f 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Settings");
 8001948:	4846      	ldr	r0, [pc, #280]	; (8001a64 <menu_func+0x300>)
 800194a:	f7fe feed 	bl	8000728 <lcd_send_string>
				break;
 800194e:	e3d3      	b.n	80020f8 <menu_func+0x994>

			case 3:
				if(menu_click){
 8001950:	4b3c      	ldr	r3, [pc, #240]	; (8001a44 <menu_func+0x2e0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00a      	beq.n	800196e <menu_func+0x20a>
					current_page = 15;
 8001958:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <menu_func+0x2dc>)
 800195a:	220f      	movs	r2, #15
 800195c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 800195e:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <menu_func+0x2e0>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001964:	2100      	movs	r1, #0
 8001966:	2001      	movs	r0, #1
 8001968:	f7ff fefc 	bl	8001764 <menu_func>
					break;
 800196c:	e3c4      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_down){
 800196e:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <menu_func+0x2e4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00a      	beq.n	800198c <menu_func+0x228>
					current_page = 0;
 8001976:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <menu_func+0x2dc>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 800197c:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <menu_func+0x2e4>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001982:	2100      	movs	r1, #0
 8001984:	2001      	movs	r0, #1
 8001986:	f7ff feed 	bl	8001764 <menu_func>
					break;
 800198a:	e3b5      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_up){
 800198c:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <menu_func+0x2e8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00a      	beq.n	80019aa <menu_func+0x246>
					current_page = 2;
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <menu_func+0x2dc>)
 8001996:	2202      	movs	r2, #2
 8001998:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 800199a:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <menu_func+0x2e8>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80019a0:	2100      	movs	r1, #0
 80019a2:	2001      	movs	r0, #1
 80019a4:	f7ff fede 	bl	8001764 <menu_func>
					break;
 80019a8:	e3a6      	b.n	80020f8 <menu_func+0x994>
				}
				lcd_init ();
 80019aa:	f7fe fe7b 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Settings");
 80019ae:	482e      	ldr	r0, [pc, #184]	; (8001a68 <menu_func+0x304>)
 80019b0:	f7fe feba 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 80019b4:	2100      	movs	r1, #0
 80019b6:	2001      	movs	r0, #1
 80019b8:	f7fe fe55 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  ");
 80019bc:	482b      	ldr	r0, [pc, #172]	; (8001a6c <menu_func+0x308>)
 80019be:	f7fe feb3 	bl	8000728 <lcd_send_string>
				break;
 80019c2:	e399      	b.n	80020f8 <menu_func+0x994>

			case 4:
				if(menu_click){
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <menu_func+0x2e0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00d      	beq.n	80019e8 <menu_func+0x284>
					current_page = 6;
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <menu_func+0x2dc>)
 80019ce:	2206      	movs	r2, #6
 80019d0:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <menu_func+0x2e0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
					mode_manual(1);
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff fce3 	bl	80013a4 <mode_manual>
					menu_func(1, 0);
 80019de:	2100      	movs	r1, #0
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff febf 	bl	8001764 <menu_func>
					break;
 80019e6:	e387      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_down){
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <menu_func+0x2e4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00a      	beq.n	8001a06 <menu_func+0x2a2>
					current_page = 5;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <menu_func+0x2dc>)
 80019f2:	2205      	movs	r2, #5
 80019f4:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <menu_func+0x2e4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80019fc:	2100      	movs	r1, #0
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff feb0 	bl	8001764 <menu_func>
					break;
 8001a04:	e378      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_up){
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <menu_func+0x2e8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00a      	beq.n	8001a24 <menu_func+0x2c0>
					current_page = 5;
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <menu_func+0x2dc>)
 8001a10:	2205      	movs	r2, #5
 8001a12:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <menu_func+0x2e8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff fea1 	bl	8001764 <menu_func>
					break;
 8001a22:	e369      	b.n	80020f8 <menu_func+0x994>
				}
				lcd_init ();
 8001a24:	f7fe fe3e 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Press Start");
 8001a28:	4811      	ldr	r0, [pc, #68]	; (8001a70 <menu_func+0x30c>)
 8001a2a:	f7fe fe7d 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7fe fe18 	bl	8000666 <lcd_put_cur>
				lcd_send_string(" Back");
 8001a36:	480f      	ldr	r0, [pc, #60]	; (8001a74 <menu_func+0x310>)
 8001a38:	f7fe fe76 	bl	8000728 <lcd_send_string>
				break;
 8001a3c:	e35c      	b.n	80020f8 <menu_func+0x994>
 8001a3e:	bf00      	nop
 8001a40:	200000bc 	.word	0x200000bc
 8001a44:	200000b0 	.word	0x200000b0
 8001a48:	200000b8 	.word	0x200000b8
 8001a4c:	200000b4 	.word	0x200000b4
 8001a50:	08006a50 	.word	0x08006a50
 8001a54:	08006a3c 	.word	0x08006a3c
 8001a58:	08006a60 	.word	0x08006a60
 8001a5c:	08006a74 	.word	0x08006a74
 8001a60:	08006a80 	.word	0x08006a80
 8001a64:	08006a8c 	.word	0x08006a8c
 8001a68:	08006a98 	.word	0x08006a98
 8001a6c:	08006aa4 	.word	0x08006aa4
 8001a70:	08006aa8 	.word	0x08006aa8
 8001a74:	08006ab8 	.word	0x08006ab8

			case 5:
				if(menu_click){
 8001a78:	4ba6      	ldr	r3, [pc, #664]	; (8001d14 <menu_func+0x5b0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00a      	beq.n	8001a96 <menu_func+0x332>
					current_page = 0;
 8001a80:	4ba5      	ldr	r3, [pc, #660]	; (8001d18 <menu_func+0x5b4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001a86:	4ba3      	ldr	r3, [pc, #652]	; (8001d14 <menu_func+0x5b0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f7ff fe68 	bl	8001764 <menu_func>
					break;
 8001a94:	e330      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_down){
 8001a96:	4ba1      	ldr	r3, [pc, #644]	; (8001d1c <menu_func+0x5b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00a      	beq.n	8001ab4 <menu_func+0x350>
					current_page = 4;
 8001a9e:	4b9e      	ldr	r3, [pc, #632]	; (8001d18 <menu_func+0x5b4>)
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001aa4:	4b9d      	ldr	r3, [pc, #628]	; (8001d1c <menu_func+0x5b8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7ff fe59 	bl	8001764 <menu_func>
					break;
 8001ab2:	e321      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_up){
 8001ab4:	4b9a      	ldr	r3, [pc, #616]	; (8001d20 <menu_func+0x5bc>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00a      	beq.n	8001ad2 <menu_func+0x36e>
					current_page = 4;
 8001abc:	4b96      	ldr	r3, [pc, #600]	; (8001d18 <menu_func+0x5b4>)
 8001abe:	2204      	movs	r2, #4
 8001ac0:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001ac2:	4b97      	ldr	r3, [pc, #604]	; (8001d20 <menu_func+0x5bc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff fe4a 	bl	8001764 <menu_func>
					break;
 8001ad0:	e312      	b.n	80020f8 <menu_func+0x994>
				}
				lcd_init ();
 8001ad2:	f7fe fde7 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Back");
 8001ad6:	4893      	ldr	r0, [pc, #588]	; (8001d24 <menu_func+0x5c0>)
 8001ad8:	f7fe fe26 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001adc:	2100      	movs	r1, #0
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f7fe fdc1 	bl	8000666 <lcd_put_cur>
				lcd_send_string("");
 8001ae4:	4890      	ldr	r0, [pc, #576]	; (8001d28 <menu_func+0x5c4>)
 8001ae6:	f7fe fe1f 	bl	8000728 <lcd_send_string>
				break;
 8001aea:	e305      	b.n	80020f8 <menu_func+0x994>

			case 6:
				if(menu_click){
 8001aec:	4b89      	ldr	r3, [pc, #548]	; (8001d14 <menu_func+0x5b0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00d      	beq.n	8001b10 <menu_func+0x3ac>
					current_page = 4;
 8001af4:	4b88      	ldr	r3, [pc, #544]	; (8001d18 <menu_func+0x5b4>)
 8001af6:	2204      	movs	r2, #4
 8001af8:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001afa:	4b86      	ldr	r3, [pc, #536]	; (8001d14 <menu_func+0x5b0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
					mode_manual(0);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff fc4f 	bl	80013a4 <mode_manual>
					menu_func(1, 0);
 8001b06:	2100      	movs	r1, #0
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f7ff fe2b 	bl	8001764 <menu_func>
					lcd_init ();
					lcd_send_string ("Watering");
					lcd_put_cur(1, 0);
					lcd_send_string("Now");
				}
				break;
 8001b0e:	e2f3      	b.n	80020f8 <menu_func+0x994>
					current_page = 6;
 8001b10:	4b81      	ldr	r3, [pc, #516]	; (8001d18 <menu_func+0x5b4>)
 8001b12:	2206      	movs	r2, #6
 8001b14:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001b16:	4b82      	ldr	r3, [pc, #520]	; (8001d20 <menu_func+0x5bc>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001b1c:	4b7f      	ldr	r3, [pc, #508]	; (8001d1c <menu_func+0x5b8>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
					lcd_init ();
 8001b22:	f7fe fdbf 	bl	80006a4 <lcd_init>
					lcd_send_string ("Watering");
 8001b26:	4881      	ldr	r0, [pc, #516]	; (8001d2c <menu_func+0x5c8>)
 8001b28:	f7fe fdfe 	bl	8000728 <lcd_send_string>
					lcd_put_cur(1, 0);
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f7fe fd99 	bl	8000666 <lcd_put_cur>
					lcd_send_string("Now");
 8001b34:	487e      	ldr	r0, [pc, #504]	; (8001d30 <menu_func+0x5cc>)
 8001b36:	f7fe fdf7 	bl	8000728 <lcd_send_string>
				break;
 8001b3a:	e2dd      	b.n	80020f8 <menu_func+0x994>

			case 7:
				if(menu_click){
 8001b3c:	4b75      	ldr	r3, [pc, #468]	; (8001d14 <menu_func+0x5b0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00a      	beq.n	8001b5a <menu_func+0x3f6>
					current_page = 10;
 8001b44:	4b74      	ldr	r3, [pc, #464]	; (8001d18 <menu_func+0x5b4>)
 8001b46:	220a      	movs	r2, #10
 8001b48:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001b4a:	4b72      	ldr	r3, [pc, #456]	; (8001d14 <menu_func+0x5b0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001b50:	2100      	movs	r1, #0
 8001b52:	2001      	movs	r0, #1
 8001b54:	f7ff fe06 	bl	8001764 <menu_func>
					break;
 8001b58:	e2ce      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_down){
 8001b5a:	4b70      	ldr	r3, [pc, #448]	; (8001d1c <menu_func+0x5b8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00a      	beq.n	8001b78 <menu_func+0x414>
					current_page = 8;
 8001b62:	4b6d      	ldr	r3, [pc, #436]	; (8001d18 <menu_func+0x5b4>)
 8001b64:	2208      	movs	r2, #8
 8001b66:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001b68:	4b6c      	ldr	r3, [pc, #432]	; (8001d1c <menu_func+0x5b8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2001      	movs	r0, #1
 8001b72:	f7ff fdf7 	bl	8001764 <menu_func>
					break;
 8001b76:	e2bf      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_up){
 8001b78:	4b69      	ldr	r3, [pc, #420]	; (8001d20 <menu_func+0x5bc>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00a      	beq.n	8001b96 <menu_func+0x432>
					current_page = 13;
 8001b80:	4b65      	ldr	r3, [pc, #404]	; (8001d18 <menu_func+0x5b4>)
 8001b82:	220d      	movs	r2, #13
 8001b84:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001b86:	4b66      	ldr	r3, [pc, #408]	; (8001d20 <menu_func+0x5bc>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f7ff fde8 	bl	8001764 <menu_func>
					break;
 8001b94:	e2b0      	b.n	80020f8 <menu_func+0x994>
				}
				lcd_init ();
 8001b96:	f7fe fd85 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Line 1");
 8001b9a:	4866      	ldr	r0, [pc, #408]	; (8001d34 <menu_func+0x5d0>)
 8001b9c:	f7fe fdc4 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7fe fd5f 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Line 2");
 8001ba8:	4863      	ldr	r0, [pc, #396]	; (8001d38 <menu_func+0x5d4>)
 8001baa:	f7fe fdbd 	bl	8000728 <lcd_send_string>
				break;
 8001bae:	e2a3      	b.n	80020f8 <menu_func+0x994>

			case 8:
				if(menu_click){
 8001bb0:	4b58      	ldr	r3, [pc, #352]	; (8001d14 <menu_func+0x5b0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00a      	beq.n	8001bce <menu_func+0x46a>
					current_page = 10;
 8001bb8:	4b57      	ldr	r3, [pc, #348]	; (8001d18 <menu_func+0x5b4>)
 8001bba:	220a      	movs	r2, #10
 8001bbc:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001bbe:	4b55      	ldr	r3, [pc, #340]	; (8001d14 <menu_func+0x5b0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f7ff fdcc 	bl	8001764 <menu_func>
					break;
 8001bcc:	e294      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_down){
 8001bce:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <menu_func+0x5b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00a      	beq.n	8001bec <menu_func+0x488>
					current_page = 9;
 8001bd6:	4b50      	ldr	r3, [pc, #320]	; (8001d18 <menu_func+0x5b4>)
 8001bd8:	2209      	movs	r2, #9
 8001bda:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001bdc:	4b4f      	ldr	r3, [pc, #316]	; (8001d1c <menu_func+0x5b8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001be2:	2100      	movs	r1, #0
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff fdbd 	bl	8001764 <menu_func>
					break;
 8001bea:	e285      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_up){
 8001bec:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <menu_func+0x5bc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00a      	beq.n	8001c0a <menu_func+0x4a6>
					current_page = 7;
 8001bf4:	4b48      	ldr	r3, [pc, #288]	; (8001d18 <menu_func+0x5b4>)
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001bfa:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <menu_func+0x5bc>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001c00:	2100      	movs	r1, #0
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff fdae 	bl	8001764 <menu_func>
					break;
 8001c08:	e276      	b.n	80020f8 <menu_func+0x994>
				}
				lcd_init ();
 8001c0a:	f7fe fd4b 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Line 2");
 8001c0e:	484b      	ldr	r0, [pc, #300]	; (8001d3c <menu_func+0x5d8>)
 8001c10:	f7fe fd8a 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001c14:	2100      	movs	r1, #0
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7fe fd25 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Time");
 8001c1c:	4848      	ldr	r0, [pc, #288]	; (8001d40 <menu_func+0x5dc>)
 8001c1e:	f7fe fd83 	bl	8000728 <lcd_send_string>
				break;
 8001c22:	e269      	b.n	80020f8 <menu_func+0x994>

			case 9:
				if(menu_click){
 8001c24:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <menu_func+0x5b0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00a      	beq.n	8001c42 <menu_func+0x4de>
					current_page = 11;
 8001c2c:	4b3a      	ldr	r3, [pc, #232]	; (8001d18 <menu_func+0x5b4>)
 8001c2e:	220b      	movs	r2, #11
 8001c30:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <menu_func+0x5b0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f7ff fd92 	bl	8001764 <menu_func>
					break;
 8001c40:	e25a      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_down){
 8001c42:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <menu_func+0x5b8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <menu_func+0x4fc>
					current_page = 12;
 8001c4a:	4b33      	ldr	r3, [pc, #204]	; (8001d18 <menu_func+0x5b4>)
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001c50:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <menu_func+0x5b8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001c56:	2100      	movs	r1, #0
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f7ff fd83 	bl	8001764 <menu_func>
					break;
 8001c5e:	e24b      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_up){
 8001c60:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <menu_func+0x5bc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00a      	beq.n	8001c7e <menu_func+0x51a>
					current_page = 8;
 8001c68:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <menu_func+0x5b4>)
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <menu_func+0x5bc>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001c74:	2100      	movs	r1, #0
 8001c76:	2001      	movs	r0, #1
 8001c78:	f7ff fd74 	bl	8001764 <menu_func>
					break;
 8001c7c:	e23c      	b.n	80020f8 <menu_func+0x994>
				}
				lcd_init ();
 8001c7e:	f7fe fd11 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Time");
 8001c82:	4830      	ldr	r0, [pc, #192]	; (8001d44 <menu_func+0x5e0>)
 8001c84:	f7fe fd50 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7fe fceb 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Start");
 8001c90:	482d      	ldr	r0, [pc, #180]	; (8001d48 <menu_func+0x5e4>)
 8001c92:	f7fe fd49 	bl	8000728 <lcd_send_string>
				break;
 8001c96:	e22f      	b.n	80020f8 <menu_func+0x994>

			case 10:
				if(menu_click){
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <menu_func+0x5b0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00a      	beq.n	8001cb6 <menu_func+0x552>
					current_page = 7;
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <menu_func+0x5b4>)
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <menu_func+0x5b0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001cac:	2100      	movs	r1, #0
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f7ff fd58 	bl	8001764 <menu_func>
					break;
 8001cb4:	e220      	b.n	80020f8 <menu_func+0x994>
				}else{
					current_page = 10;
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <menu_func+0x5b4>)
 8001cb8:	220a      	movs	r2, #10
 8001cba:	601a      	str	r2, [r3, #0]
					lcd_init ();
 8001cbc:	f7fe fcf2 	bl	80006a4 <lcd_init>
					lcd_send_string ("> 20");
 8001cc0:	4822      	ldr	r0, [pc, #136]	; (8001d4c <menu_func+0x5e8>)
 8001cc2:	f7fe fd31 	bl	8000728 <lcd_send_string>
					lcd_put_cur(1, 0);
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f7fe fccc 	bl	8000666 <lcd_put_cur>
					lcd_send_string("  ");
 8001cce:	4820      	ldr	r0, [pc, #128]	; (8001d50 <menu_func+0x5ec>)
 8001cd0:	f7fe fd2a 	bl	8000728 <lcd_send_string>
				}
				break;
 8001cd4:	e210      	b.n	80020f8 <menu_func+0x994>

			case 11:
				if(menu_click){
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <menu_func+0x5b0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00a      	beq.n	8001cf4 <menu_func+0x590>
					current_page = 9;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <menu_func+0x5b4>)
 8001ce0:	2209      	movs	r2, #9
 8001ce2:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <menu_func+0x5b0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001cea:	2100      	movs	r1, #0
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff fd39 	bl	8001764 <menu_func>
					break;
 8001cf2:	e201      	b.n	80020f8 <menu_func+0x994>
				}else{
					current_page = 11;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <menu_func+0x5b4>)
 8001cf6:	220b      	movs	r2, #11
 8001cf8:	601a      	str	r2, [r3, #0]
					lcd_init ();
 8001cfa:	f7fe fcd3 	bl	80006a4 <lcd_init>
					lcd_send_string ("> Clock Loop");
 8001cfe:	4815      	ldr	r0, [pc, #84]	; (8001d54 <menu_func+0x5f0>)
 8001d00:	f7fe fd12 	bl	8000728 <lcd_send_string>
					lcd_put_cur(1, 0);
 8001d04:	2100      	movs	r1, #0
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7fe fcad 	bl	8000666 <lcd_put_cur>
					lcd_send_string("  ");
 8001d0c:	4810      	ldr	r0, [pc, #64]	; (8001d50 <menu_func+0x5ec>)
 8001d0e:	f7fe fd0b 	bl	8000728 <lcd_send_string>
				}
				break;
 8001d12:	e1f1      	b.n	80020f8 <menu_func+0x994>
 8001d14:	200000b0 	.word	0x200000b0
 8001d18:	200000bc 	.word	0x200000bc
 8001d1c:	200000b8 	.word	0x200000b8
 8001d20:	200000b4 	.word	0x200000b4
 8001d24:	08006ac0 	.word	0x08006ac0
 8001d28:	08006ac8 	.word	0x08006ac8
 8001d2c:	08006acc 	.word	0x08006acc
 8001d30:	08006ad8 	.word	0x08006ad8
 8001d34:	08006adc 	.word	0x08006adc
 8001d38:	08006ae8 	.word	0x08006ae8
 8001d3c:	08006af4 	.word	0x08006af4
 8001d40:	08006b00 	.word	0x08006b00
 8001d44:	08006b08 	.word	0x08006b08
 8001d48:	08006b10 	.word	0x08006b10
 8001d4c:	08006b18 	.word	0x08006b18
 8001d50:	08006aa4 	.word	0x08006aa4
 8001d54:	08006b20 	.word	0x08006b20

			case 12:
				if(menu_click){
 8001d58:	4baf      	ldr	r3, [pc, #700]	; (8002018 <menu_func+0x8b4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <menu_func+0x624>
					current_page = 1;
 8001d60:	4bae      	ldr	r3, [pc, #696]	; (800201c <menu_func+0x8b8>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001d66:	4bac      	ldr	r3, [pc, #688]	; (8002018 <menu_func+0x8b4>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
					global_planner_start = 1;
 8001d6c:	4bac      	ldr	r3, [pc, #688]	; (8002020 <menu_func+0x8bc>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
					mode_planner(0, global_planner_start);
 8001d72:	4bab      	ldr	r3, [pc, #684]	; (8002020 <menu_func+0x8bc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4619      	mov	r1, r3
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff fb59 	bl	8001430 <mode_planner>
					menu_func(1, 0);
 8001d7e:	2100      	movs	r1, #0
 8001d80:	2001      	movs	r0, #1
 8001d82:	f7ff fcef 	bl	8001764 <menu_func>
					break;
 8001d86:	e1b7      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_down){
 8001d88:	4ba6      	ldr	r3, [pc, #664]	; (8002024 <menu_func+0x8c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00a      	beq.n	8001da6 <menu_func+0x642>
					current_page = 13;
 8001d90:	4ba2      	ldr	r3, [pc, #648]	; (800201c <menu_func+0x8b8>)
 8001d92:	220d      	movs	r2, #13
 8001d94:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001d96:	4ba3      	ldr	r3, [pc, #652]	; (8002024 <menu_func+0x8c0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f7ff fce0 	bl	8001764 <menu_func>
					break;
 8001da4:	e1a8      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_up){
 8001da6:	4ba0      	ldr	r3, [pc, #640]	; (8002028 <menu_func+0x8c4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00a      	beq.n	8001dc4 <menu_func+0x660>
					current_page = 9;
 8001dae:	4b9b      	ldr	r3, [pc, #620]	; (800201c <menu_func+0x8b8>)
 8001db0:	2209      	movs	r2, #9
 8001db2:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001db4:	4b9c      	ldr	r3, [pc, #624]	; (8002028 <menu_func+0x8c4>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001dba:	2100      	movs	r1, #0
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7ff fcd1 	bl	8001764 <menu_func>
					break;
 8001dc2:	e199      	b.n	80020f8 <menu_func+0x994>
				}
				lcd_init ();
 8001dc4:	f7fe fc6e 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Start");
 8001dc8:	4898      	ldr	r0, [pc, #608]	; (800202c <menu_func+0x8c8>)
 8001dca:	f7fe fcad 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f7fe fc48 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Back");
 8001dd6:	4896      	ldr	r0, [pc, #600]	; (8002030 <menu_func+0x8cc>)
 8001dd8:	f7fe fca6 	bl	8000728 <lcd_send_string>
				break;
 8001ddc:	e18c      	b.n	80020f8 <menu_func+0x994>

			case 13:
				if(menu_click){
 8001dde:	4b8e      	ldr	r3, [pc, #568]	; (8002018 <menu_func+0x8b4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00a      	beq.n	8001dfc <menu_func+0x698>
					current_page = 1;
 8001de6:	4b8d      	ldr	r3, [pc, #564]	; (800201c <menu_func+0x8b8>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001dec:	4b8a      	ldr	r3, [pc, #552]	; (8002018 <menu_func+0x8b4>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001df2:	2100      	movs	r1, #0
 8001df4:	2001      	movs	r0, #1
 8001df6:	f7ff fcb5 	bl	8001764 <menu_func>
					break;
 8001dfa:	e17d      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_down){
 8001dfc:	4b89      	ldr	r3, [pc, #548]	; (8002024 <menu_func+0x8c0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <menu_func+0x6b6>
					current_page = 7;
 8001e04:	4b85      	ldr	r3, [pc, #532]	; (800201c <menu_func+0x8b8>)
 8001e06:	2207      	movs	r2, #7
 8001e08:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001e0a:	4b86      	ldr	r3, [pc, #536]	; (8002024 <menu_func+0x8c0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001e10:	2100      	movs	r1, #0
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff fca6 	bl	8001764 <menu_func>
					break;
 8001e18:	e16e      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_up){
 8001e1a:	4b83      	ldr	r3, [pc, #524]	; (8002028 <menu_func+0x8c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <menu_func+0x6d4>
					current_page = 12;
 8001e22:	4b7e      	ldr	r3, [pc, #504]	; (800201c <menu_func+0x8b8>)
 8001e24:	220c      	movs	r2, #12
 8001e26:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001e28:	4b7f      	ldr	r3, [pc, #508]	; (8002028 <menu_func+0x8c4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2001      	movs	r0, #1
 8001e32:	f7ff fc97 	bl	8001764 <menu_func>
					break;
 8001e36:	e15f      	b.n	80020f8 <menu_func+0x994>
				}
				lcd_init ();
 8001e38:	f7fe fc34 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Back");
 8001e3c:	487d      	ldr	r0, [pc, #500]	; (8002034 <menu_func+0x8d0>)
 8001e3e:	f7fe fc73 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001e42:	2100      	movs	r1, #0
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7fe fc0e 	bl	8000666 <lcd_put_cur>
				lcd_send_string(" ");
 8001e4a:	487b      	ldr	r0, [pc, #492]	; (8002038 <menu_func+0x8d4>)
 8001e4c:	f7fe fc6c 	bl	8000728 <lcd_send_string>
				break;
 8001e50:	e152      	b.n	80020f8 <menu_func+0x994>

			case 14:
				if(menu_click){
 8001e52:	4b71      	ldr	r3, [pc, #452]	; (8002018 <menu_func+0x8b4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <menu_func+0x70c>
					current_page = 2;
 8001e5a:	4b70      	ldr	r3, [pc, #448]	; (800201c <menu_func+0x8b8>)
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001e60:	4b6d      	ldr	r3, [pc, #436]	; (8002018 <menu_func+0x8b4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001e66:	2100      	movs	r1, #0
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7ff fc7b 	bl	8001764 <menu_func>
					break;
 8001e6e:	e143      	b.n	80020f8 <menu_func+0x994>
				}else{
					current_page = 14;
 8001e70:	4b6a      	ldr	r3, [pc, #424]	; (800201c <menu_func+0x8b8>)
 8001e72:	220e      	movs	r2, #14
 8001e74:	601a      	str	r2, [r3, #0]
					lcd_init ();
 8001e76:	f7fe fc15 	bl	80006a4 <lcd_init>
					itoa(inst_temperature, inst_temperature_s,10);
 8001e7a:	4b70      	ldr	r3, [pc, #448]	; (800203c <menu_func+0x8d8>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e84:	220a      	movs	r2, #10
 8001e86:	496e      	ldr	r1, [pc, #440]	; (8002040 <menu_func+0x8dc>)
 8001e88:	ee17 0a90 	vmov	r0, s15
 8001e8c:	f004 f938 	bl	8006100 <itoa>
					itoa(inst_humidity,inst_humidity_s,10);
 8001e90:	4b6c      	ldr	r3, [pc, #432]	; (8002044 <menu_func+0x8e0>)
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e9a:	220a      	movs	r2, #10
 8001e9c:	496a      	ldr	r1, [pc, #424]	; (8002048 <menu_func+0x8e4>)
 8001e9e:	ee17 0a90 	vmov	r0, s15
 8001ea2:	f004 f92d 	bl	8006100 <itoa>
					itoa(adc_result_percentage[0],adc_percentage_s0,10);
 8001ea6:	4b69      	ldr	r3, [pc, #420]	; (800204c <menu_func+0x8e8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	220a      	movs	r2, #10
 8001eac:	4968      	ldr	r1, [pc, #416]	; (8002050 <menu_func+0x8ec>)
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f004 f926 	bl	8006100 <itoa>
					lcd_send_string("T:");
 8001eb4:	4867      	ldr	r0, [pc, #412]	; (8002054 <menu_func+0x8f0>)
 8001eb6:	f7fe fc37 	bl	8000728 <lcd_send_string>
					lcd_send_string(inst_temperature_s);
 8001eba:	4861      	ldr	r0, [pc, #388]	; (8002040 <menu_func+0x8dc>)
 8001ebc:	f7fe fc34 	bl	8000728 <lcd_send_string>
					lcd_send_string(" H:");
 8001ec0:	4865      	ldr	r0, [pc, #404]	; (8002058 <menu_func+0x8f4>)
 8001ec2:	f7fe fc31 	bl	8000728 <lcd_send_string>
					lcd_send_string(inst_humidity_s);
 8001ec6:	4860      	ldr	r0, [pc, #384]	; (8002048 <menu_func+0x8e4>)
 8001ec8:	f7fe fc2e 	bl	8000728 <lcd_send_string>
					lcd_send_string(" S1:");
 8001ecc:	4863      	ldr	r0, [pc, #396]	; (800205c <menu_func+0x8f8>)
 8001ece:	f7fe fc2b 	bl	8000728 <lcd_send_string>
					lcd_send_string(adc_percentage_s0);
 8001ed2:	485f      	ldr	r0, [pc, #380]	; (8002050 <menu_func+0x8ec>)
 8001ed4:	f7fe fc28 	bl	8000728 <lcd_send_string>
					lcd_put_cur(1, 0);
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7fe fbc3 	bl	8000666 <lcd_put_cur>
					itoa(adc_result_percentage[1],adc_percentage_s1,10);
 8001ee0:	4b5a      	ldr	r3, [pc, #360]	; (800204c <menu_func+0x8e8>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	220a      	movs	r2, #10
 8001ee6:	495e      	ldr	r1, [pc, #376]	; (8002060 <menu_func+0x8fc>)
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f004 f909 	bl	8006100 <itoa>
					itoa(adc_result_percentage[2],adc_percentage_s2,10);
 8001eee:	4b57      	ldr	r3, [pc, #348]	; (800204c <menu_func+0x8e8>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	220a      	movs	r2, #10
 8001ef4:	495b      	ldr	r1, [pc, #364]	; (8002064 <menu_func+0x900>)
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f004 f902 	bl	8006100 <itoa>
					itoa(adc_result_percentage[3],adc_percentage_s3,10);
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <menu_func+0x8e8>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	220a      	movs	r2, #10
 8001f02:	4959      	ldr	r1, [pc, #356]	; (8002068 <menu_func+0x904>)
 8001f04:	4618      	mov	r0, r3
 8001f06:	f004 f8fb 	bl	8006100 <itoa>
					lcd_send_string(" S2:");
 8001f0a:	4858      	ldr	r0, [pc, #352]	; (800206c <menu_func+0x908>)
 8001f0c:	f7fe fc0c 	bl	8000728 <lcd_send_string>
					lcd_send_string(adc_percentage_s1);
 8001f10:	4853      	ldr	r0, [pc, #332]	; (8002060 <menu_func+0x8fc>)
 8001f12:	f7fe fc09 	bl	8000728 <lcd_send_string>
					lcd_send_string(" S3:");
 8001f16:	4856      	ldr	r0, [pc, #344]	; (8002070 <menu_func+0x90c>)
 8001f18:	f7fe fc06 	bl	8000728 <lcd_send_string>
					lcd_send_string(adc_percentage_s2);
 8001f1c:	4851      	ldr	r0, [pc, #324]	; (8002064 <menu_func+0x900>)
 8001f1e:	f7fe fc03 	bl	8000728 <lcd_send_string>
					lcd_send_string(" S4:");
 8001f22:	4854      	ldr	r0, [pc, #336]	; (8002074 <menu_func+0x910>)
 8001f24:	f7fe fc00 	bl	8000728 <lcd_send_string>
					lcd_send_string(adc_percentage_s3);
 8001f28:	484f      	ldr	r0, [pc, #316]	; (8002068 <menu_func+0x904>)
 8001f2a:	f7fe fbfd 	bl	8000728 <lcd_send_string>
				}
				break;
 8001f2e:	e0e3      	b.n	80020f8 <menu_func+0x994>

			case 15:
				if(menu_click){
 8001f30:	4b39      	ldr	r3, [pc, #228]	; (8002018 <menu_func+0x8b4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <menu_func+0x7ea>
					current_page = 11;
 8001f38:	4b38      	ldr	r3, [pc, #224]	; (800201c <menu_func+0x8b8>)
 8001f3a:	220b      	movs	r2, #11
 8001f3c:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001f3e:	4b36      	ldr	r3, [pc, #216]	; (8002018 <menu_func+0x8b4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001f44:	2100      	movs	r1, #0
 8001f46:	2001      	movs	r0, #1
 8001f48:	f7ff fc0c 	bl	8001764 <menu_func>
					break;
 8001f4c:	e0d4      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_down){
 8001f4e:	4b35      	ldr	r3, [pc, #212]	; (8002024 <menu_func+0x8c0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00a      	beq.n	8001f6c <menu_func+0x808>
					current_page = 16;
 8001f56:	4b31      	ldr	r3, [pc, #196]	; (800201c <menu_func+0x8b8>)
 8001f58:	2210      	movs	r2, #16
 8001f5a:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001f5c:	4b31      	ldr	r3, [pc, #196]	; (8002024 <menu_func+0x8c0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001f62:	2100      	movs	r1, #0
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7ff fbfd 	bl	8001764 <menu_func>
					break;
 8001f6a:	e0c5      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_up){
 8001f6c:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <menu_func+0x8c4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <menu_func+0x826>
					current_page = 17;
 8001f74:	4b29      	ldr	r3, [pc, #164]	; (800201c <menu_func+0x8b8>)
 8001f76:	2211      	movs	r2, #17
 8001f78:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <menu_func+0x8c4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001f80:	2100      	movs	r1, #0
 8001f82:	2001      	movs	r0, #1
 8001f84:	f7ff fbee 	bl	8001764 <menu_func>
					break;
 8001f88:	e0b6      	b.n	80020f8 <menu_func+0x994>
				}
				lcd_init ();
 8001f8a:	f7fe fb8b 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Time S.");
 8001f8e:	483a      	ldr	r0, [pc, #232]	; (8002078 <menu_func+0x914>)
 8001f90:	f7fe fbca 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001f94:	2100      	movs	r1, #0
 8001f96:	2001      	movs	r0, #1
 8001f98:	f7fe fb65 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Bluetooth");
 8001f9c:	4837      	ldr	r0, [pc, #220]	; (800207c <menu_func+0x918>)
 8001f9e:	f7fe fbc3 	bl	8000728 <lcd_send_string>
				break;
 8001fa2:	e0a9      	b.n	80020f8 <menu_func+0x994>

			case 16:
				if(menu_click){
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <menu_func+0x8b4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00a      	beq.n	8001fc2 <menu_func+0x85e>
					current_page = 11;
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <menu_func+0x8b8>)
 8001fae:	220b      	movs	r2, #11
 8001fb0:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <menu_func+0x8b4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7ff fbd2 	bl	8001764 <menu_func>
					break;
 8001fc0:	e09a      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_down){
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <menu_func+0x8c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <menu_func+0x87c>
					current_page = 17;
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <menu_func+0x8b8>)
 8001fcc:	2211      	movs	r2, #17
 8001fce:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 8001fd0:	4b14      	ldr	r3, [pc, #80]	; (8002024 <menu_func+0x8c0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7ff fbc3 	bl	8001764 <menu_func>
					break;
 8001fde:	e08b      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_up){
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <menu_func+0x8c4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <menu_func+0x89a>
					current_page = 15;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <menu_func+0x8b8>)
 8001fea:	220f      	movs	r2, #15
 8001fec:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <menu_func+0x8c4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f7ff fbb4 	bl	8001764 <menu_func>
					break;
 8001ffc:	e07c      	b.n	80020f8 <menu_func+0x994>
				}
				lcd_init ();
 8001ffe:	f7fe fb51 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Bluetooth");
 8002002:	481f      	ldr	r0, [pc, #124]	; (8002080 <menu_func+0x91c>)
 8002004:	f7fe fb90 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 8002008:	2100      	movs	r1, #0
 800200a:	2001      	movs	r0, #1
 800200c:	f7fe fb2b 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  Back");
 8002010:	4807      	ldr	r0, [pc, #28]	; (8002030 <menu_func+0x8cc>)
 8002012:	f7fe fb89 	bl	8000728 <lcd_send_string>
				break;
 8002016:	e06f      	b.n	80020f8 <menu_func+0x994>
 8002018:	200000b0 	.word	0x200000b0
 800201c:	200000bc 	.word	0x200000bc
 8002020:	200000c8 	.word	0x200000c8
 8002024:	200000b8 	.word	0x200000b8
 8002028:	200000b4 	.word	0x200000b4
 800202c:	08006b30 	.word	0x08006b30
 8002030:	08006b38 	.word	0x08006b38
 8002034:	08006ac0 	.word	0x08006ac0
 8002038:	08006b40 	.word	0x08006b40
 800203c:	200000e4 	.word	0x200000e4
 8002040:	200001bc 	.word	0x200001bc
 8002044:	200000e8 	.word	0x200000e8
 8002048:	20000168 	.word	0x20000168
 800204c:	200001cc 	.word	0x200001cc
 8002050:	200002fc 	.word	0x200002fc
 8002054:	08006b44 	.word	0x08006b44
 8002058:	08006b48 	.word	0x08006b48
 800205c:	08006b4c 	.word	0x08006b4c
 8002060:	200002d8 	.word	0x200002d8
 8002064:	2000030c 	.word	0x2000030c
 8002068:	200001c4 	.word	0x200001c4
 800206c:	08006b54 	.word	0x08006b54
 8002070:	08006b5c 	.word	0x08006b5c
 8002074:	08006b64 	.word	0x08006b64
 8002078:	08006b6c 	.word	0x08006b6c
 800207c:	08006b78 	.word	0x08006b78
 8002080:	08006b84 	.word	0x08006b84
			case 17:
				if(menu_click){
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <menu_func+0x9b4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <menu_func+0x93e>
					current_page = 3;
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <menu_func+0x9b8>)
 800208e:	2203      	movs	r2, #3
 8002090:	601a      	str	r2, [r3, #0]
					menu_click = 0;
 8002092:	4b21      	ldr	r3, [pc, #132]	; (8002118 <menu_func+0x9b4>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 8002098:	2100      	movs	r1, #0
 800209a:	2001      	movs	r0, #1
 800209c:	f7ff fb62 	bl	8001764 <menu_func>
					break;
 80020a0:	e02a      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_down){
 80020a2:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <menu_func+0x9bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <menu_func+0x95c>
					current_page = 15;
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <menu_func+0x9b8>)
 80020ac:	220f      	movs	r2, #15
 80020ae:	601a      	str	r2, [r3, #0]
					menu_down = 0;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <menu_func+0x9bc>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80020b6:	2100      	movs	r1, #0
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7ff fb53 	bl	8001764 <menu_func>
					break;
 80020be:	e01b      	b.n	80020f8 <menu_func+0x994>
				}else if(menu_up){
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <menu_func+0x9c0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <menu_func+0x97a>
					current_page = 16;
 80020c8:	4b14      	ldr	r3, [pc, #80]	; (800211c <menu_func+0x9b8>)
 80020ca:	2210      	movs	r2, #16
 80020cc:	601a      	str	r2, [r3, #0]
					menu_up = 0;
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <menu_func+0x9c0>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
					menu_func(1, 0);
 80020d4:	2100      	movs	r1, #0
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff fb44 	bl	8001764 <menu_func>
					break;
 80020dc:	e00c      	b.n	80020f8 <menu_func+0x994>
				}
				lcd_init ();
 80020de:	f7fe fae1 	bl	80006a4 <lcd_init>
				lcd_send_string ("> Back");
 80020e2:	4811      	ldr	r0, [pc, #68]	; (8002128 <menu_func+0x9c4>)
 80020e4:	f7fe fb20 	bl	8000728 <lcd_send_string>
				lcd_put_cur(1, 0);
 80020e8:	2100      	movs	r1, #0
 80020ea:	2001      	movs	r0, #1
 80020ec:	f7fe fabb 	bl	8000666 <lcd_put_cur>
				lcd_send_string("  ");
 80020f0:	480e      	ldr	r0, [pc, #56]	; (800212c <menu_func+0x9c8>)
 80020f2:	f7fe fb19 	bl	8000728 <lcd_send_string>
				break;
 80020f6:	bf00      	nop
		}
		menu_lcd_refresh = 0;
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <menu_func+0x9cc>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
		menu_click= 0;
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <menu_func+0x9b4>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
		menu_up = 0;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <menu_func+0x9c0>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
		menu_down = 0;
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <menu_func+0x9bc>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
	}
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	200000b0 	.word	0x200000b0
 800211c:	200000bc 	.word	0x200000bc
 8002120:	200000b8 	.word	0x200000b8
 8002124:	200000b4 	.word	0x200000b4
 8002128:	08006ac0 	.word	0x08006ac0
 800212c:	08006aa4 	.word	0x08006aa4
 8002130:	200000ac 	.word	0x200000ac

08002134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002138:	b672      	cpsid	i
}
 800213a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800213c:	e7fe      	b.n	800213c <Error_Handler+0x8>
	...

08002140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_MspInit+0x4c>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a0f      	ldr	r2, [pc, #60]	; (800218c <HAL_MspInit+0x4c>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <HAL_MspInit+0x4c>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	603b      	str	r3, [r7, #0]
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_MspInit+0x4c>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a08      	ldr	r2, [pc, #32]	; (800218c <HAL_MspInit+0x4c>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_MspInit+0x4c>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800

08002190 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a32      	ldr	r2, [pc, #200]	; (8002278 <HAL_ADC_MspInit+0xe8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d15e      	bne.n	8002270 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_ADC_MspInit+0xec>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a30      	ldr	r2, [pc, #192]	; (800227c <HAL_ADC_MspInit+0xec>)
 80021bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b2e      	ldr	r3, [pc, #184]	; (800227c <HAL_ADC_MspInit+0xec>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_ADC_MspInit+0xec>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a29      	ldr	r2, [pc, #164]	; (800227c <HAL_ADC_MspInit+0xec>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b27      	ldr	r3, [pc, #156]	; (800227c <HAL_ADC_MspInit+0xec>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = moisture_adc_sens0_Pin|moisture_adc_sens1_Pin|moisture_adc_sens2_Pin|moisture_adc_sens3_Pin
 80021ea:	237f      	movs	r3, #127	; 0x7f
 80021ec:	617b      	str	r3, [r7, #20]
                          |rain_adc_sens_Pin|waterlevel_adc_sens_Pin|waterflow_adc_sens_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ee:	2303      	movs	r3, #3
 80021f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4820      	ldr	r0, [pc, #128]	; (8002280 <HAL_ADC_MspInit+0xf0>)
 80021fe:	f001 fbf3 	bl	80039e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_ADC_MspInit+0xf4>)
 8002204:	4a20      	ldr	r2, [pc, #128]	; (8002288 <HAL_ADC_MspInit+0xf8>)
 8002206:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <HAL_ADC_MspInit+0xf4>)
 800220a:	2200      	movs	r2, #0
 800220c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_ADC_MspInit+0xf4>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_ADC_MspInit+0xf4>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_ADC_MspInit+0xf4>)
 800221c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002220:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_ADC_MspInit+0xf4>)
 8002224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002228:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_ADC_MspInit+0xf4>)
 800222c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002230:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_ADC_MspInit+0xf4>)
 8002234:	2200      	movs	r2, #0
 8002236:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_ADC_MspInit+0xf4>)
 800223a:	2200      	movs	r2, #0
 800223c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_ADC_MspInit+0xf4>)
 8002240:	2200      	movs	r2, #0
 8002242:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002244:	480f      	ldr	r0, [pc, #60]	; (8002284 <HAL_ADC_MspInit+0xf4>)
 8002246:	f001 f85f 	bl	8003308 <HAL_DMA_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002250:	f7ff ff70 	bl	8002134 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <HAL_ADC_MspInit+0xf4>)
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_ADC_MspInit+0xf4>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	2012      	movs	r0, #18
 8002266:	f001 f818 	bl	800329a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800226a:	2012      	movs	r0, #18
 800226c:	f001 f831 	bl	80032d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002270:	bf00      	nop
 8002272:	3728      	adds	r7, #40	; 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40012000 	.word	0x40012000
 800227c:	40023800 	.word	0x40023800
 8002280:	40020000 	.word	0x40020000
 8002284:	200001e8 	.word	0x200001e8
 8002288:	40026410 	.word	0x40026410

0800228c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_I2C_MspInit+0x84>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d12b      	bne.n	8002306 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a17      	ldr	r2, [pc, #92]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_LCD_Pin|I2C1_SDA_LCD_Pin;
 80022ca:	23c0      	movs	r3, #192	; 0xc0
 80022cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ce:	2312      	movs	r3, #18
 80022d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d2:	2301      	movs	r3, #1
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022da:	2304      	movs	r3, #4
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	480c      	ldr	r0, [pc, #48]	; (8002318 <HAL_I2C_MspInit+0x8c>)
 80022e6:	f001 fb7f 	bl	80039e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_I2C_MspInit+0x88>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002306:	bf00      	nop
 8002308:	3728      	adds	r7, #40	; 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40005400 	.word	0x40005400
 8002314:	40023800 	.word	0x40023800
 8002318:	40020400 	.word	0x40020400

0800231c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a08      	ldr	r2, [pc, #32]	; (800234c <HAL_RTC_MspInit+0x30>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10a      	bne.n	8002344 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HAL_RTC_MspInit+0x34>)
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	2029      	movs	r0, #41	; 0x29
 800233a:	f000 ffae 	bl	800329a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800233e:	2029      	movs	r0, #41	; 0x29
 8002340:	f000 ffc7 	bl	80032d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40002800 	.word	0x40002800
 8002350:	42470e3c 	.word	0x42470e3c

08002354 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <HAL_TIM_Base_MspInit+0x3c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d10d      	bne.n	8002382 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_TIM_Base_MspInit+0x40>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <HAL_TIM_Base_MspInit+0x40>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <HAL_TIM_Base_MspInit+0x40>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40010000 	.word	0x40010000
 8002394:	40023800 	.word	0x40023800

08002398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800239c:	e7fe      	b.n	800239c <NMI_Handler+0x4>

0800239e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <HardFault_Handler+0x4>

080023a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <MemManage_Handler+0x4>

080023aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <BusFault_Handler+0x4>

080023b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <UsageFault_Handler+0x4>

080023b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e4:	f000 f8fe 	bl	80025e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}

080023ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023f0:	2001      	movs	r0, #1
 80023f2:	f001 fcaf 	bl	8003d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}

080023fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80023fe:	2002      	movs	r0, #2
 8002400:	f001 fca8 	bl	8003d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}

08002408 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <ADC_IRQHandler+0x10>)
 800240e:	f000 f970 	bl	80026f2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000170 	.word	0x20000170

0800241c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002420:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002424:	f001 fc96 	bl	8003d54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002428:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800242c:	f001 fc92 	bl	8003d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <RTC_Alarm_IRQHandler+0x10>)
 800243a:	f003 f9eb 	bl	8005814 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000248 	.word	0x20000248

08002448 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <DMA2_Stream0_IRQHandler+0x10>)
 800244e:	f001 f861 	bl	8003514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200001e8 	.word	0x200001e8

0800245c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002464:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <_sbrk+0x5c>)
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <_sbrk+0x60>)
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002470:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <_sbrk+0x64>)
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <_sbrk+0x68>)
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <_sbrk+0x64>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	429a      	cmp	r2, r3
 800248a:	d207      	bcs.n	800249c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800248c:	f003 fdf6 	bl	800607c <__errno>
 8002490:	4603      	mov	r3, r0
 8002492:	220c      	movs	r2, #12
 8002494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	e009      	b.n	80024b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <_sbrk+0x64>)
 80024ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ae:	68fb      	ldr	r3, [r7, #12]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20010000 	.word	0x20010000
 80024bc:	00000400 	.word	0x00000400
 80024c0:	200000f4 	.word	0x200000f4
 80024c4:	20000328 	.word	0x20000328

080024c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <SystemInit+0x20>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <SystemInit+0x20>)
 80024d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002524 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f0:	480d      	ldr	r0, [pc, #52]	; (8002528 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024f2:	490e      	ldr	r1, [pc, #56]	; (800252c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024f4:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f8:	e002      	b.n	8002500 <LoopCopyDataInit>

080024fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fe:	3304      	adds	r3, #4

08002500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002504:	d3f9      	bcc.n	80024fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002506:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002508:	4c0b      	ldr	r4, [pc, #44]	; (8002538 <LoopFillZerobss+0x26>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800250c:	e001      	b.n	8002512 <LoopFillZerobss>

0800250e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002510:	3204      	adds	r2, #4

08002512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002514:	d3fb      	bcc.n	800250e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002516:	f7ff ffd7 	bl	80024c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800251a:	f003 fdb5 	bl	8006088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800251e:	f7fe f919 	bl	8000754 <main>
  bx  lr    
 8002522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002524:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800252c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002530:	08006c20 	.word	0x08006c20
  ldr r2, =_sbss
 8002534:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002538:	20000328 	.word	0x20000328

0800253c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800253c:	e7fe      	b.n	800253c <DMA1_Stream0_IRQHandler>
	...

08002540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <HAL_Init+0x40>)
 800254a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800254e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <HAL_Init+0x40>)
 8002556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800255a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_Init+0x40>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_Init+0x40>)
 8002562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002568:	2003      	movs	r0, #3
 800256a:	f000 fe8b 	bl	8003284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256e:	2000      	movs	r0, #0
 8002570:	f000 f808 	bl	8002584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002574:	f7ff fde4 	bl	8002140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00

08002584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_InitTick+0x54>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_InitTick+0x58>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259a:	fbb3 f3f1 	udiv	r3, r3, r1
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fea3 	bl	80032ee <HAL_SYSTICK_Config>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00e      	b.n	80025d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b0f      	cmp	r3, #15
 80025b6:	d80a      	bhi.n	80025ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b8:	2200      	movs	r2, #0
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f000 fe6b 	bl	800329a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c4:	4a06      	ldr	r2, [pc, #24]	; (80025e0 <HAL_InitTick+0x5c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e000      	b.n	80025d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000014 	.word	0x20000014
 80025dc:	2000001c 	.word	0x2000001c
 80025e0:	20000018 	.word	0x20000018

080025e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_IncTick+0x20>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_IncTick+0x24>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	4a04      	ldr	r2, [pc, #16]	; (8002608 <HAL_IncTick+0x24>)
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	2000001c 	.word	0x2000001c
 8002608:	20000314 	.word	0x20000314

0800260c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return uwTick;
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <HAL_GetTick+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000314 	.word	0x20000314

08002624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7ff ffee 	bl	800260c <HAL_GetTick>
 8002630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d005      	beq.n	800264a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HAL_Delay+0x44>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800264a:	bf00      	nop
 800264c:	f7ff ffde 	bl	800260c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	429a      	cmp	r2, r3
 800265a:	d8f7      	bhi.n	800264c <HAL_Delay+0x28>
  {
  }
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	2000001c 	.word	0x2000001c

0800266c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e033      	b.n	80026ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fd80 	bl	8002190 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d118      	bne.n	80026dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	f043 0202 	orr.w	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fb88 	bl	8002dd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
 80026da:	e001      	b.n	80026e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b02      	cmp	r3, #2
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b20      	cmp	r3, #32
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d049      	beq.n	80027c8 <HAL_ADC_IRQHandler+0xd6>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d046      	beq.n	80027c8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d12b      	bne.n	80027b8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002764:	2b00      	cmp	r3, #0
 8002766:	d127      	bne.n	80027b8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002772:	2b00      	cmp	r3, #0
 8002774:	d006      	beq.n	8002784 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002780:	2b00      	cmp	r3, #0
 8002782:	d119      	bne.n	80027b8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0220 	bic.w	r2, r2, #32
 8002792:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d105      	bne.n	80027b8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7fe fb81 	bl	8000ec0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f06f 0212 	mvn.w	r2, #18
 80027c6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	bf0c      	ite	eq
 80027d6:	2301      	moveq	r3, #1
 80027d8:	2300      	movne	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e8:	2b80      	cmp	r3, #128	; 0x80
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d057      	beq.n	80028aa <HAL_ADC_IRQHandler+0x1b8>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d054      	beq.n	80028aa <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d139      	bne.n	800289a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002830:	2b00      	cmp	r3, #0
 8002832:	d006      	beq.n	8002842 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800283e:	2b00      	cmp	r3, #0
 8002840:	d12b      	bne.n	800289a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800284c:	2b00      	cmp	r3, #0
 800284e:	d124      	bne.n	800289a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800285a:	2b00      	cmp	r3, #0
 800285c:	d11d      	bne.n	800289a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002874:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fc18 	bl	80030d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 020c 	mvn.w	r2, #12
 80028a8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d017      	beq.n	800290c <HAL_ADC_IRQHandler+0x21a>
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d014      	beq.n	800290c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d10d      	bne.n	800290c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f933 	bl	8002b68 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f06f 0201 	mvn.w	r2, #1
 800290a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b20      	cmp	r3, #32
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800292c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d015      	beq.n	800296c <HAL_ADC_IRQHandler+0x27a>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d012      	beq.n	800296c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	f043 0202 	orr.w	r2, r3, #2
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f06f 0220 	mvn.w	r2, #32
 800295a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f90d 	bl	8002b7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f06f 0220 	mvn.w	r2, #32
 800296a:	601a      	str	r2, [r3, #0]
  }
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_ADC_Start_DMA+0x1e>
 800298e:	2302      	movs	r3, #2
 8002990:	e0ce      	b.n	8002b30 <HAL_ADC_Start_DMA+0x1bc>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d018      	beq.n	80029da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029b8:	4b5f      	ldr	r3, [pc, #380]	; (8002b38 <HAL_ADC_Start_DMA+0x1c4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a5f      	ldr	r2, [pc, #380]	; (8002b3c <HAL_ADC_Start_DMA+0x1c8>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0c9a      	lsrs	r2, r3, #18
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80029cc:	e002      	b.n	80029d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f9      	bne.n	80029ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e8:	d107      	bne.n	80029fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	f040 8086 	bne.w	8002b16 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a34:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a48:	d106      	bne.n	8002a58 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f023 0206 	bic.w	r2, r3, #6
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	645a      	str	r2, [r3, #68]	; 0x44
 8002a56:	e002      	b.n	8002a5e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a66:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <HAL_ADC_Start_DMA+0x1cc>)
 8002a68:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	4a35      	ldr	r2, [pc, #212]	; (8002b44 <HAL_ADC_Start_DMA+0x1d0>)
 8002a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	4a34      	ldr	r2, [pc, #208]	; (8002b48 <HAL_ADC_Start_DMA+0x1d4>)
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7e:	4a33      	ldr	r2, [pc, #204]	; (8002b4c <HAL_ADC_Start_DMA+0x1d8>)
 8002a80:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a8a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a9a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aaa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	334c      	adds	r3, #76	; 0x4c
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f000 fcd2 	bl	8003464 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10f      	bne.n	8002aec <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d129      	bne.n	8002b2e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	e020      	b.n	8002b2e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a17      	ldr	r2, [pc, #92]	; (8002b50 <HAL_ADC_Start_DMA+0x1dc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d11b      	bne.n	8002b2e <HAL_ADC_Start_DMA+0x1ba>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d114      	bne.n	8002b2e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	e00b      	b.n	8002b2e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f043 0210 	orr.w	r2, r3, #16
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000014 	.word	0x20000014
 8002b3c:	431bde83 	.word	0x431bde83
 8002b40:	40012300 	.word	0x40012300
 8002b44:	08002fcd 	.word	0x08002fcd
 8002b48:	08003087 	.word	0x08003087
 8002b4c:	080030a3 	.word	0x080030a3
 8002b50:	40012000 	.word	0x40012000

08002b54 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x1c>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e105      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x228>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b09      	cmp	r3, #9
 8002bba:	d925      	bls.n	8002c08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68d9      	ldr	r1, [r3, #12]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	3b1e      	subs	r3, #30
 8002bd2:	2207      	movs	r2, #7
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	400a      	ands	r2, r1
 8002be0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68d9      	ldr	r1, [r3, #12]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4403      	add	r3, r0
 8002bfa:	3b1e      	subs	r3, #30
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	e022      	b.n	8002c4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6919      	ldr	r1, [r3, #16]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	2207      	movs	r2, #7
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	400a      	ands	r2, r1
 8002c2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6919      	ldr	r1, [r3, #16]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4403      	add	r3, r0
 8002c44:	409a      	lsls	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d824      	bhi.n	8002ca0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	3b05      	subs	r3, #5
 8002c68:	221f      	movs	r2, #31
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	400a      	ands	r2, r1
 8002c76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	4618      	mov	r0, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b05      	subs	r3, #5
 8002c92:	fa00 f203 	lsl.w	r2, r0, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c9e:	e04c      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	d824      	bhi.n	8002cf2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3b23      	subs	r3, #35	; 0x23
 8002cba:	221f      	movs	r2, #31
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3b23      	subs	r3, #35	; 0x23
 8002ce4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf0:	e023      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	3b41      	subs	r3, #65	; 0x41
 8002d04:	221f      	movs	r2, #31
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	400a      	ands	r2, r1
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	4618      	mov	r0, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3b41      	subs	r3, #65	; 0x41
 8002d2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <HAL_ADC_ConfigChannel+0x234>)
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <HAL_ADC_ConfigChannel+0x238>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d109      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x1cc>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b12      	cmp	r3, #18
 8002d4e:	d105      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <HAL_ADC_ConfigChannel+0x238>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d123      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x21e>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b10      	cmp	r3, #16
 8002d6c:	d003      	beq.n	8002d76 <HAL_ADC_ConfigChannel+0x1e6>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b11      	cmp	r3, #17
 8002d74:	d11b      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b10      	cmp	r3, #16
 8002d88:	d111      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <HAL_ADC_ConfigChannel+0x23c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a10      	ldr	r2, [pc, #64]	; (8002dd0 <HAL_ADC_ConfigChannel+0x240>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	0c9a      	lsrs	r2, r3, #18
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002da0:	e002      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f9      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40012300 	.word	0x40012300
 8002dc8:	40012000 	.word	0x40012000
 8002dcc:	20000014 	.word	0x20000014
 8002dd0:	431bde83 	.word	0x431bde83

08002dd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ddc:	4b79      	ldr	r3, [pc, #484]	; (8002fc4 <ADC_Init+0x1f0>)
 8002dde:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	021a      	lsls	r2, r3, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6899      	ldr	r1, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	4a58      	ldr	r2, [pc, #352]	; (8002fc8 <ADC_Init+0x1f4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d022      	beq.n	8002eb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6899      	ldr	r1, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6899      	ldr	r1, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	e00f      	b.n	8002ed2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ec0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ed0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0202 	bic.w	r2, r2, #2
 8002ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6899      	ldr	r1, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	7e1b      	ldrb	r3, [r3, #24]
 8002eec:	005a      	lsls	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01b      	beq.n	8002f38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	035a      	lsls	r2, r3, #13
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	e007      	b.n	8002f48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	051a      	lsls	r2, r3, #20
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6899      	ldr	r1, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f8a:	025a      	lsls	r2, r3, #9
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6899      	ldr	r1, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	029a      	lsls	r2, r3, #10
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	609a      	str	r2, [r3, #8]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40012300 	.word	0x40012300
 8002fc8:	0f000001 	.word	0x0f000001

08002fcc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d13c      	bne.n	8003060 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d12b      	bne.n	8003058 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003004:	2b00      	cmp	r3, #0
 8003006:	d127      	bne.n	8003058 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003012:	2b00      	cmp	r3, #0
 8003014:	d006      	beq.n	8003024 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003020:	2b00      	cmp	r3, #0
 8003022:	d119      	bne.n	8003058 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0220 	bic.w	r2, r2, #32
 8003032:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f043 0201 	orr.w	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f7fd ff31 	bl	8000ec0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800305e:	e00e      	b.n	800307e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fd85 	bl	8002b7c <HAL_ADC_ErrorCallback>
}
 8003072:	e004      	b.n	800307e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
}
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7ff fd5d 	bl	8002b54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2240      	movs	r2, #64	; 0x40
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f043 0204 	orr.w	r2, r3, #4
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f7ff fd5a 	bl	8002b7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800310c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003116:	4a04      	ldr	r2, [pc, #16]	; (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	60d3      	str	r3, [r2, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <__NVIC_GetPriorityGrouping+0x18>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	f003 0307 	and.w	r3, r3, #7
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	2b00      	cmp	r3, #0
 8003158:	db0b      	blt.n	8003172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	f003 021f 	and.w	r2, r3, #31
 8003160:	4907      	ldr	r1, [pc, #28]	; (8003180 <__NVIC_EnableIRQ+0x38>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2001      	movs	r0, #1
 800316a:	fa00 f202 	lsl.w	r2, r0, r2
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e100 	.word	0xe000e100

08003184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	6039      	str	r1, [r7, #0]
 800318e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003194:	2b00      	cmp	r3, #0
 8003196:	db0a      	blt.n	80031ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	490c      	ldr	r1, [pc, #48]	; (80031d0 <__NVIC_SetPriority+0x4c>)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	0112      	lsls	r2, r2, #4
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	440b      	add	r3, r1
 80031a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031ac:	e00a      	b.n	80031c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4908      	ldr	r1, [pc, #32]	; (80031d4 <__NVIC_SetPriority+0x50>)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	3b04      	subs	r3, #4
 80031bc:	0112      	lsls	r2, r2, #4
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	440b      	add	r3, r1
 80031c2:	761a      	strb	r2, [r3, #24]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000e100 	.word	0xe000e100
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f1c3 0307 	rsb	r3, r3, #7
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	bf28      	it	cs
 80031f6:	2304      	movcs	r3, #4
 80031f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3304      	adds	r3, #4
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d902      	bls.n	8003208 <NVIC_EncodePriority+0x30>
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3b03      	subs	r3, #3
 8003206:	e000      	b.n	800320a <NVIC_EncodePriority+0x32>
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800320c:	f04f 32ff 	mov.w	r2, #4294967295
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43da      	mvns	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	401a      	ands	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003220:	f04f 31ff 	mov.w	r1, #4294967295
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	43d9      	mvns	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	4313      	orrs	r3, r2
         );
}
 8003232:	4618      	mov	r0, r3
 8003234:	3724      	adds	r7, #36	; 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3b01      	subs	r3, #1
 800324c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003250:	d301      	bcc.n	8003256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003252:	2301      	movs	r3, #1
 8003254:	e00f      	b.n	8003276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003256:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <SysTick_Config+0x40>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800325e:	210f      	movs	r1, #15
 8003260:	f04f 30ff 	mov.w	r0, #4294967295
 8003264:	f7ff ff8e 	bl	8003184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <SysTick_Config+0x40>)
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <SysTick_Config+0x40>)
 8003270:	2207      	movs	r2, #7
 8003272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	e000e010 	.word	0xe000e010

08003284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ff29 	bl	80030e4 <__NVIC_SetPriorityGrouping>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800329a:	b580      	push	{r7, lr}
 800329c:	b086      	sub	sp, #24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	4603      	mov	r3, r0
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032ac:	f7ff ff3e 	bl	800312c <__NVIC_GetPriorityGrouping>
 80032b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	6978      	ldr	r0, [r7, #20]
 80032b8:	f7ff ff8e 	bl	80031d8 <NVIC_EncodePriority>
 80032bc:	4602      	mov	r2, r0
 80032be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff5d 	bl	8003184 <__NVIC_SetPriority>
}
 80032ca:	bf00      	nop
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	4603      	mov	r3, r0
 80032da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff31 	bl	8003148 <__NVIC_EnableIRQ>
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ffa2 	bl	8003240 <SysTick_Config>
 80032fc:	4603      	mov	r3, r0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003314:	f7ff f97a 	bl	800260c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e099      	b.n	8003458 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003344:	e00f      	b.n	8003366 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003346:	f7ff f961 	bl	800260c <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b05      	cmp	r3, #5
 8003352:	d908      	bls.n	8003366 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2203      	movs	r2, #3
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e078      	b.n	8003458 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e8      	bne.n	8003346 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4b38      	ldr	r3, [pc, #224]	; (8003460 <HAL_DMA_Init+0x158>)
 8003380:	4013      	ands	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003392:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d107      	bne.n	80033d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	4313      	orrs	r3, r2
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f023 0307 	bic.w	r3, r3, #7
 80033e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d117      	bne.n	800342a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00e      	beq.n	800342a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fa6f 	bl	80038f0 <DMA_CheckFifoParam>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2240      	movs	r2, #64	; 0x40
 800341c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003426:	2301      	movs	r3, #1
 8003428:	e016      	b.n	8003458 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fa26 	bl	8003884 <DMA_CalcBaseAndBitshift>
 8003438:	4603      	mov	r3, r0
 800343a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003440:	223f      	movs	r2, #63	; 0x3f
 8003442:	409a      	lsls	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	f010803f 	.word	0xf010803f

08003464 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_DMA_Start_IT+0x26>
 8003486:	2302      	movs	r3, #2
 8003488:	e040      	b.n	800350c <HAL_DMA_Start_IT+0xa8>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d12f      	bne.n	80034fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2202      	movs	r2, #2
 80034a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f9b8 	bl	8003828 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	223f      	movs	r2, #63	; 0x3f
 80034be:	409a      	lsls	r2, r3
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0216 	orr.w	r2, r2, #22
 80034d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0208 	orr.w	r2, r2, #8
 80034ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e005      	b.n	800350a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003506:	2302      	movs	r3, #2
 8003508:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800350a:	7dfb      	ldrb	r3, [r7, #23]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003520:	4b92      	ldr	r3, [pc, #584]	; (800376c <HAL_DMA_IRQHandler+0x258>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a92      	ldr	r2, [pc, #584]	; (8003770 <HAL_DMA_IRQHandler+0x25c>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	0a9b      	lsrs	r3, r3, #10
 800352c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	2208      	movs	r2, #8
 8003540:	409a      	lsls	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01a      	beq.n	8003580 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d013      	beq.n	8003580 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0204 	bic.w	r2, r2, #4
 8003566:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356c:	2208      	movs	r2, #8
 800356e:	409a      	lsls	r2, r3
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	2201      	movs	r2, #1
 8003586:	409a      	lsls	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d012      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a2:	2201      	movs	r2, #1
 80035a4:	409a      	lsls	r2, r3
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ae:	f043 0202 	orr.w	r2, r3, #2
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	2204      	movs	r2, #4
 80035bc:	409a      	lsls	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d012      	beq.n	80035ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00b      	beq.n	80035ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	2204      	movs	r2, #4
 80035da:	409a      	lsls	r2, r3
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	f043 0204 	orr.w	r2, r3, #4
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	2210      	movs	r2, #16
 80035f2:	409a      	lsls	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d043      	beq.n	8003684 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d03c      	beq.n	8003684 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	2210      	movs	r2, #16
 8003610:	409a      	lsls	r2, r3
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d018      	beq.n	8003656 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d108      	bne.n	8003644 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d024      	beq.n	8003684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
 8003642:	e01f      	b.n	8003684 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01b      	beq.n	8003684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
 8003654:	e016      	b.n	8003684 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0208 	bic.w	r2, r2, #8
 8003672:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	2220      	movs	r2, #32
 800368a:	409a      	lsls	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 808e 	beq.w	80037b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8086 	beq.w	80037b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	2220      	movs	r2, #32
 80036ac:	409a      	lsls	r2, r3
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	d136      	bne.n	800372c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0216 	bic.w	r2, r2, #22
 80036cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <HAL_DMA_IRQHandler+0x1da>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0208 	bic.w	r2, r2, #8
 80036fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003702:	223f      	movs	r2, #63	; 0x3f
 8003704:	409a      	lsls	r2, r3
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371e:	2b00      	cmp	r3, #0
 8003720:	d07d      	beq.n	800381e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
        }
        return;
 800372a:	e078      	b.n	800381e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01c      	beq.n	8003774 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d108      	bne.n	800375a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	2b00      	cmp	r3, #0
 800374e:	d030      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
 8003758:	e02b      	b.n	80037b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d027      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
 800376a:	e022      	b.n	80037b2 <HAL_DMA_IRQHandler+0x29e>
 800376c:	20000014 	.word	0x20000014
 8003770:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10f      	bne.n	80037a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0210 	bic.w	r2, r2, #16
 8003790:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d032      	beq.n	8003820 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d022      	beq.n	800380c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2205      	movs	r2, #5
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	3301      	adds	r3, #1
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d307      	bcc.n	80037fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f2      	bne.n	80037de <HAL_DMA_IRQHandler+0x2ca>
 80037f8:	e000      	b.n	80037fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80037fa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
 800381c:	e000      	b.n	8003820 <HAL_DMA_IRQHandler+0x30c>
        return;
 800381e:	bf00      	nop
    }
  }
}
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop

08003828 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003844:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d108      	bne.n	8003868 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003866:	e007      	b.n	8003878 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	60da      	str	r2, [r3, #12]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	3b10      	subs	r3, #16
 8003894:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800389e:	4a13      	ldr	r2, [pc, #76]	; (80038ec <DMA_CalcBaseAndBitshift+0x68>)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d909      	bls.n	80038c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ba:	f023 0303 	bic.w	r3, r3, #3
 80038be:	1d1a      	adds	r2, r3, #4
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	659a      	str	r2, [r3, #88]	; 0x58
 80038c4:	e007      	b.n	80038d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ce:	f023 0303 	bic.w	r3, r3, #3
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	aaaaaaab 	.word	0xaaaaaaab
 80038ec:	08006bb0 	.word	0x08006bb0

080038f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d11f      	bne.n	800394a <DMA_CheckFifoParam+0x5a>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b03      	cmp	r3, #3
 800390e:	d856      	bhi.n	80039be <DMA_CheckFifoParam+0xce>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <DMA_CheckFifoParam+0x28>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	08003929 	.word	0x08003929
 800391c:	0800393b 	.word	0x0800393b
 8003920:	08003929 	.word	0x08003929
 8003924:	080039bf 	.word	0x080039bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d046      	beq.n	80039c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003938:	e043      	b.n	80039c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003942:	d140      	bne.n	80039c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003948:	e03d      	b.n	80039c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003952:	d121      	bne.n	8003998 <DMA_CheckFifoParam+0xa8>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b03      	cmp	r3, #3
 8003958:	d837      	bhi.n	80039ca <DMA_CheckFifoParam+0xda>
 800395a:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <DMA_CheckFifoParam+0x70>)
 800395c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003960:	08003971 	.word	0x08003971
 8003964:	08003977 	.word	0x08003977
 8003968:	08003971 	.word	0x08003971
 800396c:	08003989 	.word	0x08003989
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
      break;
 8003974:	e030      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d025      	beq.n	80039ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003986:	e022      	b.n	80039ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003990:	d11f      	bne.n	80039d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003996:	e01c      	b.n	80039d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d903      	bls.n	80039a6 <DMA_CheckFifoParam+0xb6>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d003      	beq.n	80039ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039a4:	e018      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
      break;
 80039aa:	e015      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00e      	beq.n	80039d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      break;
 80039bc:	e00b      	b.n	80039d6 <DMA_CheckFifoParam+0xe6>
      break;
 80039be:	bf00      	nop
 80039c0:	e00a      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039c2:	bf00      	nop
 80039c4:	e008      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039c6:	bf00      	nop
 80039c8:	e006      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039ca:	bf00      	nop
 80039cc:	e004      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039ce:	bf00      	nop
 80039d0:	e002      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039d6:	bf00      	nop
    }
  } 
  
  return status; 
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop

080039e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	e159      	b.n	8003cb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a04:	2201      	movs	r2, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	f040 8148 	bne.w	8003cb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d005      	beq.n	8003a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d130      	bne.n	8003a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	2203      	movs	r2, #3
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a70:	2201      	movs	r2, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 0201 	and.w	r2, r3, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d017      	beq.n	8003ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d123      	bne.n	8003b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	08da      	lsrs	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3208      	adds	r2, #8
 8003aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	220f      	movs	r2, #15
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	08da      	lsrs	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3208      	adds	r2, #8
 8003b26:	69b9      	ldr	r1, [r7, #24]
 8003b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	2203      	movs	r2, #3
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0203 	and.w	r2, r3, #3
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80a2 	beq.w	8003cb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	4b57      	ldr	r3, [pc, #348]	; (8003cd0 <HAL_GPIO_Init+0x2e8>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	4a56      	ldr	r2, [pc, #344]	; (8003cd0 <HAL_GPIO_Init+0x2e8>)
 8003b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b7e:	4b54      	ldr	r3, [pc, #336]	; (8003cd0 <HAL_GPIO_Init+0x2e8>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8a:	4a52      	ldr	r2, [pc, #328]	; (8003cd4 <HAL_GPIO_Init+0x2ec>)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	089b      	lsrs	r3, r3, #2
 8003b90:	3302      	adds	r3, #2
 8003b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a49      	ldr	r2, [pc, #292]	; (8003cd8 <HAL_GPIO_Init+0x2f0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d019      	beq.n	8003bea <HAL_GPIO_Init+0x202>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a48      	ldr	r2, [pc, #288]	; (8003cdc <HAL_GPIO_Init+0x2f4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_GPIO_Init+0x1fe>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a47      	ldr	r2, [pc, #284]	; (8003ce0 <HAL_GPIO_Init+0x2f8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00d      	beq.n	8003be2 <HAL_GPIO_Init+0x1fa>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a46      	ldr	r2, [pc, #280]	; (8003ce4 <HAL_GPIO_Init+0x2fc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d007      	beq.n	8003bde <HAL_GPIO_Init+0x1f6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a45      	ldr	r2, [pc, #276]	; (8003ce8 <HAL_GPIO_Init+0x300>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_GPIO_Init+0x1f2>
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	e008      	b.n	8003bec <HAL_GPIO_Init+0x204>
 8003bda:	2307      	movs	r3, #7
 8003bdc:	e006      	b.n	8003bec <HAL_GPIO_Init+0x204>
 8003bde:	2303      	movs	r3, #3
 8003be0:	e004      	b.n	8003bec <HAL_GPIO_Init+0x204>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e002      	b.n	8003bec <HAL_GPIO_Init+0x204>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_GPIO_Init+0x204>
 8003bea:	2300      	movs	r3, #0
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	f002 0203 	and.w	r2, r2, #3
 8003bf2:	0092      	lsls	r2, r2, #2
 8003bf4:	4093      	lsls	r3, r2
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bfc:	4935      	ldr	r1, [pc, #212]	; (8003cd4 <HAL_GPIO_Init+0x2ec>)
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	3302      	adds	r3, #2
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c0a:	4b38      	ldr	r3, [pc, #224]	; (8003cec <HAL_GPIO_Init+0x304>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	; (8003cec <HAL_GPIO_Init+0x304>)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c34:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <HAL_GPIO_Init+0x304>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c58:	4a24      	ldr	r2, [pc, #144]	; (8003cec <HAL_GPIO_Init+0x304>)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c5e:	4b23      	ldr	r3, [pc, #140]	; (8003cec <HAL_GPIO_Init+0x304>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	43db      	mvns	r3, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c82:	4a1a      	ldr	r2, [pc, #104]	; (8003cec <HAL_GPIO_Init+0x304>)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c88:	4b18      	ldr	r3, [pc, #96]	; (8003cec <HAL_GPIO_Init+0x304>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4013      	ands	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cac:	4a0f      	ldr	r2, [pc, #60]	; (8003cec <HAL_GPIO_Init+0x304>)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	2b0f      	cmp	r3, #15
 8003cbc:	f67f aea2 	bls.w	8003a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	3724      	adds	r7, #36	; 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40013800 	.word	0x40013800
 8003cd8:	40020000 	.word	0x40020000
 8003cdc:	40020400 	.word	0x40020400
 8003ce0:	40020800 	.word	0x40020800
 8003ce4:	40020c00 	.word	0x40020c00
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40013c00 	.word	0x40013c00

08003cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	887b      	ldrh	r3, [r7, #2]
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e001      	b.n	8003d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	807b      	strh	r3, [r7, #2]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d30:	787b      	ldrb	r3, [r7, #1]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d3c:	e003      	b.n	8003d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d3e:	887b      	ldrh	r3, [r7, #2]
 8003d40:	041a      	lsls	r2, r3, #16
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	619a      	str	r2, [r3, #24]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d006      	beq.n	8003d78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d6a:	4a05      	ldr	r2, [pc, #20]	; (8003d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fd f99e 	bl	80010b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40013c00 	.word	0x40013c00

08003d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e12b      	b.n	8003fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fe fa6e 	bl	800228c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	; 0x24
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003de8:	f001 f838 	bl	8004e5c <HAL_RCC_GetPCLK1Freq>
 8003dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4a81      	ldr	r2, [pc, #516]	; (8003ff8 <HAL_I2C_Init+0x274>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d807      	bhi.n	8003e08 <HAL_I2C_Init+0x84>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4a80      	ldr	r2, [pc, #512]	; (8003ffc <HAL_I2C_Init+0x278>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	bf94      	ite	ls
 8003e00:	2301      	movls	r3, #1
 8003e02:	2300      	movhi	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e006      	b.n	8003e16 <HAL_I2C_Init+0x92>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a7d      	ldr	r2, [pc, #500]	; (8004000 <HAL_I2C_Init+0x27c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	bf94      	ite	ls
 8003e10:	2301      	movls	r3, #1
 8003e12:	2300      	movhi	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e0e7      	b.n	8003fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a78      	ldr	r2, [pc, #480]	; (8004004 <HAL_I2C_Init+0x280>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	0c9b      	lsrs	r3, r3, #18
 8003e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4a6a      	ldr	r2, [pc, #424]	; (8003ff8 <HAL_I2C_Init+0x274>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d802      	bhi.n	8003e58 <HAL_I2C_Init+0xd4>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	3301      	adds	r3, #1
 8003e56:	e009      	b.n	8003e6c <HAL_I2C_Init+0xe8>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	4a69      	ldr	r2, [pc, #420]	; (8004008 <HAL_I2C_Init+0x284>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	495c      	ldr	r1, [pc, #368]	; (8003ff8 <HAL_I2C_Init+0x274>)
 8003e88:	428b      	cmp	r3, r1
 8003e8a:	d819      	bhi.n	8003ec0 <HAL_I2C_Init+0x13c>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1e59      	subs	r1, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e9a:	1c59      	adds	r1, r3, #1
 8003e9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ea0:	400b      	ands	r3, r1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_I2C_Init+0x138>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1e59      	subs	r1, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eba:	e051      	b.n	8003f60 <HAL_I2C_Init+0x1dc>
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	e04f      	b.n	8003f60 <HAL_I2C_Init+0x1dc>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d111      	bne.n	8003eec <HAL_I2C_Init+0x168>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	1e58      	subs	r0, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6859      	ldr	r1, [r3, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	440b      	add	r3, r1
 8003ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eda:	3301      	adds	r3, #1
 8003edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	e012      	b.n	8003f12 <HAL_I2C_Init+0x18e>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1e58      	subs	r0, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	0099      	lsls	r1, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f02:	3301      	adds	r3, #1
 8003f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bf0c      	ite	eq
 8003f0c:	2301      	moveq	r3, #1
 8003f0e:	2300      	movne	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_I2C_Init+0x196>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e022      	b.n	8003f60 <HAL_I2C_Init+0x1dc>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10e      	bne.n	8003f40 <HAL_I2C_Init+0x1bc>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1e58      	subs	r0, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	440b      	add	r3, r1
 8003f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f34:	3301      	adds	r3, #1
 8003f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3e:	e00f      	b.n	8003f60 <HAL_I2C_Init+0x1dc>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1e58      	subs	r0, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6859      	ldr	r1, [r3, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	0099      	lsls	r1, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f56:	3301      	adds	r3, #1
 8003f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	6809      	ldr	r1, [r1, #0]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69da      	ldr	r2, [r3, #28]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6911      	ldr	r1, [r2, #16]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68d2      	ldr	r2, [r2, #12]
 8003f9a:	4311      	orrs	r1, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	000186a0 	.word	0x000186a0
 8003ffc:	001e847f 	.word	0x001e847f
 8004000:	003d08ff 	.word	0x003d08ff
 8004004:	431bde83 	.word	0x431bde83
 8004008:	10624dd3 	.word	0x10624dd3

0800400c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	461a      	mov	r2, r3
 8004018:	460b      	mov	r3, r1
 800401a:	817b      	strh	r3, [r7, #10]
 800401c:	4613      	mov	r3, r2
 800401e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004020:	f7fe faf4 	bl	800260c <HAL_GetTick>
 8004024:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b20      	cmp	r3, #32
 8004030:	f040 80e0 	bne.w	80041f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	2319      	movs	r3, #25
 800403a:	2201      	movs	r2, #1
 800403c:	4970      	ldr	r1, [pc, #448]	; (8004200 <HAL_I2C_Master_Transmit+0x1f4>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f964 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
 800404c:	e0d3      	b.n	80041f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_I2C_Master_Transmit+0x50>
 8004058:	2302      	movs	r3, #2
 800405a:	e0cc      	b.n	80041f6 <HAL_I2C_Master_Transmit+0x1ea>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d007      	beq.n	8004082 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004090:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2221      	movs	r2, #33	; 0x21
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2210      	movs	r2, #16
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	893a      	ldrh	r2, [r7, #8]
 80040b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4a50      	ldr	r2, [pc, #320]	; (8004204 <HAL_I2C_Master_Transmit+0x1f8>)
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040c4:	8979      	ldrh	r1, [r7, #10]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	6a3a      	ldr	r2, [r7, #32]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f89c 	bl	8004208 <I2C_MasterRequestWrite>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e08d      	b.n	80041f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040f0:	e066      	b.n	80041c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	6a39      	ldr	r1, [r7, #32]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f9de 	bl	80044b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b04      	cmp	r3, #4
 8004108:	d107      	bne.n	800411a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004118:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e06b      	b.n	80041f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	781a      	ldrb	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b04      	cmp	r3, #4
 800415a:	d11b      	bne.n	8004194 <HAL_I2C_Master_Transmit+0x188>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d017      	beq.n	8004194 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	6a39      	ldr	r1, [r7, #32]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f9ce 	bl	800453a <I2C_WaitOnBTFFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00d      	beq.n	80041c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d107      	bne.n	80041bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e01a      	b.n	80041f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d194      	bne.n	80040f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e000      	b.n	80041f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
  }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	00100002 	.word	0x00100002
 8004204:	ffff0000 	.word	0xffff0000

08004208 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	460b      	mov	r3, r1
 8004216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d006      	beq.n	8004232 <I2C_MasterRequestWrite+0x2a>
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d003      	beq.n	8004232 <I2C_MasterRequestWrite+0x2a>
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004230:	d108      	bne.n	8004244 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e00b      	b.n	800425c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	2b12      	cmp	r3, #18
 800424a:	d107      	bne.n	800425c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800425a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f84f 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00d      	beq.n	8004290 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004282:	d103      	bne.n	800428c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800428a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e035      	b.n	80042fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004298:	d108      	bne.n	80042ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800429a:	897b      	ldrh	r3, [r7, #10]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042a8:	611a      	str	r2, [r3, #16]
 80042aa:	e01b      	b.n	80042e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042ac:	897b      	ldrh	r3, [r7, #10]
 80042ae:	11db      	asrs	r3, r3, #7
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 0306 	and.w	r3, r3, #6
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f063 030f 	orn	r3, r3, #15
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	490e      	ldr	r1, [pc, #56]	; (8004304 <I2C_MasterRequestWrite+0xfc>)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f875 	bl	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e010      	b.n	80042fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042da:	897b      	ldrh	r3, [r7, #10]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	4907      	ldr	r1, [pc, #28]	; (8004308 <I2C_MasterRequestWrite+0x100>)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f865 	bl	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	00010008 	.word	0x00010008
 8004308:	00010002 	.word	0x00010002

0800430c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800431c:	e025      	b.n	800436a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d021      	beq.n	800436a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004326:	f7fe f971 	bl	800260c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d302      	bcc.n	800433c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d116      	bne.n	800436a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f043 0220 	orr.w	r2, r3, #32
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e023      	b.n	80043b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	0c1b      	lsrs	r3, r3, #16
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d10d      	bne.n	8004390 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	43da      	mvns	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	e00c      	b.n	80043aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	43da      	mvns	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bf0c      	ite	eq
 80043a2:	2301      	moveq	r3, #1
 80043a4:	2300      	movne	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d0b6      	beq.n	800431e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043c8:	e051      	b.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d8:	d123      	bne.n	8004422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f043 0204 	orr.w	r2, r3, #4
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e046      	b.n	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d021      	beq.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fe f8ef 	bl	800260c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d116      	bne.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f043 0220 	orr.w	r2, r3, #32
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e020      	b.n	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10c      	bne.n	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	43da      	mvns	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf14      	ite	ne
 800448a:	2301      	movne	r3, #1
 800448c:	2300      	moveq	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	e00b      	b.n	80044aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	43da      	mvns	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf14      	ite	ne
 80044a4:	2301      	movne	r3, #1
 80044a6:	2300      	moveq	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d18d      	bne.n	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c4:	e02d      	b.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f878 	bl	80045bc <I2C_IsAcknowledgeFailed>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e02d      	b.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d021      	beq.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044de:	f7fe f895 	bl	800260c <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d302      	bcc.n	80044f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d116      	bne.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f043 0220 	orr.w	r2, r3, #32
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e007      	b.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452c:	2b80      	cmp	r3, #128	; 0x80
 800452e:	d1ca      	bne.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004546:	e02d      	b.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f837 	bl	80045bc <I2C_IsAcknowledgeFailed>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e02d      	b.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d021      	beq.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004560:	f7fe f854 	bl	800260c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	429a      	cmp	r2, r3
 800456e:	d302      	bcc.n	8004576 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d116      	bne.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e007      	b.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d1ca      	bne.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d2:	d11b      	bne.n	800460c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	f043 0204 	orr.w	r2, r3, #4
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e264      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d075      	beq.n	8004726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800463a:	4ba3      	ldr	r3, [pc, #652]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b04      	cmp	r3, #4
 8004644:	d00c      	beq.n	8004660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004646:	4ba0      	ldr	r3, [pc, #640]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800464e:	2b08      	cmp	r3, #8
 8004650:	d112      	bne.n	8004678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004652:	4b9d      	ldr	r3, [pc, #628]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800465e:	d10b      	bne.n	8004678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	4b99      	ldr	r3, [pc, #612]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d05b      	beq.n	8004724 <HAL_RCC_OscConfig+0x108>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d157      	bne.n	8004724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e23f      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004680:	d106      	bne.n	8004690 <HAL_RCC_OscConfig+0x74>
 8004682:	4b91      	ldr	r3, [pc, #580]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a90      	ldr	r2, [pc, #576]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e01d      	b.n	80046cc <HAL_RCC_OscConfig+0xb0>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x98>
 800469a:	4b8b      	ldr	r3, [pc, #556]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a8a      	ldr	r2, [pc, #552]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	4b88      	ldr	r3, [pc, #544]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a87      	ldr	r2, [pc, #540]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_OscConfig+0xb0>
 80046b4:	4b84      	ldr	r3, [pc, #528]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a83      	ldr	r2, [pc, #524]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b81      	ldr	r3, [pc, #516]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a80      	ldr	r2, [pc, #512]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d013      	beq.n	80046fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d4:	f7fd ff9a 	bl	800260c <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046dc:	f7fd ff96 	bl	800260c <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b64      	cmp	r3, #100	; 0x64
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e204      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ee:	4b76      	ldr	r3, [pc, #472]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0xc0>
 80046fa:	e014      	b.n	8004726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fd ff86 	bl	800260c <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004704:	f7fd ff82 	bl	800260c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e1f0      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004716:	4b6c      	ldr	r3, [pc, #432]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0xe8>
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d063      	beq.n	80047fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004732:	4b65      	ldr	r3, [pc, #404]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800473e:	4b62      	ldr	r3, [pc, #392]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004746:	2b08      	cmp	r3, #8
 8004748:	d11c      	bne.n	8004784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474a:	4b5f      	ldr	r3, [pc, #380]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d116      	bne.n	8004784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004756:	4b5c      	ldr	r3, [pc, #368]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_RCC_OscConfig+0x152>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d001      	beq.n	800476e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e1c4      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476e:	4b56      	ldr	r3, [pc, #344]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4952      	ldr	r1, [pc, #328]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004782:	e03a      	b.n	80047fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800478c:	4b4f      	ldr	r3, [pc, #316]	; (80048cc <HAL_RCC_OscConfig+0x2b0>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fd ff3b 	bl	800260c <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800479a:	f7fd ff37 	bl	800260c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e1a5      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ac:	4b46      	ldr	r3, [pc, #280]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b8:	4b43      	ldr	r3, [pc, #268]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4940      	ldr	r1, [pc, #256]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	600b      	str	r3, [r1, #0]
 80047cc:	e015      	b.n	80047fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ce:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <HAL_RCC_OscConfig+0x2b0>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fd ff1a 	bl	800260c <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047dc:	f7fd ff16 	bl	800260c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e184      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ee:	4b36      	ldr	r3, [pc, #216]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d030      	beq.n	8004868 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d016      	beq.n	800483c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800480e:	4b30      	ldr	r3, [pc, #192]	; (80048d0 <HAL_RCC_OscConfig+0x2b4>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7fd fefa 	bl	800260c <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800481c:	f7fd fef6 	bl	800260c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e164      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482e:	4b26      	ldr	r3, [pc, #152]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f0      	beq.n	800481c <HAL_RCC_OscConfig+0x200>
 800483a:	e015      	b.n	8004868 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800483c:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <HAL_RCC_OscConfig+0x2b4>)
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004842:	f7fd fee3 	bl	800260c <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800484a:	f7fd fedf 	bl	800260c <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e14d      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485c:	4b1a      	ldr	r3, [pc, #104]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800485e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f0      	bne.n	800484a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80a0 	beq.w	80049b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10f      	bne.n	80048a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	4a0e      	ldr	r2, [pc, #56]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004894:	6413      	str	r3, [r2, #64]	; 0x40
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a6:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_RCC_OscConfig+0x2b8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d121      	bne.n	80048f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048b2:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <HAL_RCC_OscConfig+0x2b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a07      	ldr	r2, [pc, #28]	; (80048d4 <HAL_RCC_OscConfig+0x2b8>)
 80048b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048be:	f7fd fea5 	bl	800260c <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c4:	e011      	b.n	80048ea <HAL_RCC_OscConfig+0x2ce>
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	42470000 	.word	0x42470000
 80048d0:	42470e80 	.word	0x42470e80
 80048d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d8:	f7fd fe98 	bl	800260c <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e106      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ea:	4b85      	ldr	r3, [pc, #532]	; (8004b00 <HAL_RCC_OscConfig+0x4e4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d106      	bne.n	800490c <HAL_RCC_OscConfig+0x2f0>
 80048fe:	4b81      	ldr	r3, [pc, #516]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	4a80      	ldr	r2, [pc, #512]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6713      	str	r3, [r2, #112]	; 0x70
 800490a:	e01c      	b.n	8004946 <HAL_RCC_OscConfig+0x32a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b05      	cmp	r3, #5
 8004912:	d10c      	bne.n	800492e <HAL_RCC_OscConfig+0x312>
 8004914:	4b7b      	ldr	r3, [pc, #492]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 8004916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004918:	4a7a      	ldr	r2, [pc, #488]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 800491a:	f043 0304 	orr.w	r3, r3, #4
 800491e:	6713      	str	r3, [r2, #112]	; 0x70
 8004920:	4b78      	ldr	r3, [pc, #480]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004924:	4a77      	ldr	r2, [pc, #476]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	6713      	str	r3, [r2, #112]	; 0x70
 800492c:	e00b      	b.n	8004946 <HAL_RCC_OscConfig+0x32a>
 800492e:	4b75      	ldr	r3, [pc, #468]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a74      	ldr	r2, [pc, #464]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	4b72      	ldr	r3, [pc, #456]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	4a71      	ldr	r2, [pc, #452]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 8004940:	f023 0304 	bic.w	r3, r3, #4
 8004944:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d015      	beq.n	800497a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494e:	f7fd fe5d 	bl	800260c <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004954:	e00a      	b.n	800496c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fd fe59 	bl	800260c <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e0c5      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496c:	4b65      	ldr	r3, [pc, #404]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ee      	beq.n	8004956 <HAL_RCC_OscConfig+0x33a>
 8004978:	e014      	b.n	80049a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497a:	f7fd fe47 	bl	800260c <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004980:	e00a      	b.n	8004998 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004982:	f7fd fe43 	bl	800260c <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004990:	4293      	cmp	r3, r2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e0af      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004998:	4b5a      	ldr	r3, [pc, #360]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1ee      	bne.n	8004982 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d105      	bne.n	80049b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049aa:	4b56      	ldr	r3, [pc, #344]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	4a55      	ldr	r2, [pc, #340]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 80049b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 809b 	beq.w	8004af6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049c0:	4b50      	ldr	r3, [pc, #320]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 030c 	and.w	r3, r3, #12
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d05c      	beq.n	8004a86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d141      	bne.n	8004a58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d4:	4b4c      	ldr	r3, [pc, #304]	; (8004b08 <HAL_RCC_OscConfig+0x4ec>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049da:	f7fd fe17 	bl	800260c <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e2:	f7fd fe13 	bl	800260c <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e081      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f4:	4b43      	ldr	r3, [pc, #268]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f0      	bne.n	80049e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	019b      	lsls	r3, r3, #6
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	061b      	lsls	r3, r3, #24
 8004a24:	4937      	ldr	r1, [pc, #220]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a2a:	4b37      	ldr	r3, [pc, #220]	; (8004b08 <HAL_RCC_OscConfig+0x4ec>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7fd fdec 	bl	800260c <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fd fde8 	bl	800260c <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e056      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4a:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x41c>
 8004a56:	e04e      	b.n	8004af6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a58:	4b2b      	ldr	r3, [pc, #172]	; (8004b08 <HAL_RCC_OscConfig+0x4ec>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5e:	f7fd fdd5 	bl	800260c <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a66:	f7fd fdd1 	bl	800260c <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e03f      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a78:	4b22      	ldr	r3, [pc, #136]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f0      	bne.n	8004a66 <HAL_RCC_OscConfig+0x44a>
 8004a84:	e037      	b.n	8004af6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e032      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a92:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <HAL_RCC_OscConfig+0x4e8>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d028      	beq.n	8004af2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d121      	bne.n	8004af2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d11a      	bne.n	8004af2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ac8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d111      	bne.n	8004af2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	085b      	lsrs	r3, r3, #1
 8004ada:	3b01      	subs	r3, #1
 8004adc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d107      	bne.n	8004af2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d001      	beq.n	8004af6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40007000 	.word	0x40007000
 8004b04:	40023800 	.word	0x40023800
 8004b08:	42470060 	.word	0x42470060

08004b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0cc      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b20:	4b68      	ldr	r3, [pc, #416]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d90c      	bls.n	8004b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b65      	ldr	r3, [pc, #404]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	4b63      	ldr	r3, [pc, #396]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0b8      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d020      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b60:	4b59      	ldr	r3, [pc, #356]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a58      	ldr	r2, [pc, #352]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b78:	4b53      	ldr	r3, [pc, #332]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	4a52      	ldr	r2, [pc, #328]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b84:	4b50      	ldr	r3, [pc, #320]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	494d      	ldr	r1, [pc, #308]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d044      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004baa:	4b47      	ldr	r3, [pc, #284]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d119      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e07f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d003      	beq.n	8004bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d107      	bne.n	8004bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bca:	4b3f      	ldr	r3, [pc, #252]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e06f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bda:	4b3b      	ldr	r3, [pc, #236]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e067      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bea:	4b37      	ldr	r3, [pc, #220]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f023 0203 	bic.w	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	4934      	ldr	r1, [pc, #208]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bfc:	f7fd fd06 	bl	800260c <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c02:	e00a      	b.n	8004c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c04:	f7fd fd02 	bl	800260c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e04f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1a:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 020c 	and.w	r2, r3, #12
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d1eb      	bne.n	8004c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c2c:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d20c      	bcs.n	8004c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	4b22      	ldr	r3, [pc, #136]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c42:	4b20      	ldr	r3, [pc, #128]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e032      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c60:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4916      	ldr	r1, [pc, #88]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c7e:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	490e      	ldr	r1, [pc, #56]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c92:	f000 f821 	bl	8004cd8 <HAL_RCC_GetSysClockFreq>
 8004c96:	4602      	mov	r2, r0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	091b      	lsrs	r3, r3, #4
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	490a      	ldr	r1, [pc, #40]	; (8004ccc <HAL_RCC_ClockConfig+0x1c0>)
 8004ca4:	5ccb      	ldrb	r3, [r1, r3]
 8004ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8004caa:	4a09      	ldr	r2, [pc, #36]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cae:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fd fc66 	bl	8002584 <HAL_InitTick>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40023c00 	.word	0x40023c00
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	08006b98 	.word	0x08006b98
 8004cd0:	20000014 	.word	0x20000014
 8004cd4:	20000018 	.word	0x20000018

08004cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd8:	b5b0      	push	{r4, r5, r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cde:	2100      	movs	r1, #0
 8004ce0:	6079      	str	r1, [r7, #4]
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	60f9      	str	r1, [r7, #12]
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004cea:	2100      	movs	r1, #0
 8004cec:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cee:	4952      	ldr	r1, [pc, #328]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cf0:	6889      	ldr	r1, [r1, #8]
 8004cf2:	f001 010c 	and.w	r1, r1, #12
 8004cf6:	2908      	cmp	r1, #8
 8004cf8:	d00d      	beq.n	8004d16 <HAL_RCC_GetSysClockFreq+0x3e>
 8004cfa:	2908      	cmp	r1, #8
 8004cfc:	f200 8094 	bhi.w	8004e28 <HAL_RCC_GetSysClockFreq+0x150>
 8004d00:	2900      	cmp	r1, #0
 8004d02:	d002      	beq.n	8004d0a <HAL_RCC_GetSysClockFreq+0x32>
 8004d04:	2904      	cmp	r1, #4
 8004d06:	d003      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0x38>
 8004d08:	e08e      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d0a:	4b4c      	ldr	r3, [pc, #304]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x164>)
 8004d0c:	60bb      	str	r3, [r7, #8]
       break;
 8004d0e:	e08e      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d10:	4b4b      	ldr	r3, [pc, #300]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d12:	60bb      	str	r3, [r7, #8]
      break;
 8004d14:	e08b      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d16:	4948      	ldr	r1, [pc, #288]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d18:	6849      	ldr	r1, [r1, #4]
 8004d1a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004d1e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d20:	4945      	ldr	r1, [pc, #276]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d22:	6849      	ldr	r1, [r1, #4]
 8004d24:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	d024      	beq.n	8004d76 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2c:	4942      	ldr	r1, [pc, #264]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d2e:	6849      	ldr	r1, [r1, #4]
 8004d30:	0989      	lsrs	r1, r1, #6
 8004d32:	4608      	mov	r0, r1
 8004d34:	f04f 0100 	mov.w	r1, #0
 8004d38:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004d3c:	f04f 0500 	mov.w	r5, #0
 8004d40:	ea00 0204 	and.w	r2, r0, r4
 8004d44:	ea01 0305 	and.w	r3, r1, r5
 8004d48:	493d      	ldr	r1, [pc, #244]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d4a:	fb01 f003 	mul.w	r0, r1, r3
 8004d4e:	2100      	movs	r1, #0
 8004d50:	fb01 f102 	mul.w	r1, r1, r2
 8004d54:	1844      	adds	r4, r0, r1
 8004d56:	493a      	ldr	r1, [pc, #232]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d58:	fba2 0101 	umull	r0, r1, r2, r1
 8004d5c:	1863      	adds	r3, r4, r1
 8004d5e:	4619      	mov	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	f7fb fa8a 	bl	8000280 <__aeabi_uldivmod>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4613      	mov	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e04a      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d76:	4b30      	ldr	r3, [pc, #192]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	099b      	lsrs	r3, r3, #6
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d86:	f04f 0100 	mov.w	r1, #0
 8004d8a:	ea02 0400 	and.w	r4, r2, r0
 8004d8e:	ea03 0501 	and.w	r5, r3, r1
 8004d92:	4620      	mov	r0, r4
 8004d94:	4629      	mov	r1, r5
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	014b      	lsls	r3, r1, #5
 8004da0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004da4:	0142      	lsls	r2, r0, #5
 8004da6:	4610      	mov	r0, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	1b00      	subs	r0, r0, r4
 8004dac:	eb61 0105 	sbc.w	r1, r1, r5
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	018b      	lsls	r3, r1, #6
 8004dba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004dbe:	0182      	lsls	r2, r0, #6
 8004dc0:	1a12      	subs	r2, r2, r0
 8004dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8004dc6:	f04f 0000 	mov.w	r0, #0
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	00d9      	lsls	r1, r3, #3
 8004dd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dd4:	00d0      	lsls	r0, r2, #3
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	1912      	adds	r2, r2, r4
 8004ddc:	eb45 0303 	adc.w	r3, r5, r3
 8004de0:	f04f 0000 	mov.w	r0, #0
 8004de4:	f04f 0100 	mov.w	r1, #0
 8004de8:	0299      	lsls	r1, r3, #10
 8004dea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004dee:	0290      	lsls	r0, r2, #10
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4610      	mov	r0, r2
 8004df6:	4619      	mov	r1, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	f7fb fa3e 	bl	8000280 <__aeabi_uldivmod>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4613      	mov	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	3301      	adds	r3, #1
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e24:	60bb      	str	r3, [r7, #8]
      break;
 8004e26:	e002      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e28:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x164>)
 8004e2a:	60bb      	str	r3, [r7, #8]
      break;
 8004e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bdb0      	pop	{r4, r5, r7, pc}
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	00f42400 	.word	0x00f42400
 8004e40:	017d7840 	.word	0x017d7840

08004e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e48:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20000014 	.word	0x20000014

08004e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e60:	f7ff fff0 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	0a9b      	lsrs	r3, r3, #10
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	4903      	ldr	r1, [pc, #12]	; (8004e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	08006ba8 	.word	0x08006ba8

08004e84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d105      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d035      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004eac:	4b67      	ldr	r3, [pc, #412]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eb2:	f7fd fbab 	bl	800260c <HAL_GetTick>
 8004eb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eba:	f7fd fba7 	bl	800260c <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0ba      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ecc:	4b60      	ldr	r3, [pc, #384]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f0      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	019a      	lsls	r2, r3, #6
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	071b      	lsls	r3, r3, #28
 8004ee4:	495a      	ldr	r1, [pc, #360]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004eec:	4b57      	ldr	r3, [pc, #348]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ef2:	f7fd fb8b 	bl	800260c <HAL_GetTick>
 8004ef6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004efa:	f7fd fb87 	bl	800260c <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e09a      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f0c:	4b50      	ldr	r3, [pc, #320]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8083 	beq.w	800502c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	4b49      	ldr	r3, [pc, #292]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	4a48      	ldr	r2, [pc, #288]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f34:	6413      	str	r3, [r2, #64]	; 0x40
 8004f36:	4b46      	ldr	r3, [pc, #280]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f42:	4b44      	ldr	r3, [pc, #272]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a43      	ldr	r2, [pc, #268]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f4e:	f7fd fb5d 	bl	800260c <HAL_GetTick>
 8004f52:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f54:	e008      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f56:	f7fd fb59 	bl	800260c <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e06c      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f68:	4b3a      	ldr	r3, [pc, #232]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f74:	4b36      	ldr	r3, [pc, #216]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d02f      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d028      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f92:	4b2f      	ldr	r3, [pc, #188]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f9c:	4b2e      	ldr	r3, [pc, #184]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa2:	4b2d      	ldr	r3, [pc, #180]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fa8:	4a29      	ldr	r2, [pc, #164]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fae:	4b28      	ldr	r3, [pc, #160]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d114      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fba:	f7fd fb27 	bl	800260c <HAL_GetTick>
 8004fbe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc0:	e00a      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc2:	f7fd fb23 	bl	800260c <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e034      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0ee      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ff0:	d10d      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ff2:	4b17      	ldr	r3, [pc, #92]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005006:	4912      	ldr	r1, [pc, #72]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005008:	4313      	orrs	r3, r2
 800500a:	608b      	str	r3, [r1, #8]
 800500c:	e005      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800500e:	4b10      	ldr	r3, [pc, #64]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	4a0f      	ldr	r2, [pc, #60]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005014:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005018:	6093      	str	r3, [r2, #8]
 800501a:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800501c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005026:	490a      	ldr	r1, [pc, #40]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005028:	4313      	orrs	r3, r2
 800502a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	7c1a      	ldrb	r2, [r3, #16]
 800503c:	4b07      	ldr	r3, [pc, #28]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800503e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	42470068 	.word	0x42470068
 8005050:	40023800 	.word	0x40023800
 8005054:	40007000 	.word	0x40007000
 8005058:	42470e40 	.word	0x42470e40
 800505c:	424711e0 	.word	0x424711e0

08005060 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e083      	b.n	800517a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	7f5b      	ldrb	r3, [r3, #29]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d105      	bne.n	8005088 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fd f94a 	bl	800231c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	22ca      	movs	r2, #202	; 0xca
 8005094:	625a      	str	r2, [r3, #36]	; 0x24
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2253      	movs	r2, #83	; 0x53
 800509c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fc26 	bl	80058f0 <RTC_EnterInitMode>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d008      	beq.n	80050bc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	22ff      	movs	r2, #255	; 0xff
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2204      	movs	r2, #4
 80050b6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e05e      	b.n	800517a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ce:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6899      	ldr	r1, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68d2      	ldr	r2, [r2, #12]
 80050f6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6919      	ldr	r1, [r3, #16]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	041a      	lsls	r2, r3, #16
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800511a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10e      	bne.n	8005148 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fbb8 	bl	80058a0 <HAL_RTC_WaitForSynchro>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	22ff      	movs	r2, #255	; 0xff
 800513c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2204      	movs	r2, #4
 8005142:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e018      	b.n	800517a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005156:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	22ff      	movs	r2, #255	; 0xff
 8005170:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005178:	2300      	movs	r3, #0
  }
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005182:	b590      	push	{r4, r7, lr}
 8005184:	b087      	sub	sp, #28
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	7f1b      	ldrb	r3, [r3, #28]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_RTC_SetTime+0x1c>
 800519a:	2302      	movs	r3, #2
 800519c:	e0aa      	b.n	80052f4 <HAL_RTC_SetTime+0x172>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2201      	movs	r2, #1
 80051a2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2202      	movs	r2, #2
 80051a8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d126      	bne.n	80051fe <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2200      	movs	r2, #0
 80051c2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fbbd 	bl	8005948 <RTC_ByteToBcd2>
 80051ce:	4603      	mov	r3, r0
 80051d0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	785b      	ldrb	r3, [r3, #1]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fbb6 	bl	8005948 <RTC_ByteToBcd2>
 80051dc:	4603      	mov	r3, r0
 80051de:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80051e0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	789b      	ldrb	r3, [r3, #2]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fbae 	bl	8005948 <RTC_ByteToBcd2>
 80051ec:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80051ee:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	78db      	ldrb	r3, [r3, #3]
 80051f6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e018      	b.n	8005230 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2200      	movs	r2, #0
 8005210:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	785b      	ldrb	r3, [r3, #1]
 800521c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800521e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005224:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	78db      	ldrb	r3, [r3, #3]
 800522a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	22ca      	movs	r2, #202	; 0xca
 8005236:	625a      	str	r2, [r3, #36]	; 0x24
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2253      	movs	r2, #83	; 0x53
 800523e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 fb55 	bl	80058f0 <RTC_EnterInitMode>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	22ff      	movs	r2, #255	; 0xff
 8005252:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2204      	movs	r2, #4
 8005258:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e047      	b.n	80052f4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800526e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005272:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005282:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6899      	ldr	r1, [r3, #8]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	431a      	orrs	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052aa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d111      	bne.n	80052de <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 faf0 	bl	80058a0 <HAL_RTC_WaitForSynchro>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00b      	beq.n	80052de <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	22ff      	movs	r2, #255	; 0xff
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2204      	movs	r2, #4
 80052d2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e00a      	b.n	80052f4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	22ff      	movs	r2, #255	; 0xff
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80052f2:	2300      	movs	r3, #0
  }
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd90      	pop	{r4, r7, pc}

080052fc <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800532e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005332:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	0c1b      	lsrs	r3, r3, #16
 8005338:	b2db      	uxtb	r3, r3
 800533a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800533e:	b2da      	uxtb	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	0a1b      	lsrs	r3, r3, #8
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800534e:	b2da      	uxtb	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535c:	b2da      	uxtb	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	0c1b      	lsrs	r3, r3, #16
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	b2da      	uxtb	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d11a      	bne.n	80053ae <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fb01 	bl	8005984 <RTC_Bcd2ToByte>
 8005382:	4603      	mov	r3, r0
 8005384:	461a      	mov	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 faf8 	bl	8005984 <RTC_Bcd2ToByte>
 8005394:	4603      	mov	r3, r0
 8005396:	461a      	mov	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	789b      	ldrb	r3, [r3, #2]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 faef 	bl	8005984 <RTC_Bcd2ToByte>
 80053a6:	4603      	mov	r3, r0
 80053a8:	461a      	mov	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053b8:	b590      	push	{r4, r7, lr}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	7f1b      	ldrb	r3, [r3, #28]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_RTC_SetDate+0x1c>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e094      	b.n	80054fe <HAL_RTC_SetDate+0x146>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2201      	movs	r2, #1
 80053d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2202      	movs	r2, #2
 80053de:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10e      	bne.n	8005404 <HAL_RTC_SetDate+0x4c>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	785b      	ldrb	r3, [r3, #1]
 80053ea:	f003 0310 	and.w	r3, r3, #16
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	f023 0310 	bic.w	r3, r3, #16
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	330a      	adds	r3, #10
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d11c      	bne.n	8005444 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	78db      	ldrb	r3, [r3, #3]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fa9a 	bl	8005948 <RTC_ByteToBcd2>
 8005414:	4603      	mov	r3, r0
 8005416:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	785b      	ldrb	r3, [r3, #1]
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fa93 	bl	8005948 <RTC_ByteToBcd2>
 8005422:	4603      	mov	r3, r0
 8005424:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005426:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	789b      	ldrb	r3, [r3, #2]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fa8b 	bl	8005948 <RTC_ByteToBcd2>
 8005432:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005434:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e00e      	b.n	8005462 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	78db      	ldrb	r3, [r3, #3]
 8005448:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	785b      	ldrb	r3, [r3, #1]
 800544e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005450:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005456:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	22ca      	movs	r2, #202	; 0xca
 8005468:	625a      	str	r2, [r3, #36]	; 0x24
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2253      	movs	r2, #83	; 0x53
 8005470:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fa3c 	bl	80058f0 <RTC_EnterInitMode>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	22ff      	movs	r2, #255	; 0xff
 8005484:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2204      	movs	r2, #4
 800548a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e033      	b.n	80054fe <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054a4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054b4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d111      	bne.n	80054e8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f9eb 	bl	80058a0 <HAL_RTC_WaitForSynchro>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	22ff      	movs	r2, #255	; 0xff
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2204      	movs	r2, #4
 80054dc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e00a      	b.n	80054fe <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	22ff      	movs	r2, #255	; 0xff
 80054ee:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80054fc:	2300      	movs	r3, #0
  }
}
 80054fe:	4618      	mov	r0, r3
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd90      	pop	{r4, r7, pc}

08005506 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b086      	sub	sp, #24
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005520:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005524:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	0c1b      	lsrs	r3, r3, #16
 800552a:	b2da      	uxtb	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	0a1b      	lsrs	r3, r3, #8
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	b2da      	uxtb	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005548:	b2da      	uxtb	r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	0b5b      	lsrs	r3, r3, #13
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d11a      	bne.n	800559a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	78db      	ldrb	r3, [r3, #3]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fa0b 	bl	8005984 <RTC_Bcd2ToByte>
 800556e:	4603      	mov	r3, r0
 8005570:	461a      	mov	r2, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	785b      	ldrb	r3, [r3, #1]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fa02 	bl	8005984 <RTC_Bcd2ToByte>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	789b      	ldrb	r3, [r3, #2]
 800558c:	4618      	mov	r0, r3
 800558e:	f000 f9f9 	bl	8005984 <RTC_Bcd2ToByte>
 8005592:	4603      	mov	r3, r0
 8005594:	461a      	mov	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80055a4:	b590      	push	{r4, r7, lr}
 80055a6:	b089      	sub	sp, #36	; 0x24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	2300      	movs	r3, #0
 80055b6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80055b8:	4b93      	ldr	r3, [pc, #588]	; (8005808 <HAL_RTC_SetAlarm_IT+0x264>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a93      	ldr	r2, [pc, #588]	; (800580c <HAL_RTC_SetAlarm_IT+0x268>)
 80055be:	fba2 2303 	umull	r2, r3, r2, r3
 80055c2:	0adb      	lsrs	r3, r3, #11
 80055c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055c8:	fb02 f303 	mul.w	r3, r2, r3
 80055cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	7f1b      	ldrb	r3, [r3, #28]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_RTC_SetAlarm_IT+0x36>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e111      	b.n	80057fe <HAL_RTC_SetAlarm_IT+0x25a>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2202      	movs	r2, #2
 80055e4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d137      	bne.n	800565c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d102      	bne.n	8005600 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2200      	movs	r2, #0
 80055fe:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 f99f 	bl	8005948 <RTC_ByteToBcd2>
 800560a:	4603      	mov	r3, r0
 800560c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	785b      	ldrb	r3, [r3, #1]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f998 	bl	8005948 <RTC_ByteToBcd2>
 8005618:	4603      	mov	r3, r0
 800561a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800561c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	789b      	ldrb	r3, [r3, #2]
 8005622:	4618      	mov	r0, r3
 8005624:	f000 f990 	bl	8005948 <RTC_ByteToBcd2>
 8005628:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800562a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	78db      	ldrb	r3, [r3, #3]
 8005632:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005634:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f982 	bl	8005948 <RTC_ByteToBcd2>
 8005644:	4603      	mov	r3, r0
 8005646:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005648:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005650:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005656:	4313      	orrs	r3, r2
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	e023      	b.n	80056a4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2200      	movs	r2, #0
 800566e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	785b      	ldrb	r3, [r3, #1]
 800567a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800567c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005682:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	78db      	ldrb	r3, [r3, #3]
 8005688:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800568a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005692:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005694:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800569a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80056a0:	4313      	orrs	r3, r2
 80056a2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	22ca      	movs	r2, #202	; 0xca
 80056b6:	625a      	str	r2, [r3, #36]	; 0x24
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2253      	movs	r2, #83	; 0x53
 80056be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c8:	d141      	bne.n	800574e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056d8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80056ea:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	1e5a      	subs	r2, r3, #1
 80056f0:	617a      	str	r2, [r7, #20]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10b      	bne.n	800570e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	22ff      	movs	r2, #255	; 0xff
 80056fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2203      	movs	r2, #3
 8005702:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e077      	b.n	80057fe <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0e7      	beq.n	80056ec <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800573a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800574a:	609a      	str	r2, [r3, #8]
 800574c:	e040      	b.n	80057d0 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800575c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800576e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	1e5a      	subs	r2, r3, #1
 8005774:	617a      	str	r2, [r7, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10b      	bne.n	8005792 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	22ff      	movs	r2, #255	; 0xff
 8005780:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2203      	movs	r2, #3
 8005786:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e035      	b.n	80057fe <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0e7      	beq.n	8005770 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057be:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ce:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80057d0:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <HAL_RTC_SetAlarm_IT+0x26c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a0e      	ldr	r2, [pc, #56]	; (8005810 <HAL_RTC_SetAlarm_IT+0x26c>)
 80057d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057da:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80057dc:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <HAL_RTC_SetAlarm_IT+0x26c>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4a0b      	ldr	r2, [pc, #44]	; (8005810 <HAL_RTC_SetAlarm_IT+0x26c>)
 80057e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	22ff      	movs	r2, #255	; 0xff
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3724      	adds	r7, #36	; 0x24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd90      	pop	{r4, r7, pc}
 8005806:	bf00      	nop
 8005808:	20000014 	.word	0x20000014
 800580c:	10624dd3 	.word	0x10624dd3
 8005810:	40013c00 	.word	0x40013c00

08005814 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d012      	beq.n	8005850 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00b      	beq.n	8005850 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fb fc67 	bl	800110c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800584e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d012      	beq.n	8005884 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f902 	bl	8005a76 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	b2da      	uxtb	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005882:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <HAL_RTC_AlarmIRQHandler+0x88>)
 8005886:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800588a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	775a      	strb	r2, [r3, #29]
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40013c00 	.word	0x40013c00

080058a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058ba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058bc:	f7fc fea6 	bl	800260c <HAL_GetTick>
 80058c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80058c2:	e009      	b.n	80058d8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80058c4:	f7fc fea2 	bl	800260c <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058d2:	d901      	bls.n	80058d8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e007      	b.n	80058e8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0ee      	beq.n	80058c4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d119      	bne.n	800593e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f04f 32ff 	mov.w	r2, #4294967295
 8005912:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005914:	f7fc fe7a 	bl	800260c <HAL_GetTick>
 8005918:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800591a:	e009      	b.n	8005930 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800591c:	f7fc fe76 	bl	800260c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800592a:	d901      	bls.n	8005930 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e007      	b.n	8005940 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0ee      	beq.n	800591c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005956:	e005      	b.n	8005964 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	3b0a      	subs	r3, #10
 8005962:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	2b09      	cmp	r3, #9
 8005968:	d8f6      	bhi.n	8005958 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	b2da      	uxtb	r2, r3
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	4313      	orrs	r3, r2
 8005976:	b2db      	uxtb	r3, r3
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	4603      	mov	r3, r0
 800598c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	091b      	lsrs	r3, r3, #4
 8005996:	b2db      	uxtb	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	4413      	add	r3, r2
 80059b2:	b2db      	uxtb	r3, r3
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmouthCalibMinusPulsesValue must be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmouthCalibMinusPulsesValue)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmouthCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	7f1b      	ldrb	r3, [r3, #28]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_RTCEx_SetSmoothCalib+0x1e>
 80059da:	2302      	movs	r3, #2
 80059dc:	e047      	b.n	8005a6e <HAL_RTCEx_SetSmoothCalib+0xae>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2202      	movs	r2, #2
 80059e8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	22ca      	movs	r2, #202	; 0xca
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2253      	movs	r2, #83	; 0x53
 80059f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01e      	beq.n	8005a46 <HAL_RTCEx_SetSmoothCalib+0x86>
  {
  /* Get tick */
  tickstart = HAL_GetTick();
 8005a08:	f7fc fe00 	bl	800260c <HAL_GetTick>
 8005a0c:	6178      	str	r0, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8005a0e:	e013      	b.n	8005a38 <HAL_RTCEx_SetSmoothCalib+0x78>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a10:	f7fc fdfc 	bl	800260c <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a1e:	d90b      	bls.n	8005a38 <HAL_RTCEx_SetSmoothCalib+0x78>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	22ff      	movs	r2, #255	; 0xff
 8005a26:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2203      	movs	r2, #3
 8005a2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e01a      	b.n	8005a6e <HAL_RTCEx_SetSmoothCalib+0xae>
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e4      	bne.n	8005a10 <HAL_RTCEx_SetSmoothCalib+0x50>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmouthCalibMinusPulsesValue);
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	ea42 0103 	orr.w	r1, r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	22ff      	movs	r2, #255	; 0xff
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e041      	b.n	8005b20 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7fc fc4f 	bl	8002354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4610      	mov	r0, r2
 8005aca:	f000 f94f 	bl	8005d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d001      	beq.n	8005b40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e03c      	b.n	8005bba <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1e      	ldr	r2, [pc, #120]	; (8005bc8 <HAL_TIM_Base_Start+0xa0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d018      	beq.n	8005b84 <HAL_TIM_Base_Start+0x5c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5a:	d013      	beq.n	8005b84 <HAL_TIM_Base_Start+0x5c>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a1a      	ldr	r2, [pc, #104]	; (8005bcc <HAL_TIM_Base_Start+0xa4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00e      	beq.n	8005b84 <HAL_TIM_Base_Start+0x5c>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a19      	ldr	r2, [pc, #100]	; (8005bd0 <HAL_TIM_Base_Start+0xa8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d009      	beq.n	8005b84 <HAL_TIM_Base_Start+0x5c>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <HAL_TIM_Base_Start+0xac>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d004      	beq.n	8005b84 <HAL_TIM_Base_Start+0x5c>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a16      	ldr	r2, [pc, #88]	; (8005bd8 <HAL_TIM_Base_Start+0xb0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d111      	bne.n	8005ba8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b06      	cmp	r3, #6
 8005b94:	d010      	beq.n	8005bb8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f042 0201 	orr.w	r2, r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba6:	e007      	b.n	8005bb8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0201 	orr.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	40000c00 	.word	0x40000c00
 8005bd8:	40014000 	.word	0x40014000

08005bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e0b4      	b.n	8005d62 <HAL_TIM_ConfigClockSource+0x186>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c30:	d03e      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c36:	f200 8087 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	f000 8086 	beq.w	8005d4e <HAL_TIM_ConfigClockSource+0x172>
 8005c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c46:	d87f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c48:	2b70      	cmp	r3, #112	; 0x70
 8005c4a:	d01a      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0xa6>
 8005c4c:	2b70      	cmp	r3, #112	; 0x70
 8005c4e:	d87b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c50:	2b60      	cmp	r3, #96	; 0x60
 8005c52:	d050      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8005c54:	2b60      	cmp	r3, #96	; 0x60
 8005c56:	d877      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c58:	2b50      	cmp	r3, #80	; 0x50
 8005c5a:	d03c      	beq.n	8005cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8005c5c:	2b50      	cmp	r3, #80	; 0x50
 8005c5e:	d873      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d058      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x13a>
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d86f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b30      	cmp	r3, #48	; 0x30
 8005c6a:	d064      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c6c:	2b30      	cmp	r3, #48	; 0x30
 8005c6e:	d86b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d060      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d867      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d05c      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d05a      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c80:	e062      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6899      	ldr	r1, [r3, #8]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f000 f965 	bl	8005f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	609a      	str	r2, [r3, #8]
      break;
 8005cae:	e04f      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	6899      	ldr	r1, [r3, #8]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f000 f94e 	bl	8005f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cd2:	609a      	str	r2, [r3, #8]
      break;
 8005cd4:	e03c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6859      	ldr	r1, [r3, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f000 f8c2 	bl	8005e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2150      	movs	r1, #80	; 0x50
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 f91b 	bl	8005f2a <TIM_ITRx_SetConfig>
      break;
 8005cf4:	e02c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 f8e1 	bl	8005eca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2160      	movs	r1, #96	; 0x60
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 f90b 	bl	8005f2a <TIM_ITRx_SetConfig>
      break;
 8005d14:	e01c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6859      	ldr	r1, [r3, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	461a      	mov	r2, r3
 8005d24:	f000 f8a2 	bl	8005e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2140      	movs	r1, #64	; 0x40
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 f8fb 	bl	8005f2a <TIM_ITRx_SetConfig>
      break;
 8005d34:	e00c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f000 f8f2 	bl	8005f2a <TIM_ITRx_SetConfig>
      break;
 8005d46:	e003      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4c:	e000      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a34      	ldr	r2, [pc, #208]	; (8005e50 <TIM_Base_SetConfig+0xe4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00f      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8a:	d00b      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a31      	ldr	r2, [pc, #196]	; (8005e54 <TIM_Base_SetConfig+0xe8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a30      	ldr	r2, [pc, #192]	; (8005e58 <TIM_Base_SetConfig+0xec>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a2f      	ldr	r2, [pc, #188]	; (8005e5c <TIM_Base_SetConfig+0xf0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d108      	bne.n	8005db6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a25      	ldr	r2, [pc, #148]	; (8005e50 <TIM_Base_SetConfig+0xe4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d01b      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc4:	d017      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a22      	ldr	r2, [pc, #136]	; (8005e54 <TIM_Base_SetConfig+0xe8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a21      	ldr	r2, [pc, #132]	; (8005e58 <TIM_Base_SetConfig+0xec>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00f      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a20      	ldr	r2, [pc, #128]	; (8005e5c <TIM_Base_SetConfig+0xf0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00b      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1f      	ldr	r2, [pc, #124]	; (8005e60 <TIM_Base_SetConfig+0xf4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d007      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a1e      	ldr	r2, [pc, #120]	; (8005e64 <TIM_Base_SetConfig+0xf8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d003      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a1d      	ldr	r2, [pc, #116]	; (8005e68 <TIM_Base_SetConfig+0xfc>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d108      	bne.n	8005e08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <TIM_Base_SetConfig+0xe4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d103      	bne.n	8005e3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	615a      	str	r2, [r3, #20]
}
 8005e42:	bf00      	nop
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00
 8005e60:	40014000 	.word	0x40014000
 8005e64:	40014400 	.word	0x40014400
 8005e68:	40014800 	.word	0x40014800

08005e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	f023 0201 	bic.w	r2, r3, #1
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 030a 	bic.w	r3, r3, #10
 8005ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	621a      	str	r2, [r3, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b087      	sub	sp, #28
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f023 0210 	bic.w	r2, r3, #16
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	031b      	lsls	r3, r3, #12
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	621a      	str	r2, [r3, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b085      	sub	sp, #20
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f043 0307 	orr.w	r3, r3, #7
 8005f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	609a      	str	r2, [r3, #8]
}
 8005f54:	bf00      	nop
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	021a      	lsls	r2, r3, #8
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	431a      	orrs	r2, r3
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	609a      	str	r2, [r3, #8]
}
 8005f94:	bf00      	nop
 8005f96:	371c      	adds	r7, #28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e050      	b.n	800605a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d018      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006004:	d013      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a18      	ldr	r2, [pc, #96]	; (800606c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00e      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a16      	ldr	r2, [pc, #88]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d009      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a15      	ldr	r2, [pc, #84]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d004      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a13      	ldr	r2, [pc, #76]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d10c      	bne.n	8006048 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	4313      	orrs	r3, r2
 800603e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40010000 	.word	0x40010000
 800606c:	40000400 	.word	0x40000400
 8006070:	40000800 	.word	0x40000800
 8006074:	40000c00 	.word	0x40000c00
 8006078:	40014000 	.word	0x40014000

0800607c <__errno>:
 800607c:	4b01      	ldr	r3, [pc, #4]	; (8006084 <__errno+0x8>)
 800607e:	6818      	ldr	r0, [r3, #0]
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	20000020 	.word	0x20000020

08006088 <__libc_init_array>:
 8006088:	b570      	push	{r4, r5, r6, lr}
 800608a:	4d0d      	ldr	r5, [pc, #52]	; (80060c0 <__libc_init_array+0x38>)
 800608c:	4c0d      	ldr	r4, [pc, #52]	; (80060c4 <__libc_init_array+0x3c>)
 800608e:	1b64      	subs	r4, r4, r5
 8006090:	10a4      	asrs	r4, r4, #2
 8006092:	2600      	movs	r6, #0
 8006094:	42a6      	cmp	r6, r4
 8006096:	d109      	bne.n	80060ac <__libc_init_array+0x24>
 8006098:	4d0b      	ldr	r5, [pc, #44]	; (80060c8 <__libc_init_array+0x40>)
 800609a:	4c0c      	ldr	r4, [pc, #48]	; (80060cc <__libc_init_array+0x44>)
 800609c:	f000 fcaa 	bl	80069f4 <_init>
 80060a0:	1b64      	subs	r4, r4, r5
 80060a2:	10a4      	asrs	r4, r4, #2
 80060a4:	2600      	movs	r6, #0
 80060a6:	42a6      	cmp	r6, r4
 80060a8:	d105      	bne.n	80060b6 <__libc_init_array+0x2e>
 80060aa:	bd70      	pop	{r4, r5, r6, pc}
 80060ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b0:	4798      	blx	r3
 80060b2:	3601      	adds	r6, #1
 80060b4:	e7ee      	b.n	8006094 <__libc_init_array+0xc>
 80060b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ba:	4798      	blx	r3
 80060bc:	3601      	adds	r6, #1
 80060be:	e7f2      	b.n	80060a6 <__libc_init_array+0x1e>
 80060c0:	08006c18 	.word	0x08006c18
 80060c4:	08006c18 	.word	0x08006c18
 80060c8:	08006c18 	.word	0x08006c18
 80060cc:	08006c1c 	.word	0x08006c1c

080060d0 <__itoa>:
 80060d0:	1e93      	subs	r3, r2, #2
 80060d2:	2b22      	cmp	r3, #34	; 0x22
 80060d4:	b510      	push	{r4, lr}
 80060d6:	460c      	mov	r4, r1
 80060d8:	d904      	bls.n	80060e4 <__itoa+0x14>
 80060da:	2300      	movs	r3, #0
 80060dc:	700b      	strb	r3, [r1, #0]
 80060de:	461c      	mov	r4, r3
 80060e0:	4620      	mov	r0, r4
 80060e2:	bd10      	pop	{r4, pc}
 80060e4:	2a0a      	cmp	r2, #10
 80060e6:	d109      	bne.n	80060fc <__itoa+0x2c>
 80060e8:	2800      	cmp	r0, #0
 80060ea:	da07      	bge.n	80060fc <__itoa+0x2c>
 80060ec:	232d      	movs	r3, #45	; 0x2d
 80060ee:	700b      	strb	r3, [r1, #0]
 80060f0:	4240      	negs	r0, r0
 80060f2:	2101      	movs	r1, #1
 80060f4:	4421      	add	r1, r4
 80060f6:	f000 f82d 	bl	8006154 <__utoa>
 80060fa:	e7f1      	b.n	80060e0 <__itoa+0x10>
 80060fc:	2100      	movs	r1, #0
 80060fe:	e7f9      	b.n	80060f4 <__itoa+0x24>

08006100 <itoa>:
 8006100:	f7ff bfe6 	b.w	80060d0 <__itoa>

08006104 <memset>:
 8006104:	4402      	add	r2, r0
 8006106:	4603      	mov	r3, r0
 8006108:	4293      	cmp	r3, r2
 800610a:	d100      	bne.n	800610e <memset+0xa>
 800610c:	4770      	bx	lr
 800610e:	f803 1b01 	strb.w	r1, [r3], #1
 8006112:	e7f9      	b.n	8006108 <memset+0x4>

08006114 <siprintf>:
 8006114:	b40e      	push	{r1, r2, r3}
 8006116:	b500      	push	{lr}
 8006118:	b09c      	sub	sp, #112	; 0x70
 800611a:	ab1d      	add	r3, sp, #116	; 0x74
 800611c:	9002      	str	r0, [sp, #8]
 800611e:	9006      	str	r0, [sp, #24]
 8006120:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006124:	4809      	ldr	r0, [pc, #36]	; (800614c <siprintf+0x38>)
 8006126:	9107      	str	r1, [sp, #28]
 8006128:	9104      	str	r1, [sp, #16]
 800612a:	4909      	ldr	r1, [pc, #36]	; (8006150 <siprintf+0x3c>)
 800612c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006130:	9105      	str	r1, [sp, #20]
 8006132:	6800      	ldr	r0, [r0, #0]
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	a902      	add	r1, sp, #8
 8006138:	f000 f8aa 	bl	8006290 <_svfiprintf_r>
 800613c:	9b02      	ldr	r3, [sp, #8]
 800613e:	2200      	movs	r2, #0
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	b01c      	add	sp, #112	; 0x70
 8006144:	f85d eb04 	ldr.w	lr, [sp], #4
 8006148:	b003      	add	sp, #12
 800614a:	4770      	bx	lr
 800614c:	20000020 	.word	0x20000020
 8006150:	ffff0208 	.word	0xffff0208

08006154 <__utoa>:
 8006154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006156:	4c1f      	ldr	r4, [pc, #124]	; (80061d4 <__utoa+0x80>)
 8006158:	b08b      	sub	sp, #44	; 0x2c
 800615a:	4605      	mov	r5, r0
 800615c:	460b      	mov	r3, r1
 800615e:	466e      	mov	r6, sp
 8006160:	f104 0c20 	add.w	ip, r4, #32
 8006164:	6820      	ldr	r0, [r4, #0]
 8006166:	6861      	ldr	r1, [r4, #4]
 8006168:	4637      	mov	r7, r6
 800616a:	c703      	stmia	r7!, {r0, r1}
 800616c:	3408      	adds	r4, #8
 800616e:	4564      	cmp	r4, ip
 8006170:	463e      	mov	r6, r7
 8006172:	d1f7      	bne.n	8006164 <__utoa+0x10>
 8006174:	7921      	ldrb	r1, [r4, #4]
 8006176:	7139      	strb	r1, [r7, #4]
 8006178:	1e91      	subs	r1, r2, #2
 800617a:	6820      	ldr	r0, [r4, #0]
 800617c:	6038      	str	r0, [r7, #0]
 800617e:	2922      	cmp	r1, #34	; 0x22
 8006180:	f04f 0100 	mov.w	r1, #0
 8006184:	d904      	bls.n	8006190 <__utoa+0x3c>
 8006186:	7019      	strb	r1, [r3, #0]
 8006188:	460b      	mov	r3, r1
 800618a:	4618      	mov	r0, r3
 800618c:	b00b      	add	sp, #44	; 0x2c
 800618e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006190:	1e58      	subs	r0, r3, #1
 8006192:	4684      	mov	ip, r0
 8006194:	fbb5 f7f2 	udiv	r7, r5, r2
 8006198:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800619c:	fb02 5617 	mls	r6, r2, r7, r5
 80061a0:	4476      	add	r6, lr
 80061a2:	460c      	mov	r4, r1
 80061a4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80061a8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80061ac:	462e      	mov	r6, r5
 80061ae:	42b2      	cmp	r2, r6
 80061b0:	f101 0101 	add.w	r1, r1, #1
 80061b4:	463d      	mov	r5, r7
 80061b6:	d9ed      	bls.n	8006194 <__utoa+0x40>
 80061b8:	2200      	movs	r2, #0
 80061ba:	545a      	strb	r2, [r3, r1]
 80061bc:	1919      	adds	r1, r3, r4
 80061be:	1aa5      	subs	r5, r4, r2
 80061c0:	42aa      	cmp	r2, r5
 80061c2:	dae2      	bge.n	800618a <__utoa+0x36>
 80061c4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80061c8:	780e      	ldrb	r6, [r1, #0]
 80061ca:	7006      	strb	r6, [r0, #0]
 80061cc:	3201      	adds	r2, #1
 80061ce:	f801 5901 	strb.w	r5, [r1], #-1
 80061d2:	e7f4      	b.n	80061be <__utoa+0x6a>
 80061d4:	08006bb8 	.word	0x08006bb8

080061d8 <__ssputs_r>:
 80061d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061dc:	688e      	ldr	r6, [r1, #8]
 80061de:	429e      	cmp	r6, r3
 80061e0:	4682      	mov	sl, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	4690      	mov	r8, r2
 80061e6:	461f      	mov	r7, r3
 80061e8:	d838      	bhi.n	800625c <__ssputs_r+0x84>
 80061ea:	898a      	ldrh	r2, [r1, #12]
 80061ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061f0:	d032      	beq.n	8006258 <__ssputs_r+0x80>
 80061f2:	6825      	ldr	r5, [r4, #0]
 80061f4:	6909      	ldr	r1, [r1, #16]
 80061f6:	eba5 0901 	sub.w	r9, r5, r1
 80061fa:	6965      	ldr	r5, [r4, #20]
 80061fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006200:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006204:	3301      	adds	r3, #1
 8006206:	444b      	add	r3, r9
 8006208:	106d      	asrs	r5, r5, #1
 800620a:	429d      	cmp	r5, r3
 800620c:	bf38      	it	cc
 800620e:	461d      	movcc	r5, r3
 8006210:	0553      	lsls	r3, r2, #21
 8006212:	d531      	bpl.n	8006278 <__ssputs_r+0xa0>
 8006214:	4629      	mov	r1, r5
 8006216:	f000 fb47 	bl	80068a8 <_malloc_r>
 800621a:	4606      	mov	r6, r0
 800621c:	b950      	cbnz	r0, 8006234 <__ssputs_r+0x5c>
 800621e:	230c      	movs	r3, #12
 8006220:	f8ca 3000 	str.w	r3, [sl]
 8006224:	89a3      	ldrh	r3, [r4, #12]
 8006226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800622a:	81a3      	strh	r3, [r4, #12]
 800622c:	f04f 30ff 	mov.w	r0, #4294967295
 8006230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006234:	6921      	ldr	r1, [r4, #16]
 8006236:	464a      	mov	r2, r9
 8006238:	f000 fabe 	bl	80067b8 <memcpy>
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	6126      	str	r6, [r4, #16]
 800624a:	6165      	str	r5, [r4, #20]
 800624c:	444e      	add	r6, r9
 800624e:	eba5 0509 	sub.w	r5, r5, r9
 8006252:	6026      	str	r6, [r4, #0]
 8006254:	60a5      	str	r5, [r4, #8]
 8006256:	463e      	mov	r6, r7
 8006258:	42be      	cmp	r6, r7
 800625a:	d900      	bls.n	800625e <__ssputs_r+0x86>
 800625c:	463e      	mov	r6, r7
 800625e:	4632      	mov	r2, r6
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	4641      	mov	r1, r8
 8006264:	f000 fab6 	bl	80067d4 <memmove>
 8006268:	68a3      	ldr	r3, [r4, #8]
 800626a:	6822      	ldr	r2, [r4, #0]
 800626c:	1b9b      	subs	r3, r3, r6
 800626e:	4432      	add	r2, r6
 8006270:	60a3      	str	r3, [r4, #8]
 8006272:	6022      	str	r2, [r4, #0]
 8006274:	2000      	movs	r0, #0
 8006276:	e7db      	b.n	8006230 <__ssputs_r+0x58>
 8006278:	462a      	mov	r2, r5
 800627a:	f000 fb6f 	bl	800695c <_realloc_r>
 800627e:	4606      	mov	r6, r0
 8006280:	2800      	cmp	r0, #0
 8006282:	d1e1      	bne.n	8006248 <__ssputs_r+0x70>
 8006284:	6921      	ldr	r1, [r4, #16]
 8006286:	4650      	mov	r0, sl
 8006288:	f000 fabe 	bl	8006808 <_free_r>
 800628c:	e7c7      	b.n	800621e <__ssputs_r+0x46>
	...

08006290 <_svfiprintf_r>:
 8006290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006294:	4698      	mov	r8, r3
 8006296:	898b      	ldrh	r3, [r1, #12]
 8006298:	061b      	lsls	r3, r3, #24
 800629a:	b09d      	sub	sp, #116	; 0x74
 800629c:	4607      	mov	r7, r0
 800629e:	460d      	mov	r5, r1
 80062a0:	4614      	mov	r4, r2
 80062a2:	d50e      	bpl.n	80062c2 <_svfiprintf_r+0x32>
 80062a4:	690b      	ldr	r3, [r1, #16]
 80062a6:	b963      	cbnz	r3, 80062c2 <_svfiprintf_r+0x32>
 80062a8:	2140      	movs	r1, #64	; 0x40
 80062aa:	f000 fafd 	bl	80068a8 <_malloc_r>
 80062ae:	6028      	str	r0, [r5, #0]
 80062b0:	6128      	str	r0, [r5, #16]
 80062b2:	b920      	cbnz	r0, 80062be <_svfiprintf_r+0x2e>
 80062b4:	230c      	movs	r3, #12
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295
 80062bc:	e0d1      	b.n	8006462 <_svfiprintf_r+0x1d2>
 80062be:	2340      	movs	r3, #64	; 0x40
 80062c0:	616b      	str	r3, [r5, #20]
 80062c2:	2300      	movs	r3, #0
 80062c4:	9309      	str	r3, [sp, #36]	; 0x24
 80062c6:	2320      	movs	r3, #32
 80062c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80062d0:	2330      	movs	r3, #48	; 0x30
 80062d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800647c <_svfiprintf_r+0x1ec>
 80062d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062da:	f04f 0901 	mov.w	r9, #1
 80062de:	4623      	mov	r3, r4
 80062e0:	469a      	mov	sl, r3
 80062e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062e6:	b10a      	cbz	r2, 80062ec <_svfiprintf_r+0x5c>
 80062e8:	2a25      	cmp	r2, #37	; 0x25
 80062ea:	d1f9      	bne.n	80062e0 <_svfiprintf_r+0x50>
 80062ec:	ebba 0b04 	subs.w	fp, sl, r4
 80062f0:	d00b      	beq.n	800630a <_svfiprintf_r+0x7a>
 80062f2:	465b      	mov	r3, fp
 80062f4:	4622      	mov	r2, r4
 80062f6:	4629      	mov	r1, r5
 80062f8:	4638      	mov	r0, r7
 80062fa:	f7ff ff6d 	bl	80061d8 <__ssputs_r>
 80062fe:	3001      	adds	r0, #1
 8006300:	f000 80aa 	beq.w	8006458 <_svfiprintf_r+0x1c8>
 8006304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006306:	445a      	add	r2, fp
 8006308:	9209      	str	r2, [sp, #36]	; 0x24
 800630a:	f89a 3000 	ldrb.w	r3, [sl]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 80a2 	beq.w	8006458 <_svfiprintf_r+0x1c8>
 8006314:	2300      	movs	r3, #0
 8006316:	f04f 32ff 	mov.w	r2, #4294967295
 800631a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800631e:	f10a 0a01 	add.w	sl, sl, #1
 8006322:	9304      	str	r3, [sp, #16]
 8006324:	9307      	str	r3, [sp, #28]
 8006326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800632a:	931a      	str	r3, [sp, #104]	; 0x68
 800632c:	4654      	mov	r4, sl
 800632e:	2205      	movs	r2, #5
 8006330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006334:	4851      	ldr	r0, [pc, #324]	; (800647c <_svfiprintf_r+0x1ec>)
 8006336:	f7f9 ff53 	bl	80001e0 <memchr>
 800633a:	9a04      	ldr	r2, [sp, #16]
 800633c:	b9d8      	cbnz	r0, 8006376 <_svfiprintf_r+0xe6>
 800633e:	06d0      	lsls	r0, r2, #27
 8006340:	bf44      	itt	mi
 8006342:	2320      	movmi	r3, #32
 8006344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006348:	0711      	lsls	r1, r2, #28
 800634a:	bf44      	itt	mi
 800634c:	232b      	movmi	r3, #43	; 0x2b
 800634e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006352:	f89a 3000 	ldrb.w	r3, [sl]
 8006356:	2b2a      	cmp	r3, #42	; 0x2a
 8006358:	d015      	beq.n	8006386 <_svfiprintf_r+0xf6>
 800635a:	9a07      	ldr	r2, [sp, #28]
 800635c:	4654      	mov	r4, sl
 800635e:	2000      	movs	r0, #0
 8006360:	f04f 0c0a 	mov.w	ip, #10
 8006364:	4621      	mov	r1, r4
 8006366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800636a:	3b30      	subs	r3, #48	; 0x30
 800636c:	2b09      	cmp	r3, #9
 800636e:	d94e      	bls.n	800640e <_svfiprintf_r+0x17e>
 8006370:	b1b0      	cbz	r0, 80063a0 <_svfiprintf_r+0x110>
 8006372:	9207      	str	r2, [sp, #28]
 8006374:	e014      	b.n	80063a0 <_svfiprintf_r+0x110>
 8006376:	eba0 0308 	sub.w	r3, r0, r8
 800637a:	fa09 f303 	lsl.w	r3, r9, r3
 800637e:	4313      	orrs	r3, r2
 8006380:	9304      	str	r3, [sp, #16]
 8006382:	46a2      	mov	sl, r4
 8006384:	e7d2      	b.n	800632c <_svfiprintf_r+0x9c>
 8006386:	9b03      	ldr	r3, [sp, #12]
 8006388:	1d19      	adds	r1, r3, #4
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	9103      	str	r1, [sp, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	bfbb      	ittet	lt
 8006392:	425b      	neglt	r3, r3
 8006394:	f042 0202 	orrlt.w	r2, r2, #2
 8006398:	9307      	strge	r3, [sp, #28]
 800639a:	9307      	strlt	r3, [sp, #28]
 800639c:	bfb8      	it	lt
 800639e:	9204      	strlt	r2, [sp, #16]
 80063a0:	7823      	ldrb	r3, [r4, #0]
 80063a2:	2b2e      	cmp	r3, #46	; 0x2e
 80063a4:	d10c      	bne.n	80063c0 <_svfiprintf_r+0x130>
 80063a6:	7863      	ldrb	r3, [r4, #1]
 80063a8:	2b2a      	cmp	r3, #42	; 0x2a
 80063aa:	d135      	bne.n	8006418 <_svfiprintf_r+0x188>
 80063ac:	9b03      	ldr	r3, [sp, #12]
 80063ae:	1d1a      	adds	r2, r3, #4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	9203      	str	r2, [sp, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bfb8      	it	lt
 80063b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80063bc:	3402      	adds	r4, #2
 80063be:	9305      	str	r3, [sp, #20]
 80063c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800648c <_svfiprintf_r+0x1fc>
 80063c4:	7821      	ldrb	r1, [r4, #0]
 80063c6:	2203      	movs	r2, #3
 80063c8:	4650      	mov	r0, sl
 80063ca:	f7f9 ff09 	bl	80001e0 <memchr>
 80063ce:	b140      	cbz	r0, 80063e2 <_svfiprintf_r+0x152>
 80063d0:	2340      	movs	r3, #64	; 0x40
 80063d2:	eba0 000a 	sub.w	r0, r0, sl
 80063d6:	fa03 f000 	lsl.w	r0, r3, r0
 80063da:	9b04      	ldr	r3, [sp, #16]
 80063dc:	4303      	orrs	r3, r0
 80063de:	3401      	adds	r4, #1
 80063e0:	9304      	str	r3, [sp, #16]
 80063e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e6:	4826      	ldr	r0, [pc, #152]	; (8006480 <_svfiprintf_r+0x1f0>)
 80063e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063ec:	2206      	movs	r2, #6
 80063ee:	f7f9 fef7 	bl	80001e0 <memchr>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d038      	beq.n	8006468 <_svfiprintf_r+0x1d8>
 80063f6:	4b23      	ldr	r3, [pc, #140]	; (8006484 <_svfiprintf_r+0x1f4>)
 80063f8:	bb1b      	cbnz	r3, 8006442 <_svfiprintf_r+0x1b2>
 80063fa:	9b03      	ldr	r3, [sp, #12]
 80063fc:	3307      	adds	r3, #7
 80063fe:	f023 0307 	bic.w	r3, r3, #7
 8006402:	3308      	adds	r3, #8
 8006404:	9303      	str	r3, [sp, #12]
 8006406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006408:	4433      	add	r3, r6
 800640a:	9309      	str	r3, [sp, #36]	; 0x24
 800640c:	e767      	b.n	80062de <_svfiprintf_r+0x4e>
 800640e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006412:	460c      	mov	r4, r1
 8006414:	2001      	movs	r0, #1
 8006416:	e7a5      	b.n	8006364 <_svfiprintf_r+0xd4>
 8006418:	2300      	movs	r3, #0
 800641a:	3401      	adds	r4, #1
 800641c:	9305      	str	r3, [sp, #20]
 800641e:	4619      	mov	r1, r3
 8006420:	f04f 0c0a 	mov.w	ip, #10
 8006424:	4620      	mov	r0, r4
 8006426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800642a:	3a30      	subs	r2, #48	; 0x30
 800642c:	2a09      	cmp	r2, #9
 800642e:	d903      	bls.n	8006438 <_svfiprintf_r+0x1a8>
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0c5      	beq.n	80063c0 <_svfiprintf_r+0x130>
 8006434:	9105      	str	r1, [sp, #20]
 8006436:	e7c3      	b.n	80063c0 <_svfiprintf_r+0x130>
 8006438:	fb0c 2101 	mla	r1, ip, r1, r2
 800643c:	4604      	mov	r4, r0
 800643e:	2301      	movs	r3, #1
 8006440:	e7f0      	b.n	8006424 <_svfiprintf_r+0x194>
 8006442:	ab03      	add	r3, sp, #12
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	462a      	mov	r2, r5
 8006448:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <_svfiprintf_r+0x1f8>)
 800644a:	a904      	add	r1, sp, #16
 800644c:	4638      	mov	r0, r7
 800644e:	f3af 8000 	nop.w
 8006452:	1c42      	adds	r2, r0, #1
 8006454:	4606      	mov	r6, r0
 8006456:	d1d6      	bne.n	8006406 <_svfiprintf_r+0x176>
 8006458:	89ab      	ldrh	r3, [r5, #12]
 800645a:	065b      	lsls	r3, r3, #25
 800645c:	f53f af2c 	bmi.w	80062b8 <_svfiprintf_r+0x28>
 8006460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006462:	b01d      	add	sp, #116	; 0x74
 8006464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006468:	ab03      	add	r3, sp, #12
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	462a      	mov	r2, r5
 800646e:	4b06      	ldr	r3, [pc, #24]	; (8006488 <_svfiprintf_r+0x1f8>)
 8006470:	a904      	add	r1, sp, #16
 8006472:	4638      	mov	r0, r7
 8006474:	f000 f87a 	bl	800656c <_printf_i>
 8006478:	e7eb      	b.n	8006452 <_svfiprintf_r+0x1c2>
 800647a:	bf00      	nop
 800647c:	08006bdd 	.word	0x08006bdd
 8006480:	08006be7 	.word	0x08006be7
 8006484:	00000000 	.word	0x00000000
 8006488:	080061d9 	.word	0x080061d9
 800648c:	08006be3 	.word	0x08006be3

08006490 <_printf_common>:
 8006490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	4616      	mov	r6, r2
 8006496:	4699      	mov	r9, r3
 8006498:	688a      	ldr	r2, [r1, #8]
 800649a:	690b      	ldr	r3, [r1, #16]
 800649c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064a0:	4293      	cmp	r3, r2
 80064a2:	bfb8      	it	lt
 80064a4:	4613      	movlt	r3, r2
 80064a6:	6033      	str	r3, [r6, #0]
 80064a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064ac:	4607      	mov	r7, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	b10a      	cbz	r2, 80064b6 <_printf_common+0x26>
 80064b2:	3301      	adds	r3, #1
 80064b4:	6033      	str	r3, [r6, #0]
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	0699      	lsls	r1, r3, #26
 80064ba:	bf42      	ittt	mi
 80064bc:	6833      	ldrmi	r3, [r6, #0]
 80064be:	3302      	addmi	r3, #2
 80064c0:	6033      	strmi	r3, [r6, #0]
 80064c2:	6825      	ldr	r5, [r4, #0]
 80064c4:	f015 0506 	ands.w	r5, r5, #6
 80064c8:	d106      	bne.n	80064d8 <_printf_common+0x48>
 80064ca:	f104 0a19 	add.w	sl, r4, #25
 80064ce:	68e3      	ldr	r3, [r4, #12]
 80064d0:	6832      	ldr	r2, [r6, #0]
 80064d2:	1a9b      	subs	r3, r3, r2
 80064d4:	42ab      	cmp	r3, r5
 80064d6:	dc26      	bgt.n	8006526 <_printf_common+0x96>
 80064d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064dc:	1e13      	subs	r3, r2, #0
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	bf18      	it	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	0692      	lsls	r2, r2, #26
 80064e6:	d42b      	bmi.n	8006540 <_printf_common+0xb0>
 80064e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064ec:	4649      	mov	r1, r9
 80064ee:	4638      	mov	r0, r7
 80064f0:	47c0      	blx	r8
 80064f2:	3001      	adds	r0, #1
 80064f4:	d01e      	beq.n	8006534 <_printf_common+0xa4>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	68e5      	ldr	r5, [r4, #12]
 80064fa:	6832      	ldr	r2, [r6, #0]
 80064fc:	f003 0306 	and.w	r3, r3, #6
 8006500:	2b04      	cmp	r3, #4
 8006502:	bf08      	it	eq
 8006504:	1aad      	subeq	r5, r5, r2
 8006506:	68a3      	ldr	r3, [r4, #8]
 8006508:	6922      	ldr	r2, [r4, #16]
 800650a:	bf0c      	ite	eq
 800650c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006510:	2500      	movne	r5, #0
 8006512:	4293      	cmp	r3, r2
 8006514:	bfc4      	itt	gt
 8006516:	1a9b      	subgt	r3, r3, r2
 8006518:	18ed      	addgt	r5, r5, r3
 800651a:	2600      	movs	r6, #0
 800651c:	341a      	adds	r4, #26
 800651e:	42b5      	cmp	r5, r6
 8006520:	d11a      	bne.n	8006558 <_printf_common+0xc8>
 8006522:	2000      	movs	r0, #0
 8006524:	e008      	b.n	8006538 <_printf_common+0xa8>
 8006526:	2301      	movs	r3, #1
 8006528:	4652      	mov	r2, sl
 800652a:	4649      	mov	r1, r9
 800652c:	4638      	mov	r0, r7
 800652e:	47c0      	blx	r8
 8006530:	3001      	adds	r0, #1
 8006532:	d103      	bne.n	800653c <_printf_common+0xac>
 8006534:	f04f 30ff 	mov.w	r0, #4294967295
 8006538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653c:	3501      	adds	r5, #1
 800653e:	e7c6      	b.n	80064ce <_printf_common+0x3e>
 8006540:	18e1      	adds	r1, r4, r3
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	2030      	movs	r0, #48	; 0x30
 8006546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800654a:	4422      	add	r2, r4
 800654c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006554:	3302      	adds	r3, #2
 8006556:	e7c7      	b.n	80064e8 <_printf_common+0x58>
 8006558:	2301      	movs	r3, #1
 800655a:	4622      	mov	r2, r4
 800655c:	4649      	mov	r1, r9
 800655e:	4638      	mov	r0, r7
 8006560:	47c0      	blx	r8
 8006562:	3001      	adds	r0, #1
 8006564:	d0e6      	beq.n	8006534 <_printf_common+0xa4>
 8006566:	3601      	adds	r6, #1
 8006568:	e7d9      	b.n	800651e <_printf_common+0x8e>
	...

0800656c <_printf_i>:
 800656c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006570:	460c      	mov	r4, r1
 8006572:	4691      	mov	r9, r2
 8006574:	7e27      	ldrb	r7, [r4, #24]
 8006576:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006578:	2f78      	cmp	r7, #120	; 0x78
 800657a:	4680      	mov	r8, r0
 800657c:	469a      	mov	sl, r3
 800657e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006582:	d807      	bhi.n	8006594 <_printf_i+0x28>
 8006584:	2f62      	cmp	r7, #98	; 0x62
 8006586:	d80a      	bhi.n	800659e <_printf_i+0x32>
 8006588:	2f00      	cmp	r7, #0
 800658a:	f000 80d8 	beq.w	800673e <_printf_i+0x1d2>
 800658e:	2f58      	cmp	r7, #88	; 0x58
 8006590:	f000 80a3 	beq.w	80066da <_printf_i+0x16e>
 8006594:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800659c:	e03a      	b.n	8006614 <_printf_i+0xa8>
 800659e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065a2:	2b15      	cmp	r3, #21
 80065a4:	d8f6      	bhi.n	8006594 <_printf_i+0x28>
 80065a6:	a001      	add	r0, pc, #4	; (adr r0, 80065ac <_printf_i+0x40>)
 80065a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80065ac:	08006605 	.word	0x08006605
 80065b0:	08006619 	.word	0x08006619
 80065b4:	08006595 	.word	0x08006595
 80065b8:	08006595 	.word	0x08006595
 80065bc:	08006595 	.word	0x08006595
 80065c0:	08006595 	.word	0x08006595
 80065c4:	08006619 	.word	0x08006619
 80065c8:	08006595 	.word	0x08006595
 80065cc:	08006595 	.word	0x08006595
 80065d0:	08006595 	.word	0x08006595
 80065d4:	08006595 	.word	0x08006595
 80065d8:	08006725 	.word	0x08006725
 80065dc:	08006649 	.word	0x08006649
 80065e0:	08006707 	.word	0x08006707
 80065e4:	08006595 	.word	0x08006595
 80065e8:	08006595 	.word	0x08006595
 80065ec:	08006747 	.word	0x08006747
 80065f0:	08006595 	.word	0x08006595
 80065f4:	08006649 	.word	0x08006649
 80065f8:	08006595 	.word	0x08006595
 80065fc:	08006595 	.word	0x08006595
 8006600:	0800670f 	.word	0x0800670f
 8006604:	680b      	ldr	r3, [r1, #0]
 8006606:	1d1a      	adds	r2, r3, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	600a      	str	r2, [r1, #0]
 800660c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006614:	2301      	movs	r3, #1
 8006616:	e0a3      	b.n	8006760 <_printf_i+0x1f4>
 8006618:	6825      	ldr	r5, [r4, #0]
 800661a:	6808      	ldr	r0, [r1, #0]
 800661c:	062e      	lsls	r6, r5, #24
 800661e:	f100 0304 	add.w	r3, r0, #4
 8006622:	d50a      	bpl.n	800663a <_printf_i+0xce>
 8006624:	6805      	ldr	r5, [r0, #0]
 8006626:	600b      	str	r3, [r1, #0]
 8006628:	2d00      	cmp	r5, #0
 800662a:	da03      	bge.n	8006634 <_printf_i+0xc8>
 800662c:	232d      	movs	r3, #45	; 0x2d
 800662e:	426d      	negs	r5, r5
 8006630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006634:	485e      	ldr	r0, [pc, #376]	; (80067b0 <_printf_i+0x244>)
 8006636:	230a      	movs	r3, #10
 8006638:	e019      	b.n	800666e <_printf_i+0x102>
 800663a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800663e:	6805      	ldr	r5, [r0, #0]
 8006640:	600b      	str	r3, [r1, #0]
 8006642:	bf18      	it	ne
 8006644:	b22d      	sxthne	r5, r5
 8006646:	e7ef      	b.n	8006628 <_printf_i+0xbc>
 8006648:	680b      	ldr	r3, [r1, #0]
 800664a:	6825      	ldr	r5, [r4, #0]
 800664c:	1d18      	adds	r0, r3, #4
 800664e:	6008      	str	r0, [r1, #0]
 8006650:	0628      	lsls	r0, r5, #24
 8006652:	d501      	bpl.n	8006658 <_printf_i+0xec>
 8006654:	681d      	ldr	r5, [r3, #0]
 8006656:	e002      	b.n	800665e <_printf_i+0xf2>
 8006658:	0669      	lsls	r1, r5, #25
 800665a:	d5fb      	bpl.n	8006654 <_printf_i+0xe8>
 800665c:	881d      	ldrh	r5, [r3, #0]
 800665e:	4854      	ldr	r0, [pc, #336]	; (80067b0 <_printf_i+0x244>)
 8006660:	2f6f      	cmp	r7, #111	; 0x6f
 8006662:	bf0c      	ite	eq
 8006664:	2308      	moveq	r3, #8
 8006666:	230a      	movne	r3, #10
 8006668:	2100      	movs	r1, #0
 800666a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800666e:	6866      	ldr	r6, [r4, #4]
 8006670:	60a6      	str	r6, [r4, #8]
 8006672:	2e00      	cmp	r6, #0
 8006674:	bfa2      	ittt	ge
 8006676:	6821      	ldrge	r1, [r4, #0]
 8006678:	f021 0104 	bicge.w	r1, r1, #4
 800667c:	6021      	strge	r1, [r4, #0]
 800667e:	b90d      	cbnz	r5, 8006684 <_printf_i+0x118>
 8006680:	2e00      	cmp	r6, #0
 8006682:	d04d      	beq.n	8006720 <_printf_i+0x1b4>
 8006684:	4616      	mov	r6, r2
 8006686:	fbb5 f1f3 	udiv	r1, r5, r3
 800668a:	fb03 5711 	mls	r7, r3, r1, r5
 800668e:	5dc7      	ldrb	r7, [r0, r7]
 8006690:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006694:	462f      	mov	r7, r5
 8006696:	42bb      	cmp	r3, r7
 8006698:	460d      	mov	r5, r1
 800669a:	d9f4      	bls.n	8006686 <_printf_i+0x11a>
 800669c:	2b08      	cmp	r3, #8
 800669e:	d10b      	bne.n	80066b8 <_printf_i+0x14c>
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	07df      	lsls	r7, r3, #31
 80066a4:	d508      	bpl.n	80066b8 <_printf_i+0x14c>
 80066a6:	6923      	ldr	r3, [r4, #16]
 80066a8:	6861      	ldr	r1, [r4, #4]
 80066aa:	4299      	cmp	r1, r3
 80066ac:	bfde      	ittt	le
 80066ae:	2330      	movle	r3, #48	; 0x30
 80066b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066b8:	1b92      	subs	r2, r2, r6
 80066ba:	6122      	str	r2, [r4, #16]
 80066bc:	f8cd a000 	str.w	sl, [sp]
 80066c0:	464b      	mov	r3, r9
 80066c2:	aa03      	add	r2, sp, #12
 80066c4:	4621      	mov	r1, r4
 80066c6:	4640      	mov	r0, r8
 80066c8:	f7ff fee2 	bl	8006490 <_printf_common>
 80066cc:	3001      	adds	r0, #1
 80066ce:	d14c      	bne.n	800676a <_printf_i+0x1fe>
 80066d0:	f04f 30ff 	mov.w	r0, #4294967295
 80066d4:	b004      	add	sp, #16
 80066d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066da:	4835      	ldr	r0, [pc, #212]	; (80067b0 <_printf_i+0x244>)
 80066dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	680e      	ldr	r6, [r1, #0]
 80066e4:	061f      	lsls	r7, r3, #24
 80066e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80066ea:	600e      	str	r6, [r1, #0]
 80066ec:	d514      	bpl.n	8006718 <_printf_i+0x1ac>
 80066ee:	07d9      	lsls	r1, r3, #31
 80066f0:	bf44      	itt	mi
 80066f2:	f043 0320 	orrmi.w	r3, r3, #32
 80066f6:	6023      	strmi	r3, [r4, #0]
 80066f8:	b91d      	cbnz	r5, 8006702 <_printf_i+0x196>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	f023 0320 	bic.w	r3, r3, #32
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	2310      	movs	r3, #16
 8006704:	e7b0      	b.n	8006668 <_printf_i+0xfc>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	f043 0320 	orr.w	r3, r3, #32
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	2378      	movs	r3, #120	; 0x78
 8006710:	4828      	ldr	r0, [pc, #160]	; (80067b4 <_printf_i+0x248>)
 8006712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006716:	e7e3      	b.n	80066e0 <_printf_i+0x174>
 8006718:	065e      	lsls	r6, r3, #25
 800671a:	bf48      	it	mi
 800671c:	b2ad      	uxthmi	r5, r5
 800671e:	e7e6      	b.n	80066ee <_printf_i+0x182>
 8006720:	4616      	mov	r6, r2
 8006722:	e7bb      	b.n	800669c <_printf_i+0x130>
 8006724:	680b      	ldr	r3, [r1, #0]
 8006726:	6826      	ldr	r6, [r4, #0]
 8006728:	6960      	ldr	r0, [r4, #20]
 800672a:	1d1d      	adds	r5, r3, #4
 800672c:	600d      	str	r5, [r1, #0]
 800672e:	0635      	lsls	r5, r6, #24
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	d501      	bpl.n	8006738 <_printf_i+0x1cc>
 8006734:	6018      	str	r0, [r3, #0]
 8006736:	e002      	b.n	800673e <_printf_i+0x1d2>
 8006738:	0671      	lsls	r1, r6, #25
 800673a:	d5fb      	bpl.n	8006734 <_printf_i+0x1c8>
 800673c:	8018      	strh	r0, [r3, #0]
 800673e:	2300      	movs	r3, #0
 8006740:	6123      	str	r3, [r4, #16]
 8006742:	4616      	mov	r6, r2
 8006744:	e7ba      	b.n	80066bc <_printf_i+0x150>
 8006746:	680b      	ldr	r3, [r1, #0]
 8006748:	1d1a      	adds	r2, r3, #4
 800674a:	600a      	str	r2, [r1, #0]
 800674c:	681e      	ldr	r6, [r3, #0]
 800674e:	6862      	ldr	r2, [r4, #4]
 8006750:	2100      	movs	r1, #0
 8006752:	4630      	mov	r0, r6
 8006754:	f7f9 fd44 	bl	80001e0 <memchr>
 8006758:	b108      	cbz	r0, 800675e <_printf_i+0x1f2>
 800675a:	1b80      	subs	r0, r0, r6
 800675c:	6060      	str	r0, [r4, #4]
 800675e:	6863      	ldr	r3, [r4, #4]
 8006760:	6123      	str	r3, [r4, #16]
 8006762:	2300      	movs	r3, #0
 8006764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006768:	e7a8      	b.n	80066bc <_printf_i+0x150>
 800676a:	6923      	ldr	r3, [r4, #16]
 800676c:	4632      	mov	r2, r6
 800676e:	4649      	mov	r1, r9
 8006770:	4640      	mov	r0, r8
 8006772:	47d0      	blx	sl
 8006774:	3001      	adds	r0, #1
 8006776:	d0ab      	beq.n	80066d0 <_printf_i+0x164>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	079b      	lsls	r3, r3, #30
 800677c:	d413      	bmi.n	80067a6 <_printf_i+0x23a>
 800677e:	68e0      	ldr	r0, [r4, #12]
 8006780:	9b03      	ldr	r3, [sp, #12]
 8006782:	4298      	cmp	r0, r3
 8006784:	bfb8      	it	lt
 8006786:	4618      	movlt	r0, r3
 8006788:	e7a4      	b.n	80066d4 <_printf_i+0x168>
 800678a:	2301      	movs	r3, #1
 800678c:	4632      	mov	r2, r6
 800678e:	4649      	mov	r1, r9
 8006790:	4640      	mov	r0, r8
 8006792:	47d0      	blx	sl
 8006794:	3001      	adds	r0, #1
 8006796:	d09b      	beq.n	80066d0 <_printf_i+0x164>
 8006798:	3501      	adds	r5, #1
 800679a:	68e3      	ldr	r3, [r4, #12]
 800679c:	9903      	ldr	r1, [sp, #12]
 800679e:	1a5b      	subs	r3, r3, r1
 80067a0:	42ab      	cmp	r3, r5
 80067a2:	dcf2      	bgt.n	800678a <_printf_i+0x21e>
 80067a4:	e7eb      	b.n	800677e <_printf_i+0x212>
 80067a6:	2500      	movs	r5, #0
 80067a8:	f104 0619 	add.w	r6, r4, #25
 80067ac:	e7f5      	b.n	800679a <_printf_i+0x22e>
 80067ae:	bf00      	nop
 80067b0:	08006bee 	.word	0x08006bee
 80067b4:	08006bff 	.word	0x08006bff

080067b8 <memcpy>:
 80067b8:	440a      	add	r2, r1
 80067ba:	4291      	cmp	r1, r2
 80067bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80067c0:	d100      	bne.n	80067c4 <memcpy+0xc>
 80067c2:	4770      	bx	lr
 80067c4:	b510      	push	{r4, lr}
 80067c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ce:	4291      	cmp	r1, r2
 80067d0:	d1f9      	bne.n	80067c6 <memcpy+0xe>
 80067d2:	bd10      	pop	{r4, pc}

080067d4 <memmove>:
 80067d4:	4288      	cmp	r0, r1
 80067d6:	b510      	push	{r4, lr}
 80067d8:	eb01 0402 	add.w	r4, r1, r2
 80067dc:	d902      	bls.n	80067e4 <memmove+0x10>
 80067de:	4284      	cmp	r4, r0
 80067e0:	4623      	mov	r3, r4
 80067e2:	d807      	bhi.n	80067f4 <memmove+0x20>
 80067e4:	1e43      	subs	r3, r0, #1
 80067e6:	42a1      	cmp	r1, r4
 80067e8:	d008      	beq.n	80067fc <memmove+0x28>
 80067ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067f2:	e7f8      	b.n	80067e6 <memmove+0x12>
 80067f4:	4402      	add	r2, r0
 80067f6:	4601      	mov	r1, r0
 80067f8:	428a      	cmp	r2, r1
 80067fa:	d100      	bne.n	80067fe <memmove+0x2a>
 80067fc:	bd10      	pop	{r4, pc}
 80067fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006806:	e7f7      	b.n	80067f8 <memmove+0x24>

08006808 <_free_r>:
 8006808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800680a:	2900      	cmp	r1, #0
 800680c:	d048      	beq.n	80068a0 <_free_r+0x98>
 800680e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006812:	9001      	str	r0, [sp, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f1a1 0404 	sub.w	r4, r1, #4
 800681a:	bfb8      	it	lt
 800681c:	18e4      	addlt	r4, r4, r3
 800681e:	f000 f8d3 	bl	80069c8 <__malloc_lock>
 8006822:	4a20      	ldr	r2, [pc, #128]	; (80068a4 <_free_r+0x9c>)
 8006824:	9801      	ldr	r0, [sp, #4]
 8006826:	6813      	ldr	r3, [r2, #0]
 8006828:	4615      	mov	r5, r2
 800682a:	b933      	cbnz	r3, 800683a <_free_r+0x32>
 800682c:	6063      	str	r3, [r4, #4]
 800682e:	6014      	str	r4, [r2, #0]
 8006830:	b003      	add	sp, #12
 8006832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006836:	f000 b8cd 	b.w	80069d4 <__malloc_unlock>
 800683a:	42a3      	cmp	r3, r4
 800683c:	d90b      	bls.n	8006856 <_free_r+0x4e>
 800683e:	6821      	ldr	r1, [r4, #0]
 8006840:	1862      	adds	r2, r4, r1
 8006842:	4293      	cmp	r3, r2
 8006844:	bf04      	itt	eq
 8006846:	681a      	ldreq	r2, [r3, #0]
 8006848:	685b      	ldreq	r3, [r3, #4]
 800684a:	6063      	str	r3, [r4, #4]
 800684c:	bf04      	itt	eq
 800684e:	1852      	addeq	r2, r2, r1
 8006850:	6022      	streq	r2, [r4, #0]
 8006852:	602c      	str	r4, [r5, #0]
 8006854:	e7ec      	b.n	8006830 <_free_r+0x28>
 8006856:	461a      	mov	r2, r3
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	b10b      	cbz	r3, 8006860 <_free_r+0x58>
 800685c:	42a3      	cmp	r3, r4
 800685e:	d9fa      	bls.n	8006856 <_free_r+0x4e>
 8006860:	6811      	ldr	r1, [r2, #0]
 8006862:	1855      	adds	r5, r2, r1
 8006864:	42a5      	cmp	r5, r4
 8006866:	d10b      	bne.n	8006880 <_free_r+0x78>
 8006868:	6824      	ldr	r4, [r4, #0]
 800686a:	4421      	add	r1, r4
 800686c:	1854      	adds	r4, r2, r1
 800686e:	42a3      	cmp	r3, r4
 8006870:	6011      	str	r1, [r2, #0]
 8006872:	d1dd      	bne.n	8006830 <_free_r+0x28>
 8006874:	681c      	ldr	r4, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	6053      	str	r3, [r2, #4]
 800687a:	4421      	add	r1, r4
 800687c:	6011      	str	r1, [r2, #0]
 800687e:	e7d7      	b.n	8006830 <_free_r+0x28>
 8006880:	d902      	bls.n	8006888 <_free_r+0x80>
 8006882:	230c      	movs	r3, #12
 8006884:	6003      	str	r3, [r0, #0]
 8006886:	e7d3      	b.n	8006830 <_free_r+0x28>
 8006888:	6825      	ldr	r5, [r4, #0]
 800688a:	1961      	adds	r1, r4, r5
 800688c:	428b      	cmp	r3, r1
 800688e:	bf04      	itt	eq
 8006890:	6819      	ldreq	r1, [r3, #0]
 8006892:	685b      	ldreq	r3, [r3, #4]
 8006894:	6063      	str	r3, [r4, #4]
 8006896:	bf04      	itt	eq
 8006898:	1949      	addeq	r1, r1, r5
 800689a:	6021      	streq	r1, [r4, #0]
 800689c:	6054      	str	r4, [r2, #4]
 800689e:	e7c7      	b.n	8006830 <_free_r+0x28>
 80068a0:	b003      	add	sp, #12
 80068a2:	bd30      	pop	{r4, r5, pc}
 80068a4:	200000f8 	.word	0x200000f8

080068a8 <_malloc_r>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	1ccd      	adds	r5, r1, #3
 80068ac:	f025 0503 	bic.w	r5, r5, #3
 80068b0:	3508      	adds	r5, #8
 80068b2:	2d0c      	cmp	r5, #12
 80068b4:	bf38      	it	cc
 80068b6:	250c      	movcc	r5, #12
 80068b8:	2d00      	cmp	r5, #0
 80068ba:	4606      	mov	r6, r0
 80068bc:	db01      	blt.n	80068c2 <_malloc_r+0x1a>
 80068be:	42a9      	cmp	r1, r5
 80068c0:	d903      	bls.n	80068ca <_malloc_r+0x22>
 80068c2:	230c      	movs	r3, #12
 80068c4:	6033      	str	r3, [r6, #0]
 80068c6:	2000      	movs	r0, #0
 80068c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ca:	f000 f87d 	bl	80069c8 <__malloc_lock>
 80068ce:	4921      	ldr	r1, [pc, #132]	; (8006954 <_malloc_r+0xac>)
 80068d0:	680a      	ldr	r2, [r1, #0]
 80068d2:	4614      	mov	r4, r2
 80068d4:	b99c      	cbnz	r4, 80068fe <_malloc_r+0x56>
 80068d6:	4f20      	ldr	r7, [pc, #128]	; (8006958 <_malloc_r+0xb0>)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	b923      	cbnz	r3, 80068e6 <_malloc_r+0x3e>
 80068dc:	4621      	mov	r1, r4
 80068de:	4630      	mov	r0, r6
 80068e0:	f000 f862 	bl	80069a8 <_sbrk_r>
 80068e4:	6038      	str	r0, [r7, #0]
 80068e6:	4629      	mov	r1, r5
 80068e8:	4630      	mov	r0, r6
 80068ea:	f000 f85d 	bl	80069a8 <_sbrk_r>
 80068ee:	1c43      	adds	r3, r0, #1
 80068f0:	d123      	bne.n	800693a <_malloc_r+0x92>
 80068f2:	230c      	movs	r3, #12
 80068f4:	6033      	str	r3, [r6, #0]
 80068f6:	4630      	mov	r0, r6
 80068f8:	f000 f86c 	bl	80069d4 <__malloc_unlock>
 80068fc:	e7e3      	b.n	80068c6 <_malloc_r+0x1e>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	1b5b      	subs	r3, r3, r5
 8006902:	d417      	bmi.n	8006934 <_malloc_r+0x8c>
 8006904:	2b0b      	cmp	r3, #11
 8006906:	d903      	bls.n	8006910 <_malloc_r+0x68>
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	441c      	add	r4, r3
 800690c:	6025      	str	r5, [r4, #0]
 800690e:	e004      	b.n	800691a <_malloc_r+0x72>
 8006910:	6863      	ldr	r3, [r4, #4]
 8006912:	42a2      	cmp	r2, r4
 8006914:	bf0c      	ite	eq
 8006916:	600b      	streq	r3, [r1, #0]
 8006918:	6053      	strne	r3, [r2, #4]
 800691a:	4630      	mov	r0, r6
 800691c:	f000 f85a 	bl	80069d4 <__malloc_unlock>
 8006920:	f104 000b 	add.w	r0, r4, #11
 8006924:	1d23      	adds	r3, r4, #4
 8006926:	f020 0007 	bic.w	r0, r0, #7
 800692a:	1ac2      	subs	r2, r0, r3
 800692c:	d0cc      	beq.n	80068c8 <_malloc_r+0x20>
 800692e:	1a1b      	subs	r3, r3, r0
 8006930:	50a3      	str	r3, [r4, r2]
 8006932:	e7c9      	b.n	80068c8 <_malloc_r+0x20>
 8006934:	4622      	mov	r2, r4
 8006936:	6864      	ldr	r4, [r4, #4]
 8006938:	e7cc      	b.n	80068d4 <_malloc_r+0x2c>
 800693a:	1cc4      	adds	r4, r0, #3
 800693c:	f024 0403 	bic.w	r4, r4, #3
 8006940:	42a0      	cmp	r0, r4
 8006942:	d0e3      	beq.n	800690c <_malloc_r+0x64>
 8006944:	1a21      	subs	r1, r4, r0
 8006946:	4630      	mov	r0, r6
 8006948:	f000 f82e 	bl	80069a8 <_sbrk_r>
 800694c:	3001      	adds	r0, #1
 800694e:	d1dd      	bne.n	800690c <_malloc_r+0x64>
 8006950:	e7cf      	b.n	80068f2 <_malloc_r+0x4a>
 8006952:	bf00      	nop
 8006954:	200000f8 	.word	0x200000f8
 8006958:	200000fc 	.word	0x200000fc

0800695c <_realloc_r>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	4607      	mov	r7, r0
 8006960:	4614      	mov	r4, r2
 8006962:	460e      	mov	r6, r1
 8006964:	b921      	cbnz	r1, 8006970 <_realloc_r+0x14>
 8006966:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800696a:	4611      	mov	r1, r2
 800696c:	f7ff bf9c 	b.w	80068a8 <_malloc_r>
 8006970:	b922      	cbnz	r2, 800697c <_realloc_r+0x20>
 8006972:	f7ff ff49 	bl	8006808 <_free_r>
 8006976:	4625      	mov	r5, r4
 8006978:	4628      	mov	r0, r5
 800697a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800697c:	f000 f830 	bl	80069e0 <_malloc_usable_size_r>
 8006980:	42a0      	cmp	r0, r4
 8006982:	d20f      	bcs.n	80069a4 <_realloc_r+0x48>
 8006984:	4621      	mov	r1, r4
 8006986:	4638      	mov	r0, r7
 8006988:	f7ff ff8e 	bl	80068a8 <_malloc_r>
 800698c:	4605      	mov	r5, r0
 800698e:	2800      	cmp	r0, #0
 8006990:	d0f2      	beq.n	8006978 <_realloc_r+0x1c>
 8006992:	4631      	mov	r1, r6
 8006994:	4622      	mov	r2, r4
 8006996:	f7ff ff0f 	bl	80067b8 <memcpy>
 800699a:	4631      	mov	r1, r6
 800699c:	4638      	mov	r0, r7
 800699e:	f7ff ff33 	bl	8006808 <_free_r>
 80069a2:	e7e9      	b.n	8006978 <_realloc_r+0x1c>
 80069a4:	4635      	mov	r5, r6
 80069a6:	e7e7      	b.n	8006978 <_realloc_r+0x1c>

080069a8 <_sbrk_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4d06      	ldr	r5, [pc, #24]	; (80069c4 <_sbrk_r+0x1c>)
 80069ac:	2300      	movs	r3, #0
 80069ae:	4604      	mov	r4, r0
 80069b0:	4608      	mov	r0, r1
 80069b2:	602b      	str	r3, [r5, #0]
 80069b4:	f7fb fd52 	bl	800245c <_sbrk>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_sbrk_r+0x1a>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_sbrk_r+0x1a>
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	20000318 	.word	0x20000318

080069c8 <__malloc_lock>:
 80069c8:	4801      	ldr	r0, [pc, #4]	; (80069d0 <__malloc_lock+0x8>)
 80069ca:	f000 b811 	b.w	80069f0 <__retarget_lock_acquire_recursive>
 80069ce:	bf00      	nop
 80069d0:	20000320 	.word	0x20000320

080069d4 <__malloc_unlock>:
 80069d4:	4801      	ldr	r0, [pc, #4]	; (80069dc <__malloc_unlock+0x8>)
 80069d6:	f000 b80c 	b.w	80069f2 <__retarget_lock_release_recursive>
 80069da:	bf00      	nop
 80069dc:	20000320 	.word	0x20000320

080069e0 <_malloc_usable_size_r>:
 80069e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069e4:	1f18      	subs	r0, r3, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bfbc      	itt	lt
 80069ea:	580b      	ldrlt	r3, [r1, r0]
 80069ec:	18c0      	addlt	r0, r0, r3
 80069ee:	4770      	bx	lr

080069f0 <__retarget_lock_acquire_recursive>:
 80069f0:	4770      	bx	lr

080069f2 <__retarget_lock_release_recursive>:
 80069f2:	4770      	bx	lr

080069f4 <_init>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	bf00      	nop
 80069f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fa:	bc08      	pop	{r3}
 80069fc:	469e      	mov	lr, r3
 80069fe:	4770      	bx	lr

08006a00 <_fini>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	bf00      	nop
 8006a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a06:	bc08      	pop	{r3}
 8006a08:	469e      	mov	lr, r3
 8006a0a:	4770      	bx	lr
